(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function(configuration) {
    'use strict';
    var cuid = require('cuid');
    var objectAssign = require('object-assign');
    var hc;

    if (typeof window !== 'undefined') {
        hc = window.htmlContainer
    }

    function getDefaultConfiguration() {
        var uid = cuid();
        return {
            appConfigFacadeConfig: hc ? hc.appConfigFacade.config : { identity: {} },
            application: getApplicationName(uid),
            metrics: getMetricsDefaults(uid),
            agm: { presenceInterval: 3000 },
            gateway: getGatewayDefaults()
        };
    }

    function getMetricsDefaults(uid) {
        var documentTitle = typeof document !== 'undefined' ? document.title : 'nknown';
        // check for empty titles
        documentTitle = documentTitle || 'none';
        return {
            system: hc ? 'HtmlContainer.' + hc.containerName : 'Browser',
            service: hc ? 'JS.' + hc.browserWindowName : documentTitle,
            instance: hc ? '~' + hc.machineName : '~' + uid
        }
    }

    function getGatewayDefaults() {
        var gatewayURL = 'localhost:22037';
        var isSSL = isSecureConnection();

        return {
            ws: isSSL ? 'wss://' + gatewayURL : 'ws://' + gatewayURL,
            http: isSSL ? 'https:' + gatewayURL : 'http://' + gatewayURL,
            protocolVersion : 1
        }
    }

    function isSecureConnection() {
        if (typeof window !== 'undefined' && window.location) {
            return window.location.protocol !== 'http:';
        }
        // Defaults to secure for node env.
        return true;
    }

    function getApplicationName(uid) {
        if (hc) {
            return hc.containerName + '.' + hc.browserWindowName
        }

        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            return (window.agm_application || document.title) + uid;
        } else {
            return 'NodeJS' + uid;
        }
    }

    function appConfig(settings) {
        var identity = {};

        Object.keys(settings.identity).forEach(function (key) {
            identity[key] = supplant(settings.identity[key])
        });

        return objectAssign({}, settings, { identity: identity })
    }

    function supplant(template, pattern) {
        var p = pattern || /\{([^{}]*)\}/g;
        return template.replace(p, function (match, key) {
            var value = this;
            key.split('.').forEach(function (part) {
                if (value) {
                    value = value[part];
                }
            });
            return typeof value === 'string' || typeof value === 'number' ? value : match;
        });
    }

    var defaults = getDefaultConfiguration();
    var options = objectAssign({}, defaults, configuration);
    options.gateway.ws = options.gateway.ws || defaults.gateway.ws;
    options.gateway.http = options.gateway.ws || defaults.gateway.http;

    var gatewayConnection = {};
    if (hc !== undefined) {
        gatewayConnection = undefined;
    } else if (require('detect-node') || ('WebSocket' in window && window.WebSocket.CLOSING === 2)) {
        gatewayConnection = { ws: options.gateway.ws, protocolVersion: options.gateway.protocolVersion };
    } else {
        gatewayConnection = { http: options.gateway.http, protocolVersion: options.gateway.protocolVersion  };
    }

    if (gatewayConnection) {
        gatewayConnection.application = options.application;
        gatewayConnection.gwTokenProvider = options.gwTokenProvider;
    }

    return {
        connection: gatewayConnection,
        appConfig: appConfig(defaults.appConfigFacadeConfig), // Not configurable currently
        logger: {
            identity: {
                system: options.metrics.system,
                service: options.metrics.service,
                instance: options.metrics.instance
            }
        },
        metrics: {
            identity: {
                system: options.metrics.system,
                service: options.metrics.service,
                instance: options.metrics.instance
            }
        },
        agm: {
            instance: { application: options.application },
            server: {
                hearbeat_interval: defaults.agm.heartbeatInterval, // Not configurable currently
                presence_interval: options.agm.presenceInterval
            }
        }
    }
};

},{"cuid":7,"detect-node":8,"object-assign":12}],2:[function(require,module,exports){
module.exports = function(options) {
    'use strict';

    var metrics = require('tick42-metrics');
    var agm = require('tick42-agm');
    var gatewayConnection = require('tick42-gateway-connection');
    var logger = require('tick42-logger');
    var appconfig = require('tick42-appconfig');
    var windows = require('tick42-windows');
    var appManager = require('tick42-app-manager');
    var activity = require('tick42-activity');
    var contexts = require('tick42-contexts');
    var Promise = require('es6-promise').Promise;
    var pjson = require('../package.json');
    var getConfig = require('./config.js');

    // Init the GLUE namespace
    var hc = typeof window !== 'undefined' && window.htmlContainer;

    return new Promise(function (resolve, reject) {
        // gwProtocolVersion 2 requires auth (TODO - we should change 3 to be the same)
        if (!options.auth && options.gateway.protocolVersion > 1) {
            reject('You need to provide auth information')
        }

        var glueConfig = getConfig(options);
        var _connection = gatewayConnection(glueConfig.connection);

        glueConfig.agm.connection = _connection;
        glueConfig.logger.connection = _connection;
        glueConfig.metrics.connection = _connection;

        if (options.auth) {
            var authRequest;
            if (typeof options.auth === 'string' || options.auth instanceof String || typeof options.auth === 'number' || options.auth instanceof Number) {
                authRequest = { token: options.auth };
            } else if (Object.prototype.toString.call(options.auth) === '[object Object]') {
                authRequest = options.auth;
            } else {
                throw new Error('Invalid auth object - ' + JSON.stringify(authRequest));
            }

            _connection.login(authRequest)
                .then(function (client) {
                    if (client) {
                        glueConfig.agm.instance.machine = client.ipAddress;
                        glueConfig.agm.instance.user = client.username;
                    }

                    _configure(glueConfig)
                        .then(function(glue) {
                            resolve(glue);
                        })['catch'](function(err) {
                            reject(err);
                        })
                })['catch'](function (err) {
                    reject(err);
                });
        } else {
            resolve(_configure(glueConfig));
        }

        function _configure(configuration) {
            return new Promise(function (resolve, reject) {
                var _agm, _windows, _appManager, _appConfig, _activities, _logger, _rootMetrics, _metrics, _info, _feedback, _contexts;

                // Logger
                _logger = logger(configuration.logger);

                // Metrics
                configuration.metrics.logger = _logger.subLogger('metrics');
                _rootMetrics = metrics(configuration.metrics);
                _metrics = _rootMetrics.subSystem('App');
                _logger.metricsLevel('warn', _metrics.parent.subSystem('LogEvents'));

                // AGM
                configuration.agm.metrics = _rootMetrics.subSystem('AGM');
                configuration.agm.logger = _logger.subLogger('agm');
                configuration.agm.logger.consoleLevel('debug');

                agm(configuration.agm)
                    .then(function (agm) {
                        _agm = agm;

                        // Windows
                        _windows = windows(_agm);

                        // AppManager
                        _appManager = appManager(_agm, _windows);

                        if (hc) {
                            // AppConfig
                            if (hc.appConfigFacade && hc.appConfigFacade.config) {
                                _appConfig = appconfig().init(glueConfig.appConfig);
                            }

                            // Activities
                            if (hc.activityFacade) {
                                var activityLogger = _logger.subLogger('activity');
                                activityLogger.publishLevel('debug');
                                activityLogger.consoleLevel('info');
                                activityLogger.metricsLevel('off');

                                _activities = activity({
                                    agm: _agm,
                                    logger: activityLogger
                                });
                            }
                        }

                        _contexts = contexts();

                        _info = {
                            glueVersion: pjson.version,
                            activities: _activities ? _activities.version : 'unknown',
                            metrics: _metrics.repo.version,
                            agm: _agm.version,
                            windows: _windows.version,
                            logger: _logger.version,
                            appManager: _appManager.version,
                            connection: _connection.version,
                            contexts: _contexts.version
                        };

                        _feedback = function () {
                            if (!_agm) {
                                return;
                            }
                            _agm.invoke('T42.ACS.Feedback', {}, 'best');
                        };

                        resolve({
                            activities: _activities,
                            agm: _agm,
                            appConfig: _appConfig,
                            appManager: _appManager,
                            connection: _connection,
                            contexts: _contexts,
                            feedback: _feedback,
                            info: _info,
                            logger: _logger,
                            metrics: _metrics,
                            version: pjson.version,
                            windows: _windows
                        });
                    })['catch'](function (err) {
                        reject(err)
                    });
            });
        }
    })
};

},{"../package.json":111,"./config.js":1,"es6-promise":11,"tick42-activity":18,"tick42-agm":44,"tick42-app-manager":61,"tick42-appconfig":67,"tick42-contexts":75,"tick42-gateway-connection":78,"tick42-logger":87,"tick42-metrics":103,"tick42-windows":106}],3:[function(require,module,exports){
(function (global){
(function() {
    'use strict';

    // Do not do anything if there is no support of ECMAScript 5
    if (typeof [].forEach !== 'function') {
        require('es5-shim');
        require('es5-shim/es5-sham');
    }

    /**
     * Init logic that we follow:
     * v1 supports autoInit
     * v2, v3 does not support auto-init -this means that you should use Glue factory method to init glue
     */
    var createGlue = require('./glue');
    var config = global.glueConfig || {};

    config.gateway = config.gateway || {};
    config.gateway.protocolVersion = config.gateway.protocolVersion || 3;
    var autoInit = config.autoInit || config.gateway.protocolVersion === 1;

    if (autoInit && config.gateway.protocolVersion > 1) {
        throw new Error('glue auto init is only supported for gateway protocol version 1 - switch to 1 or turn off auto init');
    }

    // if in node switch to v2
    if (require('detect-node')) {
        autoInit = false;
        config.gateway.protocolVersion = 2;
    }

    if (autoInit) {
        createGlue(config)
            .then(function (glue) {
                global.glue = glue;
            })['catch'](function (error) {
                console.error('error auto initialing glue', error);
            });
    }

    var factory = function (options) {
        if (!(options.gateway && options.gateway.protocolVersion)) {
            options.gateway.protocolVersion = config.gateway.protocolVersion;
        }
        return createGlue(options);
    };

    if (typeof window !== 'undefined') {
        window.Glue = factory;
    }

    module.exports = factory
}());

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./glue":2,"detect-node":8,"es5-shim":10,"es5-shim/es5-sham":9}],4:[function(require,module,exports){
/**
 * (c) 2013 Beau Sorensen
 * MIT Licensed
 * For all details and documentation:
 * https://github.com/sorensen/ascii-table
 */

;(function() {
'use strict';

/*!
 * Module dependencies
 */

var slice = Array.prototype.slice
  , toString = Object.prototype.toString

/**
 * AsciiTable constructor
 *
 * @param {String|Object} title or JSON table
 * @param {Object} table options
 *  - `prefix` - string prefix added to each line on render
 * @constructor
 * @api public
 */

function AsciiTable(name, options) {
  this.options = options || {}
  this.reset(name)
}

/*!
 * Current library version, should match `package.json`
 */

AsciiTable.VERSION = '0.0.8'

/*!
 * Alignment constants
 */

AsciiTable.LEFT = 0
AsciiTable.CENTER = 1
AsciiTable.RIGHT = 2

/*!
 * Static methods
 */

/**
 * Create a new table instance
 *
 * @param {String|Object} title or JSON table
 * @param {Object} table options
 * @api public
 */

AsciiTable.factory = function(name, options) {
  return new AsciiTable(name, options)
}

/**
 * Align the a string at the given length
 *
 * @param {Number} direction
 * @param {String} string input
 * @param {Number} string length
 * @param {Number} padding character
 * @api public
 */

AsciiTable.align = function(dir, str, len, pad) {
  if (dir === AsciiTable.LEFT) return AsciiTable.alignLeft(str, len, pad)
  if (dir === AsciiTable.RIGHT) return AsciiTable.alignRight(str, len, pad)
  if (dir === AsciiTable.CENTER) return AsciiTable.alignCenter(str, len, pad)
  return AsciiTable.alignAuto(str, len, pad)
}

/**
 * Left align a string by padding it at a given length
 *
 * @param {String} str
 * @param {Number} string length
 * @param {String} padding character (optional, default '')
 * @api public
 */

AsciiTable.alignLeft = function(str, len, pad) {
  if (!len || len < 0) return ''
  if (str === undefined || str === null) str = ''
  if (typeof pad === 'undefined') pad = ' '
  if (typeof str !== 'string') str = str.toString()
  var alen = len + 1 - str.length
  if (alen <= 0) return str
  return str + Array(len + 1 - str.length).join(pad)
}

/**
 * Center align a string by padding it at a given length
 *
 * @param {String} str
 * @param {Number} string length
 * @param {String} padding character (optional, default '')
 * @api public
 */

AsciiTable.alignCenter = function(str, len, pad) {
  if (!len || len < 0) return ''
  if (str === undefined || str === null) str = ''
  if (typeof pad === 'undefined') pad = ' '
  if (typeof str !== 'string') str = str.toString()
  var nLen = str.length
    , half = Math.floor(len / 2 - nLen / 2)
    , odds = Math.abs((nLen % 2) - (len % 2))
    , len = str.length

  return AsciiTable.alignRight('', half, pad) 
    + str
    + AsciiTable.alignLeft('', half + odds, pad)
}

/**
 * Right align a string by padding it at a given length
 *
 * @param {String} str
 * @param {Number} string length
 * @param {String} padding character (optional, default '')
 * @api public
 */

AsciiTable.alignRight = function(str, len, pad) {
  if (!len || len < 0) return ''
  if (str === undefined || str === null) str = ''
  if (typeof pad === 'undefined') pad = ' '
  if (typeof str !== 'string') str = str.toString()
  var alen = len + 1 - str.length
  if (alen <= 0) return str
  return Array(len + 1 - str.length).join(pad) + str
}

/**
 * Auto align string value based on object type
 *
 * @param {Any} object to string
 * @param {Number} string length
 * @param {String} padding character (optional, default '')
 * @api public
 */

AsciiTable.alignAuto = function(str, len, pad) {
  if (str === undefined || str === null) str = ''
  var type = toString.call(str)
  pad || (pad = ' ')
  len = +len
  if (type !== '[object String]') {
    str = str.toString()
  }
  if (str.length < len) {
    switch(type) {
      case '[object Number]': return AsciiTable.alignRight(str, len, pad)
      default: return AsciiTable.alignLeft(str, len, pad)
    }
  }
  return str
}

/**
 * Fill an array at a given size with the given value
 *
 * @param {Number} array size
 * @param {Any} fill value
 * @return {Array} filled array
 * @api public
 */

AsciiTable.arrayFill = function(len, fill) {
  var arr = new Array(len)
  for (var i = 0; i !== len; i++) {
    arr[i] = fill;
  }
  return arr
}

/*!
 * Instance methods
 */

/**
 * Reset the table state back to defaults
 *
 * @param {String|Object} title or JSON table
 * @api public
 */

AsciiTable.prototype.reset = 
AsciiTable.prototype.clear = function(name) {
  this.__name = ''
  this.__nameAlign = AsciiTable.CENTER
  this.__rows = []
  this.__maxCells = 0
  this.__aligns = []
  this.__colMaxes = []
  this.__spacing = 1
  this.__heading = null
  this.__headingAlign = AsciiTable.CENTER
  this.setBorder()

  if (toString.call(name) === '[object String]') {
    this.__name = name
  } else if (toString.call(name) === '[object Object]') {
    this.fromJSON(name)
  }
  return this
}

/**
 * Set the table border
 *
 * @param {String} horizontal edges (optional, default `|`)
 * @param {String} vertical edges (optional, default `-`)
 * @param {String} top corners (optional, default `.`)
 * @param {String} bottom corners (optional, default `'`)
 * @api public
 */

AsciiTable.prototype.setBorder = function(edge, fill, top, bottom) {
  this.__border = true
  if (arguments.length === 1) {
    fill = top = bottom = edge
  }
  this.__edge = edge || '|'
  this.__fill = fill || '-'
  this.__top = top || '.'
  this.__bottom = bottom || "'"
  return this
}

/**
 * Remove all table borders
 *
 * @api public
 */

AsciiTable.prototype.removeBorder = function() {
  this.__border = false
  this.__edge = ' '
  this.__fill = ' '
  return this
}

/**
 * Set the column alignment at a given index
 *
 * @param {Number} column index
 * @param {Number} alignment direction
 * @api public
 */

AsciiTable.prototype.setAlign = function(idx, dir) {
  this.__aligns[idx] = dir
  return this
}

/**
 * Set the title of the table
 *
 * @param {String} title
 * @api public
 */

AsciiTable.prototype.setTitle = function(name) {
  this.__name = name
  return this
}

/**
 * Get the title of the table
 *
 * @return {String} title
 * @api public
 */

AsciiTable.prototype.getTitle = function() {
  return this.__name
}

/**
 * Set table title alignment
 *
 * @param {Number} direction
 * @api public
 */

AsciiTable.prototype.setTitleAlign = function(dir) {
  this.__nameAlign = dir
  return this
}

/**
 * AsciiTable sorting shortcut to sort rows
 *
 * @param {Function} sorting method
 * @api public
 */

AsciiTable.prototype.sort = function(method) {
  this.__rows.sort(method)
  return this
}

/**
 * Sort rows based on sort method for given column
 *
 * @param {Number} column index
 * @param {Function} sorting method
 * @api public
 */

AsciiTable.prototype.sortColumn = function(idx, method) {
  this.__rows.sort(function(a, b) {
    return method(a[idx], b[idx])
  })
  return this
}

/**
 * Set table heading for columns
 *
 * @api public
 */

AsciiTable.prototype.setHeading = function(row) {
  if (arguments.length > 1 || toString.call(row) !== '[object Array]') {
    row = slice.call(arguments)
  }
  this.__heading = row
  return this
}

/**
 * Get table heading for columns
 *
 * @return {Array} copy of headings
 * @api public
 */

AsciiTable.prototype.getHeading = function() {
  return this.__heading.slice()
}

/**
 * Set heading alignment
 *
 * @param {Number} direction
 * @api public
 */

AsciiTable.prototype.setHeadingAlign = function(dir) {
  this.__headingAlign = dir
  return this
}

/**
 * Add a row of information to the table
 * 
 * @param {...|Array} argument values in order of columns
 * @api public
 */

AsciiTable.prototype.addRow = function(row) {
  if (arguments.length > 1 || toString.call(row) !== '[object Array]') {
    row = slice.call(arguments)
  }
  this.__maxCells = Math.max(this.__maxCells, row.length)
  this.__rows.push(row)
  return this
}

/**
 * Get a copy of all rows of the table
 *
 * @return {Array} copy of rows
 * @api public
 */

AsciiTable.prototype.getRows = function() {
  return this.__rows.slice().map(function(row) {
    return row.slice()
  })
}

/**
 * Add rows in the format of a row matrix
 *
 * @param {Array} row matrix
 * @api public
 */

AsciiTable.prototype.addRowMatrix = function(rows) {
  for (var i = 0; i < rows.length; i++) {
    this.addRow(rows[i])
  }
  return this
}

/**
 * Add rows from the given data array, processed by the callback function rowCallback.
 *
 * @param {Array} data
 * @param (Function) rowCallback
 * @param (Boolean) asMatrix - controls if the row created by rowCallback should be assigned as row matrix
 * @api public
 */

AsciiTable.prototype.addData = function(data, rowCallback, asMatrix) {
  if (toString.call(data) !== '[object Array]') {
    return this;
  }
  for (var index = 0, limit = data.length; index < limit; index++) {
    var row = rowCallback(data[index]);
    if(asMatrix) {
      this.addRowMatrix(row);
    } else {
      this.addRow(row);
    }
  }
  return this
}

  /**
 * Reset the current row state
 *
 * @api public
 */

AsciiTable.prototype.clearRows = function() {
  this.__rows = []
  this.__maxCells = 0
  this.__colMaxes = []
  return this
}

/**
 * Apply an even spaced column justification
 *
 * @param {Boolean} on / off
 * @api public
 */

AsciiTable.prototype.setJustify = function(val) {
  arguments.length === 0 && (val = true)
  this.__justify = !!val
  return this
}

/**
 * Convert the current instance to a JSON structure
 *
 * @return {Object} json representation
 * @api public
 */

AsciiTable.prototype.toJSON = function() {
  return {
    title: this.getTitle()
  , heading: this.getHeading()
  , rows: this.getRows()
  }
}

/**
 * Populate the table from a JSON object
 *
 * @param {Object} json representation
 * @api public
 */

AsciiTable.prototype.parse = 
AsciiTable.prototype.fromJSON = function(obj) {
  return this
    .clear()
    .setTitle(obj.title)
    .setHeading(obj.heading)
    .addRowMatrix(obj.rows)
}

/**
 * Render the table with the current information
 *
 * @return {String} formatted table
 * @api public
 */

AsciiTable.prototype.render =
AsciiTable.prototype.valueOf =
AsciiTable.prototype.toString = function() {
  var self = this
    , body = []
    , mLen = this.__maxCells
    , max = AsciiTable.arrayFill(mLen, 0)
    , total = mLen * 3
    , rows = this.__rows
    , justify
    , border = this.__border
    , all = this.__heading 
        ? [this.__heading].concat(rows)
        : rows

  // Calculate max table cell lengths across all rows
  for (var i = 0; i < all.length; i++) {
    var row = all[i]
    for (var k = 0; k < mLen; k++) {
      var cell = row[k]
      max[k] = Math.max(max[k], cell ? cell.toString().length : 0)
    }
  }
  this.__colMaxes = max
  justify = this.__justify ? Math.max.apply(null, max) : 0

  // Get 
  max.forEach(function(x) {
    total += justify ? justify : x + self.__spacing
  })
  justify && (total += max.length)
  total -= this.__spacing

  // Heading
  border && body.push(this._seperator(total - mLen + 1, this.__top))
  if (this.__name) {
    body.push(this._renderTitle(total - mLen + 1))
    border && body.push(this._seperator(total - mLen + 1))
  }
  if (this.__heading) {
    body.push(this._renderRow(this.__heading, ' ', this.__headingAlign))
    body.push(this._rowSeperator(mLen, this.__fill))
  }
  for (var i = 0; i < this.__rows.length; i++) {
    body.push(this._renderRow(this.__rows[i], ' '))
  }
  border && body.push(this._seperator(total - mLen + 1, this.__bottom))

  var prefix = this.options.prefix || ''
  return prefix + body.join('\n' + prefix)
}

/**
 * Create a line seperator
 *
 * @param {Number} string size
 * @param {String} side values (default '|')
 * @api private
 */

AsciiTable.prototype._seperator = function(len, sep) {
  sep || (sep = this.__edge)
  return sep + AsciiTable.alignRight(sep, len, this.__fill)
}

/**
 * Create a row seperator
 *
 * @return {String} seperator
 * @api private
 */

AsciiTable.prototype._rowSeperator = function() {
  var blanks = AsciiTable.arrayFill(this.__maxCells, this.__fill)
  return this._renderRow(blanks, this.__fill)
}

/**
 * Render the table title in a centered box
 *
 * @param {Number} string size
 * @return {String} formatted title
 * @api private
 */

AsciiTable.prototype._renderTitle = function(len) {
  var name = ' ' + this.__name + ' '
    , str = AsciiTable.align(this.__nameAlign, name, len - 1, ' ')
  return this.__edge + str + this.__edge
}

/**
 * Render an invdividual row
 *
 * @param {Array} row
 * @param {String} column seperator
 * @param {Number} total row alignment (optional, default `auto`)
 * @return {String} formatted row
 * @api private
 */

AsciiTable.prototype._renderRow = function(row, str, align) {
  var tmp = ['']
    , max = this.__colMaxes

  for (var k = 0; k < this.__maxCells; k++) {
    var cell = row[k]
      , just = this.__justify ? Math.max.apply(null, max) : max[k]
      // , pad = k === this.__maxCells - 1 ? just : just + this.__spacing
      , pad = just
      , cAlign = this.__aligns[k]
      , use = align
      , method = 'alignAuto'
  
    if (typeof align === 'undefined') use = cAlign

    if (use === AsciiTable.LEFT) method = 'alignLeft'
    if (use === AsciiTable.CENTER) method = 'alignCenter'
    if (use === AsciiTable.RIGHT) method = 'alignRight'

    tmp.push(AsciiTable[method](cell, pad, str))
  }
  var front = tmp.join(str + this.__edge + str)
  front = front.substr(1, front.length)
  return front + str + this.__edge
}

/*!
 * Aliases
 */

// Create method shortcuts to all alignment methods for each direction
;['Left', 'Right', 'Center'].forEach(function(dir) {
  var constant = AsciiTable[dir.toUpperCase()]

  ;['setAlign', 'setTitleAlign', 'setHeadingAlign'].forEach(function(method) {
    // Call the base method with the direction constant as the last argument
    AsciiTable.prototype[method + dir] = function() {
      var args = slice.call(arguments).concat(constant)
      return this[method].apply(this, args)
    }
  })
})

/*!
 * Module exports.
 */

if (typeof exports !== 'undefined') {
  module.exports = AsciiTable
} else {
  this.AsciiTable = AsciiTable
}

}).call(this);

},{}],5:[function(require,module,exports){
module.exports = require('./ascii-table')
},{"./ascii-table":4}],6:[function(require,module,exports){
module.exports = function () {
	"use strict";

	var callbacks = {};

	function add(key, callback) {
		var callbacksForKey = callbacks[key];

		if (!callbacksForKey) {
			callbacksForKey = [];
			callbacks[key] = callbacksForKey;
		}

		var newLen = callbacksForKey.push(callback);
		var itemIndex = newLen - 1;

		// callback id is formed as <item-index>_<key>, we use that id to remove the callback 
		return itemIndex + '_' + key;
	}

	function remove(callbackId) {
		var parts = callbackId.split('_');
		if (parts.length !== 2) {
			return false;
		}

		var index = parts[0];
		var key = parts[1];
		
		var callbackArray = callbacks[key];
		if (!callbackArray || callbackArray.length === 0) {
			return false;
		}

		delete callbackArray[index];
		return true;
	}

	function execute(key, argumentsArr) {
		var callbacksForKey = callbacks[key];
		if (!callbacksForKey || callbacksForKey.length === 0){
			return;
		}

		var args = [].splice.call(arguments, 1);

		callbacksForKey.forEach(function (callback) {
			callback.apply(undefined, args);
		});
	}

	return {
		add: add,
		remove: remove,
		execute: execute
	};
};

},{}],7:[function(require,module,exports){
/**
 * cuid.js
 * Collision-resistant UID generator for browsers and node.
 * Sequential for fast db lookups and recency sorting.
 * Safe for element IDs and server-side lookups.
 *
 * Extracted from CLCTR
 *
 * Copyright (c) Eric Elliott 2012
 * MIT License
 */

/*global window, navigator, document, require, process, module */
(function (app) {
  'use strict';
  var namespace = 'cuid',
    c = 0,
    blockSize = 4,
    base = 36,
    discreteValues = Math.pow(base, blockSize),

    pad = function pad(num, size) {
      var s = "000000000" + num;
      return s.substr(s.length-size);
    },

    randomBlock = function randomBlock() {
      return pad((Math.random() *
            discreteValues << 0)
            .toString(base), blockSize);
    },

    safeCounter = function () {
      c = (c < discreteValues) ? c : 0;
      c++; // this is not subliminal
      return c - 1;
    },

    api = function cuid() {
      // Starting with a lowercase letter makes
      // it HTML element ID friendly.
      var letter = 'c', // hard-coded allows for sequential access

        // timestamp
        // warning: this exposes the exact date and time
        // that the uid was created.
        timestamp = (new Date().getTime()).toString(base),

        // Prevent same-machine collisions.
        counter,

        // A few chars to generate distinct ids for different
        // clients (so different computers are far less
        // likely to generate the same id)
        fingerprint = api.fingerprint(),

        // Grab some more chars from Math.random()
        random = randomBlock() + randomBlock();

        counter = pad(safeCounter().toString(base), blockSize);

      return  (letter + timestamp + counter + fingerprint + random);
    };

  api.slug = function slug() {
    var date = new Date().getTime().toString(36),
      counter,
      print = api.fingerprint().slice(0,1) +
        api.fingerprint().slice(-1),
      random = randomBlock().slice(-2);

      counter = safeCounter().toString(36).slice(-4);

    return date.slice(-2) +
      counter + print + random;
  };

  api.globalCount = function globalCount() {
    // We want to cache the results of this
    var cache = (function calc() {
        var i,
          count = 0;

        for (i in window) {
          count++;
        }

        return count;
      }());

    api.globalCount = function () { return cache; };
    return cache;
  };

  api.fingerprint = function browserPrint() {
    return pad((navigator.mimeTypes.length +
      navigator.userAgent.length).toString(36) +
      api.globalCount().toString(36), 4);
  };

  // don't change anything from here down.
  if (app.register) {
    app.register(namespace, api);
  } else if (typeof module !== 'undefined') {
    module.exports = api;
  } else {
    app[namespace] = api;
  }

}(this.applitude || this));

},{}],8:[function(require,module,exports){
(function (global){
module.exports = false;

// Only Node.JS has a process variable that is of [[Class]] process
try {
 module.exports = Object.prototype.toString.call(global.process) === '[object process]' 
} catch(e) {}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],9:[function(require,module,exports){
/*!
 * https://github.com/es-shims/es5-shim
 * @license es5-shim Copyright 2009-2015 by contributors, MIT License
 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
 */

// vim: ts=4 sts=4 sw=4 expandtab

// Add semicolon to prevent IIFE from being passed as argument to concatenated code.
;

// UMD (Universal Module Definition)
// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
    'use strict';

    /* global define, exports, module */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.returnExports = factory();
    }
}(this, function () {

    var call = Function.call;
    var prototypeOfObject = Object.prototype;
    var owns = call.bind(prototypeOfObject.hasOwnProperty);
    var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);
    var toStr = call.bind(prototypeOfObject.toString);

    // If JS engine supports accessors creating shortcuts.
    var defineGetter;
    var defineSetter;
    var lookupGetter;
    var lookupSetter;
    var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
    if (supportsAccessors) {
        /* eslint-disable no-underscore-dangle */
        defineGetter = call.bind(prototypeOfObject.__defineGetter__);
        defineSetter = call.bind(prototypeOfObject.__defineSetter__);
        lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
        lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
        /* eslint-enable no-underscore-dangle */
    }

    var isPrimitive = function isPrimitive(o) {
        return o == null || (typeof o !== 'object' && typeof o !== 'function');
    };

    // ES5 15.2.3.2
    // http://es5.github.com/#x15.2.3.2
    if (!Object.getPrototypeOf) {
        // https://github.com/es-shims/es5-shim/issues#issue/2
        // http://ejohn.org/blog/objectgetprototypeof/
        // recommended by fschaefer on github
        //
        // sure, and webreflection says ^_^
        // ... this will nerever possibly return null
        // ... Opera Mini breaks here with infinite loops
        Object.getPrototypeOf = function getPrototypeOf(object) {
            /* eslint-disable no-proto */
            var proto = object.__proto__;
            /* eslint-enable no-proto */
            if (proto || proto === null) {
                return proto;
            } else if (toStr(object.constructor) === '[object Function]') {
                return object.constructor.prototype;
            } else if (object instanceof Object) {
                return prototypeOfObject;
            } else {
                // Correctly return null for Objects created with `Object.create(null)`
                // (shammed or native) or `{ __proto__: null}`.  Also returns null for
                // cross-realm objects on browsers that lack `__proto__` support (like
                // IE <11), but that's the best we can do.
                return null;
            }
        };
    }

    // ES5 15.2.3.3
    // http://es5.github.com/#x15.2.3.3

    var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {
        try {
            object.sentinel = 0;
            return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;
        } catch (exception) {
            return false;
        }
    };

    // check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.
    if (Object.defineProperty) {
        var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});
        var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' ||
        doesGetOwnPropertyDescriptorWork(document.createElement('div'));
        if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {
            var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;
        }
    }

    if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {
        var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';

        /* eslint-disable no-proto */
        Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
            if (isPrimitive(object)) {
                throw new TypeError(ERR_NON_OBJECT + object);
            }

            // make a valiant attempt to use the real getOwnPropertyDescriptor
            // for I8's DOM elements.
            if (getOwnPropertyDescriptorFallback) {
                try {
                    return getOwnPropertyDescriptorFallback.call(Object, object, property);
                } catch (exception) {
                    // try the shim if the real one doesn't work
                }
            }

            var descriptor;

            // If object does not owns property return undefined immediately.
            if (!owns(object, property)) {
                return descriptor;
            }

            // If object has a property then it's for sure `configurable`, and
            // probably `enumerable`. Detect enumerability though.
            descriptor = {
                enumerable: isEnumerable(object, property),
                configurable: true
            };

            // If JS engine supports accessor properties then property may be a
            // getter or setter.
            if (supportsAccessors) {
                // Unfortunately `__lookupGetter__` will return a getter even
                // if object has own non getter property along with a same named
                // inherited getter. To avoid misbehavior we temporary remove
                // `__proto__` so that `__lookupGetter__` will return getter only
                // if it's owned by an object.
                var prototype = object.__proto__;
                var notPrototypeOfObject = object !== prototypeOfObject;
                // avoid recursion problem, breaking in Opera Mini when
                // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')
                // or any other Object.prototype accessor
                if (notPrototypeOfObject) {
                    object.__proto__ = prototypeOfObject;
                }

                var getter = lookupGetter(object, property);
                var setter = lookupSetter(object, property);

                if (notPrototypeOfObject) {
                    // Once we have getter and setter we can put values back.
                    object.__proto__ = prototype;
                }

                if (getter || setter) {
                    if (getter) {
                        descriptor.get = getter;
                    }
                    if (setter) {
                        descriptor.set = setter;
                    }
                    // If it was accessor property we're done and return here
                    // in order to avoid adding `value` to the descriptor.
                    return descriptor;
                }
            }

            // If we got this far we know that object has an own property that is
            // not an accessor so we set it as a value and return descriptor.
            descriptor.value = object[property];
            descriptor.writable = true;
            return descriptor;
        };
        /* eslint-enable no-proto */
    }

    // ES5 15.2.3.4
    // http://es5.github.com/#x15.2.3.4
    if (!Object.getOwnPropertyNames) {
        Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
            return Object.keys(object);
        };
    }

    // ES5 15.2.3.5
    // http://es5.github.com/#x15.2.3.5
    if (!Object.create) {

        // Contributed by Brandon Benvie, October, 2012
        var createEmpty;
        var supportsProto = !({ __proto__: null } instanceof Object);
                            // the following produces false positives
                            // in Opera Mini => not a reliable check
                            // Object.prototype.__proto__ === null

        // Check for document.domain and active x support
        // No need to use active x approach when document.domain is not set
        // see https://github.com/es-shims/es5-shim/issues/150
        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
        /* global ActiveXObject */
        var shouldUseActiveX = function shouldUseActiveX() {
            // return early if document.domain not set
            if (!document.domain) {
                return false;
            }

            try {
                return !!new ActiveXObject('htmlfile');
            } catch (exception) {
                return false;
            }
        };

        // This supports IE8 when document.domain is used
        // see https://github.com/es-shims/es5-shim/issues/150
        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
        var getEmptyViaActiveX = function getEmptyViaActiveX() {
            var empty;
            var xDoc;

            xDoc = new ActiveXObject('htmlfile');

            var script = 'script';
            xDoc.write('<' + script + '></' + script + '>');
            xDoc.close();

            empty = xDoc.parentWindow.Object.prototype;
            xDoc = null;

            return empty;
        };

        // The original implementation using an iframe
        // before the activex approach was added
        // see https://github.com/es-shims/es5-shim/issues/150
        var getEmptyViaIFrame = function getEmptyViaIFrame() {
            var iframe = document.createElement('iframe');
            var parent = document.body || document.documentElement;
            var empty;

            iframe.style.display = 'none';
            parent.appendChild(iframe);
            /* eslint-disable no-script-url */
            iframe.src = 'javascript:';
            /* eslint-enable no-script-url */

            empty = iframe.contentWindow.Object.prototype;
            parent.removeChild(iframe);
            iframe = null;

            return empty;
        };

        /* global document */
        if (supportsProto || typeof document === 'undefined') {
            createEmpty = function () {
                return { __proto__: null };
            };
        } else {
            // In old IE __proto__ can't be used to manually set `null`, nor does
            // any other method exist to make an object that inherits from nothing,
            // aside from Object.prototype itself. Instead, create a new global
            // object and *steal* its Object.prototype and strip it bare. This is
            // used as the prototype to create nullary objects.
            createEmpty = function () {
                // Determine which approach to use
                // see https://github.com/es-shims/es5-shim/issues/150
                var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();

                delete empty.constructor;
                delete empty.hasOwnProperty;
                delete empty.propertyIsEnumerable;
                delete empty.isPrototypeOf;
                delete empty.toLocaleString;
                delete empty.toString;
                delete empty.valueOf;

                var Empty = function Empty() {};
                Empty.prototype = empty;
                // short-circuit future calls
                createEmpty = function () {
                    return new Empty();
                };
                return new Empty();
            };
        }

        Object.create = function create(prototype, properties) {

            var object;
            var Type = function Type() {}; // An empty constructor.

            if (prototype === null) {
                object = createEmpty();
            } else {
                if (prototype !== null && isPrimitive(prototype)) {
                    // In the native implementation `parent` can be `null`
                    // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)
                    // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`
                    // like they are in modern browsers. Using `Object.create` on DOM elements
                    // is...err...probably inappropriate, but the native version allows for it.
                    throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome
                }
                Type.prototype = prototype;
                object = new Type();
                // IE has no built-in implementation of `Object.getPrototypeOf`
                // neither `__proto__`, but this manually setting `__proto__` will
                // guarantee that `Object.getPrototypeOf` will work as expected with
                // objects created using `Object.create`
                /* eslint-disable no-proto */
                object.__proto__ = prototype;
                /* eslint-enable no-proto */
            }

            if (properties !== void 0) {
                Object.defineProperties(object, properties);
            }

            return object;
        };
    }

    // ES5 15.2.3.6
    // http://es5.github.com/#x15.2.3.6

    // Patch for WebKit and IE8 standard mode
    // Designed by hax <hax.github.com>
    // related issue: https://github.com/es-shims/es5-shim/issues#issue/5
    // IE8 Reference:
    //     http://msdn.microsoft.com/en-us/library/dd282900.aspx
    //     http://msdn.microsoft.com/en-us/library/dd229916.aspx
    // WebKit Bugs:
    //     https://bugs.webkit.org/show_bug.cgi?id=36423

    var doesDefinePropertyWork = function doesDefinePropertyWork(object) {
        try {
            Object.defineProperty(object, 'sentinel', {});
            return 'sentinel' in object;
        } catch (exception) {
            return false;
        }
    };

    // check whether defineProperty works if it's given. Otherwise,
    // shim partially.
    if (Object.defineProperty) {
        var definePropertyWorksOnObject = doesDefinePropertyWork({});
        var definePropertyWorksOnDom = typeof document === 'undefined' ||
            doesDefinePropertyWork(document.createElement('div'));
        if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
            var definePropertyFallback = Object.defineProperty,
                definePropertiesFallback = Object.defineProperties;
        }
    }

    if (!Object.defineProperty || definePropertyFallback) {
        var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';
        var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';
        var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';

        Object.defineProperty = function defineProperty(object, property, descriptor) {
            if (isPrimitive(object)) {
                throw new TypeError(ERR_NON_OBJECT_TARGET + object);
            }
            if (isPrimitive(descriptor)) {
                throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
            }
            // make a valiant attempt to use the real defineProperty
            // for I8's DOM elements.
            if (definePropertyFallback) {
                try {
                    return definePropertyFallback.call(Object, object, property, descriptor);
                } catch (exception) {
                    // try the shim if the real one doesn't work
                }
            }

            // If it's a data property.
            if ('value' in descriptor) {
                // fail silently if 'writable', 'enumerable', or 'configurable'
                // are requested but not supported
                /*
                // alternate approach:
                if ( // can't implement these features; allow false but not true
                    ('writable' in descriptor && !descriptor.writable) ||
                    ('enumerable' in descriptor && !descriptor.enumerable) ||
                    ('configurable' in descriptor && !descriptor.configurable)
                ))
                    throw new RangeError(
                        'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'
                    );
                */

                if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {
                    // As accessors are supported only on engines implementing
                    // `__proto__` we can safely override `__proto__` while defining
                    // a property to make sure that we don't hit an inherited
                    // accessor.
                    /* eslint-disable no-proto */
                    var prototype = object.__proto__;
                    object.__proto__ = prototypeOfObject;
                    // Deleting a property anyway since getter / setter may be
                    // defined on object itself.
                    delete object[property];
                    object[property] = descriptor.value;
                    // Setting original `__proto__` back now.
                    object.__proto__ = prototype;
                    /* eslint-enable no-proto */
                } else {
                    object[property] = descriptor.value;
                }
            } else {
                var hasGetter = 'get' in descriptor;
                var hasSetter = 'set' in descriptor;
                if (!supportsAccessors && (hasGetter || hasSetter)) {
                     return;
                }
                // If we got that far then getters and setters can be defined !!
                if (hasGetter) {
                    defineGetter(object, property, descriptor.get);
                }
                if (hasSetter) {
                    defineSetter(object, property, descriptor.set);
                }
            }
            return object;
        };
    }

    // ES5 15.2.3.7
    // http://es5.github.com/#x15.2.3.7
    if (!Object.defineProperties || definePropertiesFallback) {
        Object.defineProperties = function defineProperties(object, properties) {
            // make a valiant attempt to use the real defineProperties
            if (definePropertiesFallback) {
                try {
                    return definePropertiesFallback.call(Object, object, properties);
                } catch (exception) {
                    // try the shim if the real one doesn't work
                }
            }

            Object.keys(properties).forEach(function (property) {
                if (property !== '__proto__') {
                    Object.defineProperty(object, property, properties[property]);
                }
            });
            return object;
        };
    }

    // ES5 15.2.3.8
    // http://es5.github.com/#x15.2.3.8
    if (!Object.seal) {
        Object.seal = function seal(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.seal can only be called on Objects.');
            }
            // this is misleading and breaks feature-detection, but
            // allows "securable" code to "gracefully" degrade to working
            // but insecure code.
            return object;
        };
    }

    // ES5 15.2.3.9
    // http://es5.github.com/#x15.2.3.9
    if (!Object.freeze) {
        Object.freeze = function freeze(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.freeze can only be called on Objects.');
            }
            // this is misleading and breaks feature-detection, but
            // allows "securable" code to "gracefully" degrade to working
            // but insecure code.
            return object;
        };
    }

    // detect a Rhino bug and patch it
    try {
        Object.freeze(function () {});
    } catch (exception) {
        Object.freeze = (function (freezeObject) {
            return function freeze(object) {
                if (typeof object === 'function') {
                    return object;
                } else {
                    return freezeObject(object);
                }
            };
        }(Object.freeze));
    }

    // ES5 15.2.3.10
    // http://es5.github.com/#x15.2.3.10
    if (!Object.preventExtensions) {
        Object.preventExtensions = function preventExtensions(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.preventExtensions can only be called on Objects.');
            }
            // this is misleading and breaks feature-detection, but
            // allows "securable" code to "gracefully" degrade to working
            // but insecure code.
            return object;
        };
    }

    // ES5 15.2.3.11
    // http://es5.github.com/#x15.2.3.11
    if (!Object.isSealed) {
        Object.isSealed = function isSealed(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.isSealed can only be called on Objects.');
            }
            return false;
        };
    }

    // ES5 15.2.3.12
    // http://es5.github.com/#x15.2.3.12
    if (!Object.isFrozen) {
        Object.isFrozen = function isFrozen(object) {
            if (Object(object) !== object) {
                throw new TypeError('Object.isFrozen can only be called on Objects.');
            }
            return false;
        };
    }

    // ES5 15.2.3.13
    // http://es5.github.com/#x15.2.3.13
    if (!Object.isExtensible) {
        Object.isExtensible = function isExtensible(object) {
            // 1. If Type(O) is not Object throw a TypeError exception.
            if (Object(object) !== object) {
                throw new TypeError('Object.isExtensible can only be called on Objects.');
            }
            // 2. Return the Boolean value of the [[Extensible]] internal property of O.
            var name = '';
            while (owns(object, name)) {
                name += '?';
            }
            object[name] = true;
            var returnValue = owns(object, name);
            delete object[name];
            return returnValue;
        };
    }

}));

},{}],10:[function(require,module,exports){
/*!
 * https://github.com/es-shims/es5-shim
 * @license es5-shim Copyright 2009-2015 by contributors, MIT License
 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
 */

// vim: ts=4 sts=4 sw=4 expandtab

// Add semicolon to prevent IIFE from being passed as argument to concatenated code.
;

// UMD (Universal Module Definition)
// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
    'use strict';

    /* global define, exports, module */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.returnExports = factory();
    }
}(this, function () {
    /**
     * Brings an environment as close to ECMAScript 5 compliance
     * as is possible with the facilities of erstwhile engines.
     *
     * Annotated ES5: http://es5.github.com/ (specific links below)
     * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
     * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
     */

    // Shortcut to an often accessed properties, in order to avoid multiple
    // dereference that costs universally. This also holds a reference to known-good
    // functions.
    var $Array = Array;
    var ArrayPrototype = $Array.prototype;
    var $Object = Object;
    var ObjectPrototype = $Object.prototype;
    var $Function = Function;
    var FunctionPrototype = $Function.prototype;
    var $String = String;
    var StringPrototype = $String.prototype;
    var $Number = Number;
    var NumberPrototype = $Number.prototype;
    var array_slice = ArrayPrototype.slice;
    var array_splice = ArrayPrototype.splice;
    var array_push = ArrayPrototype.push;
    var array_unshift = ArrayPrototype.unshift;
    var array_concat = ArrayPrototype.concat;
    var array_join = ArrayPrototype.join;
    var call = FunctionPrototype.call;
    var apply = FunctionPrototype.apply;
    var max = Math.max;
    var min = Math.min;

    // Having a toString local variable name breaks in Opera so use to_string.
    var to_string = ObjectPrototype.toString;

    /* global Symbol */
    /* eslint-disable one-var-declaration-per-line, no-redeclare, max-statements-per-line */
    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
    var isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, constructorRegex = /^\s*class /, isES6ClassFn = function isES6ClassFn(value) { try { var fnStr = fnToStr.call(value); var singleStripped = fnStr.replace(/\/\/.*\n/g, ''); var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, ''); var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' '); return constructorRegex.test(spaceStripped); } catch (e) { return false; /* not a function */ } }, tryFunctionObject = function tryFunctionObject(value) { try { if (isES6ClassFn(value)) { return false; } fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]', isCallable = function isCallable(value) { if (!value) { return false; } if (typeof value !== 'function' && typeof value !== 'object') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } if (isES6ClassFn(value)) { return false; } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };

    var isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };
    var isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };
    /* eslint-enable one-var-declaration-per-line, no-redeclare, max-statements-per-line */

    /* inlined from http://npmjs.com/define-properties */
    var supportsDescriptors = $Object.defineProperty && (function () {
        try {
            var obj = {};
            $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
            for (var _ in obj) { // jscs:ignore disallowUnusedVariables
                return false;
            }
            return obj.x === obj;
        } catch (e) { /* this is ES3 */
            return false;
        }
    }());
    var defineProperties = (function (has) {
        // Define configurable, writable, and non-enumerable props
        // if they don't exist.
        var defineProperty;
        if (supportsDescriptors) {
            defineProperty = function (object, name, method, forceAssign) {
                if (!forceAssign && (name in object)) {
                    return;
                }
                $Object.defineProperty(object, name, {
                    configurable: true,
                    enumerable: false,
                    writable: true,
                    value: method
                });
            };
        } else {
            defineProperty = function (object, name, method, forceAssign) {
                if (!forceAssign && (name in object)) {
                    return;
                }
                object[name] = method;
            };
        }
        return function defineProperties(object, map, forceAssign) {
            for (var name in map) {
                if (has.call(map, name)) {
                    defineProperty(object, name, map[name], forceAssign);
                }
            }
        };
    }(ObjectPrototype.hasOwnProperty));

    //
    // Util
    // ======
    //

    /* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */
    var isPrimitive = function isPrimitive(input) {
        var type = typeof input;
        return input === null || (type !== 'object' && type !== 'function');
    };

    var isActualNaN = $Number.isNaN || function isActualNaN(x) {
        return x !== x;
    };

    var ES = {
        // ES5 9.4
        // http://es5.github.com/#x9.4
        // http://jsperf.com/to-integer
        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */
        ToInteger: function ToInteger(num) {
            var n = +num;
            if (isActualNaN(n)) {
                n = 0;
            } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
            return n;
        },

        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */
        ToPrimitive: function ToPrimitive(input) {
            var val, valueOf, toStr;
            if (isPrimitive(input)) {
                return input;
            }
            valueOf = input.valueOf;
            if (isCallable(valueOf)) {
                val = valueOf.call(input);
                if (isPrimitive(val)) {
                    return val;
                }
            }
            toStr = input.toString;
            if (isCallable(toStr)) {
                val = toStr.call(input);
                if (isPrimitive(val)) {
                    return val;
                }
            }
            throw new TypeError();
        },

        // ES5 9.9
        // http://es5.github.com/#x9.9
        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */
        ToObject: function (o) {
            if (o == null) { // this matches both null and undefined
                throw new TypeError("can't convert " + o + ' to object');
            }
            return $Object(o);
        },

        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */
        ToUint32: function ToUint32(x) {
            return x >>> 0;
        }
    };

    //
    // Function
    // ========
    //

    // ES-5 15.3.4.5
    // http://es5.github.com/#x15.3.4.5

    var Empty = function Empty() {};

    defineProperties(FunctionPrototype, {
        bind: function bind(that) { // .length is 1
            // 1. Let Target be the this value.
            var target = this;
            // 2. If IsCallable(Target) is false, throw a TypeError exception.
            if (!isCallable(target)) {
                throw new TypeError('Function.prototype.bind called on incompatible ' + target);
            }
            // 3. Let A be a new (possibly empty) internal list of all of the
            //   argument values provided after thisArg (arg1, arg2 etc), in order.
            // XXX slicedArgs will stand in for "A" if used
            var args = array_slice.call(arguments, 1); // for normal call
            // 4. Let F be a new native ECMAScript object.
            // 11. Set the [[Prototype]] internal property of F to the standard
            //   built-in Function prototype object as specified in 15.3.3.1.
            // 12. Set the [[Call]] internal property of F as described in
            //   15.3.4.5.1.
            // 13. Set the [[Construct]] internal property of F as described in
            //   15.3.4.5.2.
            // 14. Set the [[HasInstance]] internal property of F as described in
            //   15.3.4.5.3.
            var bound;
            var binder = function () {

                if (this instanceof bound) {
                    // 15.3.4.5.2 [[Construct]]
                    // When the [[Construct]] internal method of a function object,
                    // F that was created using the bind function is called with a
                    // list of arguments ExtraArgs, the following steps are taken:
                    // 1. Let target be the value of F's [[TargetFunction]]
                    //   internal property.
                    // 2. If target has no [[Construct]] internal method, a
                    //   TypeError exception is thrown.
                    // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                    //   property.
                    // 4. Let args be a new list containing the same values as the
                    //   list boundArgs in the same order followed by the same
                    //   values as the list ExtraArgs in the same order.
                    // 5. Return the result of calling the [[Construct]] internal
                    //   method of target providing args as the arguments.

                    var result = apply.call(
                        target,
                        this,
                        array_concat.call(args, array_slice.call(arguments))
                    );
                    if ($Object(result) === result) {
                        return result;
                    }
                    return this;

                } else {
                    // 15.3.4.5.1 [[Call]]
                    // When the [[Call]] internal method of a function object, F,
                    // which was created using the bind function is called with a
                    // this value and a list of arguments ExtraArgs, the following
                    // steps are taken:
                    // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                    //   property.
                    // 2. Let boundThis be the value of F's [[BoundThis]] internal
                    //   property.
                    // 3. Let target be the value of F's [[TargetFunction]] internal
                    //   property.
                    // 4. Let args be a new list containing the same values as the
                    //   list boundArgs in the same order followed by the same
                    //   values as the list ExtraArgs in the same order.
                    // 5. Return the result of calling the [[Call]] internal method
                    //   of target providing boundThis as the this value and
                    //   providing args as the arguments.

                    // equiv: target.call(this, ...boundArgs, ...args)
                    return apply.call(
                        target,
                        that,
                        array_concat.call(args, array_slice.call(arguments))
                    );

                }

            };

            // 15. If the [[Class]] internal property of Target is "Function", then
            //     a. Let L be the length property of Target minus the length of A.
            //     b. Set the length own property of F to either 0 or L, whichever is
            //       larger.
            // 16. Else set the length own property of F to 0.

            var boundLength = max(0, target.length - args.length);

            // 17. Set the attributes of the length own property of F to the values
            //   specified in 15.3.5.1.
            var boundArgs = [];
            for (var i = 0; i < boundLength; i++) {
                array_push.call(boundArgs, '$' + i);
            }

            // XXX Build a dynamic function with desired amount of arguments is the only
            // way to set the length property of a function.
            // In environments where Content Security Policies enabled (Chrome extensions,
            // for ex.) all use of eval or Function costructor throws an exception.
            // However in all of these environments Function.prototype.bind exists
            // and so this code will never be executed.
            bound = $Function('binder', 'return function (' + array_join.call(boundArgs, ',') + '){ return binder.apply(this, arguments); }')(binder);

            if (target.prototype) {
                Empty.prototype = target.prototype;
                bound.prototype = new Empty();
                // Clean up dangling references.
                Empty.prototype = null;
            }

            // TODO
            // 18. Set the [[Extensible]] internal property of F to true.

            // TODO
            // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
            // 20. Call the [[DefineOwnProperty]] internal method of F with
            //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
            //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
            //   false.
            // 21. Call the [[DefineOwnProperty]] internal method of F with
            //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
            //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
            //   and false.

            // TODO
            // NOTE Function objects created using Function.prototype.bind do not
            // have a prototype property or the [[Code]], [[FormalParameters]], and
            // [[Scope]] internal properties.
            // XXX can't delete prototype in pure-js.

            // 22. Return F.
            return bound;
        }
    });

    // _Please note: Shortcuts are defined after `Function.prototype.bind` as we
    // use it in defining shortcuts.
    var owns = call.bind(ObjectPrototype.hasOwnProperty);
    var toStr = call.bind(ObjectPrototype.toString);
    var arraySlice = call.bind(array_slice);
    var arraySliceApply = apply.bind(array_slice);
    var strSlice = call.bind(StringPrototype.slice);
    var strSplit = call.bind(StringPrototype.split);
    var strIndexOf = call.bind(StringPrototype.indexOf);
    var pushCall = call.bind(array_push);
    var isEnum = call.bind(ObjectPrototype.propertyIsEnumerable);
    var arraySort = call.bind(ArrayPrototype.sort);

    //
    // Array
    // =====
    //

    var isArray = $Array.isArray || function isArray(obj) {
        return toStr(obj) === '[object Array]';
    };

    // ES5 15.4.4.12
    // http://es5.github.com/#x15.4.4.13
    // Return len+argCount.
    // [bugfix, ielt8]
    // IE < 8 bug: [].unshift(0) === undefined but should be "1"
    var hasUnshiftReturnValueBug = [].unshift(0) !== 1;
    defineProperties(ArrayPrototype, {
        unshift: function () {
            array_unshift.apply(this, arguments);
            return this.length;
        }
    }, hasUnshiftReturnValueBug);

    // ES5 15.4.3.2
    // http://es5.github.com/#x15.4.3.2
    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
    defineProperties($Array, { isArray: isArray });

    // The IsCallable() check in the Array functions
    // has been replaced with a strict check on the
    // internal class of the object to trap cases where
    // the provided function was actually a regular
    // expression literal, which in V8 and
    // JavaScriptCore is a typeof "function".  Only in
    // V8 are regular expression literals permitted as
    // reduce parameters, so it is desirable in the
    // general case for the shim to match the more
    // strict and common behavior of rejecting regular
    // expressions.

    // ES5 15.4.4.18
    // http://es5.github.com/#x15.4.4.18
    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach

    // Check failure of by-index access of string characters (IE < 9)
    // and failure of `0 in boxedString` (Rhino)
    var boxedString = $Object('a');
    var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

    var properlyBoxesContext = function properlyBoxed(method) {
        // Check node 0.6.21 bug where third parameter is not boxed
        var properlyBoxesNonStrict = true;
        var properlyBoxesStrict = true;
        var threwException = false;
        if (method) {
            try {
                method.call('foo', function (_, __, context) {
                    if (typeof context !== 'object') {
                        properlyBoxesNonStrict = false;
                    }
                });

                method.call([1], function () {
                    'use strict';

                    properlyBoxesStrict = typeof this === 'string';
                }, 'x');
            } catch (e) {
                threwException = true;
            }
        }
        return !!method && !threwException && properlyBoxesNonStrict && properlyBoxesStrict;
    };

    defineProperties(ArrayPrototype, {
        forEach: function forEach(callbackfn/*, thisArg*/) {
            var object = ES.ToObject(this);
            var self = splitString && isString(this) ? strSplit(this, '') : object;
            var i = -1;
            var length = ES.ToUint32(self.length);
            var T;
            if (arguments.length > 1) {
                T = arguments[1];
            }

            // If no callback function or if callback is not a callable function
            if (!isCallable(callbackfn)) {
                throw new TypeError('Array.prototype.forEach callback must be a function');
            }

            while (++i < length) {
                if (i in self) {
                    // Invoke the callback function with call, passing arguments:
                    // context, property value, property key, thisArg object
                    if (typeof T === 'undefined') {
                        callbackfn(self[i], i, object);
                    } else {
                        callbackfn.call(T, self[i], i, object);
                    }
                }
            }
        }
    }, !properlyBoxesContext(ArrayPrototype.forEach));

    // ES5 15.4.4.19
    // http://es5.github.com/#x15.4.4.19
    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
    defineProperties(ArrayPrototype, {
        map: function map(callbackfn/*, thisArg*/) {
            var object = ES.ToObject(this);
            var self = splitString && isString(this) ? strSplit(this, '') : object;
            var length = ES.ToUint32(self.length);
            var result = $Array(length);
            var T;
            if (arguments.length > 1) {
                T = arguments[1];
            }

            // If no callback function or if callback is not a callable function
            if (!isCallable(callbackfn)) {
                throw new TypeError('Array.prototype.map callback must be a function');
            }

            for (var i = 0; i < length; i++) {
                if (i in self) {
                    if (typeof T === 'undefined') {
                        result[i] = callbackfn(self[i], i, object);
                    } else {
                        result[i] = callbackfn.call(T, self[i], i, object);
                    }
                }
            }
            return result;
        }
    }, !properlyBoxesContext(ArrayPrototype.map));

    // ES5 15.4.4.20
    // http://es5.github.com/#x15.4.4.20
    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
    defineProperties(ArrayPrototype, {
        filter: function filter(callbackfn/*, thisArg*/) {
            var object = ES.ToObject(this);
            var self = splitString && isString(this) ? strSplit(this, '') : object;
            var length = ES.ToUint32(self.length);
            var result = [];
            var value;
            var T;
            if (arguments.length > 1) {
                T = arguments[1];
            }

            // If no callback function or if callback is not a callable function
            if (!isCallable(callbackfn)) {
                throw new TypeError('Array.prototype.filter callback must be a function');
            }

            for (var i = 0; i < length; i++) {
                if (i in self) {
                    value = self[i];
                    if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {
                        pushCall(result, value);
                    }
                }
            }
            return result;
        }
    }, !properlyBoxesContext(ArrayPrototype.filter));

    // ES5 15.4.4.16
    // http://es5.github.com/#x15.4.4.16
    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
    defineProperties(ArrayPrototype, {
        every: function every(callbackfn/*, thisArg*/) {
            var object = ES.ToObject(this);
            var self = splitString && isString(this) ? strSplit(this, '') : object;
            var length = ES.ToUint32(self.length);
            var T;
            if (arguments.length > 1) {
                T = arguments[1];
            }

            // If no callback function or if callback is not a callable function
            if (!isCallable(callbackfn)) {
                throw new TypeError('Array.prototype.every callback must be a function');
            }

            for (var i = 0; i < length; i++) {
                if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                    return false;
                }
            }
            return true;
        }
    }, !properlyBoxesContext(ArrayPrototype.every));

    // ES5 15.4.4.17
    // http://es5.github.com/#x15.4.4.17
    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
    defineProperties(ArrayPrototype, {
        some: function some(callbackfn/*, thisArg */) {
            var object = ES.ToObject(this);
            var self = splitString && isString(this) ? strSplit(this, '') : object;
            var length = ES.ToUint32(self.length);
            var T;
            if (arguments.length > 1) {
                T = arguments[1];
            }

            // If no callback function or if callback is not a callable function
            if (!isCallable(callbackfn)) {
                throw new TypeError('Array.prototype.some callback must be a function');
            }

            for (var i = 0; i < length; i++) {
                if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                    return true;
                }
            }
            return false;
        }
    }, !properlyBoxesContext(ArrayPrototype.some));

    // ES5 15.4.4.21
    // http://es5.github.com/#x15.4.4.21
    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
    var reduceCoercesToObject = false;
    if (ArrayPrototype.reduce) {
        reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) {
            return list;
        }) === 'object';
    }
    defineProperties(ArrayPrototype, {
        reduce: function reduce(callbackfn/*, initialValue*/) {
            var object = ES.ToObject(this);
            var self = splitString && isString(this) ? strSplit(this, '') : object;
            var length = ES.ToUint32(self.length);

            // If no callback function or if callback is not a callable function
            if (!isCallable(callbackfn)) {
                throw new TypeError('Array.prototype.reduce callback must be a function');
            }

            // no value to return if no initial value and an empty array
            if (length === 0 && arguments.length === 1) {
                throw new TypeError('reduce of empty array with no initial value');
            }

            var i = 0;
            var result;
            if (arguments.length >= 2) {
                result = arguments[1];
            } else {
                do {
                    if (i in self) {
                        result = self[i++];
                        break;
                    }

                    // if array contains no values, no initial value to return
                    if (++i >= length) {
                        throw new TypeError('reduce of empty array with no initial value');
                    }
                } while (true);
            }

            for (; i < length; i++) {
                if (i in self) {
                    result = callbackfn(result, self[i], i, object);
                }
            }

            return result;
        }
    }, !reduceCoercesToObject);

    // ES5 15.4.4.22
    // http://es5.github.com/#x15.4.4.22
    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
    var reduceRightCoercesToObject = false;
    if (ArrayPrototype.reduceRight) {
        reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) {
            return list;
        }) === 'object';
    }
    defineProperties(ArrayPrototype, {
        reduceRight: function reduceRight(callbackfn/*, initial*/) {
            var object = ES.ToObject(this);
            var self = splitString && isString(this) ? strSplit(this, '') : object;
            var length = ES.ToUint32(self.length);

            // If no callback function or if callback is not a callable function
            if (!isCallable(callbackfn)) {
                throw new TypeError('Array.prototype.reduceRight callback must be a function');
            }

            // no value to return if no initial value, empty array
            if (length === 0 && arguments.length === 1) {
                throw new TypeError('reduceRight of empty array with no initial value');
            }

            var result;
            var i = length - 1;
            if (arguments.length >= 2) {
                result = arguments[1];
            } else {
                do {
                    if (i in self) {
                        result = self[i--];
                        break;
                    }

                    // if array contains no values, no initial value to return
                    if (--i < 0) {
                        throw new TypeError('reduceRight of empty array with no initial value');
                    }
                } while (true);
            }

            if (i < 0) {
                return result;
            }

            do {
                if (i in self) {
                    result = callbackfn(result, self[i], i, object);
                }
            } while (i--);

            return result;
        }
    }, !reduceRightCoercesToObject);

    // ES5 15.4.4.14
    // http://es5.github.com/#x15.4.4.14
    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
    var hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
    defineProperties(ArrayPrototype, {
        indexOf: function indexOf(searchElement/*, fromIndex */) {
            var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
            var length = ES.ToUint32(self.length);

            if (length === 0) {
                return -1;
            }

            var i = 0;
            if (arguments.length > 1) {
                i = ES.ToInteger(arguments[1]);
            }

            // handle negative indices
            i = i >= 0 ? i : max(0, length + i);
            for (; i < length; i++) {
                if (i in self && self[i] === searchElement) {
                    return i;
                }
            }
            return -1;
        }
    }, hasFirefox2IndexOfBug);

    // ES5 15.4.4.15
    // http://es5.github.com/#x15.4.4.15
    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
    var hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;
    defineProperties(ArrayPrototype, {
        lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {
            var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
            var length = ES.ToUint32(self.length);

            if (length === 0) {
                return -1;
            }
            var i = length - 1;
            if (arguments.length > 1) {
                i = min(i, ES.ToInteger(arguments[1]));
            }
            // handle negative indices
            i = i >= 0 ? i : length - Math.abs(i);
            for (; i >= 0; i--) {
                if (i in self && searchElement === self[i]) {
                    return i;
                }
            }
            return -1;
        }
    }, hasFirefox2LastIndexOfBug);

    // ES5 15.4.4.12
    // http://es5.github.com/#x15.4.4.12
    var spliceNoopReturnsEmptyArray = (function () {
        var a = [1, 2];
        var result = a.splice();
        return a.length === 2 && isArray(result) && result.length === 0;
    }());
    defineProperties(ArrayPrototype, {
        // Safari 5.0 bug where .splice() returns undefined
        splice: function splice(start, deleteCount) {
            if (arguments.length === 0) {
                return [];
            } else {
                return array_splice.apply(this, arguments);
            }
        }
    }, !spliceNoopReturnsEmptyArray);

    var spliceWorksWithEmptyObject = (function () {
        var obj = {};
        ArrayPrototype.splice.call(obj, 0, 0, 1);
        return obj.length === 1;
    }());
    defineProperties(ArrayPrototype, {
        splice: function splice(start, deleteCount) {
            if (arguments.length === 0) {
                return [];
            }
            var args = arguments;
            this.length = max(ES.ToInteger(this.length), 0);
            if (arguments.length > 0 && typeof deleteCount !== 'number') {
                args = arraySlice(arguments);
                if (args.length < 2) {
                    pushCall(args, this.length - start);
                } else {
                    args[1] = ES.ToInteger(deleteCount);
                }
            }
            return array_splice.apply(this, args);
        }
    }, !spliceWorksWithEmptyObject);
    var spliceWorksWithLargeSparseArrays = (function () {
        // Per https://github.com/es-shims/es5-shim/issues/295
        // Safari 7/8 breaks with sparse arrays of size 1e5 or greater
        var arr = new $Array(1e5);
        // note: the index MUST be 8 or larger or the test will false pass
        arr[8] = 'x';
        arr.splice(1, 1);
        // note: this test must be defined *after* the indexOf shim
        // per https://github.com/es-shims/es5-shim/issues/313
        return arr.indexOf('x') === 7;
    }());
    var spliceWorksWithSmallSparseArrays = (function () {
        // Per https://github.com/es-shims/es5-shim/issues/295
        // Opera 12.15 breaks on this, no idea why.
        var n = 256;
        var arr = [];
        arr[n] = 'a';
        arr.splice(n + 1, 0, 'b');
        return arr[n] === 'a';
    }());
    defineProperties(ArrayPrototype, {
        splice: function splice(start, deleteCount) {
            var O = ES.ToObject(this);
            var A = [];
            var len = ES.ToUint32(O.length);
            var relativeStart = ES.ToInteger(start);
            var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);
            var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);

            var k = 0;
            var from;
            while (k < actualDeleteCount) {
                from = $String(actualStart + k);
                if (owns(O, from)) {
                    A[k] = O[from];
                }
                k += 1;
            }

            var items = arraySlice(arguments, 2);
            var itemCount = items.length;
            var to;
            if (itemCount < actualDeleteCount) {
                k = actualStart;
                var maxK = len - actualDeleteCount;
                while (k < maxK) {
                    from = $String(k + actualDeleteCount);
                    to = $String(k + itemCount);
                    if (owns(O, from)) {
                        O[to] = O[from];
                    } else {
                        delete O[to];
                    }
                    k += 1;
                }
                k = len;
                var minK = len - actualDeleteCount + itemCount;
                while (k > minK) {
                    delete O[k - 1];
                    k -= 1;
                }
            } else if (itemCount > actualDeleteCount) {
                k = len - actualDeleteCount;
                while (k > actualStart) {
                    from = $String(k + actualDeleteCount - 1);
                    to = $String(k + itemCount - 1);
                    if (owns(O, from)) {
                        O[to] = O[from];
                    } else {
                        delete O[to];
                    }
                    k -= 1;
                }
            }
            k = actualStart;
            for (var i = 0; i < items.length; ++i) {
                O[k] = items[i];
                k += 1;
            }
            O.length = len - actualDeleteCount + itemCount;

            return A;
        }
    }, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);

    var originalJoin = ArrayPrototype.join;
    var hasStringJoinBug;
    try {
        hasStringJoinBug = Array.prototype.join.call('123', ',') !== '1,2,3';
    } catch (e) {
        hasStringJoinBug = true;
    }
    if (hasStringJoinBug) {
        defineProperties(ArrayPrototype, {
            join: function join(separator) {
                var sep = typeof separator === 'undefined' ? ',' : separator;
                return originalJoin.call(isString(this) ? strSplit(this, '') : this, sep);
            }
        }, hasStringJoinBug);
    }

    var hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';
    if (hasJoinUndefinedBug) {
        defineProperties(ArrayPrototype, {
            join: function join(separator) {
                var sep = typeof separator === 'undefined' ? ',' : separator;
                return originalJoin.call(this, sep);
            }
        }, hasJoinUndefinedBug);
    }

    var pushShim = function push(item) {
        var O = ES.ToObject(this);
        var n = ES.ToUint32(O.length);
        var i = 0;
        while (i < arguments.length) {
            O[n + i] = arguments[i];
            i += 1;
        }
        O.length = n + i;
        return n + i;
    };

    var pushIsNotGeneric = (function () {
        var obj = {};
        var result = Array.prototype.push.call(obj, undefined);
        return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);
    }());
    defineProperties(ArrayPrototype, {
        push: function push(item) {
            if (isArray(this)) {
                return array_push.apply(this, arguments);
            }
            return pushShim.apply(this, arguments);
        }
    }, pushIsNotGeneric);

    // This fixes a very weird bug in Opera 10.6 when pushing `undefined
    var pushUndefinedIsWeird = (function () {
        var arr = [];
        var result = arr.push(undefined);
        return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);
    }());
    defineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);

    // ES5 15.2.3.14
    // http://es5.github.io/#x15.4.4.10
    // Fix boxed string bug
    defineProperties(ArrayPrototype, {
        slice: function (start, end) {
            var arr = isString(this) ? strSplit(this, '') : this;
            return arraySliceApply(arr, arguments);
        }
    }, splitString);

    var sortIgnoresNonFunctions = (function () {
        try {
            [1, 2].sort(null);
            [1, 2].sort({});
            return true;
        } catch (e) {}
        return false;
    }());
    var sortThrowsOnRegex = (function () {
        // this is a problem in Firefox 4, in which `typeof /a/ === 'function'`
        try {
            [1, 2].sort(/a/);
            return false;
        } catch (e) {}
        return true;
    }());
    var sortIgnoresUndefined = (function () {
        // applies in IE 8, for one.
        try {
            [1, 2].sort(undefined);
            return true;
        } catch (e) {}
        return false;
    }());
    defineProperties(ArrayPrototype, {
        sort: function sort(compareFn) {
            if (typeof compareFn === 'undefined') {
                return arraySort(this);
            }
            if (!isCallable(compareFn)) {
                throw new TypeError('Array.prototype.sort callback must be a function');
            }
            return arraySort(this, compareFn);
        }
    }, sortIgnoresNonFunctions || !sortIgnoresUndefined || !sortThrowsOnRegex);

    //
    // Object
    // ======
    //

    // ES5 15.2.3.14
    // http://es5.github.com/#x15.2.3.14

    // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
    var hasDontEnumBug = !isEnum({ 'toString': null }, 'toString');
    var hasProtoEnumBug = isEnum(function () {}, 'prototype');
    var hasStringEnumBug = !owns('x', '0');
    var equalsConstructorPrototype = function (o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
    };
    var blacklistedKeys = {
        $window: true,
        $console: true,
        $parent: true,
        $self: true,
        $frame: true,
        $frames: true,
        $frameElement: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $external: true
    };
    var hasAutomationEqualityBug = (function () {
        /* globals window */
        if (typeof window === 'undefined') {
            return false;
        }
        for (var k in window) {
            try {
                if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {
                    equalsConstructorPrototype(window[k]);
                }
            } catch (e) {
                return true;
            }
        }
        return false;
    }());
    var equalsConstructorPrototypeIfNotBuggy = function (object) {
        if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
            return equalsConstructorPrototype(object);
        }
        try {
            return equalsConstructorPrototype(object);
        } catch (e) {
            return false;
        }
    };
    var dontEnums = [
        'toString',
        'toLocaleString',
        'valueOf',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'constructor'
    ];
    var dontEnumsLength = dontEnums.length;

    // taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js
    // can be replaced with require('is-arguments') if we ever use a build process instead
    var isStandardArguments = function isArguments(value) {
        return toStr(value) === '[object Arguments]';
    };
    var isLegacyArguments = function isArguments(value) {
        return value !== null &&
            typeof value === 'object' &&
            typeof value.length === 'number' &&
            value.length >= 0 &&
            !isArray(value) &&
            isCallable(value.callee);
    };
    var isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;

    defineProperties($Object, {
        keys: function keys(object) {
            var isFn = isCallable(object);
            var isArgs = isArguments(object);
            var isObject = object !== null && typeof object === 'object';
            var isStr = isObject && isString(object);

            if (!isObject && !isFn && !isArgs) {
                throw new TypeError('Object.keys called on a non-object');
            }

            var theKeys = [];
            var skipProto = hasProtoEnumBug && isFn;
            if ((isStr && hasStringEnumBug) || isArgs) {
                for (var i = 0; i < object.length; ++i) {
                    pushCall(theKeys, $String(i));
                }
            }

            if (!isArgs) {
                for (var name in object) {
                    if (!(skipProto && name === 'prototype') && owns(object, name)) {
                        pushCall(theKeys, $String(name));
                    }
                }
            }

            if (hasDontEnumBug) {
                var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
                for (var j = 0; j < dontEnumsLength; j++) {
                    var dontEnum = dontEnums[j];
                    if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {
                        pushCall(theKeys, dontEnum);
                    }
                }
            }
            return theKeys;
        }
    });

    var keysWorksWithArguments = $Object.keys && (function () {
        // Safari 5.0 bug
        return $Object.keys(arguments).length === 2;
    }(1, 2));
    var keysHasArgumentsLengthBug = $Object.keys && (function () {
        var argKeys = $Object.keys(arguments);
        return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;
    }(1));
    var originalKeys = $Object.keys;
    defineProperties($Object, {
        keys: function keys(object) {
            if (isArguments(object)) {
                return originalKeys(arraySlice(object));
            } else {
                return originalKeys(object);
            }
        }
    }, !keysWorksWithArguments || keysHasArgumentsLengthBug);

    //
    // Date
    // ====
    //

    var hasNegativeMonthYearBug = new Date(-3509827329600292).getUTCMonth() !== 0;
    var aNegativeTestDate = new Date(-1509842289600292);
    var aPositiveTestDate = new Date(1449662400000);
    var hasToUTCStringFormatBug = aNegativeTestDate.toUTCString() !== 'Mon, 01 Jan -45875 11:59:59 GMT';
    var hasToDateStringFormatBug;
    var hasToStringFormatBug;
    var timeZoneOffset = aNegativeTestDate.getTimezoneOffset();
    if (timeZoneOffset < -720) {
        hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Tue Jan 02 -45875';
        hasToStringFormatBug = !(/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
    } else {
        hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Mon Jan 01 -45875';
        hasToStringFormatBug = !(/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
    }

    var originalGetFullYear = call.bind(Date.prototype.getFullYear);
    var originalGetMonth = call.bind(Date.prototype.getMonth);
    var originalGetDate = call.bind(Date.prototype.getDate);
    var originalGetUTCFullYear = call.bind(Date.prototype.getUTCFullYear);
    var originalGetUTCMonth = call.bind(Date.prototype.getUTCMonth);
    var originalGetUTCDate = call.bind(Date.prototype.getUTCDate);
    var originalGetUTCDay = call.bind(Date.prototype.getUTCDay);
    var originalGetUTCHours = call.bind(Date.prototype.getUTCHours);
    var originalGetUTCMinutes = call.bind(Date.prototype.getUTCMinutes);
    var originalGetUTCSeconds = call.bind(Date.prototype.getUTCSeconds);
    var originalGetUTCMilliseconds = call.bind(Date.prototype.getUTCMilliseconds);
    var dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    var monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var daysInMonth = function daysInMonth(month, year) {
        return originalGetDate(new Date(year, month, 0));
    };

    defineProperties(Date.prototype, {
        getFullYear: function getFullYear() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var year = originalGetFullYear(this);
            if (year < 0 && originalGetMonth(this) > 11) {
                return year + 1;
            }
            return year;
        },
        getMonth: function getMonth() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var year = originalGetFullYear(this);
            var month = originalGetMonth(this);
            if (year < 0 && month > 11) {
                return 0;
            }
            return month;
        },
        getDate: function getDate() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var year = originalGetFullYear(this);
            var month = originalGetMonth(this);
            var date = originalGetDate(this);
            if (year < 0 && month > 11) {
                if (month === 12) {
                    return date;
                }
                var days = daysInMonth(0, year + 1);
                return (days - date) + 1;
            }
            return date;
        },
        getUTCFullYear: function getUTCFullYear() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var year = originalGetUTCFullYear(this);
            if (year < 0 && originalGetUTCMonth(this) > 11) {
                return year + 1;
            }
            return year;
        },
        getUTCMonth: function getUTCMonth() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var year = originalGetUTCFullYear(this);
            var month = originalGetUTCMonth(this);
            if (year < 0 && month > 11) {
                return 0;
            }
            return month;
        },
        getUTCDate: function getUTCDate() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var year = originalGetUTCFullYear(this);
            var month = originalGetUTCMonth(this);
            var date = originalGetUTCDate(this);
            if (year < 0 && month > 11) {
                if (month === 12) {
                    return date;
                }
                var days = daysInMonth(0, year + 1);
                return (days - date) + 1;
            }
            return date;
        }
    }, hasNegativeMonthYearBug);

    defineProperties(Date.prototype, {
        toUTCString: function toUTCString() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var day = originalGetUTCDay(this);
            var date = originalGetUTCDate(this);
            var month = originalGetUTCMonth(this);
            var year = originalGetUTCFullYear(this);
            var hour = originalGetUTCHours(this);
            var minute = originalGetUTCMinutes(this);
            var second = originalGetUTCSeconds(this);
            return dayName[day] + ', ' +
                (date < 10 ? '0' + date : date) + ' ' +
                monthName[month] + ' ' +
                year + ' ' +
                (hour < 10 ? '0' + hour : hour) + ':' +
                (minute < 10 ? '0' + minute : minute) + ':' +
                (second < 10 ? '0' + second : second) + ' GMT';
        }
    }, hasNegativeMonthYearBug || hasToUTCStringFormatBug);

    // Opera 12 has `,`
    defineProperties(Date.prototype, {
        toDateString: function toDateString() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var day = this.getDay();
            var date = this.getDate();
            var month = this.getMonth();
            var year = this.getFullYear();
            return dayName[day] + ' ' +
                monthName[month] + ' ' +
                (date < 10 ? '0' + date : date) + ' ' +
                year;
        }
    }, hasNegativeMonthYearBug || hasToDateStringFormatBug);

    // can't use defineProperties here because of toString enumeration issue in IE <= 8
    if (hasNegativeMonthYearBug || hasToStringFormatBug) {
        Date.prototype.toString = function toString() {
            if (!this || !(this instanceof Date)) {
                throw new TypeError('this is not a Date object.');
            }
            var day = this.getDay();
            var date = this.getDate();
            var month = this.getMonth();
            var year = this.getFullYear();
            var hour = this.getHours();
            var minute = this.getMinutes();
            var second = this.getSeconds();
            var timezoneOffset = this.getTimezoneOffset();
            var hoursOffset = Math.floor(Math.abs(timezoneOffset) / 60);
            var minutesOffset = Math.floor(Math.abs(timezoneOffset) % 60);
            return dayName[day] + ' ' +
                monthName[month] + ' ' +
                (date < 10 ? '0' + date : date) + ' ' +
                year + ' ' +
                (hour < 10 ? '0' + hour : hour) + ':' +
                (minute < 10 ? '0' + minute : minute) + ':' +
                (second < 10 ? '0' + second : second) + ' GMT' +
                (timezoneOffset > 0 ? '-' : '+') +
                (hoursOffset < 10 ? '0' + hoursOffset : hoursOffset) +
                (minutesOffset < 10 ? '0' + minutesOffset : minutesOffset);
        };
        if (supportsDescriptors) {
            $Object.defineProperty(Date.prototype, 'toString', {
                configurable: true,
                enumerable: false,
                writable: true
            });
        }
    }

    // ES5 15.9.5.43
    // http://es5.github.com/#x15.9.5.43
    // This function returns a String value represent the instance in time
    // represented by this Date object. The format of the String is the Date Time
    // string format defined in 15.9.1.15. All fields are present in the String.
    // The time zone is always UTC, denoted by the suffix Z. If the time value of
    // this object is not a finite Number a RangeError exception is thrown.
    var negativeDate = -62198755200000;
    var negativeYearString = '-000001';
    var hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;
    var hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';

    var getTime = call.bind(Date.prototype.getTime);

    defineProperties(Date.prototype, {
        toISOString: function toISOString() {
            if (!isFinite(this) || !isFinite(getTime(this))) {
                // Adope Photoshop requires the second check.
                throw new RangeError('Date.prototype.toISOString called on non-finite value.');
            }

            var year = originalGetUTCFullYear(this);

            var month = originalGetUTCMonth(this);
            // see https://github.com/es-shims/es5-shim/issues/111
            year += Math.floor(month / 12);
            month = (month % 12 + 12) % 12;

            // the date time string format is specified in 15.9.1.15.
            var result = [month + 1, originalGetUTCDate(this), originalGetUTCHours(this), originalGetUTCMinutes(this), originalGetUTCSeconds(this)];
            year = (
                (year < 0 ? '-' : (year > 9999 ? '+' : '')) +
                strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)
            );

            for (var i = 0; i < result.length; ++i) {
                // pad months, days, hours, minutes, and seconds to have two digits.
                result[i] = strSlice('00' + result[i], -2);
            }
            // pad milliseconds to have three digits.
            return (
                year + '-' + arraySlice(result, 0, 2).join('-') +
                'T' + arraySlice(result, 2).join(':') + '.' +
                strSlice('000' + originalGetUTCMilliseconds(this), -3) + 'Z'
            );
        }
    }, hasNegativeDateBug || hasSafari51DateBug);

    // ES5 15.9.5.44
    // http://es5.github.com/#x15.9.5.44
    // This function provides a String representation of a Date object for use by
    // JSON.stringify (15.12.3).
    var dateToJSONIsSupported = (function () {
        try {
            return Date.prototype.toJSON &&
                new Date(NaN).toJSON() === null &&
                new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&
                Date.prototype.toJSON.call({ // generic
                    toISOString: function () { return true; }
                });
        } catch (e) {
            return false;
        }
    }());
    if (!dateToJSONIsSupported) {
        Date.prototype.toJSON = function toJSON(key) {
            // When the toJSON method is called with argument key, the following
            // steps are taken:

            // 1.  Let O be the result of calling ToObject, giving it the this
            // value as its argument.
            // 2. Let tv be ES.ToPrimitive(O, hint Number).
            var O = $Object(this);
            var tv = ES.ToPrimitive(O);
            // 3. If tv is a Number and is not finite, return null.
            if (typeof tv === 'number' && !isFinite(tv)) {
                return null;
            }
            // 4. Let toISO be the result of calling the [[Get]] internal method of
            // O with argument "toISOString".
            var toISO = O.toISOString;
            // 5. If IsCallable(toISO) is false, throw a TypeError exception.
            if (!isCallable(toISO)) {
                throw new TypeError('toISOString property is not callable');
            }
            // 6. Return the result of calling the [[Call]] internal method of
            //  toISO with O as the this value and an empty argument list.
            return toISO.call(O);

            // NOTE 1 The argument is ignored.

            // NOTE 2 The toJSON function is intentionally generic; it does not
            // require that its this value be a Date object. Therefore, it can be
            // transferred to other kinds of objects for use as a method. However,
            // it does require that any such object have a toISOString method. An
            // object is free to use the argument key to filter its
            // stringification.
        };
    }

    // ES5 15.9.4.2
    // http://es5.github.com/#x15.9.4.2
    // based on work shared by Daniel Friesen (dantman)
    // http://gist.github.com/303249
    var supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;
    var acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));
    var doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));
    if (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {
        // XXX global assignment won't work in embeddings that use
        // an alternate object for the context.
        /* global Date: true */
        /* eslint-disable no-undef */
        var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;
        var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());
        /* eslint-disable no-implicit-globals */
        Date = (function (NativeDate) {
        /* eslint-enable no-implicit-globals */
        /* eslint-enable no-undef */
            // Date.length === 7
            var DateShim = function Date(Y, M, D, h, m, s, ms) {
                var length = arguments.length;
                var date;
                if (this instanceof NativeDate) {
                    var seconds = s;
                    var millis = ms;
                    if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {
                        // work around a Safari 8/9 bug where it treats the seconds as signed
                        var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
                        var sToShift = Math.floor(msToShift / 1e3);
                        seconds += sToShift;
                        millis -= sToShift * 1e3;
                    }
                    date = length === 1 && $String(Y) === Y ? // isString(Y)
                        // We explicitly pass it through parse:
                        new NativeDate(DateShim.parse(Y)) :
                        // We have to manually make calls depending on argument
                        // length here
                        length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :
                        length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :
                        length >= 5 ? new NativeDate(Y, M, D, h, m) :
                        length >= 4 ? new NativeDate(Y, M, D, h) :
                        length >= 3 ? new NativeDate(Y, M, D) :
                        length >= 2 ? new NativeDate(Y, M) :
                        length >= 1 ? new NativeDate(Y instanceof NativeDate ? +Y : Y) :
                                      new NativeDate();
                } else {
                    date = NativeDate.apply(this, arguments);
                }
                if (!isPrimitive(date)) {
                    // Prevent mixups with unfixed Date object
                    defineProperties(date, { constructor: DateShim }, true);
                }
                return date;
            };

            // 15.9.1.15 Date Time String Format.
            var isoDateExpression = new RegExp('^' +
                '(\\d{4}|[+-]\\d{6})' + // four-digit year capture or sign +
                                          // 6-digit extended year
                '(?:-(\\d{2})' + // optional month capture
                '(?:-(\\d{2})' + // optional day capture
                '(?:' + // capture hours:minutes:seconds.milliseconds
                    'T(\\d{2})' + // hours capture
                    ':(\\d{2})' + // minutes capture
                    '(?:' + // optional :seconds.milliseconds
                        ':(\\d{2})' + // seconds capture
                        '(?:(\\.\\d{1,}))?' + // milliseconds capture
                    ')?' +
                '(' + // capture UTC offset component
                    'Z|' + // UTC capture
                    '(?:' + // offset specifier +/-hours:minutes
                        '([-+])' + // sign capture
                        '(\\d{2})' + // hours offset capture
                        ':(\\d{2})' + // minutes offset capture
                    ')' +
                ')?)?)?)?' +
            '$');

            var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];

            var dayFromMonth = function dayFromMonth(year, month) {
                var t = month > 1 ? 1 : 0;
                return (
                    months[month] +
                    Math.floor((year - 1969 + t) / 4) -
                    Math.floor((year - 1901 + t) / 100) +
                    Math.floor((year - 1601 + t) / 400) +
                    365 * (year - 1970)
                );
            };

            var toUTC = function toUTC(t) {
                var s = 0;
                var ms = t;
                if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {
                    // work around a Safari 8/9 bug where it treats the seconds as signed
                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
                    var sToShift = Math.floor(msToShift / 1e3);
                    s += sToShift;
                    ms -= sToShift * 1e3;
                }
                return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));
            };

            // Copy any custom methods a 3rd party library may have added
            for (var key in NativeDate) {
                if (owns(NativeDate, key)) {
                    DateShim[key] = NativeDate[key];
                }
            }

            // Copy "native" methods explicitly; they may be non-enumerable
            defineProperties(DateShim, {
                now: NativeDate.now,
                UTC: NativeDate.UTC
            }, true);
            DateShim.prototype = NativeDate.prototype;
            defineProperties(DateShim.prototype, {
                constructor: DateShim
            }, true);

            // Upgrade Date.parse to handle simplified ISO 8601 strings
            var parseShim = function parse(string) {
                var match = isoDateExpression.exec(string);
                if (match) {
                    // parse months, days, hours, minutes, seconds, and milliseconds
                    // provide default values if necessary
                    // parse the UTC offset component
                    var year = $Number(match[1]),
                        month = $Number(match[2] || 1) - 1,
                        day = $Number(match[3] || 1) - 1,
                        hour = $Number(match[4] || 0),
                        minute = $Number(match[5] || 0),
                        second = $Number(match[6] || 0),
                        millisecond = Math.floor($Number(match[7] || 0) * 1000),
                        // When time zone is missed, local offset should be used
                        // (ES 5.1 bug)
                        // see https://bugs.ecmascript.org/show_bug.cgi?id=112
                        isLocalTime = Boolean(match[4] && !match[8]),
                        signOffset = match[9] === '-' ? 1 : -1,
                        hourOffset = $Number(match[10] || 0),
                        minuteOffset = $Number(match[11] || 0),
                        result;
                    var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;
                    if (
                        hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&
                        minute < 60 && second < 60 && millisecond < 1000 &&
                        month > -1 && month < 12 && hourOffset < 24 &&
                        minuteOffset < 60 && // detect invalid offsets
                        day > -1 &&
                        day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))
                    ) {
                        result = (
                            (dayFromMonth(year, month) + day) * 24 +
                            hour +
                            hourOffset * signOffset
                        ) * 60;
                        result = (
                            (result + minute + minuteOffset * signOffset) * 60 +
                            second
                        ) * 1000 + millisecond;
                        if (isLocalTime) {
                            result = toUTC(result);
                        }
                        if (-8.64e15 <= result && result <= 8.64e15) {
                            return result;
                        }
                    }
                    return NaN;
                }
                return NativeDate.parse.apply(this, arguments);
            };
            defineProperties(DateShim, { parse: parseShim });

            return DateShim;
        }(Date));
        /* global Date: false */
    }

    // ES5 15.9.4.4
    // http://es5.github.com/#x15.9.4.4
    if (!Date.now) {
        Date.now = function now() {
            return new Date().getTime();
        };
    }

    //
    // Number
    // ======
    //

    // ES5.1 15.7.4.5
    // http://es5.github.com/#x15.7.4.5
    var hasToFixedBugs = NumberPrototype.toFixed && (
      (0.00008).toFixed(3) !== '0.000' ||
      (0.9).toFixed(0) !== '1' ||
      (1.255).toFixed(2) !== '1.25' ||
      (1000000000000000128).toFixed(0) !== '1000000000000000128'
    );

    var toFixedHelpers = {
        base: 1e7,
        size: 6,
        data: [0, 0, 0, 0, 0, 0],
        multiply: function multiply(n, c) {
            var i = -1;
            var c2 = c;
            while (++i < toFixedHelpers.size) {
                c2 += n * toFixedHelpers.data[i];
                toFixedHelpers.data[i] = c2 % toFixedHelpers.base;
                c2 = Math.floor(c2 / toFixedHelpers.base);
            }
        },
        divide: function divide(n) {
            var i = toFixedHelpers.size;
            var c = 0;
            while (--i >= 0) {
                c += toFixedHelpers.data[i];
                toFixedHelpers.data[i] = Math.floor(c / n);
                c = (c % n) * toFixedHelpers.base;
            }
        },
        numToString: function numToString() {
            var i = toFixedHelpers.size;
            var s = '';
            while (--i >= 0) {
                if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {
                    var t = $String(toFixedHelpers.data[i]);
                    if (s === '') {
                        s = t;
                    } else {
                        s += strSlice('0000000', 0, 7 - t.length) + t;
                    }
                }
            }
            return s;
        },
        pow: function pow(x, n, acc) {
            return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));
        },
        log: function log(x) {
            var n = 0;
            var x2 = x;
            while (x2 >= 4096) {
                n += 12;
                x2 /= 4096;
            }
            while (x2 >= 2) {
                n += 1;
                x2 /= 2;
            }
            return n;
        }
    };

    var toFixedShim = function toFixed(fractionDigits) {
        var f, x, s, m, e, z, j, k;

        // Test for NaN and round fractionDigits down
        f = $Number(fractionDigits);
        f = isActualNaN(f) ? 0 : Math.floor(f);

        if (f < 0 || f > 20) {
            throw new RangeError('Number.toFixed called with invalid number of decimals');
        }

        x = $Number(this);

        if (isActualNaN(x)) {
            return 'NaN';
        }

        // If it is too big or small, return the string value of the number
        if (x <= -1e21 || x >= 1e21) {
            return $String(x);
        }

        s = '';

        if (x < 0) {
            s = '-';
            x = -x;
        }

        m = '0';

        if (x > 1e-21) {
            // 1e-21 < x < 1e21
            // -70 < log2(x) < 70
            e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;
            z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));
            z *= 0x10000000000000; // Math.pow(2, 52);
            e = 52 - e;

            // -18 < e < 122
            // x = z / 2 ^ e
            if (e > 0) {
                toFixedHelpers.multiply(0, z);
                j = f;

                while (j >= 7) {
                    toFixedHelpers.multiply(1e7, 0);
                    j -= 7;
                }

                toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);
                j = e - 1;

                while (j >= 23) {
                    toFixedHelpers.divide(1 << 23);
                    j -= 23;
                }

                toFixedHelpers.divide(1 << j);
                toFixedHelpers.multiply(1, 1);
                toFixedHelpers.divide(2);
                m = toFixedHelpers.numToString();
            } else {
                toFixedHelpers.multiply(0, z);
                toFixedHelpers.multiply(1 << (-e), 0);
                m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);
            }
        }

        if (f > 0) {
            k = m.length;

            if (k <= f) {
                m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;
            } else {
                m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);
            }
        } else {
            m = s + m;
        }

        return m;
    };
    defineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);

    var hasToPrecisionUndefinedBug = (function () {
        try {
            return 1.0.toPrecision(undefined) === '1';
        } catch (e) {
            return true;
        }
    }());
    var originalToPrecision = NumberPrototype.toPrecision;
    defineProperties(NumberPrototype, {
        toPrecision: function toPrecision(precision) {
            return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);
        }
    }, hasToPrecisionUndefinedBug);

    //
    // String
    // ======
    //

    // ES5 15.5.4.14
    // http://es5.github.com/#x15.5.4.14

    // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
    // Many browsers do not split properly with regular expressions or they
    // do not perform the split correctly under obscure conditions.
    // See http://blog.stevenlevithan.com/archives/cross-browser-split
    // I've tested in many browsers and this seems to cover the deviant ones:
    //    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
    //    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
    //    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
    //       [undefined, "t", undefined, "e", ...]
    //    ''.split(/.?/) should be [], not [""]
    //    '.'.split(/()()/) should be ["."], not ["", "", "."]

    if (
        'ab'.split(/(?:ab)*/).length !== 2 ||
        '.'.split(/(.?)(.?)/).length !== 4 ||
        'tesst'.split(/(s)*/)[1] === 't' ||
        'test'.split(/(?:)/, -1).length !== 4 ||
        ''.split(/.?/).length ||
        '.'.split(/()()/).length > 1
    ) {
        (function () {
            var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group
            var maxSafe32BitInt = Math.pow(2, 32) - 1;

            StringPrototype.split = function (separator, limit) {
                var string = String(this);
                if (typeof separator === 'undefined' && limit === 0) {
                    return [];
                }

                // If `separator` is not a regex, use native split
                if (!isRegex(separator)) {
                    return strSplit(this, separator, limit);
                }

                var output = [];
                var flags = (separator.ignoreCase ? 'i' : '') +
                            (separator.multiline ? 'm' : '') +
                            (separator.unicode ? 'u' : '') + // in ES6
                            (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6
                    lastLastIndex = 0,
                    // Make `global` and avoid `lastIndex` issues by working with a copy
                    separator2, match, lastIndex, lastLength;
                var separatorCopy = new RegExp(separator.source, flags + 'g');
                if (!compliantExecNpcg) {
                    // Doesn't need flags gy, but they don't hurt
                    separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
                }
                /* Values for `limit`, per the spec:
                 * If undefined: 4294967295 // maxSafe32BitInt
                 * If 0, Infinity, or NaN: 0
                 * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
                 * If negative number: 4294967296 - Math.floor(Math.abs(limit))
                 * If other: Type-convert, then use the above rules
                 */
                var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);
                match = separatorCopy.exec(string);
                while (match) {
                    // `separatorCopy.lastIndex` is not reliable cross-browser
                    lastIndex = match.index + match[0].length;
                    if (lastIndex > lastLastIndex) {
                        pushCall(output, strSlice(string, lastLastIndex, match.index));
                        // Fix browsers whose `exec` methods don't consistently return `undefined` for
                        // nonparticipating capturing groups
                        if (!compliantExecNpcg && match.length > 1) {
                            /* eslint-disable no-loop-func */
                            match[0].replace(separator2, function () {
                                for (var i = 1; i < arguments.length - 2; i++) {
                                    if (typeof arguments[i] === 'undefined') {
                                        match[i] = void 0;
                                    }
                                }
                            });
                            /* eslint-enable no-loop-func */
                        }
                        if (match.length > 1 && match.index < string.length) {
                            array_push.apply(output, arraySlice(match, 1));
                        }
                        lastLength = match[0].length;
                        lastLastIndex = lastIndex;
                        if (output.length >= splitLimit) {
                            break;
                        }
                    }
                    if (separatorCopy.lastIndex === match.index) {
                        separatorCopy.lastIndex++; // Avoid an infinite loop
                    }
                    match = separatorCopy.exec(string);
                }
                if (lastLastIndex === string.length) {
                    if (lastLength || !separatorCopy.test('')) {
                        pushCall(output, '');
                    }
                } else {
                    pushCall(output, strSlice(string, lastLastIndex));
                }
                return output.length > splitLimit ? arraySlice(output, 0, splitLimit) : output;
            };
        }());

    // [bugfix, chrome]
    // If separator is undefined, then the result array contains just one String,
    // which is the this value (converted to a String). If limit is not undefined,
    // then the output array is truncated so that it contains no more than limit
    // elements.
    // "0".split(undefined, 0) -> []
    } else if ('0'.split(void 0, 0).length) {
        StringPrototype.split = function split(separator, limit) {
            if (typeof separator === 'undefined' && limit === 0) {
                return [];
            }
            return strSplit(this, separator, limit);
        };
    }

    var str_replace = StringPrototype.replace;
    var replaceReportsGroupsCorrectly = (function () {
        var groups = [];
        'x'.replace(/x(.)?/g, function (match, group) {
            pushCall(groups, group);
        });
        return groups.length === 1 && typeof groups[0] === 'undefined';
    }());

    if (!replaceReportsGroupsCorrectly) {
        StringPrototype.replace = function replace(searchValue, replaceValue) {
            var isFn = isCallable(replaceValue);
            var hasCapturingGroups = isRegex(searchValue) && (/\)[*?]/).test(searchValue.source);
            if (!isFn || !hasCapturingGroups) {
                return str_replace.call(this, searchValue, replaceValue);
            } else {
                var wrappedReplaceValue = function (match) {
                    var length = arguments.length;
                    var originalLastIndex = searchValue.lastIndex;
                    searchValue.lastIndex = 0;
                    var args = searchValue.exec(match) || [];
                    searchValue.lastIndex = originalLastIndex;
                    pushCall(args, arguments[length - 2], arguments[length - 1]);
                    return replaceValue.apply(this, args);
                };
                return str_replace.call(this, searchValue, wrappedReplaceValue);
            }
        };
    }

    // ECMA-262, 3rd B.2.3
    // Not an ECMAScript standard, although ECMAScript 3rd Edition has a
    // non-normative section suggesting uniform semantics and it should be
    // normalized across all browsers
    // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
    var string_substr = StringPrototype.substr;
    var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
    defineProperties(StringPrototype, {
        substr: function substr(start, length) {
            var normalizedStart = start;
            if (start < 0) {
                normalizedStart = max(this.length + start, 0);
            }
            return string_substr.call(this, normalizedStart, length);
        }
    }, hasNegativeSubstrBug);

    // ES5 15.5.4.20
    // whitespace from: http://es5.github.io/#x15.5.4.20
    var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
        '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
        '\u2029\uFEFF';
    var zeroWidth = '\u200b';
    var wsRegexChars = '[' + ws + ']';
    var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');
    var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');
    var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());
    defineProperties(StringPrototype, {
        // http://blog.stevenlevithan.com/archives/faster-trim-javascript
        // http://perfectionkills.com/whitespace-deviations/
        trim: function trim() {
            if (typeof this === 'undefined' || this === null) {
                throw new TypeError("can't convert " + this + ' to object');
            }
            return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
        }
    }, hasTrimWhitespaceBug);
    var trim = call.bind(String.prototype.trim);

    var hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;
    defineProperties(StringPrototype, {
        lastIndexOf: function lastIndexOf(searchString) {
            if (typeof this === 'undefined' || this === null) {
                throw new TypeError("can't convert " + this + ' to object');
            }
            var S = $String(this);
            var searchStr = $String(searchString);
            var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;
            var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);
            var start = min(max(pos, 0), S.length);
            var searchLen = searchStr.length;
            var k = start + searchLen;
            while (k > 0) {
                k = max(0, k - searchLen);
                var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);
                if (index !== -1) {
                    return k + index;
                }
            }
            return -1;
        }
    }, hasLastIndexBug);

    var originalLastIndexOf = StringPrototype.lastIndexOf;
    defineProperties(StringPrototype, {
        lastIndexOf: function lastIndexOf(searchString) {
            return originalLastIndexOf.apply(this, arguments);
        }
    }, StringPrototype.lastIndexOf.length !== 1);

    // ES-5 15.1.2.2
    /* eslint-disable radix */
    if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {
    /* eslint-enable radix */
        /* global parseInt: true */
        parseInt = (function (origParseInt) {
            var hexRegex = /^[\-+]?0[xX]/;
            return function parseInt(str, radix) {
                var string = trim(String(str));
                var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);
                return origParseInt(string, defaultedRadix);
            };
        }(parseInt));
    }

    // https://es5.github.io/#x15.1.2.3
    if (1 / parseFloat('-0') !== -Infinity) {
        /* global parseFloat: true */
        parseFloat = (function (origParseFloat) {
            return function parseFloat(string) {
                var inputString = trim(String(string));
                var result = origParseFloat(inputString);
                return result === 0 && strSlice(inputString, 0, 1) === '-' ? -0 : result;
            };
        }(parseFloat));
    }

    if (String(new RangeError('test')) !== 'RangeError: test') {
        var errorToStringShim = function toString() {
            if (typeof this === 'undefined' || this === null) {
                throw new TypeError("can't convert " + this + ' to object');
            }
            var name = this.name;
            if (typeof name === 'undefined') {
                name = 'Error';
            } else if (typeof name !== 'string') {
                name = $String(name);
            }
            var msg = this.message;
            if (typeof msg === 'undefined') {
                msg = '';
            } else if (typeof msg !== 'string') {
                msg = $String(msg);
            }
            if (!name) {
                return msg;
            }
            if (!msg) {
                return name;
            }
            return name + ': ' + msg;
        };
        // can't use defineProperties here because of toString enumeration issue in IE <= 8
        Error.prototype.toString = errorToStringShim;
    }

    if (supportsDescriptors) {
        var ensureNonEnumerable = function (obj, prop) {
            if (isEnum(obj, prop)) {
                var desc = Object.getOwnPropertyDescriptor(obj, prop);
                if (desc.configurable) {
                    desc.enumerable = false;
                    Object.defineProperty(obj, prop, desc);
                }
            }
        };
        ensureNonEnumerable(Error.prototype, 'message');
        if (Error.prototype.message !== '') {
            Error.prototype.message = '';
        }
        ensureNonEnumerable(Error.prototype, 'name');
    }

    if (String(/a/mig) !== '/a/gim') {
        var regexToString = function toString() {
            var str = '/' + this.source + '/';
            if (this.global) {
                str += 'g';
            }
            if (this.ignoreCase) {
                str += 'i';
            }
            if (this.multiline) {
                str += 'm';
            }
            return str;
        };
        // can't use defineProperties here because of toString enumeration issue in IE <= 8
        RegExp.prototype.toString = regexToString;
    }
}));

},{}],11:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   3.3.1
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.ES6Promise = factory());
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  return typeof x === 'function' || typeof x === 'object' && x !== null;
}

function isFunction(x) {
  return typeof x === 'function';
}

var _isArray = undefined;
if (!Array.isArray) {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
} else {
  _isArray = Array.isArray;
}

var isArray = _isArray;

var len = 0;
var vertxNext = undefined;
var customSchedulerFn = undefined;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  return function () {
    vertxNext(flush);
  };
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var r = require;
    var vertx = r('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = undefined;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && typeof require === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var _arguments = arguments;

  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;

  if (_state) {
    (function () {
      var callback = _arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    })();
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  _resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(16);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var GET_THEN_ERROR = new ErrorObject();

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    GET_THEN_ERROR.error = error;
    return GET_THEN_ERROR;
  }
}

function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
  try {
    then.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        _resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      _reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      _reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    _reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return _resolve(promise, value);
    }, function (reason) {
      return _reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$) {
  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$ === GET_THEN_ERROR) {
      _reject(promise, GET_THEN_ERROR.error);
    } else if (then$$ === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$)) {
      handleForeignThenable(promise, maybeThenable, then$$);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function _resolve(promise, value) {
  if (promise === value) {
    _reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function _reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;

  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = undefined,
      callback = undefined,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function ErrorObject() {
  this.error = null;
}

var TRY_CATCH_ERROR = new ErrorObject();

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = undefined,
      error = undefined,
      succeeded = undefined,
      failed = undefined;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      _reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
      _resolve(promise, value);
    } else if (failed) {
      _reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      _reject(promise, value);
    }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      _resolve(promise, value);
    }, function rejectPromise(reason) {
      _reject(promise, reason);
    });
  } catch (e) {
    _reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function Enumerator(Constructor, input) {
  this._instanceConstructor = Constructor;
  this.promise = new Constructor(noop);

  if (!this.promise[PROMISE_ID]) {
    makePromise(this.promise);
  }

  if (isArray(input)) {
    this._input = input;
    this.length = input.length;
    this._remaining = input.length;

    this._result = new Array(this.length);

    if (this.length === 0) {
      fulfill(this.promise, this._result);
    } else {
      this.length = this.length || 0;
      this._enumerate();
      if (this._remaining === 0) {
        fulfill(this.promise, this._result);
      }
    }
  } else {
    _reject(this.promise, validationError());
  }
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
};

Enumerator.prototype._enumerate = function () {
  var length = this.length;
  var _input = this._input;

  for (var i = 0; this._state === PENDING && i < length; i++) {
    this._eachEntry(_input[i], i);
  }
};

Enumerator.prototype._eachEntry = function (entry, i) {
  var c = this._instanceConstructor;
  var resolve$$ = c.resolve;

  if (resolve$$ === resolve) {
    var _then = getThen(entry);

    if (_then === then && entry._state !== PENDING) {
      this._settledAt(entry._state, i, entry._result);
    } else if (typeof _then !== 'function') {
      this._remaining--;
      this._result[i] = entry;
    } else if (c === Promise) {
      var promise = new c(noop);
      handleMaybeThenable(promise, entry, _then);
      this._willSettleAt(promise, i);
    } else {
      this._willSettleAt(new c(function (resolve$$) {
        return resolve$$(entry);
      }), i);
    }
  } else {
    this._willSettleAt(resolve$$(entry), i);
  }
};

Enumerator.prototype._settledAt = function (state, i, value) {
  var promise = this.promise;

  if (promise._state === PENDING) {
    this._remaining--;

    if (state === REJECTED) {
      _reject(promise, value);
    } else {
      this._result[i] = value;
    }
  }

  if (this._remaining === 0) {
    fulfill(promise, this._result);
  }
};

Enumerator.prototype._willSettleAt = function (promise, i) {
  var enumerator = this;

  subscribe(promise, undefined, function (value) {
    return enumerator._settledAt(FULFILLED, i, value);
  }, function (reason) {
    return enumerator._settledAt(REJECTED, i, reason);
  });
};

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  _reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {function} resolver
  Useful for tooling.
  @constructor
*/
function Promise(resolver) {
  this[PROMISE_ID] = nextId();
  this._result = this._state = undefined;
  this._subscribers = [];

  if (noop !== resolver) {
    typeof resolver !== 'function' && needsResolver();
    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
  }
}

Promise.all = all;
Promise.race = race;
Promise.resolve = resolve;
Promise.reject = reject;
Promise._setScheduler = setScheduler;
Promise._setAsap = setAsap;
Promise._asap = asap;

Promise.prototype = {
  constructor: Promise,

  /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    })['catch'](function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
  */
  then: then,

  /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
  
    ```js
    function findAuthor(){
      throw new Error('couldn't find that author');
    }
  
    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }
  
    // async with promises
    findAuthor()['catch'](function(reason){
      // something went wrong
    });
    ```
  
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
  */
  'catch': function _catch(onRejection) {
    return this.then(null, onRejection);
  }
};

function polyfill() {
    var local = undefined;

    if (typeof global !== 'undefined') {
        local = global;
    } else if (typeof self !== 'undefined') {
        local = self;
    } else {
        try {
            local = Function('return this')();
        } catch (e) {
            throw new Error('polyfill failed because global object is unavailable in this environment');
        }
    }

    var P = local.Promise;

    if (P) {
        var promiseToString = null;
        try {
            promiseToString = Object.prototype.toString.call(P.resolve());
        } catch (e) {
            // silently ignored
        }

        if (promiseToString === '[object Promise]' && !P.cast) {
            return;
        }
    }

    local.Promise = Promise;
}

polyfill();
// Strange compat..
Promise.polyfill = polyfill;
Promise.Promise = Promise;

return Promise;

})));

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":13}],12:[function(require,module,exports){
'use strict';
/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],13:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],14:[function(require,module,exports){
"use strict";
var promiseExtensions_1 = require("./../helpers/promiseExtensions");
var activityManagementAPI_1 = require("./activityManagementAPI");
var activityAGM_1 = require("../core/activityAGM");
var ActivityAPI = (function () {
    function ActivityAPI(manager, my) {
        this.version = "2.2.4";
        this.__mgr = manager;
        this._my = my;
        this.all = new activityManagementAPI_1.ActivityManagementAPI(manager, my);
    }
    ActivityAPI.prototype.ready = function (callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            _this.__mgr.ready()
                .then(function () {
                resolve(_this);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    Object.defineProperty(ActivityAPI.prototype, "my", {
        get: function () {
            return this._my;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityAPI.prototype, "aware", {
        get: function () {
            return this._my.window !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityAPI.prototype, "inActivity", {
        get: function () {
            return this.aware && this._my.activity !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityAPI.prototype, "agm", {
        get: function () {
            if (!this.aware) {
                return undefined;
            }
            if (!this.inActivity) {
                return new activityAGM_1.ActivityAGM(null);
            }
            return this._my.activity.agm;
        },
        enumerable: true,
        configurable: true
    });
    return ActivityAPI;
}());
exports.ActivityAPI = ActivityAPI;

},{"../core/activityAGM":22,"./../helpers/promiseExtensions":33,"./activityManagementAPI":15}],15:[function(require,module,exports){
"use strict";
var util = require("./../helpers/util");
var ActivityManagementAPI = (function () {
    function ActivityManagementAPI(manager, my) {
        this._m = manager;
        this._my = my;
        this.activityTypes = {
            get: this._getActivityTypesWrapper.bind(this),
            register: this._m.registerActivityType.bind(this._m),
            unregister: this._m.unregisterActivityType.bind(this._m),
            subscribe: this._m.subscribeActivityTypeEvents.bind(this._m),
            unsubscribe: undefined,
            initiate: this._m.initiate.bind(this._m)
        };
        this.windowTypes = {
            get: this._getWindowTypesWrapper.bind(this),
            registerFactory: this._m.registerWindowFactory.bind(this._m),
            unregisterFactory: this._m.unregisterWindowFactory.bind(this._m),
            subscribe: this._m.subscribeWindowTypeEvents.bind(this._m),
            unsubscribe: undefined
        };
        this.windows = {
            get: this._m.getWindows.bind(this._m),
            subscribe: this._m.subscribeWindowEvents.bind(this._m),
            announce: this._m.announceWindow.bind(this._m),
            unsubscribe: undefined,
            create: this._m.createWindow.bind(this._m)
        };
        this.instances = {
            get: this._m.getActivities.bind(this._m),
            subscribe: this._m.subscribeActivityEvents.bind(this._m),
            unsubscribe: undefined
        };
    }
    ActivityManagementAPI.prototype._getActivityTypesWrapper = function (name) {
        if (util.isUndefined(name)) {
            return this._m.getActivityTypes();
        }
        return this._m.getActivityType(name);
    };
    ActivityManagementAPI.prototype._getWindowTypesWrapper = function (name) {
        if (util.isUndefined(name)) {
            return this._m.getWindowTypes();
        }
        return this._m.getWindowType(name);
    };
    return ActivityManagementAPI;
}());
exports.ActivityManagementAPI = ActivityManagementAPI;

},{"./../helpers/util":35}],16:[function(require,module,exports){
"use strict";
var logger_1 = require("./../helpers/logger");
var util = require("./../helpers/util");
var ActivityMy = (function () {
    function ActivityMy(manager) {
        var _this = this;
        this._myActivityJoinedCallbacks = [];
        this._myActivityRemovedCallbacks = [];
        this._myContextUpdateCallbacks = [];
        this._logger = logger_1.Logger.Get(this);
        this._m = manager;
        manager.ready()
            .then(function (am) {
            am.subscribeActivityContextChanged(_this._subscribeMyContextChanged.bind(_this));
            am.subscribeWindowEvents(_this._subscribeMyWindowEvent.bind(_this));
        });
    }
    Object.defineProperty(ActivityMy.prototype, "window", {
        get: function () {
            if (util.isUndefinedOrNull(this._w)) {
                var announcedWindows = this._m.announcedWindows;
                if (announcedWindows.length > 0) {
                    this._w = announcedWindows[0];
                }
            }
            return this._w;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityMy.prototype, "activity", {
        get: function () {
            var myWin = this.window;
            if (util.isUndefinedOrNull(myWin)) {
                return undefined;
            }
            return myWin.activity;
        },
        enumerable: true,
        configurable: true
    });
    ActivityMy.prototype.createWindow = function (windowType) {
        return this._m.createWindow(this.activity, windowType);
    };
    ActivityMy.prototype.createStackedWindows = function (windowTypes, timeout) {
        return this._m.createStackedWindows(this.activity, windowTypes, timeout);
    };
    Object.defineProperty(ActivityMy.prototype, "context", {
        get: function () {
            var activity = this.activity;
            if (util.isUndefined(activity)) {
                return {};
            }
            return activity.context;
        },
        enumerable: true,
        configurable: true
    });
    ActivityMy.prototype.onActivityJoined = function (callback) {
        this._myActivityJoinedCallbacks.push(callback);
        var myWin = this.window;
        if (!util.isUndefinedOrNull(myWin) && !util.isUndefinedOrNull(myWin.activity)) {
            callback(myWin.activity);
        }
    };
    ActivityMy.prototype.onActivityLeft = function (callback) {
        this._myActivityRemovedCallbacks.push(callback);
    };
    ActivityMy.prototype.onContextChanged = function (callback) {
        this._myContextUpdateCallbacks.push(callback);
        var myWin = this.window;
        if (util.isUndefinedOrNull(myWin)) {
            return;
        }
        var activity = myWin.activity;
        if (util.isUndefinedOrNull(activity)) {
            return;
        }
        callback(activity.context, activity.context, [], activity);
    };
    ActivityMy.prototype._subscribeMyContextChanged = function (activity, context, delta, removed) {
        var myWin = this.window;
        if (util.isUndefinedOrNull(myWin)) {
            return;
        }
        var myActivity = myWin.activity;
        if (util.isUndefinedOrNull(myActivity)) {
            return;
        }
        if (activity.id !== myActivity.id) {
            return;
        }
        this._notifyMyContextChanged(activity, context, delta, removed);
    };
    ActivityMy.prototype._subscribeMyWindowEvent = function (activity, window, event) {
        if (util.isUndefinedOrNull(this.window)) {
            return;
        }
        if (this.window.id !== window.id) {
            return;
        }
        if (event === "joined") {
            this._notifyOnJoined(activity);
        }
        else {
            this._notifyMyWindowEvent(activity, this._myActivityRemovedCallbacks);
        }
    };
    ActivityMy.prototype._notifyMyWindowEvent = function (activity, callbackStore) {
        for (var index = 0; index < callbackStore.length; index++) {
            var element = callbackStore[index];
            try {
                element(activity, event);
            }
            catch (e) {
                this._logger.warn('error in user callback ' + e);
            }
        }
    };
    ActivityMy.prototype._notifyMyContextChanged = function (activity, context, delta, removed) {
        delta = delta || {};
        removed = removed || [];
        for (var index = 0; index < this._myContextUpdateCallbacks.length; index++) {
            var element = this._myContextUpdateCallbacks[index];
            try {
                element(context, delta, removed, activity);
            }
            catch (e) {
                this._logger.warn('error in user callback ' + e);
            }
        }
    };
    ActivityMy.prototype._notifyOnJoined = function (activity) {
        this._notifyMyWindowEvent(activity, this._myActivityJoinedCallbacks);
        this._notifyMyContextChanged(activity, activity.context);
    };
    return ActivityMy;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityMy;

},{"./../helpers/logger":32,"./../helpers/util":35}],17:[function(require,module,exports){
"use strict";
var ActivityConfig = (function () {
    function ActivityConfig() {
    }
    return ActivityConfig;
}());
exports.ActivityConfig = ActivityConfig;

},{}],18:[function(require,module,exports){
"use strict";
require("es6-promise");
var hcBridge_1 = require("./bridges/hcBridge");
var activityManager_1 = require("./core/activityManager");
var activityMyAPI_1 = require("./API/activityMyAPI");
var logger_1 = require("./helpers/logger");
var util = require("./helpers/util");
var activityConfig_1 = require("./activityConfig");
var activityAPI_1 = require("./API/activityAPI");
var activityAGM_1 = require("./core/activityAGM");
var activity = function (config) {
    config = config || new activityConfig_1.ActivityConfig;
    if (!util.isUndefined(config.logLevel)) {
        logger_1.Logger.Level = config.logLevel;
    }
    if (!util.isUndefinedOrNull(config.logger)) {
        logger_1.Logger.GlueLogger = config.logger;
    }
    var bridge;
    if (!util.isUndefined(window.htmlContainer)) {
        bridge = new hcBridge_1['default']();
    }
    else {
        throw new Error("Activity not supported in in browser");
    }
    if (!bridge) {
        throw new Error("A bridge to native activity is needed to create activity lib.");
    }
    activityAGM_1.ActivityAGM.AGM = config.agm;
    var activityManager = new activityManager_1['default'](bridge, !config.disableAutoAnnounce);
    var my = new activityMyAPI_1['default'](activityManager);
    return new activityAPI_1.ActivityAPI(activityManager, my);
};
module.exports = activity;

},{"./API/activityAPI":14,"./API/activityMyAPI":16,"./activityConfig":17,"./bridges/hcBridge":19,"./core/activityAGM":22,"./core/activityManager":23,"./helpers/logger":32,"./helpers/util":35,"es6-promise":11}],19:[function(require,module,exports){
"use strict";
var entityEvent_1 = require("../contracts/entityEvent");
var activityStatus_1 = require("../contracts/activityStatus");
var activityType_1 = require("../entities/activityType");
var windowType_1 = require("../entities/windowType");
var activity_1 = require("../entities/activity");
var activityWindow_1 = require("../entities/activityWindow");
var proxyWindowFactory_1 = require("../core/proxyWindowFactory");
var logger_1 = require("../helpers/logger");
var entityEvent_2 = require("../contracts/entityEvent");
var readyMarker_1 = require("../helpers/readyMarker");
var util = require("../helpers/util");
var entityEvent_3 = require("../contracts/entityEvent");
var HCBridge = (function () {
    function HCBridge(agm) {
        this._activityTypeEntityName = "activityType";
        this._windowTypeEntityName = "windowType";
        this._activityEntityName = "activity";
        this._windowEntityName = "activityWindow";
        this._logger = logger_1.Logger.Get(this);
        this._lastSeq = 0;
        this._eventQueue = [];
        this._activityTypeCallbacks = [];
        this._windowTypeCallbacks = [];
        this._activityCallbacks = [];
        this._windowCallbacks = [];
        this._agm = agm;
    }
    HCBridge.prototype.init = function () {
        var _this = this;
        this._readyMarker = new readyMarker_1.ReadyMarker("HC Bridge", 1);
        this._htmlContainer = window.htmlContainer.activityFacade;
        this._htmlContainer.init(this._agm ? this._agm.instance : undefined, this._hcEventHandler.bind(this), function () {
            _this._readyMarker.signal("Init done from HC");
        }, function (error) {
            _this._readyMarker.error(error);
        });
    };
    HCBridge.prototype.ready = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._readyMarker.setCallback(function (err) {
                if (!err) {
                    resolve(_this);
                }
                else {
                    _this._logger.error("Error initializing HC bridge - " + err);
                    reject(_this._readyMarker.getError());
                }
            });
        });
    };
    HCBridge.prototype._hcEventHandler = function (eventJson) {
        this._logger.trace(eventJson);
        var event = JSON.parse(eventJson);
        this._processEventBySeq(event);
    };
    HCBridge.prototype._processEventBySeq = function (event) {
        var seq = event.sequence;
        if (seq === this._lastSeq + 1) {
            this._processEvent(event);
            this._lastSeq++;
            var nextEvent = this._eventQueue[seq + 1];
            if (!util.isUndefined(nextEvent)) {
                this._logger.debug("replaying message number " + seq);
                this._processEventBySeq(nextEvent);
                delete this._eventQueue[seq + 1];
            }
        }
        else {
            this._eventQueue[seq] = event;
            this._logger.debug("Got out of order event with number " + seq + ". Will wait for previous event(s) before replaying.");
        }
    };
    HCBridge.prototype._processEvent = function (event) {
        var entityType = event.entityType;
        var eventContext = this._convertContext(event.context);
        var entity;
        switch (entityType) {
            case this._activityTypeEntityName:
                entity = HCBridge._hcToJsActivityType(event.entity);
                this._publishActivityTypeStatusChange(entity, eventContext);
                break;
            case this._windowTypeEntityName:
                entity = this._hcToJsWindowType(event.entity);
                this._publishWindowTypeStatusChange(entity, eventContext);
                break;
            case this._activityEntityName:
                entity = this._hcToJsActivity(event.entity);
                this._publishActivityStatusChange(entity, eventContext);
                break;
            case this._windowEntityName:
                entity = HCBridge._hcToJsWindow(event.entity);
                this._publishActivityWindowEvent(entity, eventContext);
                break;
        }
    };
    HCBridge.prototype._convertContext = function (hcContext) {
        if (hcContext.type === entityEvent_1.EntityEventType.StatusChange) {
            var oldStatus = new activityStatus_1.ActivityStatus(hcContext.oldStatus.state, hcContext.oldStatus.statusMessage, hcContext.oldStatus.statusTime);
            var newStatus = new activityStatus_1.ActivityStatus(hcContext.newStatus.state, hcContext.newStatus.statusMessage, hcContext.newStatus.statusTime);
            return new entityEvent_1.EntityStatusChangeEventContext(newStatus, oldStatus);
        }
        else if (hcContext.type === entityEvent_1.EntityEventType.ActivityWindowEvent) {
            var act = this._hcToJsActivity(hcContext.activity);
            return new entityEvent_1.EntityActivityWindowEventContext(act, hcContext.event);
        }
        else if (hcContext.type === entityEvent_1.EntityEventType.ActivityContextChange) {
            return new entityEvent_3.ActivityContextChangedContext(hcContext.newContext, hcContext.updated, hcContext.removed);
        }
        return new entityEvent_1.EntityEventContext(hcContext.type);
    };
    HCBridge._hcToJsWindow = function (hcWindow) {
        return new activityWindow_1['default'](hcWindow.id, hcWindow.name, hcWindow.type, hcWindow.activityId, hcWindow.instance, hcWindow.isIndependent);
    };
    HCBridge.prototype._hcToJsActivity = function (hcAct) {
        var window = hcAct.owner ? HCBridge._hcToJsWindow(hcAct.owner) : null;
        var windowId = window ? window.id : null;
        var status = new activityStatus_1.ActivityStatus(hcAct.status.state, hcAct.status.statusMessage, hcAct.status.statusTime);
        var context = JSON.parse(hcAct.context);
        return new activity_1['default'](hcAct.id, hcAct.type.name, status, context, windowId);
    };
    HCBridge._hcToJsActivityType = function (hcActType) {
        return new activityType_1['default'](hcActType.name, hcActType.ownerWindowType, hcActType.helperWindowTypes, hcActType.description);
    };
    HCBridge.prototype._hcToJsWindowType = function (hcWinType) {
        if (util.isUndefined(hcWinType.factories)) {
            hcWinType.factories = [];
        }
        var factories = hcWinType.factories.map(function (f) {
            return HCBridge._hcToJsWindowTypeFactory(f);
        });
        return new windowType_1['default'](hcWinType.name, factories);
    };
    HCBridge._hcToJsWindowTypeFactory = function (hcWinTypeFactory) {
        return new proxyWindowFactory_1.ProxyWindowFactory(hcWinTypeFactory.description);
    };
    HCBridge._getURLParameter = function (name) {
        return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [, ""])[1].replace(/\+/g, '%20')) || null;
    };
    HCBridge.prototype.getActivityTypes = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.getActivityTypes(function (infos) {
                var result = [];
                for (var index = 0; index < infos.length; index++) {
                    var info = infos[index];
                    var newActivityType = HCBridge._hcToJsActivityType(info);
                    result.push(newActivityType);
                }
                resolve(result);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.registerActivityType = function (activityTypeName, ownerWindow, helperWindows, layoutConfig, description) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (helperWindows === undefined) {
                helperWindows = [];
            }
            var config = {
                name: activityTypeName,
                ownerWindowType: ownerWindow,
                helperWindowTypes: helperWindows,
                description: description,
                layoutConfig: JSON.stringify(layoutConfig)
            };
            _this._htmlContainer.registerActivityType(JSON.stringify(config), function (info) {
                var newActivityType = HCBridge._hcToJsActivityType(info);
                resolve(newActivityType);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.unregisterActivityType = function (activityTypeName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.unregisterActivityType(activityTypeName, function (info) {
                resolve(true);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.getWindowTypes = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.getWindowTypes(function (infos) {
                var result = [];
                for (var index = 0; index < infos.length; index++) {
                    var info = infos[index];
                    var newWindowType = _this._hcToJsWindowType(info);
                    result.push(newWindowType);
                }
                resolve(result);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.registerWindowFactory = function (windowTypeName, factory) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(windowTypeName)) {
                reject("windowTypeName should be provided");
                return;
            }
            _this._htmlContainer.registerWindowFactory(windowTypeName, factory.create.bind(factory), function (info) {
                resolve(true);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.initiateActivity = function (activityType, context, callback) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activityType)) {
                reject("windowTypeName should be provided");
                return;
            }
            if (util.isUndefinedOrNull(context)) {
                context = {};
            }
            _this._htmlContainer.initiate(activityType, JSON.stringify(context), function (activityId) {
                resolve(activityId);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.getAnnouncementInfo = function () {
        var hc = window.htmlContainer;
        var context = hc.getContext();
        var result = { activityWindowId: "", activityWindowType: "", activityWindowIndependent: false, activityWindowName: "" };
        result.activityWindowType = context.activityWindowType;
        if (util.isUndefined(result.activityWindowType)) {
            result.activityWindowType = HCBridge._getURLParameter("activityWindowType");
        }
        result.activityWindowId = context.activityWindowId;
        if (util.isUndefined(result.activityWindowId)) {
            result.activityWindowId = HCBridge._getURLParameter("activityWindowId");
        }
        result.activityWindowIndependent = context.activityWindowIndependent;
        if (util.isUndefined(result.activityWindowIndependent)) {
        }
        result.activityWindowName = context.activityWindowName;
        if (util.isUndefined(result.activityWindowName)) {
            result.activityWindowName = HCBridge._getURLParameter("activityWindowName");
        }
        return result;
    };
    HCBridge.prototype.announceWindow = function (windowType, activityWindowId) {
        var _this = this;
        if (util.isUndefined(windowType)) {
            throw new Error("can not determine window type");
        }
        if (util.isUndefined(windowType)) {
            throw new Error("can not determine window activityWindowId");
        }
        this._htmlContainer.announceWindow(windowType, activityWindowId, function (error) {
            _this._logger.error("Error announcing activity window with id '" + activityWindowId + "'. " + error);
        });
    };
    HCBridge.prototype.getActivities = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._logger.trace("Executing getActivities()");
            _this._htmlContainer.getActivities(function (activitiesStr) {
                _this._logger.trace("Got getActivities() :" + activitiesStr);
                var activities = JSON.parse(activitiesStr);
                var result = activities.map(function (act) { return _this._hcToJsActivity(act); });
                resolve(result);
            }, function (error) {
                _this._logger.trace("Error in getActivities() :" + error);
                reject(error);
            });
        });
    };
    HCBridge.prototype.updateActivityContext = function (activity, context, fullReplace, removedKeys) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (util.isUndefined(removedKeys)) {
                removedKeys = [];
            }
            var options = {
                fullReplace: fullReplace,
                removedKeys: removedKeys
            };
            _this._htmlContainer.setActivityContext(activity.id, JSON.stringify(context), JSON.stringify(options), function (newContextString) {
                var newContext = JSON.parse(newContextString);
                resolve(newContext);
            }, function (error) { return reject(error); });
        });
    };
    HCBridge.prototype.getActivityWindows = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.getWindows(function (windows) {
                var result = windows.map(function (wind) { return HCBridge._hcToJsWindow(wind); });
                resolve(result);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.stopActivity = function (activity) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.stopActivity(activity.id, function (result) {
                resolve(result);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.unregisterWindowFactory = function (windowTypeName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.registerWindowFactory(windowTypeName, function (info) {
                resolve(true);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.createWindow = function (id, windowDefinition) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.createWindow(id, JSON.stringify(windowDefinition), function (id) {
                resolve(id);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.createStackedWindows = function (id, windowDefinitions, timeout) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.createStackedWindows(id, JSON.stringify(windowDefinitions), timeout, function (id) {
                resolve(id);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.onActivityTypeStatusChange = function (callback) {
        this._activityTypeCallbacks.push(callback);
    };
    HCBridge.prototype.onWindowTypeStatusChange = function (callback) {
        this._windowTypeCallbacks.push(callback);
    };
    HCBridge.prototype.onActivityStatusChange = function (callback) {
        this._activityCallbacks.push(callback);
    };
    HCBridge.prototype.onActivityWindowChange = function (callback) {
        this._windowCallbacks.push(callback);
    };
    HCBridge.prototype.getWindowBounds = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.getWindowBounds(id, function (bounds) {
                resolve(bounds);
            }, function (err) {
                reject(err);
            });
        });
    };
    HCBridge.prototype.setWindowBounds = function (id, bounds) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.setWindowBounds(id, JSON.stringify(bounds), function () {
                resolve();
            }, function (err) {
                reject(err);
            });
        });
    };
    HCBridge.prototype.registerWindow = function (type, name, independent) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.registerWindow(type, name, independent, function (id) {
                resolve(id);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.closeWindow = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.closeWindow(id, function () {
                resolve();
            }, function (err) {
                reject(err);
            });
        });
    };
    HCBridge.prototype.activateWindow = function (id, focus) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.activateWindow(id, focus, function () {
                resolve();
            }, function (err) {
                reject(err);
            });
        });
    };
    HCBridge.prototype._publishStatusChange = function (entity, context, callbacks) {
        var entityEvent = new entityEvent_2.EntityEvent(entity, context);
        callbacks.forEach(function (callback) {
            callback(entityEvent);
        });
    };
    HCBridge.prototype._publishActivityTypeStatusChange = function (at, context) {
        this._publishStatusChange(at, context, this._activityTypeCallbacks);
    };
    HCBridge.prototype._publishWindowTypeStatusChange = function (wt, context) {
        this._publishStatusChange(wt, context, this._windowTypeCallbacks);
    };
    HCBridge.prototype._publishActivityStatusChange = function (act, context) {
        this._publishStatusChange(act, context, this._activityCallbacks);
    };
    HCBridge.prototype._publishActivityWindowEvent = function (w, context) {
        this._publishStatusChange(w, context, this._windowCallbacks);
    };
    return HCBridge;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= HCBridge;

},{"../contracts/activityStatus":20,"../contracts/entityEvent":21,"../core/proxyWindowFactory":25,"../entities/activity":26,"../entities/activityType":28,"../entities/activityWindow":29,"../entities/windowType":30,"../helpers/logger":32,"../helpers/readyMarker":34,"../helpers/util":35}],20:[function(require,module,exports){
"use strict";
var ActivityStatus = (function () {
    function ActivityStatus(state, message, time) {
        this.state = state;
        this.message = message;
        this.time = time;
    }
    ActivityStatus.prototype.getState = function () {
        return this.state;
    };
    ActivityStatus.prototype.getMessage = function () {
        return this.message;
    };
    ActivityStatus.prototype.getTime = function () {
        return this.time;
    };
    return ActivityStatus;
}());
exports.ActivityStatus = ActivityStatus;

},{}],21:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EntityEvent = (function () {
    function EntityEvent(entitiy, context) {
        this.entity = entitiy;
        this.context = context;
    }
    return EntityEvent;
}());
exports.EntityEvent = EntityEvent;
var EntityEventContext = (function () {
    function EntityEventContext(eventType) {
        this.type = eventType;
    }
    return EntityEventContext;
}());
exports.EntityEventContext = EntityEventContext;
var EntityStatusChangeEventContext = (function (_super) {
    __extends(EntityStatusChangeEventContext, _super);
    function EntityStatusChangeEventContext(newStatus, oldStatus) {
        _super.call(this, EntityEventType.StatusChange);
        this.newStatus = newStatus;
        this.oldStatus = oldStatus;
    }
    return EntityStatusChangeEventContext;
}(EntityEventContext));
exports.EntityStatusChangeEventContext = EntityStatusChangeEventContext;
var EntityActivityWindowEventContext = (function (_super) {
    __extends(EntityActivityWindowEventContext, _super);
    function EntityActivityWindowEventContext(activity, event) {
        _super.call(this, EntityEventType.ActivityWindowEvent);
        this.activity = activity;
        this.event = event;
    }
    return EntityActivityWindowEventContext;
}(EntityEventContext));
exports.EntityActivityWindowEventContext = EntityActivityWindowEventContext;
var ActivityContextChangedContext = (function (_super) {
    __extends(ActivityContextChangedContext, _super);
    function ActivityContextChangedContext(context, updated, removed) {
        _super.call(this, EntityEventType.ActivityContextChange);
        this.updated = updated;
        this.removed = removed;
        this.context = JSON.parse(context);
    }
    return ActivityContextChangedContext;
}(EntityEventContext));
exports.ActivityContextChangedContext = ActivityContextChangedContext;
var EntityEventType = (function () {
    function EntityEventType() {
    }
    EntityEventType.Added = "added";
    EntityEventType.Removed = "removed";
    EntityEventType.Updated = "updated";
    EntityEventType.FactoryRegistered = "factoryRegistered";
    EntityEventType.FactoryUnregistered = "factoryUnregistered";
    EntityEventType.StatusChange = "statusChange";
    EntityEventType.ActivityContextChange = "activityContextUpdate";
    EntityEventType.ActivityWindowEvent = "activityWindowEvent";
    return EntityEventType;
}());
exports.EntityEventType = EntityEventType;

},{}],22:[function(require,module,exports){
"use strict";
var util = require("../helpers/util");
var ActivityAGM = (function () {
    function ActivityAGM(activity) {
        this._activity = activity;
    }
    ActivityAGM.prototype.register = function (definition, handler) {
        this._ensureHasAgm();
        ActivityAGM.AGM.register(definition, handler);
    };
    ActivityAGM.prototype.servers = function () {
        this._ensureHasAgm();
        if (util.isUndefinedOrNull(this._activity)) {
            return [];
        }
        return this._activity.windows.map(function (w) {
            return w.instance;
        });
    };
    ActivityAGM.prototype.methods = function () {
        this._ensureHasAgm();
        if (util.isUndefinedOrNull(this._activity)) {
            return [];
        }
        var windows = this._activity.windows;
        var methodNames = [];
        var methods = [];
        for (var index = 0; index < windows.length; index++) {
            var window_1 = windows[index];
            var windowMethods = this.methodsForWindow(window_1);
            for (var methodIndex = 0; methodIndex < windowMethods.length; methodIndex++) {
                var currentWindowMethod = windowMethods[methodIndex];
                if (methodNames.indexOf(currentWindowMethod.name) === -1) {
                    methodNames.push(currentWindowMethod.name);
                    methods.push(currentWindowMethod);
                }
            }
        }
        return methods;
    };
    ActivityAGM.prototype.methodsForWindow = function (window) {
        this._ensureHasAgm();
        if (!window.instance) {
            return [];
        }
        return ActivityAGM.AGM.methodsForInstance(window.instance);
    };
    ActivityAGM.prototype.invoke = function (methodName, arg, target, options, success, error) {
        this._ensureHasAgm();
        var activityServers = this.servers();
        var serversToInvokeAgainst = [];
        if (util.isUndefinedOrNull(target)) {
            target = "activity.all";
        }
        if (util.isString(target)) {
            if (target === "activity.all") {
                serversToInvokeAgainst = activityServers;
            }
            else if (target === "activity.best") {
                var potentialTargets = activityServers.filter(function (server) {
                    var methods = ActivityAGM.AGM.methodsForInstance(server);
                    return methods.filter(function (m) {
                        return m.name === methodName;
                    }).length > 0;
                });
                if (potentialTargets.length > 0) {
                    serversToInvokeAgainst = [potentialTargets[0]];
                }
            }
            else if (target === "all" || target === "best") {
                return ActivityAGM.AGM.invoke(methodName, arg, target, options, success, error);
            }
            else {
                throw new Error("Invalid invoke target " + target);
            }
        }
        else if (util.isArray(target)) {
            if (target.length >= 0) {
                var firstElem = target[0];
                if (this._isAgmInstance(firstElem)) {
                    serversToInvokeAgainst = target.map(function (instance) { return instance; });
                }
                else if (this._isActivityWindow(firstElem)) {
                    serversToInvokeAgainst = target.map(function (win) { return win.instance; });
                }
                else {
                    throw new Error("Unknown target object");
                }
            }
        }
        else {
            if (this._isAgmInstance(target)) {
                serversToInvokeAgainst = [target];
            }
            else if (this._isActivityWindow(target)) {
                serversToInvokeAgainst = [target.instance];
            }
            else {
                throw new Error("Unknown target object");
            }
        }
        return ActivityAGM.AGM.invoke(methodName, arg, serversToInvokeAgainst, options, success, error);
    };
    ActivityAGM.prototype.unregister = function (definition) {
        this._ensureHasAgm();
        return ActivityAGM.AGM.unregister(definition);
    };
    ActivityAGM.prototype.createStream = function (methodDefinition, subscriberAddedHandler, subscriberRemovedFunction) {
        this._ensureHasAgm();
        ActivityAGM.AGM.createStream(methodDefinition, subscriberAddedHandler, subscriberRemovedFunction);
    };
    ActivityAGM.prototype.subscribe = function (methodDefinition, parameters, target) {
        this._ensureHasAgm();
        var servers = this.servers();
        return ActivityAGM.AGM.subscribe(methodDefinition, parameters, servers);
    };
    ActivityAGM.prototype._ensureHasAgm = function () {
        if (util.isUndefinedOrNull(ActivityAGM.AGM)) {
            throw new Error("Agm should be configured to be used in activity");
        }
    };
    ActivityAGM.prototype._isAgmInstance = function (obj) {
        return obj.application != undefined;
    };
    ActivityAGM.prototype._isActivityWindow = function (obj) {
        return obj.instance !== undefined;
    };
    return ActivityAGM;
}());
exports.ActivityAGM = ActivityAGM;

},{"../helpers/util":35}],23:[function(require,module,exports){
"use strict";
var entityEvent_1 = require("../contracts/entityEvent");
var activityType_1 = require("../entities/activityType");
var promiseExtensions_1 = require("../helpers/promiseExtensions");
var readyMarker_1 = require("../helpers/readyMarker");
var entityObservableCollection_1 = require("../helpers/entityObservableCollection");
var logger_1 = require("../helpers/logger");
var util = require("../helpers/util");
var localWindowFactory_1 = require("./localWindowFactory");
var ActivityManager = (function () {
    function ActivityManager(bridge, autoAnnounce) {
        var _this = this;
        this._logger = logger_1.Logger.Get(this);
        this._announcedWindows = [];
        this._bridge = bridge;
        this._activityTypes = new entityObservableCollection_1.EntityObservableCollection(function (e) { return _this._grabEntity(e); });
        this._windowTypes = new entityObservableCollection_1.EntityObservableCollection(function (e) { return _this._grabEntity(e); });
        this._activities = new entityObservableCollection_1.EntityObservableCollection(function (e) { return _this._grabEntity(e); });
        this._windows = new entityObservableCollection_1.EntityObservableCollection(function (e) { return _this._grabEntity(e); });
        this._dataReadyMarker = new readyMarker_1.ReadyMarker("Activity Manager Data", ["GetActivityTypes", "GetWindowTypes", "GetActivities", "GetWindows"].length);
        if (autoAnnounce) {
            var announceMaker = new readyMarker_1.ReadyMarker("Activity Manager Announce", ["Announcement"].length);
            this._readyMarker = announceMaker;
            this._dataReadyMarker.setCallback(function (err) {
                if (err) {
                    _this._readyMarker.error(err);
                }
                _this._logger.debug("Auto announcing window");
                _this.announceWindow()
                    .then(function (w) {
                    _this._announcedWindows.push(w);
                    _this._readyMarker.signal("Successfully announced window with id '" + w.id + "'");
                })['catch'](function (err) {
                    _this._logger.debug("Will not announce window - " + err);
                    _this._readyMarker.signal();
                });
            });
        }
        else {
            this._readyMarker = this._dataReadyMarker;
        }
        this._bridge.init();
        this._bridge
            .ready()
            .then(function (aw) {
            _this._subscribeForData();
        })['catch'](function (error) {
            console.log(error);
        });
    }
    Object.defineProperty(ActivityManager.prototype, "announcedWindows", {
        get: function () {
            return this._announcedWindows;
        },
        set: function (v) {
            throw new Error("not allowed");
        },
        enumerable: true,
        configurable: true
    });
    ActivityManager.prototype.ready = function (callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            _this._readyMarker.setCallback(function (err) {
                if (!err) {
                    resolve(_this);
                }
                else {
                    reject(_this._readyMarker.getError());
                }
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.getActivityTypes = function () {
        return this._activityTypes.get();
    };
    ActivityManager.prototype.getActivityType = function (name) {
        return this._activityTypes.getByName(name);
    };
    ActivityManager.prototype.registerActivityType = function (activityTypeName, ownerWindowType, helperWindowTypes, layoutConfig, description, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activityTypeName)) {
                reject("activityTypeName argument can not be undefined");
            }
            if (!util.isString(activityTypeName)) {
                reject("activityTypeName should be string");
            }
            var actType = _this.getActivityType(activityTypeName);
            if (!util.isUndefinedOrNull(actType)) {
                reject("Activity type '" + activityTypeName + "' already exists");
            }
            var ownerDefinition;
            if (util.isUndefined(ownerWindowType)) {
                reject("Owner window type can not be undefined");
            }
            if (util.isString(ownerWindowType)) {
                ownerDefinition = { type: ownerWindowType, name: "", isIndependent: false, arguments: {} };
            }
            else {
                ownerDefinition = ownerWindowType;
            }
            var helperDefinitions = [];
            if (!util.isUndefined(helperWindowTypes) && util.isArray(helperWindowTypes)) {
                for (var index in helperWindowTypes) {
                    var item = helperWindowTypes[index];
                    if (util.isString(item)) {
                        var definition = {
                            type: item,
                            name: "",
                            isIndependent: false,
                            arguments: {},
                            relativeTo: "",
                            relativeDirection: "",
                            windowStyleAttributes: {}
                        };
                        helperDefinitions.push(definition);
                    }
                    else {
                        helperDefinitions.push(item);
                    }
                }
            }
            _this._bridge
                .registerActivityType(activityTypeName, ownerDefinition, helperDefinitions, layoutConfig, description)
                .then(function (activityType) {
                _this._grabEntity(activityType);
                resolve(activityType);
            })['catch'](function (error) {
                reject(error);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.unregisterActivityType = function (type, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            var actType = _this.getActivityType(type);
            if (util.isUndefined(actType)) {
                reject("Activity type '" + type + "' does not exists");
            }
            return _this._bridge.unregisterActivityType(type);
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.initiate = function (activityType, context, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            var actType = _this.getActivityType(activityType);
            if (util.isUndefined(actType)) {
                reject("Activity type '" + activityType + "' does not exists");
            }
            _this._bridge
                .initiateActivity(activityType, context)
                .then(function (actId) {
                _this._activities
                    .getOrWait(actId)
                    .then(function (act) {
                    resolve(act);
                })['catch'](function (err) { return reject(err); });
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.subscribeActivityTypeEvents = function (handler) {
        this._activityTypes.subscribe(function (at, context) {
            handler(at, context.type);
        });
    };
    ActivityManager.prototype.getWindowTypes = function () {
        return this._windowTypes.get();
    };
    ActivityManager.prototype.getWindowType = function (name) {
        return this._windowTypes.getByName(name);
    };
    ActivityManager.prototype.registerWindowFactory = function (windowType, factoryMethod, description, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(windowType)) {
                reject("no windowType specified");
                return;
            }
            if (util.isObject(windowType)) {
                windowType = windowType.getName();
            }
            else if (!util.isString(windowType)) {
                reject("windowType should be string or object that has getName method");
                return;
            }
            var factory = new localWindowFactory_1.LocalWindowFactory(factoryMethod, description);
            _this._bridge
                .registerWindowFactory(windowType, factory)
                .then(function (v) {
                resolve(v);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.unregisterWindowFactory = function (windowType, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(windowType)) {
                reject("no windowType specified");
                return;
            }
            if (!util.isString(windowType)) {
                reject("windowType should be a string");
                return;
            }
            _this._bridge
                .unregisterWindowFactory(windowType)
                .then(function (v) {
                resolve(v);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.getActivities = function (activityType) {
        var act = this._activities.get();
        if (!activityType) {
            return act;
        }
        var types = activityType;
        if (util.isString(activityType)) {
            types = [activityType];
        }
        else if (activityType instanceof activityType_1['default']) {
            types = [activityType.name];
        }
        else if (activityType instanceof Array) {
        }
        else {
            throw new Error("Invalid input argument 'activityType' = " + activityType);
        }
        return act.filter(function (act) {
            var type = act.type;
            return util.some(types, function (t) {
                return type.id == t.id;
            });
        });
    };
    ActivityManager.prototype.getActivityById = function (id) {
        return this._activities.getByName(id);
    };
    ActivityManager.prototype.announceWindow = function (activityWindowId, windowType) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            var announcementInfo = _this._bridge.getAnnouncementInfo();
            if (util.isUndefined(activityWindowId)) {
                activityWindowId = announcementInfo.activityWindowId;
            }
            if (util.isUndefined(windowType)) {
                windowType = announcementInfo.activityWindowType;
            }
            if (util.isUndefinedOrNull(windowType)) {
                throw new Error("Can not announce - unknown windowType");
            }
            if (util.isUndefinedOrNull(activityWindowId)) {
                _this._logger.debug("Registering window with type:'" + windowType + "', name:'" + announcementInfo.activityWindowName + "', ind.:'" + announcementInfo.activityWindowIndependent + "'");
                _this._bridge.registerWindow(windowType, announcementInfo.activityWindowName, announcementInfo.activityWindowIndependent)
                    .then(_this._windows.getOrWait.bind(_this._windows))
                    .then(function (w) {
                    resolve(w);
                })['catch'](function (err) {
                    _this._logger.error(err);
                });
            }
            else {
                _this._logger.debug("Announcing window with id '" + activityWindowId + "' and type '" + windowType + "'");
                var currentWindow = _this._windows.getByName(activityWindowId);
                if (!util.isUndefinedOrNull(currentWindow)) {
                    _this._logger.debug("Window with id '" + activityWindowId + "' already announced - reusing the window");
                    resolve(currentWindow);
                    return;
                }
                var windowEventHandler = function (a, w, e) {
                    if (activityWindowId === w.id) {
                        if (e === "joined") {
                            var activity = w.activity;
                            if (util.isUndefined(activity)) {
                                reject("UNDEFINED ACTIVITY");
                            }
                            _this._logger.trace("Got joined event for id '" + activityWindowId + "'");
                            resolve(w);
                            _this.unsubscribeWindowEvents(windowEventHandler);
                        }
                    }
                };
                _this.subscribeWindowEvents(windowEventHandler);
                _this._logger.trace("Waiting for joined event for id '" + activityWindowId + "'");
                _this._bridge.announceWindow(windowType, activityWindowId);
            }
        });
        return promise;
    };
    ActivityManager.prototype.subscribeWindowTypeEvents = function (handler) {
        this._windowTypes.subscribe(function (wt, context) {
            handler(wt, context.type);
        });
    };
    ActivityManager.prototype.subscribeActivityEvents = function (handler) {
        this._activities.subscribe(function (act, context) {
            if (context.type === entityEvent_1.EntityEventType.StatusChange) {
                var p = context;
                handler(act, p.newStatus, p.oldStatus);
            }
        });
    };
    ActivityManager.prototype.subscribeWindowEvents = function (handler) {
        this._windows.subscribe(function (window, context) {
            if (context.type === entityEvent_1.EntityEventType.ActivityWindowEvent) {
                var p = context;
                handler(window.activity, window, p.event);
            }
        });
    };
    ActivityManager.prototype.unsubscribeWindowEvents = function (handler) {
    };
    ActivityManager.prototype.createWindow = function (activity, windowType, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activity)) {
                reject("activity is undefined");
            }
            if (util.isUndefinedOrNull(windowType)) {
                reject("windowType is undefined");
            }
            var windowDefinition;
            if (util.isString(windowType)) {
                windowDefinition = { type: windowType, name: "", isIndependent: false, arguments: {} };
            }
            else {
                windowDefinition = windowType;
            }
            var relativeToWindow;
            if (!util.isUndefinedOrNull(windowDefinition.relativeTo)) {
                relativeToWindow = windowDefinition.relativeTo;
                if (util.isString(relativeToWindow)) {
                    var windows = _this.getWindows({ type: relativeToWindow });
                    if (!util.isUndefinedOrNull(windows) && windows.length > 0) {
                        windowDefinition.relativeTo = windows[0].id;
                    }
                }
                else if (!util.isUndefinedOrNull(relativeToWindow.type)) {
                    var windows = _this.getWindows({ type: relativeToWindow.type });
                    if (!util.isUndefinedOrNull(windows) && windows.length > 0) {
                        windowDefinition.relativeTo = windows[0].id;
                    }
                }
                else if (!util.isUndefinedOrNull(relativeToWindow.windowId)) {
                    windowDefinition.relativeTo = relativeToWindow.windowId;
                }
            }
            _this._bridge.createWindow(activity.id, windowDefinition)
                .then(function (wid) {
                _this._logger.debug("Window created, waiting for window entity with id " + wid);
                var handler = function (window, context) {
                    if (window.id === wid && window.activity) {
                        this._logger.debug("Got entity window with id " + wid);
                        resolve(window);
                        this._windows.unsubscribe(handler);
                    }
                }.bind(_this);
                _this._windows.subscribe(handler);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.createStackedWindows = function (activity, relativeWindowTypes, timeout, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activity)) {
                reject("activity is undefined");
            }
            if (util.isUndefinedOrNull(relativeWindowTypes)) {
                reject("relativeWindowTypes is undefined");
            }
            if (!Array.isArray(relativeWindowTypes)) {
                reject("relativeWindowTypes has to be array");
            }
            if (util.isUndefinedOrNull(timeout)) {
                timeout = 20000;
            }
            var relativeWindows = [];
            relativeWindowTypes.forEach(function (element) {
                var windowDefinition;
                if (util.isString(element)) {
                    windowDefinition = { type: element, name: "", isIndependent: false, arguments: {} };
                }
                else {
                    windowDefinition = element;
                }
                var relativeToWindow;
                if (!util.isUndefinedOrNull(windowDefinition.relativeTo)) {
                    relativeToWindow = windowDefinition.relativeTo;
                    if (!util.isUndefinedOrNull(relativeToWindow.type)) {
                        windowDefinition.relativeTo = relativeToWindow.type;
                    }
                    else if (!util.isUndefinedOrNull(relativeToWindow.windowId)) {
                        var windows = _this.getWindows({ id: relativeToWindow.windowId });
                        if (!util.isUndefinedOrNull(windows) && windows.length > 0) {
                            windowDefinition.relativeTo = windows[0].type.name;
                            windowDefinition.useExisting = true;
                        }
                    }
                }
                relativeWindows.push(windowDefinition);
            });
            _this._bridge.createStackedWindows(activity.id, relativeWindows, timeout)
                .then(function (wid) {
                var activityWindows = [];
                var alreadyCreated = [];
                var handler = function (window, context) {
                    if (wid.indexOf(window.id) >= 0 && alreadyCreated.indexOf(window.id) < 0 && window.activity) {
                        this._logger.debug("Got entity window with id " + wid);
                        activityWindows.push(window);
                        alreadyCreated.push(window.id);
                        if (activityWindows.length == wid.length) {
                            resolve(activityWindows);
                            this._windows.unsubscribe(handler);
                        }
                    }
                }.bind(_this);
                _this._windows.subscribe(handler);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.joinWindowToActivity = function (activity, window, callback) {
        return undefined;
    };
    ActivityManager.prototype.leaveWindowFromActivity = function (activity, window, callback) {
        return undefined;
    };
    ActivityManager.prototype.setActivityContext = function (activity, context, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activity)) {
                reject("activity can not be null");
            }
            _this._bridge
                .updateActivityContext(activity, context, true)
                .then(function (obj) {
                resolve(obj);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.updateActivityContext = function (activity, context, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activity)) {
                reject("activity can not be null");
            }
            var removedKeys = [];
            for (var key in context) {
                if (context.hasOwnProperty(key) && context[key] === null) {
                    removedKeys.push(key);
                }
            }
            _this._bridge
                .updateActivityContext(activity, context, false, removedKeys)
                .then(function (obj) {
                resolve(obj);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.subscribeActivityContextChanged = function (handler) {
        this._activities.subscribe(function (act, context) {
            if (context.type === entityEvent_1.EntityEventType.ActivityContextChange) {
                var updateContext = context;
                handler(act, updateContext.context, updateContext.updated, updateContext.removed);
            }
        });
    };
    ActivityManager.prototype.stopActivity = function (activity, callback) {
        var promise = this._bridge.stopActivity(activity);
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.getWindows = function (filter) {
        if (util.isUndefined(filter)) {
            return this._windows.get();
        }
        if (!util.isUndefined(filter.id)) {
            return [this._windows.getByName(filter.id)];
        }
        var allWindows = this._windows.get();
        return allWindows.filter(function (w) {
            if (!util.isUndefined(filter.type) && w.type.id !== filter.type) {
                return false;
            }
            if (!util.isUndefined(filter.name) && w.name !== filter.name) {
                return false;
            }
            if (!util.isUndefined(filter.activityId)) {
                if (util.isUndefinedOrNull(w.activity)) {
                    return false;
                }
                if (w.activity.id !== filter.activityId) {
                    return false;
                }
            }
            return true;
        });
    };
    ActivityManager.prototype._grabEntity = function (entity) {
        entity.manager = this;
    };
    ActivityManager.prototype._subscribeForData = function () {
        var _this = this;
        this._logger.debug("Start getting initial data...");
        this._bridge.onActivityTypeStatusChange(function (event) {
            _this._activityTypes.process(event);
        });
        this._bridge.getActivityTypes()
            .then(function (at) {
            _this._activityTypes.add(at);
            _this._dataReadyMarker.signal("Got act types");
        })['catch'](function (error) {
            _this._logger.error(error);
            _this._dataReadyMarker.error("Can not initialize ActivityManager - error getting activity types -" + error);
        });
        this._bridge.onWindowTypeStatusChange(function (event) {
            _this._windowTypes.process(event);
        });
        this._bridge.getWindowTypes()
            .then(function (wt) {
            _this._windowTypes.add(wt);
            _this._dataReadyMarker.signal("Got window types");
        })['catch'](function (error) {
            _this._logger.error(error);
            _this._dataReadyMarker.error("Can not initialize ActivityManager - error getting window types  " + error);
        });
        this._bridge.onActivityStatusChange(function (event) {
            _this._activities.process(event);
        });
        this._bridge.getActivities()
            .then(function (ac) {
            _this._activities.add(ac);
            _this._dataReadyMarker.signal("Got activities");
        })['catch'](function (error) {
            _this._logger.error(error);
            _this._dataReadyMarker.error("Can not initialize ActivityManager - error getting activity instances -" + error);
        });
        this._bridge.onActivityWindowChange(function (event) {
            _this._windows.process(event);
        });
        this._bridge.getActivityWindows()
            .then(function (aw) {
            _this._windows.add(aw);
            _this._dataReadyMarker.signal("Got windows");
        })['catch'](function (error) {
            _this._logger.error(error);
            _this._dataReadyMarker.error("Can not initialize ActivityManager - error getting activity windows -" + error);
        });
    };
    ActivityManager.prototype.getWindowBounds = function (id) {
        return this._bridge.getWindowBounds(id);
    };
    ActivityManager.prototype.setWindowBounds = function (id, bounds, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            _this._bridge.setWindowBounds(id, bounds)
                .then(function () { return resolve(); })['catch'](function (err) { return reject(err); });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.closeWindow = function (id) {
        return this._bridge.closeWindow(id);
    };
    ActivityManager.prototype.activateWindow = function (id, focus) {
        return this._bridge.activateWindow(id, focus);
    };
    return ActivityManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityManager;

},{"../contracts/entityEvent":21,"../entities/activityType":28,"../helpers/entityObservableCollection":31,"../helpers/logger":32,"../helpers/promiseExtensions":33,"../helpers/readyMarker":34,"../helpers/util":35,"./localWindowFactory":24}],24:[function(require,module,exports){
"use strict";
var LocalWindowFactory = (function () {
    function LocalWindowFactory(createFunction, description) {
        this._createFunction = createFunction;
        this._description = description;
    }
    LocalWindowFactory.prototype.create = function (activityWindowId, context, layout) {
        return this._createFunction(activityWindowId, context, layout);
    };
    LocalWindowFactory.prototype.description = function () {
        return this._description;
    };
    return LocalWindowFactory;
}());
exports.LocalWindowFactory = LocalWindowFactory;

},{}],25:[function(require,module,exports){
"use strict";
var ProxyWindowFactory = (function () {
    function ProxyWindowFactory(description) {
        this._description = description;
    }
    ProxyWindowFactory.prototype.create = function (activityWindowId, context) {
        return undefined;
    };
    ProxyWindowFactory.prototype.description = function () {
        return this._description;
    };
    return ProxyWindowFactory;
}());
exports.ProxyWindowFactory = ProxyWindowFactory;

},{}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activityEntity_1 = require("./activityEntity");
var activityAGM_1 = require("../core/activityAGM");
var Activity = (function (_super) {
    __extends(Activity, _super);
    function Activity(id, actType, status, context, ownerId) {
        _super.call(this, id);
        this._id = id;
        this._actType = actType;
        this._status = status;
        this._context = context;
        this._ownerId = ownerId;
        this._agm = new activityAGM_1.ActivityAGM(this);
    }
    Object.defineProperty(Activity.prototype, "type", {
        get: function () {
            if (this.manager) {
                return this.manager.getActivityType(this._actType);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "status", {
        get: function () {
            return this._status;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "owner", {
        get: function () {
            if (!this._ownerId) {
                return null;
            }
            return this.manager.getWindows({ id: this._ownerId })[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "windows", {
        get: function () {
            return this.manager.getWindows({ activityId: this._id });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "agm", {
        get: function () {
            return this._agm;
        },
        enumerable: true,
        configurable: true
    });
    Activity.prototype.join = function (window, callback) {
        return this.manager.joinWindowToActivity(this, window, callback);
    };
    Activity.prototype.createWindow = function (windowType, callback) {
        return this.manager.createWindow(this, windowType, callback);
    };
    Activity.prototype.createStackedWindows = function (windowTypes, timeout, callback) {
        return this.manager.createStackedWindows(this, windowTypes, timeout, callback);
    };
    Activity.prototype.leave = function (window, callback) {
        return this.manager.leaveWindowFromActivity(this, window, callback);
    };
    Activity.prototype.getWindowsByType = function (windowType) {
        var filter = { activityId: this._id, type: windowType };
        return this.manager.getWindows(filter);
    };
    Activity.prototype.setContext = function (context, callback) {
        return this.manager.setActivityContext(this, context, callback);
    };
    Activity.prototype.updateContext = function (context, callback) {
        return this.manager.updateActivityContext(this, context, callback);
    };
    Activity.prototype.onStatusChange = function (handler) {
        var _this = this;
        this.manager.subscribeActivityEvents(function (a, ns, os) {
            if (a.id === _this.id) {
                handler(a, ns, os);
            }
        });
    };
    Activity.prototype.onWindowEvent = function (handler) {
        var _this = this;
        this.manager.subscribeWindowEvents(function (a, w, e) {
            if (a.id === _this.id) {
                handler(a, w, e);
            }
        });
    };
    Activity.prototype.onContextChanged = function (handler) {
        var _this = this;
        this.manager.subscribeActivityContextChanged(function (act, context, delta, removed) {
            if (act.id === _this.id) {
                handler(context, delta, removed, act);
            }
        });
        try {
            handler(this.context, this.context, [], this);
        }
        catch (e) { }
    };
    Activity.prototype.stop = function () {
        this.manager.stopActivity(this);
    };
    Activity.prototype.updateCore = function (activity) {
        _super.prototype.updateCore.call(this, activity);
        this._actType = activity._actType;
        this._context = activity._context;
        this._status = activity._status;
        this._ownerId = activity._ownerId;
    };
    return Activity;
}(activityEntity_1['default']));
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= Activity;

},{"../core/activityAGM":22,"./activityEntity":27}],27:[function(require,module,exports){
"use strict";
var ActivityEntity = (function () {
    function ActivityEntity(id) {
        this.listeners = [];
        this._id = id;
    }
    Object.defineProperty(ActivityEntity.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    ActivityEntity.prototype.onUpdated = function (handler) {
        this.listeners.push(handler);
    };
    ActivityEntity.prototype.update = function (other) {
        if (other._id != this._id) {
            throw Error("Can not update from entity with different id.");
        }
        this.updateCore(other);
        this.notify();
    };
    ActivityEntity.prototype.updateCore = function (other) {
    };
    ActivityEntity.prototype.notify = function () {
        for (var index = 0; index < this.listeners.length; index++) {
            var listener = this.listeners[index];
            listener(this);
        }
    };
    return ActivityEntity;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityEntity;

},{}],28:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activityEntity_1 = require("./activityEntity");
var ActivityType = (function (_super) {
    __extends(ActivityType, _super);
    function ActivityType(name, ownerWindow, helperWindows, description) {
        _super.call(this, name);
        this._name = name;
        this._description = description;
        this._ownerWindow = ownerWindow;
        this._helperWindows = helperWindows || [];
    }
    Object.defineProperty(ActivityType.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityType.prototype, "description", {
        get: function () {
            return this._description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityType.prototype, "helperWindows", {
        get: function () {
            return this._helperWindows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityType.prototype, "ownerWindow", {
        get: function () {
            return this._ownerWindow;
        },
        enumerable: true,
        configurable: true
    });
    ActivityType.prototype.subscribeActivityStatusChange = function (handler) {
        return undefined;
    };
    ActivityType.prototype.initiate = function (context, callback) {
        return this.manager.initiate(this._name, context, callback);
    };
    ActivityType.prototype.updateCore = function (type) {
        _super.prototype.updateCore.call(this, type);
        this._description = type._description;
        this._ownerWindow = type._ownerWindow;
        this._helperWindows = type._helperWindows;
    };
    return ActivityType;
}(activityEntity_1['default']));
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityType;

},{"./activityEntity":27}],29:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activityEntity_1 = require("./activityEntity");
var logger_1 = require("../helpers/logger");
var util = require("../helpers/util");
var ActivityWindow = (function (_super) {
    __extends(ActivityWindow, _super);
    function ActivityWindow(id, name, type, activityId, instance, isIndependent) {
        _super.call(this, id);
        this._logger = logger_1.Logger.Get(this);
        this._type = type;
        this._activityId = activityId;
        this._name = name;
        this._instance = instance;
        this._isIndependent = isIndependent;
    }
    ActivityWindow.prototype.getBounds = function () {
        return this.manager.getWindowBounds(this.id);
    };
    Object.defineProperty(ActivityWindow.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityWindow.prototype, "isIndependent", {
        get: function () {
            return this._isIndependent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityWindow.prototype, "type", {
        get: function () {
            if (this.manager) {
                return this.manager.getWindowType(this._type);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityWindow.prototype, "activity", {
        get: function () {
            if (util.isUndefined(this._activityId)) {
                return undefined;
            }
            return this.manager.getActivityById(this._activityId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityWindow.prototype, "isOwner", {
        get: function () {
            var act = this.activity;
            if (util.isUndefined(act)) {
                return false;
            }
            return act.owner.id === this.id;
        },
        enumerable: true,
        configurable: true
    });
    ActivityWindow.prototype.setVisible = function (isVisible, callback) {
        return undefined;
    };
    ActivityWindow.prototype.activate = function (focus) {
        return this.manager.activateWindow(this.id, focus);
    };
    ActivityWindow.prototype.setTitle = function (title, callback) {
        return undefined;
    };
    ActivityWindow.prototype.setBounds = function (bounds, callback) {
        return this.manager.setWindowBounds(this.id, bounds, callback);
    };
    ActivityWindow.prototype.setState = function (state, callback) {
        return undefined;
    };
    ActivityWindow.prototype.close = function () {
        return this.manager.closeWindow(this.id);
    };
    Object.defineProperty(ActivityWindow.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    ActivityWindow.prototype.onActivityJoined = function (callback) {
        this._subscribeForActivityWindowEvent("joined", callback);
    };
    ActivityWindow.prototype.onActivityRemoved = function (callback) {
        this._subscribeForActivityWindowEvent("removed", callback);
    };
    ActivityWindow.prototype.updateCore = function (other) {
        this._activityId = other._activityId;
        this._isIndependent = other._isIndependent;
        if (!util.isUndefinedOrNull(other._instance)) {
            this._instance = other._instance;
        }
    };
    ActivityWindow.prototype._subscribeForActivityWindowEvent = function (eventName, callback) {
        var _this = this;
        this.manager.subscribeWindowEvents(function (activity, window, event) {
            if (window.id !== _this.id) {
                return;
            }
            if (event === eventName) {
                callback(activity);
            }
        });
    };
    return ActivityWindow;
}(activityEntity_1['default']));
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityWindow;

},{"../helpers/logger":32,"../helpers/util":35,"./activityEntity":27}],30:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activityEntity_1 = require("./activityEntity");
var WindowType = (function (_super) {
    __extends(WindowType, _super);
    function WindowType(name, factories) {
        _super.call(this, name);
        this._name = name;
        this._factories = factories;
    }
    Object.defineProperty(WindowType.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WindowType.prototype, "factories", {
        get: function () {
            return this._factories;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WindowType.prototype, "windows", {
        get: function () {
            return this.manager.getWindows({ type: this._name });
        },
        enumerable: true,
        configurable: true
    });
    WindowType.prototype.registerFactory = function (factory, factoryMethod, description, callback) {
        return this.manager.registerWindowFactory(this, factoryMethod, description);
    };
    return WindowType;
}(activityEntity_1['default']));
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= WindowType;

},{"./activityEntity":27}],31:[function(require,module,exports){
"use strict";
var entityEvent_1 = require("../contracts/entityEvent");
var EntityObservableCollection = (function () {
    function EntityObservableCollection(processNew) {
        this._items = {};
        this._listeners = [];
        this._processNew = processNew;
    }
    EntityObservableCollection.prototype.addOne = function (item) {
        this.add([item]);
    };
    EntityObservableCollection.prototype.add = function (items) {
        for (var index = 0; index < items.length; index++) {
            var element = items[index];
            this.process(new entityEvent_1.EntityEvent(element, new entityEvent_1.EntityEventContext(entityEvent_1.EntityEventType.Added)));
        }
    };
    EntityObservableCollection.prototype.process = function (event) {
        var context = event.context;
        var type = context.type;
        var entity = event.entity;
        var internalEntity = this._updateInternalCollections(entity, type);
        this._notifyListeners(internalEntity, context);
    };
    EntityObservableCollection.prototype.get = function () {
        var result = [];
        for (var key in this._items) {
            if (this._items.hasOwnProperty(key)) {
                var element = this._items[key];
                result.push(element);
            }
        }
        return result;
    };
    EntityObservableCollection.prototype.getByName = function (name) {
        for (var key in this._items) {
            if (key === name) {
                return this._items[key];
            }
        }
        return undefined;
    };
    EntityObservableCollection.prototype.getOrWait = function (name) {
        var _this = this;
        return new Promise(function (resolve) {
            var entityAddedHandler = function (entity) {
                if (entity.id !== name) {
                    return;
                }
                resolve(entity);
                _this.unsubscribe(entityAddedHandler);
            };
            _this.subscribe(entityAddedHandler);
            var window = _this.getByName(name);
            if (window) {
                resolve(window);
                return;
            }
        });
    };
    EntityObservableCollection.prototype.subscribe = function (handler) {
        this._listeners.push(handler);
        for (var key in this._items) {
            var element = this._items[key];
            handler(element, new entityEvent_1.EntityEventContext(entityEvent_1.EntityEventType.Added.toString()));
        }
    };
    EntityObservableCollection.prototype.unsubscribe = function (handler) {
        var index = this._listeners.indexOf(handler);
        if (index != -1) {
            this._listeners.splice(index, 1);
        }
    };
    EntityObservableCollection.prototype._notifyListeners = function (entity, context) {
        for (var index = 0; index < this._listeners.length; index++) {
            var listener = this._listeners[index];
            try {
                listener(entity, context);
            }
            catch (e) { }
        }
    };
    EntityObservableCollection.prototype._updateInternalCollections = function (entity, type) {
        if (type === entityEvent_1.EntityEventType.Removed) {
            delete this._items[entity.id];
            return entity;
        }
        else {
            var key = entity.id;
            if (!this._items.hasOwnProperty(key)) {
                this._processNew(entity);
                this._items[entity.id] = entity;
            }
            else {
                this._items[entity.id].update(entity);
            }
        }
        return this._items[entity.id];
    };
    return EntityObservableCollection;
}());
exports.EntityObservableCollection = EntityObservableCollection;

},{"../contracts/entityEvent":21}],32:[function(require,module,exports){
"use strict";
var util = require("./util");
var LogLevel = (function () {
    function LogLevel() {
    }
    LogLevel.Trace = "trace";
    LogLevel.Debug = "debug";
    LogLevel.Info = "info";
    LogLevel.Warn = "warn";
    LogLevel.Error = "error";
    return LogLevel;
}());
exports.LogLevel = LogLevel;
var Logger = (function () {
    function Logger(name) {
        this._name = name;
        if (!util.isUndefinedOrNull(Logger.GlueLogger)) {
            this._glueLogger = Logger.GlueLogger.subLogger(name);
        }
    }
    Logger.GetNamed = function (name) {
        return new Logger(name);
    };
    Logger.Get = function (owner) {
        return new Logger(Logger.GetTypeName(owner));
    };
    Logger.prototype.trace = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.trace(message);
        }
        else {
            if (Logger.Level === LogLevel.Trace) {
                console.info(this._getMessage(message, LogLevel.Trace));
            }
        }
    };
    Logger.prototype.debug = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.debug(message);
        }
        else {
            if (Logger.Level === LogLevel.Debug ||
                Logger.Level === LogLevel.Trace) {
                console.info(this._getMessage(message, LogLevel.Debug));
            }
        }
    };
    Logger.prototype.info = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.info(message);
        }
        else {
            if (Logger.Level === LogLevel.Debug ||
                Logger.Level === LogLevel.Trace ||
                Logger.Level === LogLevel.Info) {
                console.info(this._getMessage(message, LogLevel.Info));
            }
        }
    };
    Logger.prototype.warn = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.warn(message);
        }
        else {
            if (Logger.Level === LogLevel.Debug ||
                Logger.Level === LogLevel.Trace ||
                Logger.Level === LogLevel.Info ||
                Logger.Level === LogLevel.Warn) {
                console.info(this._getMessage(message, LogLevel.Info));
            }
        }
    };
    Logger.prototype.error = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.error(message);
        }
        else {
            console.error(this._getMessage(message, LogLevel.Error));
            console.trace();
        }
    };
    Logger.prototype._getMessage = function (message, level) {
        return "[" + level + "] " + this._name + " - " + message;
    };
    Logger.GetTypeName = function (object) {
        var funcNameRegex = /function (.{1,})\(/;
        var results = (funcNameRegex).exec(object.constructor.toString());
        return (results && results.length > 1) ? results[1] : "";
    };
    Logger.Level = LogLevel.Info;
    return Logger;
}());
exports.Logger = Logger;

},{"./util":35}],33:[function(require,module,exports){
"use strict";
var util = require("../helpers/util");
var nextTick = function (cb) { setTimeout(cb, 0); };
function nodeify(promise, callback) {
    if (!util.isFunction(callback)) {
        return promise;
    }
    promise.then(function (resp) {
        nextTick(function () {
            callback(null, resp);
        });
    }, function (err) {
        nextTick(function () {
            callback(err, null);
        });
    });
}
exports.nodeify = nodeify;
;

},{"../helpers/util":35}],34:[function(require,module,exports){
"use strict";
var logger_1 = require("./logger");
var util = require("../helpers/util");
var ReadyMarker = (function () {
    function ReadyMarker(name, signalsToWait) {
        this._logger = logger_1.Logger.GetNamed("ReadyMarker [" + name + "]");
        this._logger.debug("Initializing ready marker for '" + name + "' with " + signalsToWait + " signals to wait");
        if (signalsToWait <= 0) {
            throw new Error("Invalid signal number. Should be > 0");
        }
        this._signals = signalsToWait;
        this._callbacks = [];
        this._name = name;
    }
    ReadyMarker.prototype.setCallback = function (callback) {
        if (this.isSet()) {
            callback(undefined);
            return;
        }
        else if (this.isError()) {
            callback(this._error);
            return;
        }
        this._callbacks.push(callback);
    };
    ReadyMarker.prototype.signal = function (message) {
        this._logger.debug("Signaled - " + message + " - signals left " + (this._signals - 1));
        this._signals--;
        if (this._signals < 0) {
            throw new Error("Error in ready marker '" + this._name + " - signals are " + this._signals);
        }
        if (this.isSet()) {
            this._callbacks.forEach(function (callback) {
                callback(undefined);
            });
        }
    };
    ReadyMarker.prototype.error = function (error) {
        this._error = error;
        this._callbacks.forEach(function (errorCallback) {
            errorCallback(error);
        });
    };
    ReadyMarker.prototype.isSet = function () {
        if (this.isError()) {
            return false;
        }
        return this._signals === 0;
    };
    ReadyMarker.prototype.isError = function () {
        return !util.isUndefined(this._error);
    };
    ReadyMarker.prototype.getError = function () {
        return this._error;
    };
    return ReadyMarker;
}());
exports.ReadyMarker = ReadyMarker;

},{"../helpers/util":35,"./logger":32}],35:[function(require,module,exports){
"use strict";
function isNumber(arg) {
    return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === 'string';
}
exports.isString = isString;
function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isArray(arg) {
    if (Array.isArray) {
        return Array.isArray(arg);
    }
    return toString.call(arg) === '[object Array]';
}
exports.isArray = isArray;
function isUndefined(arg) {
    return typeof arg === 'undefined';
}
exports.isUndefined = isUndefined;
function isUndefinedOrNull(arg) {
    return !arg || typeof arg === 'undefined';
}
exports.isUndefinedOrNull = isUndefinedOrNull;
function isEmpty(arg) {
    for (var prop in arg) {
        if (arg.hasOwnProperty(prop))
            return false;
    }
    return true;
}
exports.isEmpty = isEmpty;
function isFunction(arg) {
    return !!(arg && arg.constructor && arg.call && arg.apply);
}
exports.isFunction = isFunction;
;
function some(array, predicate) {
    for (var index = 0; index < array.length; index++) {
        if (predicate(array[index], index)) {
            return true;
        }
    }
    return false;
}
exports.some = some;
function first(array, predicate) {
    for (var index = 0; index < array.length; index++) {
        if (predicate(array[index], index)) {
            return array[index];
        }
    }
    return undefined;
}
exports.first = first;

},{}],36:[function(require,module,exports){
/**
 * This module handles AGM method invocations - validating inputs and delegating to protocol
 */
var random = require('./helpers/random');

module.exports = function (protocol) {
    'use strict';

    /** Store pending callback **/
    var pendingCallbacks = {};

    /**
     * Invokes an AGM method to a single AGM server, given valid input.
     * @param method
     * @param argumentsObj
     * @param target
     * @param stuff
     * @param success
     * @param error
     */
    function invoke(method, argumentsObj, target, stuff, success, error) {
        // Generate a unique invocation ID, for this invocation
        var invocationId = random();

        // Register the user's callbacks
        registerInvocation(invocationId, {
            method: method,
            calledWith: argumentsObj
        }, success, error, stuff.method_response_timeout);

        protocol.invoke(invocationId, method, argumentsObj, target, stuff);
    }

    /**
     * Register invocation so we can find it later when invocation result is received
     * @param invocationId
     * @param response
     * @param success
     * @param error
     * @param timeout
     */
    function registerInvocation(invocationId, response, success, error, timeout) {
        // Adds the callbacks
        pendingCallbacks[invocationId] = { response: response, success: success, error: error };
        // Schedules to throw a timeout if nobody answers
        setTimeout(function () {
            if (pendingCallbacks[invocationId] === undefined) {
                return;
            }
            error({
                method: response.method,
                called_with: response.calledWith,
                message: 'Timeout reached'
            });
            delete pendingCallbacks[invocationId];
        }, timeout);
    }

    /**
     * Process invocation result received from protocl
     * @param invocationId
     * @param executedBy
     * @param status
     * @param result
     * @param resultMessage
     */
    function processInvocationResult(invocationId, executedBy, status, result, resultMessage) {
        // Finds the appropriate callback
        var callback = pendingCallbacks[invocationId];
        if (callback === undefined) {
            return;
        }
        // If the server returned success, execute the success callback
        if (status === 0 && typeof callback.success === 'function') {

            // Execute the success callback
            callback.success({
                method: callback.response.method.info,
                called_with: callback.response.calledWith,
                executed_by: executedBy,
                returned: result,
                message: resultMessage
                // log_details: message.ResultLogDetails
            });
            // Else, return an error
        } else if (typeof callback.error === 'function') {

            callback.error({
                method: callback.response.method.info,
                called_with: callback.response.calledWith,
                executed_by: executedBy,
                message: resultMessage,
                // log_details: message.ResultLogDetails,
                status: status
            });
        }
        // Finally, remove the callbacks
        delete pendingCallbacks[invocationId];
    }

    // subscribe for invocation results
    protocol.onInvocationResult(processInvocationResult);

    return { invoke: invoke };
};

},{"./helpers/random":46}],37:[function(require,module,exports){
(function (global){
/*
 The AGM Client analyses server presences, collects information about their methods and allows users to invoke these methods.
 */

var Promise = require('es6-promise').Promise;
var ClientInvocationsState = require('./agm-client-invoke');
var promisify = require('./helpers/promisify');

module.exports = function (protocol, repo, instance, configuration) {
    'use strict';

    // Instantiate the module that handles method execution and responses
    var clientInvocations = new ClientInvocationsState(protocol);

    /**
     * Returns all methods that match the given filter. If no filter specified returns all methods.
     * @param    methodFilter Optional object - partial method definition
     * @return An array of {server:{}, methods:[]} objects - methods for each server that match the filter
     * */
    function getMethods(methodFilter) {
        if (methodFilter === undefined) {
            return repo.getMethods();
        }
        if (typeof methodFilter === 'string') {
            methodFilter = { name: methodFilter };
        }
        return repo.getMethods().filter(function (method) {
            return methodMatch(methodFilter, method.info);
        });
    }

    /**
     * Retrieves all servers that support any of several methods, listed as an array
     */
    function getMethodsForInstance(instanceFilter) {
        var allServers = repo.getServers();

        var matchingServers = allServers.filter(function (server) {
            return instanceMatch(instanceFilter, server.info);
        });

        if (matchingServers.length === 0) {
            return [];
        }

        var resultMethodsObject = {};

        if (matchingServers.length === 1) {
            resultMethodsObject = matchingServers[0].methods;
        } else {
            // we have more than one server matching, join all methods
            matchingServers.forEach(function (server) {
                Object.keys(server.methods).forEach(function (methodKey) {
                    var method = server.methods[methodKey];
                    resultMethodsObject[method.id] = method.getInfoForUser();
                })
            });
        }

        // transform the object to array
        return Object.keys(resultMethodsObject)
            .map(function (key) {
                return resultMethodsObject[key]
            });
    }

    /**
     * Retrieves all getServers that support a given method
     */
    function getServers(methodFilter) {
        var servers = repo.getServers();

        // No method - get all getServers
        if (methodFilter === undefined) {
            return servers.map(function (server) {
                return { server: server };
            });
        }
        // Non-existing method - return an empty array
        var methods = getMethods(methodFilter);
        if (methods === undefined) {
            return [];
        }

        return servers.reduce(function (prev, current) {

            var methods = repo.getServerMethodsById(current.id);

            var matchingMethods = methods.filter(function (method) {
                return methodMatch(methodFilter, method.info);
            });

            if (matchingMethods.length > 0) {
                prev.push({ server: current, methods: matchingMethods });
            }

            return prev;
        }, []);
    }

    /**
     * Returns an array of server-methods pairs for all servers that match the target and have at lease one method mathing the method filter
     * @param methodFilter
     * @param target
     * @returns {*}
     */
    function getServerMethodsByFilterAndTarget(methodFilter, target) {
        // get all servers that have method(s) matching the filter
        var serversMethodMap = getServers(methodFilter);
        // filter the server-method map by target
        return filterByTarget(target, serversMethodMap);
    }

    /**
     * Invokes an AGM method
     * @param methodFilter
     * @param argumentObj
     * @param target
     * @param additionalOptions
     * @param success
     * @param error
     * @returns {*}
     **/
    function invoke(methodFilter, argumentObj, target, additionalOptions, success, error) {
        var promise = new Promise(function (resolve, reject) {
            var successProxy, errorProxy;

            successProxy = function (args) {
                // var parsed = JSON.parse(args);
                resolve(args);
            };
            errorProxy = function (args) {
                // var parsed = JSON.parse(args);
                reject(args);
            };
            // Add default params
            if (!argumentObj) {
                argumentObj = {};
            }
            if (!target) {
                target = 'best';
            }
            if (typeof target === 'string' && target !== 'all' && target !== 'best') {
                reject({ message: '"' + target + '" is not a valid target. Valid targets are "all" and "best".' });
            }
            if (!additionalOptions) {
                additionalOptions = {};
            }

            if (additionalOptions.method_response_timeout === undefined) {
                additionalOptions.method_response_timeout = configuration.method_response_timeout;
            }
            if (additionalOptions.wait_for_method_timeout === undefined) {
                additionalOptions.wait_for_method_timeout = configuration.wait_for_method_timeout;
            }

            // Check if the arguments are an object
            if (typeof argumentObj !== 'object') {
                reject({ message: 'The method arguments must be an object.' });
            }

            if (typeof methodFilter === 'string') {
                methodFilter = { name: methodFilter };
            }

            var serversMethodMap = getServerMethodsByFilterAndTarget(methodFilter, target);

            if (serversMethodMap.length === 0) {

                invokeUnexisting(methodFilter, argumentObj, target, additionalOptions, successProxy, errorProxy);

            } else if (serversMethodMap.length === 1) {

                var serverMethodPair = serversMethodMap[0];
                clientInvocations.invoke(serverMethodPair.methods[0], argumentObj, serverMethodPair.server, additionalOptions, successProxy, errorProxy);

            } else {

                invokeOnAll(serversMethodMap, argumentObj, additionalOptions, successProxy, errorProxy);

            }
        });

        return promisify(promise, success, error);
    }

    /**
     * Called when the user tries to invoke a method which does not exist
     * @param methodFilter
     * @param argumentObj
     * @param target
     * @param additionalOptions
     * @param success
     * @param error
     */
    function invokeUnexisting(methodFilter, argumentObj, target, additionalOptions, success, error) {

        if (additionalOptions.wait_for_method_timeout === 0) {
            callError();
        } else {
            setTimeout(function () {
                // get all servers that have method(s) matching the filter
                var serversMethodMap = getServerMethodsByFilterAndTarget(methodFilter, target);
                if (serversMethodMap.length > 0) {
                    invoke(methodFilter, argumentObj, target, additionalOptions, success, error);
                } else {
                    callError();
                }
            }, additionalOptions.wait_for_method_timeout);
        }

        function callError() {
            error({
                method: methodFilter,
                called_with: argumentObj,
                message: 'Can not find a method matching "' + JSON.stringify(methodFilter) + '" with server filter "' + JSON.stringify(target) + '"'
            });
        }
    }

    /**
     * Calls a method for all servers and unifies the results they return into one:
     * @param serverMethodsMap
     * @param argumentObj
     * @param additionalOptions
     * @param success
     * @param error
     */
    function invokeOnAll(serverMethodsMap, argumentObj, additionalOptions, success, error) {
        // Here we will store the results that the getServers return
        var successes = [];
        var errors = [];
        // These are the callbacks
        var successCallback = function (result) {
            successes.push(result);
            sendResponse(successes, errors);
        };
        var errorCallback = function (result) {
            errors.push(result);
            sendResponse(successes, errors);
        };
        // Call the method for all targets
        serverMethodsMap.forEach(function (serverMethodsPair) {
            clientInvocations.invoke(serverMethodsPair.methods[0],
                argumentObj,
                serverMethodsPair.server,
                additionalOptions,
                successCallback,
                errorCallback);
        });

        // Calls the main success and error callbacks with the aggregated results
        function sendResponse() {
            // wait till everybody is finished
            if (successes.length + errors.length < serverMethodsMap.length) {
                return;
            }
            // Execute the "success" callback
            if (successes.length !== 0) {
                var result = successes.reduce(function (obj, success) {
                    obj.method = success.method;
                    obj.called_with = success.called_with;
                    obj.returned = success.returned;
                    obj.all_return_values.push({
                        executed_by: success.executed_by,
                        returned: success.returned
                    });
                    obj.executed_by = success.executed_by;
                    return obj;
                }, { all_return_values: [] });

                // If we get errors from one of the getServers add them to the success object that will be resolved.
                if (errors.length !== 0) {
                    result.all_errors = [];
                    errors.forEach(function (obj) {
                        result.all_errors.push({
                            // executed_by : obj.executed_by, // we don't get executed_by object from the error clientInvocations
                            name: obj.method.name,
                            message: obj.message
                        });
                    });
                }

                success(result);

            } else if (errors.length !== 0) { // Execute the "error" callback
                error(errors.reduce(function (obj, error) {
                    obj.method = error.method;
                    obj.called_with = error.called_with;
                    obj.message = error.message;
                    obj.all_errors.push({
                        executed_by: error.executed_by,
                        message: error.message
                    });
                    // obj.executed_by = success.executed_by;
                    return obj;
                }, { all_errors: [] }));
            }
        }
    }

    /**
     * Filters an array of servers and returns the ones which match the target criteria
     * @param target
     * @param serverMethodMap
     * @returns {*}
     * */
    function filterByTarget(target, serverMethodMap) {
        // If the user specified target as string:
        if (typeof target === 'string') {
            if (target === 'all') {
                target = serverMethodMap;
            } else if (target === 'best') {
                target = serverMethodMap[0] !== undefined ? [serverMethodMap[0]] : [];  // If the user specified the target as server filter
            }
        } else {
            if (!Array.isArray(target)) {
                target = [target];
            }
            // Retrieve all getServers that match the filters
            target = target.reduce(function (matches, filter) {
                // Add matches for each filter
                var myMatches = serverMethodMap.filter(function (serverMethodPair) {
                    return instanceMatch(filter, serverMethodPair.server.info);
                });
                return matches.concat(myMatches);
            }, []);
        }
        return target;
    }

    /**
     * Matches a server definition against a server filter
     * @param instanceFilter
     * @param instanceDefinition
     */
    function instanceMatch(instanceFilter, instanceDefinition) {
        return containsProps(instanceFilter, instanceDefinition);
    }

    /**
     * Matches a method definition against a method filter
     * @param methodFilter
     * @param methodDefinition
     */
    function methodMatch(methodFilter, methodDefinition) {
        return containsProps(methodFilter, methodDefinition);
    }

    /**
     * Checks if all properties of filter match properties in object
     * @param filter
     * @param object
     * @returns {*}
     */
    function containsProps(filter, object) {
        return Object.keys(filter).reduce(function (match, prop) {
            // ignore undefined properties
            if (!filter[prop]) {
                return match;
            }

            if (filter[prop].constructor === RegExp) {
                if (!filter[prop].test(object[prop])) {
                    return false;
                } else {
                    return match;
                }
            } else {
                if (String(filter[prop]).toLowerCase() !== String(object[prop]).toLowerCase()) {
                    return false;
                } else {
                    return match;
                }
            }
        }, true);
    }

    /**
     * Subscribes to an AGM streaming method
     * @param name
     * @param options
     * @param successCallback
     * @param errorCallback
     * @returns {*}
     */
    function subscribe(name, options, successCallback, errorCallback) {
        // options can have arguments:{}, target: 'best'/'all'/{server_instance}, waitTimeoutMs:3000

        function callProtocolSubscribe(targetServers, stream, options, successProxy, errorProxy) {
            if (global.console !== undefined && configuration.debug === true) {
                console.log('>>> Subscribing to "' + name + '" on ' + targetServers.length + ' servers');
            }

            protocol.subscribe(
                stream,
                options.arguments,
                targetServers,
                { method_response_timeout: options.waitTimeoutMs },
                successProxy,
                errorProxy
            );
        }

        var promise = new Promise(function (resolve, reject) {

            var successProxy = function (args) {
                resolve(args);
            };
            var errorProxy = function (args) {
                reject(args);
            };

            if (options === undefined) {
                options = {};
            }
            var target = options.target;
            if (target === undefined) {
                target = 'best';
            }
            if (typeof target === 'string' && target !== 'all' && target !== 'best') {
                reject({ message: '"' + target + '" is not a valid target. Valid targets are "all", "best", or an instance.' });
            }
            if (typeof options.waitTimeoutMs !== 'number' || options.waitTimeoutMs !== options.waitTimeoutMs /* NaN */) {
                options.waitTimeoutMs = configuration.wait_for_method_timeout;
            }

            // don't check if the method is streaming or not, subscribing to non-streaming method has to invoke it
            var currentServers = getServerMethodsByFilterAndTarget({ name: name }, target);

            if (currentServers.length === 0) {

                // console.log('...no servers')//test

                setTimeout(function () {
                    var lateServers = getServerMethodsByFilterAndTarget({ name: name }, target);
                    // TODO: change to use the methodAdded handler
                    // TODO: set agm.methodAdded and if(waitTimeout>=0){setTimeout}

                    var streamInfo = lateServers.length > 0 ? lateServers[0].methods[0] : { name: name };
                    callProtocolSubscribe(lateServers, streamInfo, options, successProxy, errorProxy)

                }, options.waitTimeoutMs)

            } else {
                callProtocolSubscribe(currentServers, currentServers[0].methods[0], options, successProxy, errorProxy)
            }
        });

        return promisify(promise, successCallback, errorCallback);
    }

    return {
        subscribe: subscribe,
        invoke: invoke,
        servers: function (methodFilter) {
            return getServers(methodFilter).map(function (serverMethodMap) {
                return serverMethodMap.server.getInfoForUser();
            })
        },
        methods: function (methodFilter) {
            return getMethods(methodFilter).map(function (m) {
                return m.getInfoForUser()
            })
        },
        methodsForInstance: function (instance) {
            return getMethodsForInstance(instance).map(function (m) {
                return m.getInfoForUser()
            })
        },
        methodAdded: function (callback) {
            repo.onMethodAdded(function (method) {
                callback(method.getInfoForUser())
            })
        },
        methodRemoved: function (callback) {
            repo.onMethodRemoved(function (method) {
                callback(method.getInfoForUser())
            })
        },
        serverAdded: function (callback) {
            repo.onServerAdded(function (server) {
                callback(server.getInfoForUser())
            })
        },
        serverRemoved: function (callback) {
            repo.onServerRemoved(function (server, reason) {
                callback(server.getInfoForUser(), reason)
            })
        },
        serverMethodAdded: function (callback) {
            repo.onServerMethodAdded(function (server, method) {
                callback({ server: server.getInfoForUser(), method: method.getInfoForUser() })
            })
        },
        serverMethodRemoved: function (callback) {
            repo.onServerMethodRemoved(function (server, method) {
                callback({ server: server.getInfoForUser(), method: method.getInfoForUser() })
            })
        }
    };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./agm-client-invoke":36,"./helpers/promisify":45,"es6-promise":11}],38:[function(require,module,exports){
(function (global){
/*
 The AGM instance collects information about the machine we are in,
 and interacts with the .NET gateway in other ways,
 to deliver full AGM compatibility to AGM.JS.

 To do so, it relies on the default AGM client.
 */

var document = global.document || global.process;
var random = require('./helpers/random');

module.exports = function (userSubmittedProperties) {
    'use strict';

    var instance = {};
    // Generate default instance properties
    instance.ApplicationName = document.title + random();
    instance.ProcessId = Math.floor(Math.random() * 10000000000); // PID should be integer for protocolVersion 1
    instance.ProcessStartTime = new Date().getTime();

    // Apply user-submitted instance properties
    if (typeof userSubmittedProperties === 'object') {
        if (userSubmittedProperties.application !== undefined) {
            instance.ApplicationName = userSubmittedProperties.application;
        }
        instance.MachineName = userSubmittedProperties.machine;
        instance.UserName = userSubmittedProperties.user;
        instance.Environment = userSubmittedProperties.environment;
        instance.Region = userSubmittedProperties.region;
        instance.State = 1;
    }
    var identityUpdated = false;

    function updateIdentity(newInstance) {
        if (identityUpdated) {
            return;
        }
        if (instance.MachineName === undefined) {
            instance.MachineName = newInstance.MachineName;
        }
        if (instance.UserName === undefined) {
            instance.UserName = newInstance.UserName;
        }
        if (instance.Environment === undefined) {
            instance.Environment = newInstance.Environment;
        }
        if (instance.Region === undefined) {
            instance.Region = newInstance.Region;
        }
        if (instance.State === undefined) {
            instance.State = newInstance.State;
        }
        if (global.console !== undefined && global.console.table !== undefined && agm.debug === true) {
            console.log('Received instance with info from Gateway.');
        }
        identityUpdated = true;
    }

    // Create a method for accessing a property
    function createGetter(property) {
        return instance[property];
    }

    // Returns all instance properties
    function info() {
        return instance;
    }

    return {
        _updateIdentity: updateIdentity,
        info: info,
        get application() {
            return createGetter('ApplicationName');
        },
        get pid() {
            return createGetter('ProcessId');
        },
        get user() {
            return createGetter('UserName');
        },
        get machine() {
            return createGetter('MachineName');
        }
    };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./helpers/random":46}],39:[function(require,module,exports){
(function (global){
var Promise = require('es6-promise').Promise;
var promisify = require('./helpers/promisify');
var pjson = require('../package.json');

module.exports = function (configuration) {
    'use strict';

    // date parsing
    var facade = global.htmlContainer.jsAgmFacade;
    var dateTimeIdentifier = facade.jsonValueDatePrefix;
    var lenOfIdentifier = dateTimeIdentifier.length;

    function stringToObject(param, stringPropName) {
        if (typeof param === 'string') {
            var obj = {};
            obj[stringPropName] = param;
            return obj;
        }

        return param;
    }

    // helper function for parsing dates properly
    function agmParse(str) {
        return JSON.parse(str, function (k, v) {
            if (typeof v !== 'string') {
                return v;
            }

            // pre-seed - this should be a bit faster than indexOf
            if (v[0] !== dateTimeIdentifier[0]) {
                return v;
            }

            if (v.indexOf(dateTimeIdentifier) !== 0) {
                return v;
            }

            var unixTimestampMs = v.substr(lenOfIdentifier);
            return new Date(parseFloat(unixTimestampMs));
        });
    }

    /**
     * Converts a target argument to object ready to be passed to Agm facade
     * @param target
     */
    function targetArgToObject(target) {

        target = target || 'best';

        if (typeof target === 'string') {
            if (target !== 'all' && target !== 'best') {
                throw new Error('"' + target + '" is not a valid target. Valid targets are "all" and "best".');
            }
            return { target: target };
        } else {
            if (!Array.isArray(target)) {
                target = [target];
            }

            target = target.map(function (e) {
                return convertInstanceToRegex(e);
            });

            return { serverFilter: target };
        }
    }

    function convertInstanceToRegex(instance) {
        var instanceConverted = {};

        Object.keys(instance).forEach(function (key) {
            var propValue = instance[key];
            instanceConverted[key] = propValue;

            if (typeof propValue === 'undefined' || propValue === null) {
                return;
            }

            if (typeof propValue === 'string') {
                // do exact matching if user passed a string
                instanceConverted[key] = '^' + instance[key] + '$';
            } else if (instance[key].constructor === RegExp) {
                instanceConverted[key] = instance[key].source;
            } else {
                instanceConverted[key] = instance[key];
            }
        });
        return instanceConverted;
    }

    return new Promise(function (resolve) {
        var result = {

            version: pjson.version,

            // Registers a JavaScript function as an AGM method, thus making it available other AGM instances on the same transport.
            register: function (methodInfo, callback) {

                var pv = this.agmFacade.protocolVersion;

                if (pv && pv >= 3) {
                    // for newer HC use the version where we don't pass arguments as JSON (because of different issues)
                    this.agmFacade.register(JSON.stringify(stringToObject(methodInfo, 'name')),
                        callback,
                        true); // return as objects
                } else {
                    this.agmFacade.register(JSON.stringify(stringToObject(methodInfo, 'name')),
                        function (arg) {
                            var result = callback(JSON.parse(arg), arguments[1]);
                            return JSON.stringify(result);
                        });
                }
            },

            registerAsync: function (methodInfo, callback) {
                if (!this.agmFacade.registerAsync) {
                    throw new Error('not supported in that version of HtmlContainer');
                }

                this.agmFacade.registerAsync(stringToObject(methodInfo, 'name'),
                    function (args, instance, tracker) {
                        // execute the user callback
                        callback(args,
                            instance,
                            function (successArgs) {
                                tracker.success(successArgs);
                            },
                            function (error) {
                                tracker.error(error)
                            });
                    });
            },

            unregister: function (methodFilter) {
                this.agmFacade.unregister(JSON.stringify(stringToObject(methodFilter, 'name')));
            },

            // Invokes an AGM method asynchronously.
            invoke: function (methodFilter, args, target, options, successCallback, errorCallback) {

                var promise = new Promise(function (resolve, reject) {

                    if (args === undefined) {
                        args = {};
                    }

                    if (typeof args !== 'object') {
                        reject({ message: 'The method arguments must be an object.' });
                    }

                    if (options === undefined) {
                        options = {};
                    }

                    target = targetArgToObject(target);

                    if (this.agmFacade.invoke2) {
                        // invoke ver2 - do not stringify arguments and result values
                        this.agmFacade.invoke2(
                            JSON.stringify(stringToObject(methodFilter, 'name')),
                            args,
                            JSON.stringify(target),
                            JSON.stringify(options),
                            function (args) {
                                resolve(args)
                            },
                            function (err) {
                                reject(err)
                            }
                        );
                    } else {
                        var successProxy, errorProxy;

                        successProxy = function (args) {
                            var parsed = JSON.parse(args);
                            resolve(parsed);
                        };
                        errorProxy = function (args) {
                            var parsed = JSON.parse(args);
                            reject(parsed);
                        };
                        this.agmFacade.invoke(
                            JSON.stringify(stringToObject(methodFilter, 'name')),
                            JSON.stringify(args),
                            JSON.stringify(target),
                            JSON.stringify(options),
                            successProxy,
                            errorProxy
                        );
                    }

                }.bind(this));

                return promisify(promise, successCallback, errorCallback);
            },

            // Registers a handler which notifies you when a new AGM method is available.
            methodAdded: function (callback) {
                this.agmFacade.methodAdded(callback);
            },

            // Registers a handler which notifies you when an AGM method stops being available.
            methodRemoved: function (callback) {
                this.agmFacade.methodRemoved(callback);
            },

            serverAdded: function (callback) {
                this.agmFacade.serverAdded(callback);
            },

            serverRemoved: function (callback) {
                this.agmFacade.serverRemoved(callback);
            },

            serverMethodAdded: function (callback) {
                this.agmFacade.serverMethodAdded(callback);
            },

            serverMethodRemoved: function (callback) {
                this.agmFacade.serverMethodRemoved(callback);
            },

            // Retrieves a list of AGM servers (instances) optionally filtered by method.
            servers: function (methodFilter) {
                var jsonResult = this.agmFacade.servers(JSON.stringify(methodFilter));
                return agmParse(jsonResult);
            },

            // Retrieves a list of methods that matches a given filter. You can use this to check if a given method exists.
            methods: function (methodFilter) {
                var jsonResult = this.agmFacade.methods(JSON.stringify(methodFilter));
                return agmParse(jsonResult);
            },

            methodsForInstance: function (instanceFilter) {
                var jsonResult = this.agmFacade.methodsForInstance(JSON.stringify(instanceFilter));
                return agmParse(jsonResult);
            },

            // streaming support
            subscribe: function (name, options, successCallback, errorCallback) {
                var promise = new Promise(function (resolve, reject) {
                    if (options === undefined) {
                        options = {};
                    }
                    options.args = JSON.stringify(options.arguments || {});
                    options.target = targetArgToObject(options.target);

                    this.agmFacade.subscribe2(name,
                        JSON.stringify(options),
                        function (stream) {
                            resolve(stream);
                        },
                        function (error) {
                            reject(error);
                        }
                    );
                }.bind(this));

                return promisify(promise, successCallback, errorCallback);
            },

            createStream: function (streamDef, callbacks, successCallback, errorCallback) {
                var promise = new Promise(function (resolve, reject) {
                    if (typeof streamDef === 'string') {
                        streamDef = { name: streamDef };
                    }

                    if (!callbacks) {
                        callbacks = {};
                    }

                    this.agmFacade.createStream2(
                        JSON.stringify(streamDef),
                        // TODO - wrap to transform params
                        callbacks.subscriptionRequestHandler,
                        // TODO - wrap to transform params
                        callbacks.subscriptionAddedHandler,
                        // TODO - wrap to transform params
                        callbacks.subscriptionRemovedHandler,
                        // success handler
                        function (stream) {
                            resolve(stream);
                        },
                        // error handler
                        function (error) {
                            reject(error);
                        }
                    );
                }.bind(this));

                return promisify(promise, successCallback, errorCallback);
            }
        };

        // add metrics
        if (configuration !== undefined && configuration.metrics !== undefined) {
            configuration.metrics.metricsIdentity = configuration.metrics.identity;


            // quick and dirty - we need to stringify the configuration so we need to replace the metrics object (which has circular references)
            // with an object that holds only the properties needed
            var metricsConfig = {
                metricsIdentity: configuration.metrics.metricsIdentity,
                path: configuration.metrics.path
            };
            configuration.metrics = metricsConfig;
        }
        // remove the logger - we don't need it in HC and has circular references
        delete configuration.logger;

        // create new AGM façade for this instance
        result.instance = facade.init(JSON.stringify(configuration));
        result.agmFacade = facade;

        // deprecated API
        result.create_stream = result.createStream;
        result.methods_for_instance = result.methodsForInstance;
        result.method_added = result.methodAdded;
        result.method_removed = result.methodRemoved;
        result.server_added = result.serverAdded;
        result.server_removed = result.serverRemoved;
        result.server_method_added = result.serverMethodAdded;
        result.server_method_removed = result.serverMethodRemoved;

        resolve(result);
    });
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../package.json":60,"./helpers/promisify":45,"es6-promise":11}],40:[function(require,module,exports){
/*
 * Repository holding servers and methods visible by this peer including those created by the peer itself.
 */

var Callbacks = require('callback-registry');

module.exports = function () {
    'use strict';

    // each server has format {id:'', info:{}, methods:{}}
    // where methods has format {id:'', info:{}}
    var servers = {};

    // object keyed by method id - value is number of servers that offer that method
    var methodsCount = {};

    // store for callbacks
    var callbacks = new Callbacks();

    // add a new server to internal collection
    function addServer(info, serverId) {
        var current = servers[serverId];
        if (current) {
            return current.id;
        }

        var serverEntry = { id: serverId, info: info, methods: {} };
        serverEntry.getInfoForUser = function () {
            return createUserServerInfo(serverEntry.info);
        };

        servers[serverId] = serverEntry;
        callbacks.execute('onServerAdded', serverEntry);
        return serverId;
    }

    function removeServerById(id, reason) {
        var server = servers[id];

        Object.keys(server.methods).forEach(function (methodId) {
            removeServerMethod(id, methodId);
        });

        delete servers[id];
        callbacks.execute('onServerRemoved', server, reason);
    }

    function addServerMethod(serverId, method) {
        var server = servers[serverId];
        if (!server) {
            throw new Error('server does not exists');
        }

        var methodId = createMethodId(method);

        // server already has that method
        if (server.methods[methodId]) {
            return;
        }

        var methodEntity = { id: methodId, info: method };
        methodEntity.getInfoForUser = function () {
            return createUserMethodInfo(methodEntity.info);
        };
        server.methods[methodId] = methodEntity;

        // increase the ref and notify listeners
        if (!methodsCount[methodId]) {
            methodsCount[methodId] = 0;
            callbacks.execute('onMethodAdded', methodEntity);
        }
        methodsCount[methodId] = methodsCount[methodId] + 1;
        callbacks.execute('onServerMethodAdded', server, methodEntity);
    }

    function createMethodId(methodInfo) {
        // Setting properties to defaults:
        var accepts = methodInfo.accepts !== undefined ? methodInfo.accepts : '';
        var returns = methodInfo.returns !== undefined ? methodInfo.returns : '';
        var version = methodInfo.version !== undefined ? methodInfo.version : 0;
        return (methodInfo.name + accepts + returns + version).toLowerCase();
    }

    function removeServerMethod(serverId, methodId) {
        var server = servers[serverId];
        if (!server) {
            throw new Error('server does not exists');
        }

        var method = server.methods[methodId];
        delete server.methods[methodId];

        // update ref counting
        methodsCount[methodId] = methodsCount[methodId] - 1;
        if (methodsCount[methodId] === 0) {
            callbacks.execute('onMethodRemoved', method);
        }

        callbacks.execute('onServerMethodRemoved', server, method);
    }

    function getMethods() {

        var allMethods = {};
        Object.keys(servers).forEach(function (serverId) {
            var server = servers[serverId];
            Object.keys(server.methods).forEach(function (methodId) {
                var method = server.methods[methodId];
                allMethods[method.id] = method;
            })
        });

        var methodsAsArray = Object.keys(allMethods).map(function (id) {
            return allMethods[id];
        });

        return methodsAsArray;
    }

    function getServers() {
        var allServers = [];
        Object.keys(servers).forEach(function (serverId) {
            var server = servers[serverId];
            allServers.push(server)
        });

        return allServers;
    }

    function getServerMethodById(serverId) {
        var server = servers[serverId];

        return Object.keys(server.methods).map(function (id) {
            return server.methods[id];
        });
    }

    function onServerAdded(callback) {
        callbacks.add('onServerAdded', callback);

        // replay all servers
        getServers().forEach(function (server) {
            callback(server);
        });
    }

    function onMethodAdded(callback) {
        callbacks.add('onMethodAdded', callback);

        // reply all existing methods
        getMethods().forEach(function (method) {
            callback(method);
        })
    }

    function onServerMethodAdded(callback) {
        callbacks.add('onServerMethodAdded', callback);
        // TODO - the old version does not do this - confirm what is correct
    }

    function getServerById(id) {
        return servers[id];
    }

    /**
     * Transforms internal server object to user object
     * @param server
     * @returns {{machine: *, pid: *, started: *, user: *, application: *, environment: *, region: *, service_name: *, state: *}}
     */
    function createUserServerInfo(serverInfo) {
        return {
            machine: serverInfo.machine,
            pid: serverInfo.pid,
            user: serverInfo.user,
            application: serverInfo.application,
            environment: serverInfo.environment,
            region: serverInfo.region,
            instance: serverInfo.instance
        };
    }

    /**
     * Transforms internal method object to user object
     * @param method
     * @returns {{name: *, accepts: *, returns: *, description: *, display_name: *, version: *, object_types: (*|Array)}}
     */
    function createUserMethodInfo(methodInfo) {
        return {
            name: methodInfo.name,
            accepts: methodInfo.accepts,
            returns: methodInfo.returns,
            description: methodInfo.description,
            displayName : methodInfo.displayName,
            version: methodInfo.version,
            objectTypes: methodInfo.objectTypes,
            supportsStreaming: methodInfo.supportsStreaming
        };
    }

    return {
        getServerById: getServerById,
        getServers: getServers,
        getMethods: getMethods,
        getServerMethodsById: getServerMethodById,
        getMethodId: createMethodId,
        addServer: addServer,
        addServerMethod: addServerMethod,
        removeServerById: removeServerById,
        removeServerMethod: removeServerMethod,

        onServerAdded: onServerAdded,
        onServerRemoved: function (callback) {
            callbacks.add('onServerRemoved', callback);
        },
        onMethodAdded: onMethodAdded,
        onMethodRemoved: function (callback) {
            callbacks.add('onMethodRemoved', callback);
        },
        onServerMethodAdded: onServerMethodAdded,
        onServerMethodRemoved: function (callback) {
            callbacks.add('onServerMethodRemoved', callback);
        }
    }
};

},{"callback-registry":6}],41:[function(require,module,exports){
/*
 The streaming module defines the user objects relevant to the streaming api, and
 attaches to relevant events exposed by the protocol.
 */

module.exports = function (protocol, unregister) {
    'use strict';

    function streamFrontObj(repoMethod) {
        var def = repoMethod.definition;

        return {
            branches: function () {
                var bList = protocol.getBranchList(repoMethod);
                return bList.map(function (branchKey) {
                    return branchFrontObj(repoMethod, branchKey)
                });
            },
            close: function () {
                protocol.closeAllSubscriptions(repoMethod);
                unregister(repoMethod.definition);
            },
            definition: {
                accepts: def.accepts,
                description: def.description,
                displayName: def.displayName,
                name: def.name,
                objectTypes: def.objectTypes,
                returns: def.returns,
                supportsStreaming: def.supportsStreaming
            },
            name: def.name,
            push: function (data, branches) {
                if (typeof branches !== 'string' && !Array.isArray(branches) && branches !== undefined) {
                    throw new Error('invalid branches should be string or string array');
                }
                // TODO validate if is plain object
                if (typeof data !== 'object') {
                    throw new Error('Invalid arguments. Data must be an object.')
                }
                protocol.pushData(repoMethod, data, branches)
            },
            subscriptions: function () {
                var subList = protocol.getSubscriptionList(repoMethod);
                return subList.map(function (sub) {
                    return subscriptionFrontObj(repoMethod, sub)
                });
            }
        }
    }

    function subscriptionFrontObj(repoMethod, subscription) {
        return {
            arguments: subscription.arguments || {},
            branchKey: subscription.branchKey,
            close: function () {
                protocol.closeSingleSubscription(repoMethod, subscription)
            },
            instance: subscription.instance,
            push: function (data) {
                protocol.pushDataToSingle(repoMethod, subscription, data);
            },
            stream: repoMethod.definition
        };
    }

    function branchFrontObj(repoMethod, branchKey) {
        return {
            key: branchKey,
            subscriptions: function () {
                var subList = protocol.getSubscriptionList(repoMethod, branchKey);
                return subList.map(function (sub) {
                    return subscriptionFrontObj(repoMethod, sub)
                });
            },
            close: function () {
                protocol.closeAllSubscriptions(repoMethod, branchKey);
            },
            push: function (data) {
                protocol.pushToBranch(repoMethod, data, branchKey)
            }
        };
    }

    /** Attach to stream 'events' */
    protocol.onSubRequest(function (requestContext, repoMethod) {

        if (!(
            repoMethod &&
            repoMethod.streamCallbacks &&
            typeof repoMethod.streamCallbacks.subscriptionRequestHandler === 'function')
        ) {
            return;
        }

        repoMethod.streamCallbacks.subscriptionRequestHandler({
            accept: function () {
                protocol.acceptRequestOnBranch(requestContext, repoMethod, '');
            },
            acceptOnBranch: function (branch) {
                protocol.acceptRequestOnBranch(requestContext, repoMethod, branch)
            },
            arguments: requestContext.arguments,
            instance: requestContext.instance,
            reject: function (reason) {
                protocol.rejectRequest(requestContext, repoMethod, reason)
            }
        });
    });

    protocol.onSubAdded(function (subscription, repoMethod) {

        if (!(
            repoMethod &&
            repoMethod.streamCallbacks &&
            typeof repoMethod.streamCallbacks.subscriptionAddedHandler === 'function')
        ) {
            return;
        }

        repoMethod.streamCallbacks.subscriptionAddedHandler(subscriptionFrontObj(repoMethod, subscription))

    });

    protocol.onSubRemoved(function (subscriber, repoMethod) {

        if (!(
            repoMethod &&
            repoMethod.streamCallbacks &&
            typeof repoMethod.streamCallbacks.subscriptionRemovedHandler === 'function')
        ) {
            return;
        }

        repoMethod.streamCallbacks.subscriptionRemovedHandler(subscriber)

    });

    return { streamFrontObj: streamFrontObj };
};

},{}],42:[function(require,module,exports){
/*
 * A store for holding method back-objects registered by this instance's server
 */
module.exports = function () {
    'use strict';

    var nextId = 0;
    var _methods = [];

    function add(method) {
        if (typeof method !== 'object') {
            return;
        }

        if (method._repoId !== undefined) {
            return;
        }

        method._repoId = nextId;
        nextId += 1;

        _methods.push(method);

        return method;
    }

    function remove(repoId) {
        if (typeof repoId !== 'number') {
            return new TypeError('Expecting a number');
        }

        _methods = _methods.filter(function (m) {
            return m._repoId !== repoId;
        });
    }

    function getById(id) {
        if (typeof id !== 'number') {
            return new TypeError('Expecting a number');
        }

        return _methods.filter(function (m) {
            return m._repoId === id
        })[0];
    }

    function getList() {
        return _methods.map(function (m) {
            return m;
        });
    }

    function length() {
        return _methods.length;
    }

    return {
        add: add,
        remove: remove,
        getById: getById,
        getList: getList,
        length: length
    };
};

},{}],43:[function(require,module,exports){
/*
 The AGM Server allows users register AGM methods.
 It exposes these methods to AGM clients (using presence messages) and listens for their invocation
 */

var Promise = require('es6-promise').Promise;
var Promisify = require('./helpers/promisify');
var Streaming = require('./agm-server-streaming');

module.exports = function (protocol, vault, instance, configuration) {
    'use strict';

    // Save the reference to the metric function if it exists
    var metric = (configuration.metrics !== undefined) ? configuration.metrics.numberMetric.bind(configuration.metrics) : function () {
    };

    // An array of the server's methods
    var streaming = new Streaming(protocol, unregister);

    protocol.onInvoked(onMethodInvoked);

    var invocations = 0;

    function onMethodInvoked(methodToExecute, invocationId, invocationArgs) {
        metric('Invocations count', invocations++);

        if (!methodToExecute) {
            return;
        }

        // Execute it and save the result
        methodToExecute.theFunction(invocationArgs, function (err, result) {
            if (err) {
                // handle error case
                if (typeof err.message === 'string') {
                    err = err.message;
                } else if (typeof err !== 'string') {
                    err = '';
                }
            }

            // The AGM library only transfers objects. If the result is not an object, put it in one
            if (!result || typeof result !== 'object' || result.constructor === Array) {
                result = { _result: result };
            }

            protocol.methodInvocationResult(methodToExecute, invocationId, err, result)
        });
    }

    // registers a new agm method
    function register(methodDefinition, callback) {

        registerCore(methodDefinition, function (context, resultCallback) {
            // get the result as direct invocation of the callback and return it using resultCallback
            try {
                var result = callback(context.args, context.instance);
                resultCallback(null, result);
            } catch (e) {
                resultCallback(e, null);
            }
        });
    }

    // registers a new async agm method (the result can be returned in async way)
    function registerAsync(methodDefinition, callback) {

        registerCore(methodDefinition, function (context, resultCallback) {
            // invoke the callback passing success and error callbacks
            try {
                callback(context.args, context.instance,
                    // success callback
                    function (result) {
                        resultCallback(null, result);
                    },
                    // error callback
                    function (e) {
                        resultCallback(e, null);
                    });
            } catch (e) {
                resultCallback(e, null);
            }
        });
    }

    // Registers a new streaming agm method
    function createStream(streamDef, callbacks, successCallback, errorCallback) {
        // in callbacks we have subscriptionRequestHandler, subscriptionAddedHandler, subscriptionRemovedHandler

        var promise = new Promise(function (resolve, reject) {
            if (typeof streamDef === 'string') {

                if (streamDef === '') {
                    reject('Invalid stream name.');
                }

                streamDef = { name: streamDef };
            }

            streamDef.supportsStreaming = true;

            // User-supplied subscription callbacks
            if (!callbacks) {
                callbacks = {};
            }

            if (typeof callbacks.subscriptionRequestHandler !== 'function') {
                callbacks.subscriptionRequestHandler = function (request) {
                    request.accept();
                }
            }

            var repoMethod = {
                method: undefined, // to be initialized by protocol
                definition: streamDef, // store un-formatted definition for checkups in un-register method
                streamCallbacks: callbacks
            };

            // Add the method
            vault.add(repoMethod);

            protocol.createStream(repoMethod, streamDef,
                function protocolSuccess() {
                    metric('Registered methods', vault.length());

                    var streamFrobject = streaming.streamFrontObj(repoMethod);

                    resolve(streamFrobject);
                },
                function protocolFail(err) {
                    vault.remove(repoMethod._repoId);

                    reject(err);
                });
        });

        return new Promisify(promise, successCallback, errorCallback);
    }

    // Core method for registering agm method
    function registerCore(methodDefinition, theFunction) {
        // transform the definition
        if (typeof methodDefinition === 'string') {
            methodDefinition = { name: methodDefinition };
        }

        // Add the method ()
        var repoMethod = vault.add({
            definition: methodDefinition, // store un-formatted definition for checkups in un-register method
            theFunction: theFunction
        });

        protocol.register(repoMethod,
            function protocolSuccess() {
                metric('Registered methods', vault.length());
            },
            function protocolFail() {
                vault.remove(repoMethod._repoId);
            });
    }

    // Converts the method definition from camel case to snake case
    function containsProps(filter, object) {
        var match = true;
        Object.keys(filter).forEach(function (prop) {
            if (filter[prop] !== object[prop]) {
                match = false;
            }
        });
        return match;
    }


    // TODO add success/fail here and at gw1+2 implementations?
    // Unregisters a previously registered AGM method
    function unregister(methodFilter) {
        if (typeof methodFilter === 'string') {
            methodFilter = { name: methodFilter };
        }

        var methodsToBeRemoved = vault.getList().filter(function (method) {
            return containsProps(methodFilter, method.definition);
        });

        // update repository
        methodsToBeRemoved.forEach(function (method) {
            vault.remove(method._repoId);
            protocol.unregister(method);
        });

        metric('Registered methods', vault.length());
    }

    return { register: register, registerAsync: registerAsync, unregister: unregister, createStream: createStream };
};

},{"./agm-server-streaming":41,"./helpers/promisify":45,"es6-promise":11}],44:[function(require,module,exports){
(function (global){
var connection = require('tick42-gateway-connection');
var instance = require('./agm-instance');
var nativeAgm = require('./agm-native');
var deprecate = require('util-deprecate');
var pjson = require('../package.json');
var client = require('./agm-client');
var server = require('./agm-server');
var gW1Protocol = require('./protocols/gw1/protocol');
var gW3Protocol = require('./protocols/gw3/protocol');
var repository = require('./agm-repository');
var vault = require('./agm-server-vault');
var Promise = require('es6-promise').Promise;

// Add a global function that makes an AGM instance
agm = function (configuration) {
    'use strict';
    // We will store the library here
    var agm = {};
    agm.version = pjson.version;


    // Init configuration
    if (typeof configuration !== 'object') {
        configuration = {};
    }

    // Validate configuration

    // Init child configuration if it is not already passed by user
    var childConfigurations = ['connection', 'client', 'server'];
    childConfigurations.forEach(function (conf) {
        if (typeof configuration[conf] !== 'object') {
            configuration[conf] = {};
        }
        // Set debug if global debug is not set:
        if (configuration.debug) {
            configuration[conf].debug = true;
        }
    });

    if (typeof configuration.client.remove_server_on_n_missing_heartbeats !== 'number') {
        configuration.client.remove_server_on_n_missing_heartbeats = 3;
    }
    if (typeof configuration.client.method_response_timeout !== 'number') {
        configuration.client.method_response_timeout = 3000;
    }
    if (typeof configuration.client.wait_for_method_timeout !== 'number') {
        configuration.client.wait_for_method_timeout = 3000;
    }

    if (typeof configuration.server.heartbeat_interval !== 'number') {
        configuration.server.heartbeat_interval = 5000;
    }
    if (typeof configuration.server.presence_interval !== 'number') {
        configuration.server.presence_interval = 10000;
    }

    // Determine if we are given a connection object. If not, create it ourselves:
    var c = configuration.connection;
    agm.connection = (typeof c === 'object' && typeof c.send === 'function' && typeof c.on === 'function') ? c : connection(configuration.connection);

    // Create a connection proxy which sets the product name automatically
    var productName = 'agm';
    var agmEnabledConnection = {
        send: function (type, message) {
            agm.connection.send(productName, type, message);
        },
        on: function (type, handler) {
            agm.connection.on(productName, type, handler);
        },
        connected: agm.connection.connected,
        // TODO - stop wrapping connection , just extend it with sendAGM, onAGM
        getPeerId: function() {
            return agm.connection.peerId;
        }
    };
    // Save a reference to the root system object that we are given
    var metricsRoot = configuration.metrics;
    // Create subsystems for our modules and save them in their configuration.
    if (metricsRoot !== undefined) {
        configuration.client.metrics = metricsRoot.subSystem('Client');
        configuration.server.metrics = metricsRoot.subSystem('Server');
    }

    // Initialize our modules
    agm.instance = instance(configuration.instance);
    var clientRepository = repository();
    var serverRepository = vault();
    var protocolPromise;
    var protocolVersion = c.protocolVersion;
    if (protocolVersion === 3) {
        protocolPromise = gW3Protocol(agm.instance, agmEnabledConnection, clientRepository, serverRepository, configuration);
    } else {
        protocolPromise = gW1Protocol(agm.instance, agmEnabledConnection, clientRepository, serverRepository, configuration);
    }

    return new Promise(function(resolve, reject) {
        // wait for protocol to resolve
        protocolPromise.then(function (protocol) {
            agm.client = client(protocol, clientRepository, agm.instance, configuration.client);
            agm.server = server(protocol, serverRepository, agm.instance, configuration.server);

            // Add method aliases
            agm.invoke = agm.client.invoke;
            agm.register = agm.server.register;
            agm.registerAsync = agm.server.registerAsync;
            agm.unregister = agm.server.unregister;
            agm.createStream = agm.server.createStream;
            agm.subscribe = agm.client.subscribe;
            agm.servers = agm.client.servers;
            agm.methods = agm.client.methods;

            agm.methodsForInstance = agm.client.methodsForInstance;
            agm.method = agm.client.method;
            agm.methodAdded = agm.client.methodAdded;
            agm.methodRemoved = agm.client.methodRemoved;

            agm.serverMethodAdded = agm.client.serverMethodAdded;
            agm.serverMethodRemoved = agm.client.serverMethodRemoved;

            agm.serverAdded = agm.client.serverAdded;
            agm.serverRemoved = agm.client.serverRemoved;

            // deprecated API
            agm.methods_for_instance = deprecate(agm.client.methodsForInstance, 'glue.agm.client.methods_for_instance() is deprecated and might be removed from future versions of glue. Use glue.agm.client.methodsForInstance() instead');
            agm.method_added = deprecate(agm.client.methodAdded, 'glue.agm.method_added() is deprecated and might be removed from future versions of glue. Use glue.agm.methodAdded() instead');
            agm.method_removed = deprecate(agm.client.methodRemoved, 'glue.agm.method_removed() is deprecated and might be removed from future versions of glue. Use glue.agm.methodRemoved() instead');
            agm.server_method_added = deprecate(agm.client.serverMethodAdded, 'glue.agm.server_method_added() is deprecated and might be removed from future versions of glue. Use glue.agm.serverMethodAdded() instead');
            agm.server_method_removed = deprecate(agm.client.serverMethodRemoved, 'glue.agm.server_method_removed() is deprecated and might be removed from future versions of glue. Use glue.agm.serverMethodRemoved() instead');
            agm.server_added = deprecate(agm.client.serverAdded, 'glue.agm.server_added() is deprecated and might be removed from future versions of glue. Use glue.agm.serverAdded() instead');
            agm.server_removed = deprecate(agm.client.serverRemoved, 'glue.agm.server_removed() is deprecated and might be removed from future versions of glue. Use glue.agm.serverRemoved() instead');

            resolve(agm);

        })['catch'](function (err) {
            reject(err);
        });
    });

};
agm = global.htmlContainer !== undefined ? nativeAgm : agm;

// Export for browsers
if (global.tick42 === undefined) {
    global.tick42 = {};
}
global.tick42.agm = agm;

module.exports = agm;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../package.json":60,"./agm-client":37,"./agm-instance":38,"./agm-native":39,"./agm-repository":40,"./agm-server":43,"./agm-server-vault":42,"./protocols/gw1/protocol":50,"./protocols/gw3/protocol":56,"es6-promise":11,"tick42-gateway-connection":78,"util-deprecate":109}],45:[function(require,module,exports){
(function (global){
module.exports = function (promise, successCallback, errorCallback) {
    'use strict';
    if (typeof successCallback !== 'function' && typeof errorCallback !== 'function') {
        return promise;
    }

    if (typeof successCallback !== 'function') {
        successCallback = function () {
            if (global.console !== undefined && agm.debug === true) {
                console.log('Success!');
            }
        };
    } else if (typeof errorCallback !== 'function') {
        errorCallback = function () {
            if (global.console !== undefined && agm.debug === true) {
                console.log('An error occurred.');
            }
        };
    }

    promise.then(successCallback, errorCallback);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],46:[function(require,module,exports){
var cuid = require('cuid');

module.exports = function () {
    'use strict';
    return cuid();
};

},{"cuid":7}],47:[function(require,module,exports){
(function (global){
var random = require('./../../helpers/random');
var helpers = require('./helpers');

module.exports = function (configuration, instance, sendRequest, nextResponseSubject) {
    'use strict';

    var STATUS_AWAITING_ACCEPT = 'awaitingAccept'; // not even one server has accepted yet
    var STATUS_SUBSCRIBED = 'subscribed'; // at least one server has responded as 'Accepting'
    var ERR_MSG_SUB_FAILED = 'Subscription failed.';
    var ERR_MSG_SUB_REJECTED = 'Subscription rejected.';
    var ON_CLOSE_MSG_SERVER_INIT = 'ServerInitiated';
    var ON_CLOSE_MSG_CLIENT_INIT = 'ClientInitiated';

    var subscriptionsList = {};

    function subscribe(streamingMethod, argumentObj, targetServers, stuff, success, error) {
        if (targetServers.length === 0) {
            error(ERR_MSG_SUB_FAILED + ' No available servers matched the target params.');
            return;
        }

        // This same Id will be passed to all the servers (as 'InvocationId')
        // so they can respond back with it during the initial handshake
        var subscriptionId = 'subscriptionId_' + random();

        // Register the user's callbacks
        var pendingSub = registerSubscription(
            subscriptionId,
            streamingMethod,
            argumentObj,
            success,
            error,
            stuff.method_response_timeout
        );

        if (typeof pendingSub !== 'object') {
            error(ERR_MSG_SUB_FAILED + ' Unable to register the user callbacks.');
            return;
        }

        // Send a subscription request to each server
        targetServers.forEach(function (target) {

            // Get a response subject for this invocation
            var responseSubject = nextResponseSubject();

            // Add server to the list of ones the client is expecting a response from
            pendingSub.trackedServers.push({
                server: undefined,
                streamId: undefined,
                streamSubjects: {
                    global: undefined,
                    private: undefined
                },
                methodRequestSubject: streamingMethod.info.requestSubject,
                methodResponseSubject: responseSubject
            });

            // Construct a message
            var message = {
                EventStreamAction: 1, // "Subscribe" = client wishes to subscribe
                MethodRequestSubject: streamingMethod.info.requestSubject,
                MethodResponseSubject: responseSubject,
                Client: instance.info(),
                Context: {
                    ArgumentsJson: argumentObj,
                    InvocationId: subscriptionId,
                    ObjectType: stuff.object_type,
                    DisplayContext: stuff.display_context,
                    MethodName: streamingMethod.info.name,
                    ExecutionServer: target.server,
                    Timeout: stuff.method_response_timeout
                }
            };

            // Send it
            sendRequest(message);

            if (global.console !== undefined && configuration.debug === true) {
                console.debug('%c>>> sending MethodInvocationRequestMessage', 'background-color:hsla(198, 51%, 79%, 0.5)');
                console.debug('%c' + JSON.stringify(message), 'background-color:hsla(198, 51%, 79%, 0.5)');
            }

        });


    }

    function registerSubscription(subscriptionId, method, args, success, error, timeout) {

        subscriptionsList[subscriptionId] = {
            status: STATUS_AWAITING_ACCEPT,
            method: method,
            arguments: args,
            success: success,
            error: error,
            trackedServers: [],
            handlers: {
                onData: [],
                onClosed: []
                // onFailed: []
            },
            queued: {
                data: [],
                closers: []
            },
            timeoutId: undefined
        };


        subscriptionsList[subscriptionId].timeoutId = setTimeout(function () {
            if (subscriptionsList[subscriptionId] === undefined) {
                return; // no such subscription
            }

            var subscription = subscriptionsList[subscriptionId];


            if (subscription.status === STATUS_AWAITING_ACCEPT) {
                error({
                    method: method,
                    called_with: args,
                    message: ERR_MSG_SUB_FAILED + ' Subscription attempt timed out after ' + timeout + 'ms.'
                });

                // None of the target servers has answered the subscription attempt
                delete subscriptionsList[subscriptionId];

            } else if (subscription.status === STATUS_SUBSCRIBED &&
                subscription.trackedServers.length > 0) {
                // Clean the trackedServers, removing those without valid streamId
                subscription.trackedServers = subscription.trackedServers.filter(function (server) {
                    return (typeof server.streamId === 'string' && server.streamId !== '')
                });

                subscription.timeoutId = undefined;

                if (subscription.trackedServers.length === 0) {
                    // TODO this might be dead-code, where is closers.push?
                    // There are no open streams, some servers accepted then closed very quickly
                    //	(that's why the status changed but there's no good server with a StreamId)

                    // call the onClosed handlers
                    var closersCount = subscription.queued.closers.length;
                    var closingServer = (closersCount > 0) ? subscription.queued.closers[closersCount - 1] : null;

                    subscription.handlers.onClosed.forEach(function (callback) {
                        if (typeof callback === 'function') {
                            callback({
                                message: ON_CLOSE_MSG_SERVER_INIT,
                                requestArguments: subscription.arguments,
                                server: closingServer,
                                stream: subscription.method
                            })
                        }
                    });

                    delete subscriptionsList[subscriptionId];
                }
            }
        }, timeout);

        return subscriptionsList[subscriptionId]
    }

    function processPublisherMsg(msg) {
        if (!(msg && msg.EventStreamAction && msg.EventStreamAction !== 0)) {
            return;
        }

        if (msg.EventStreamAction === 2) {

            serverIsKickingASubscriber(msg);

        } else if (msg.EventStreamAction === 3) {

            serverAcknowledgesGoodSubscription(msg);

        } else if (msg.EventStreamAction === 5) {

            serverHasPushedSomeDataIntoTheStream(msg);
        }

    }

    /** msg 'Response' Actions */
    // action 2
    function serverIsKickingASubscriber(msg) {
        // Note: this might be either the server rejecting a subscription request OR closing an existing subscription

        // Get ALL subscriptions
        var keys = Object.keys(subscriptionsList);

        // If it is a rejection there may be an InvocationId, it can narrow the search
        if (typeof msg.InvocationId === 'string' && msg.InvocationId !== '') {
            keys = keys.filter(function (k) {
                return k === msg.InvocationId;
            })
        }

        var deletionsList = [];

        // Find the kicking/rejecting server and remove it from the subscription.trackedServers[]
        keys.forEach(function (key) {
            if (typeof subscriptionsList[key] !== 'object') {
                return;
            }

            subscriptionsList[key].trackedServers = subscriptionsList[key].trackedServers.filter(function (server) {
                var isRejecting = (
                    server.methodRequestSubject === msg.MethodRequestSubject && server.methodResponseSubject === msg.MethodResponseSubject
                );

                var isKicking = (
                    server.streamId === msg.StreamId &&
                    (server.streamSubjects.global === msg.EventStreamSubject || server.streamSubjects.private === msg.EventStreamSubject)
                );

                var isRejectingOrKicking = isRejecting || isKicking;

                return !isRejectingOrKicking;
            });

            if (subscriptionsList[key].trackedServers.length === 0) {
                deletionsList.push(key);
            }
        });

        // Call onClosed OR error()
        // and remove the subscription
        deletionsList.forEach(function (key) {
            if (typeof subscriptionsList[key] !== 'object') {
                return;
            }

            if (
                subscriptionsList[key].status === STATUS_AWAITING_ACCEPT &&
                typeof subscriptionsList[key].timeoutId === 'number'
            ) {

                var reason = (typeof msg.ResultMessage === 'string' && msg.ResultMessage !== '')
                    ? ' Publisher said "' + msg.ResultMessage + '".'
                    : ' No reason given.';

                var callArgs = typeof subscriptionsList[key].arguments === 'object'
                    ? JSON.stringify(subscriptionsList[key].arguments)
                    : '{}';

                subscriptionsList[key].error(ERR_MSG_SUB_REJECTED + reason + ' Called with:' + callArgs);
                clearTimeout(subscriptionsList[key].timeoutId);

            } else {

                // The timeout may or may not have expired yet,
                // but the status is 'subscribed' and trackedServers is now empty

                subscriptionsList[key].handlers.onClosed.forEach(function (callback) {
                    if (typeof callback !== 'function') {
                        return;
                    }

                    callback({
                        message: ON_CLOSE_MSG_SERVER_INIT,
                        requestArguments: subscriptionsList[key].arguments,
                        server: helpers.convertInfoToInstance(msg.Server),
                        stream: subscriptionsList[key].method
                    });
                });

            }

            delete subscriptionsList[key];

        });
    }

    // action 3
    function serverAcknowledgesGoodSubscription(msg) {

        var subscriptionId = msg.InvocationId;

        var subscription = subscriptionsList[subscriptionId];

        if (typeof subscription !== 'object') {
            return;
        }

        var acceptingServer = subscription.trackedServers.filter(function (server) {
            return (
                server.methodRequestSubject === msg.MethodRequestSubject &&
                server.methodResponseSubject === msg.MethodResponseSubject
            )
        })[0];

        if (typeof acceptingServer !== 'object') {
            return;
        }

        var isFirstResponse = (subscription.status === STATUS_AWAITING_ACCEPT);

        subscription.status = STATUS_SUBSCRIBED;

        var privateStreamSubject = generatePrivateStreamSubject(subscription.method.name);

        if (typeof acceptingServer.streamId === 'string' && acceptingServer.streamId !== '') {
            return; // already accepted previously
        }

        acceptingServer.server = helpers.convertInfoToInstance(msg.Server);
        acceptingServer.streamId = msg.StreamId;
        acceptingServer.streamSubjects.global = msg.EventStreamSubject;
        acceptingServer.streamSubjects.private = privateStreamSubject;
        // acceptingServer.methodResponseSubject stays the same

        var confirmatoryRequest = {
            EventStreamAction: 3, // "Subscribed" = client confirms intention to subscribe
            EventStreamSubject: privateStreamSubject,
            StreamId: msg.StreamId,
            MethodRequestSubject: msg.MethodRequestSubject,
            MethodResponseSubject: acceptingServer.methodResponseSubject,
            Client: instance.info(),
            Context: {
                ArgumentsJson: subscription.arguments,
                MethodName: subscription.method.name
            }
        };

        sendRequest(confirmatoryRequest);

        if (isFirstResponse) {
            // Pass in the subscription object
            subscription.success({
                onData: function (dataCallback) {
                    if (typeof dataCallback !== 'function') {
                        throw new TypeError('The data callback must be a function.')
                    }

                    this.handlers.onData.push(dataCallback)
                    if (this.handlers.onData.length === 1 && this.queued.data.length > 0) {
                        this.queued.data.forEach(function (dataItem) {
                            dataCallback(dataItem)
                        })
                    }
                }.bind(subscription),
                onClosed: function (closedCallback) {
                    if (typeof closedCallback !== 'function') {
                        throw new TypeError('The callback must be a function.')
                    }
                    this.handlers.onClosed.push(closedCallback)
                }.bind(subscription),
                onFailed: function () { /* Will not be implemented for browser. */
                },
                close: closeSubscription.bind(subscription, subscriptionId),
                requestArguments: subscription.arguments,
                serverInstance: helpers.convertInfoToInstance(msg.Server),
                stream: subscription.method
            });
        }
    }

    // action 5
    function serverHasPushedSomeDataIntoTheStream(msg) {

        // Find the subscription of interest by trawling the dictionary
        for (var key in subscriptionsList) {
            if (subscriptionsList.hasOwnProperty(key) && typeof subscriptionsList[key] === 'object') {

                var isPrivateData;

                var trackedServersFound = subscriptionsList[key].trackedServers.filter(function (ls) {
                    return (
                        ls.streamId === msg.StreamId &&
                        (ls.streamSubjects.global === msg.EventStreamSubject ||
                        ls.streamSubjects.private === msg.EventStreamSubject)
                    );
                });

                if (trackedServersFound.length === 0) {
                    isPrivateData = undefined;
                } else if (trackedServersFound[0].streamSubjects.global === msg.EventStreamSubject) {
                    isPrivateData = false;
                } else if (trackedServersFound[0].streamSubjects.private === msg.EventStreamSubject) {
                    isPrivateData = true;
                }

                if (isPrivateData !== undefined) {
                    // create the arrivedData object
                    var receivedStreamData = {
                        data: msg.ResultContextJson,
                        server: helpers.convertInfoToInstance(msg.Server),
                        requestArguments: subscriptionsList[key].arguments || {},
                        message: msg.ResultMessage,
                        private: isPrivateData
                    };

                    var onDataHandlers = subscriptionsList[key].handlers.onData;
                    var queuedData = subscriptionsList[key].queued.data;

                    if (Array.isArray(onDataHandlers)) {
                        if (onDataHandlers.length > 0) {
                            onDataHandlers.forEach(function (callback) {
                                if (typeof callback === 'function') {
                                    callback(receivedStreamData)
                                }
                            })
                        } else {
                            queuedData.push(receivedStreamData)
                        }
                    }
                }
            }
        }// end for-in
    }

    /** (subscription) Methods */
    function closeSubscription(subId) {

        var responseSubject = nextResponseSubject();

        this.trackedServers.forEach(function (server) {
            sendRequest({
                EventStreamAction: 2,
                Client: instance.info(),
                MethodRequestSubject: server.methodRequestSubject,
                MethodResponseSubject: responseSubject,
                StreamId: server.streamId,
                EventStreamSubject: server.streamSubjects.private
            });
        });

        var sub = this;

        // Call the onClosed handlers
        this.handlers.onClosed.forEach(function (callback) {
            if (typeof callback === 'function') {
                callback({
                    message: ON_CLOSE_MSG_CLIENT_INIT,
                    requestArguments: sub.arguments || {},
                    server: sub.trackedServers[sub.trackedServers.length - 1].server, // the last one of multi-server subscription
                    stream: sub.method
                })
            }
        });

        delete subscriptionsList[subId];
    }

    function generatePrivateStreamSubject(methodName) {

        var appInfo = instance.info();

        var privateStreamSubject = 'ESSpriv-jsb_' +
            appInfo.ApplicationName +
            '_on_' +
            methodName +
            '_' +
            random();

        return privateStreamSubject;
    }

    return { // an instance of the streaming module
        subscribe: subscribe,
        processPublisherMsg: processPublisherMsg
    };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../helpers/random":46,"./helpers":49}],48:[function(require,module,exports){
var random = require('./../../helpers/random');
var callbackRegistry = require('callback-registry');
var Streaming = require('./client-streaming');
var helpers = require('./helpers');

module.exports = function (connection, instance, configuration, repository) {
    'use strict';
    var timers = {};
    var respCounter = 0;
    var callbacks = callbackRegistry();

    var streaming = new Streaming(
        configuration,
        instance,
        function (m) {
            connection.send('MethodInvocationRequestMessage', m)
        },
        nextResponseSubject
    );

    function nextResponseSubject() {
        return 'resp_' + (respCounter++) + '_' + random();
    }

    function createServerInfo(instance) {
        return {
            machine: instance.MachineName,
            pid: instance.ProcessId,
            started: instance.ProcessStartTime,
            user: instance.UserName,
            application: instance.ApplicationName,
            environment: instance.Environment,
            region: instance.Region,
            service_name: instance.ServiceName,
            metrics_repository_id: instance.MetricsRepositoryId,
            state: instance.State
        };
    }

    function createMethod(methodInfo) {
        var method = methodInfo.Method;
        return {
            name: method.Name,
            accepts: method.InputSignature,
            returns: method.ResultSignature,
            requestSubject: methodInfo.MethodRequestSubject,
            description: method.Description,
            displayName: method.DisplayName,
            version: method.Version,
            objectTypes: method.ObjectTypeRestrictions,
            supportsStreaming: helpers.isStreamingFlagSet(method.Flags)
        };
    }

    // Generates a unique ID for a server
    function createServerId(serverInfo) {
        if (serverInfo === undefined) {
            return undefined;
        }

        return [serverInfo.application,
            serverInfo.user,
            serverInfo.machine,
            serverInfo.started,
            serverInfo.pid].join('/').toLowerCase();
    }

    function processServerPresence(presence, isPresence) {

        var instance = presence.Instance;
        var serverInfo = createServerInfo(instance);
        var serverId = createServerId(serverInfo);

        if (isPresence) {
            // test
            // console.debug(new Date(), '  heard presence');
            // if (instance.ApplicationName === 'Dummy server') {
            //     console.debug(new Date(), '  got Dummy server presence', presence);
            // }

            serverId = repository.addServer(serverInfo, serverId);

            if (presence.PublishingInterval) {
                scheduleTimeout(serverId, presence.PublishingInterval);
            }
        }

        // Finally, update the methods
        if (presence.MethodDefinitions !== undefined) {
            updateServerMethods(serverId, presence.MethodDefinitions);
        }
    }

    // This function sets a timeout which removes the server unless - the function is called again before the timeout is over
    function scheduleTimeout(serverId, duration) {

        if (duration === -1) {
            return;
        }
        // Stop the previous timeout
        var timer = timers[serverId];
        if (timer !== undefined) {
            clearTimeout(timer);
        }

        // Set a new one
        timers[serverId] = setTimeout(function () {
            repository.removeServerById(serverId);
        }, duration * (configuration.client.remove_server_on_n_missing_heartbeats + 1));
    }

    // Updates the methods of a server
    function updateServerMethods(serverId, newMethods) {

        // Get an array of the methods the server had before we started this
        var oldMethods = repository.getServerMethodsById(serverId);

        // Get an array of the methods that the server has now
        newMethods = newMethods.map(createMethod).reduce(function (obj, method) {
            var methodId = repository.getMethodId(method);
            obj[methodId] = method;
            return obj;
        }, {});

        // For each of the old methods
        Object.keys(oldMethods).forEach(function (methodId) {
            var method = oldMethods[methodId];
            // Check if it is still there
            if (newMethods[method.id] === undefined) {
                // If it isn't, remove it
                repository.removeServerMethod(serverId, method.id);
            } else {
                // If it is there in both the old array and the new one, we don't need to add it again
                delete newMethods[method.id];
            }
        });
        // Now add the new methods
        Object.keys(newMethods).forEach(function (key) {
            var method = newMethods[key];
            repository.addServerMethod(serverId, method);
        });
    }

    function invoke(id, method, args, target, stuff) {

        var methodInfo = method.info;
        // Construct a message
        var message = {
            MethodRequestSubject: methodInfo.requestSubject,
            MethodResponseSubject: nextResponseSubject(),
            Client: instance.info(),
            Context: {
                ArgumentsJson: args,
                InvocationId: id,
                ObjectType: stuff.object_type,
                DisplayContext: stuff.display_context,
                MethodName: methodInfo.name,
                ExecutionServer: target.info,
                Timeout: stuff.method_response_timeout
            }
        };

        connection.send('MethodInvocationRequestMessage', message);
    }

    function handleInvokeResultMessage(message) {

        // Delegate streaming-related messages to streaming
        if (message && message.EventStreamAction && message.EventStreamAction !== 0) {
            streaming.processPublisherMsg(message);
            return;
        }

        var server = message.Server ? createServerInfo(message.Server) : undefined;

        // parse the result
        var result = message.ResultContextJson;
        // If the result is an empty object, there is no result
        if (result && Object.keys(result).length === 0) {
            result = undefined;
        }

        callbacks.execute('onResult', message.InvocationId, server, message.Status, result, message.ResultMessage);
    }

    function onInvocationResult(callback) {
        callbacks.add('onResult', callback);
    }

    function listenForEvents() {
        connection.on('ServerPresenceMessage', function (msg) {
            processServerPresence(msg, true);
        });
        connection.on('ServerHeartbeatMessage', function (msg) {
            processServerPresence(msg, false);
        });
        connection.on('MethodInvocationResultMessage', handleInvokeResultMessage);
    }

    listenForEvents();

    return {
        invoke: invoke,
        onInvocationResult: onInvocationResult,
        subscribe: streaming.subscribe
    }
};

},{"./../../helpers/random":46,"./client-streaming":47,"./helpers":49,"callback-registry":6}],49:[function(require,module,exports){
/*
* Helper functions used only in this protocol.
* */

function convertInfoToInstance(info) {
    'use strict';

    if (typeof info !== 'object') {
        info = {};
    }

    return {
        application: info.ApplicationName,
        environment: info.Environment,
        machine: info.MachineName,
        pid: info.ProcessId,
        region: info.Region,
        service: info.ServiceName,
        user: info.UserName,
        started: info.ProcessStartTime
    }
}

function isStreamingFlagSet(flags) {
    'use strict';

    if (typeof flags !== 'number' || isNaN(flags)) {
        return false;
    }

    // checking the largest Bit using bitwise ops
    var mask = 32;
    var result = flags & mask;

    return result === mask;
}

module.exports =  {
    isStreamingFlagSet: isStreamingFlagSet,
    convertInfoToInstance: convertInfoToInstance
};

},{}],50:[function(require,module,exports){
var ServerProtocol = require('./server.js');
var ClientProtocol = require('./client.js');
var Promise = require('es6-promise').Promise;

module.exports = function (instance, connection, repository, vault, configuration) {
    'use strict';
    connection.on('Instance', instance._updateIdentity);

    var serverProtocol = new ServerProtocol(connection, instance, configuration, vault);
    var clientProtocol = new ClientProtocol(connection, instance, configuration, repository);

    return new Promise(function (resolve) {

        resolve({
            // method-related
            invoke: clientProtocol.invoke,
            onInvocationResult: clientProtocol.onInvocationResult,
            register: serverProtocol.register,
            unregister: serverProtocol.unregister,
            onInvoked: serverProtocol.onInvoked,
            methodInvocationResult: serverProtocol.methodInvocationResult,

            // stream-related
            subscribe: clientProtocol.subscribe,
            createStream: serverProtocol.createStream,
            getBranchList: serverProtocol.getBranchList,
            getSubscriptionList: serverProtocol.getSubscriptionList,
            closeAllSubscriptions: serverProtocol.closeAllSubscriptions,
            closeSingleSubscription: serverProtocol.closeSingleSubscription,
            pushData: serverProtocol.pushData,
            pushDataToSingle: serverProtocol.pushDataToSingle,
            onSubRequest: serverProtocol.onSubRequest,
            acceptRequestOnBranch: serverProtocol.acceptRequestOnBranch,
            rejectRequest: serverProtocol.rejectRequest,
            onSubAdded: serverProtocol.onSubAdded,
            onSubRemoved: serverProtocol.onSubRemoved
        });
    });
};

},{"./client.js":48,"./server.js":52,"es6-promise":11}],51:[function(require,module,exports){
var random = require('./../../helpers/random');
// TODO use Callbacks = require(~)
var helpers = require('./helpers');

module.exports = function (connection, instance) {
    'use strict';
    // TODO extract these into Callbacks
    var requestHandler = null;
    var subAddedHandler = null;
    var subRemovedHandler = null;

    function sendResult(message) {
        if (typeof message !== 'object') {
            throw new Error('Invalid message.');
        }

        if (typeof message.Status !== 'number') {
            message.Status = 0;
        }

        connection.send('MethodInvocationResultMessage', message);
    }

    function isStreamMsgForStreamingMethod(msg, method) {
        return (
            msg &&
            msg.EventStreamAction &&
            msg.EventStreamAction !== 0 &&
            typeof method === 'object' &&
            method.definition.supportsStreaming === true
        );
    }

    function processSubscriberMsg(msg, streamingMethod) {
        if (!(msg && msg.EventStreamAction && msg.EventStreamAction !== 0)) {
            return;
        }

        if (msg.EventStreamAction === 1) {
            clientWishesToSubscribe(msg, streamingMethod);

        } else if (msg.EventStreamAction === 2) {
            clientWishesToUnsubscribe(msg, streamingMethod);

        } else if (msg.EventStreamAction === 3) {
            clientAcknowledgesItDidSubscribe(msg, streamingMethod);

        } else if (msg.EventStreamAction === 4) {
            clientPerSubHeartbeat(msg);
        }
    }

    /** msg 'Request' Actions */
    // action 1
    function clientWishesToSubscribe(msg, streamingMethod) {

        var requestContext = {
            msg: msg,
            arguments: msg.Context.ArgumentsJson || {},
            instance: helpers.convertInfoToInstance(msg.Client)
        };

        if (typeof requestHandler === 'function') {
            requestHandler(requestContext, streamingMethod);
        }
    }

    // action 2
    function clientWishesToUnsubscribe(msg, streamingMethod) {

        if (!(
            streamingMethod &&
            Array.isArray(streamingMethod.subscriptions) &&
            streamingMethod.subscriptions.length > 0)
        ) {
            return;
        }

        closeIndividualSubscription(streamingMethod, msg.StreamId, msg.EventStreamSubject, false)
    }

    // action 3
    function clientAcknowledgesItDidSubscribe(msg, streamingMethod) {
        // Client indicates it is listening to a specific StreamId

        if (typeof msg.StreamId !== 'string' || msg.StreamId === '') {
            return;
        }

        var branchKey = getBranchKey(streamingMethod, msg.StreamId);

        if (typeof branchKey !== 'string') {
            return;
        }

        if (!Array.isArray(streamingMethod.subscriptions)) {
            return;
        }

        var subscription = {
            branchKey: branchKey,
            instance: helpers.convertInfoToInstance(msg.Client),
            arguments: msg.Context.ArgumentsJson,
            streamId: msg.StreamId,
            privateEventStreamSubject: msg.EventStreamSubject,
            methodResponseSubject: msg.MethodResponseSubject
        };

        // Subscription back-obj is stored
        streamingMethod.subscriptions.push(subscription);

        if (typeof subAddedHandler === 'function') {
            subAddedHandler(subscription, streamingMethod);
        }
    }

    // action 4
    function clientPerSubHeartbeat() {
        // A client may have multiple subscriptions, each one having its own heartbeat
        // Currently not implemented by the GW or the client
    }


    /** (request) Methods */
    function acceptRequestOnBranch(requestContext, streamingMethod, branch) {
        if (typeof branch !== 'string') {
            branch = '';
        }

        var streamId = getStreamId(streamingMethod, branch);

        var msg = requestContext.msg;

        sendResult({
            EventStreamAction: 3,
            EventStreamSubject: streamingMethod.globalEventStreamSubject,
            InvocationId: msg.Context.InvocationId,
            MethodName: streamingMethod.method.Method.Name,
            MethodRequestSubject: streamingMethod.method.MethodRequestSubject,
            MethodResponseSubject: msg.MethodResponseSubject,
            MethodVersion: streamingMethod.method.Method.Version,
            ResultMessage: 'Accepted',
            Server: instance.info(),
            StreamId: streamId
        });
    }

    function getBranchKey(streamingMethod, streamId) {
        if (typeof streamId !== 'string' || typeof streamingMethod !== 'object') {
            return;
        }

        var needle = streamingMethod.branchKeyToStreamIdMap.filter(function (branch) {
            return branch.streamId === streamId;
        })[0];

        if (typeof needle !== 'object' || typeof needle.key !== 'string') {
            return;
        }

        return needle.key;
    }

    function getStreamId(streamingMethod, branchKey) {
        if (typeof branchKey !== 'string') {
            branchKey = '';
        }

        var needleBranch = streamingMethod.branchKeyToStreamIdMap.filter(function (branch) {
            return branch.key === branchKey;
        })[0];

        var streamId = (needleBranch ? needleBranch.streamId : undefined);

        if (typeof    streamId !== 'string' || streamId === '') {
            streamId = generateNewStreamId(streamingMethod.method.Method.Name);
            streamingMethod.branchKeyToStreamIdMap.push({ key: branchKey, streamId: streamId });
        }

        return streamId;
    }

    function generateNewStreamId(streamingMethodName) {
        var appInfo = instance.info();

        var newStreamId = 'streamId-jsb_of_' +
            streamingMethodName +
            '__by_' +
            appInfo.ApplicationName +
            '_' +
            random();

        return newStreamId;
    }

    function rejectRequest(requestContext, streamingMethod, reason) {
        if (typeof reason !== 'string') {
            reason = '';
        }

        var msg = requestContext.msg;

        sendResult({
            EventStreamAction: 2,
            EventStreamSubject: streamingMethod.globalEventStreamSubject,
            // InvocationId: msg.Context.InvocationId,
            MethodName: streamingMethod.method.Method.Name,
            MethodRequestSubject: streamingMethod.method.MethodRequestSubject,
            MethodResponseSubject: msg.MethodResponseSubject,
            MethodVersion: streamingMethod.method.Method.Version,
            ResultMessage: reason,
            Server: instance.info(),
            StreamId: 'default_rejection_streamId'
        });
    }

    /** (subscription) Methods */
    function closeIndividualSubscription(streamingMethod, streamId, privateEventStreamSubject, sendKickMessage) {

        var subscription = streamingMethod.subscriptions.filter(function (subItem) {
            return (
                subItem.privateEventStreamSubject === privateEventStreamSubject &&
                subItem.streamId === streamId
            );
        })[0];

        if (typeof subscription !== 'object') {
            return; // unrecognised subscription
        }

        var initialLength = streamingMethod.subscriptions.length;

        streamingMethod.subscriptions = streamingMethod.subscriptions.filter(function (subItem) {
            return !(
                subItem.privateEventStreamSubject === subscription.privateEventStreamSubject &&
                subItem.streamId === subscription.streamId
            );
        });

        var filteredLength = streamingMethod.subscriptions.length;

        if (filteredLength !== (initialLength - 1)) {
            return; // the subscription wasn't removed
        }

        if (sendKickMessage === true) {
            sendResult({
                EventStreamAction: 2,
                EventStreamSubject: privateEventStreamSubject,
                MethodName: streamingMethod.method.Method.Name,
                MethodRequestSubject: streamingMethod.method.MethodRequestSubject,
                MethodResponseSubject: subscription.methodResponseSubject,
                MethodVersion: streamingMethod.method.Method.Version,
                ResponseContextJson: {},
                Server: instance.info(),
                StreamId: subscription.streamId,
                Status: 0
            });
        }

        if (typeof subRemovedHandler === 'function') {
            var subscriber = subscription.instance;
            subRemovedHandler(subscriber, streamingMethod)
        }
    }

    function closeMultipleSubscriptions(streamingMethod, branchKey) {
        if (typeof streamingMethod !== 'object' || !Array.isArray(streamingMethod.branchKeyToStreamIdMap)) {
            return;
        }

        var streamList = streamingMethod.branchKeyToStreamIdMap;

        if (typeof branchKey === 'string') {
            streamList = streamingMethod.branchKeyToStreamIdMap.filter(function (br) {
                return (typeof br === 'object' && br.key === branchKey);
            });
        }

        // TODO: consider getting the unique branch keys from 'live subscribers'

        streamList.forEach(function (br) {
            var streamId = br.streamId;

            sendResult({
                EventStreamAction: 2,
                EventStreamSubject: streamingMethod.globalEventStreamSubject,
                MethodName: streamingMethod.method.Method.Name,
                MethodRequestSubject: streamingMethod.method.MethodRequestSubject,
                Server: instance.info(),
                StreamId: streamId,
                Status: 0
            });
        });
    }

    function closeSingleSubscription(streamingMethod, subscription) {
        closeIndividualSubscription(
            streamingMethod,
            subscription.streamId,
            subscription.privateEventStreamSubject,
            true
        );
    }

    function pushDataToSingle(streamingMethod, subscription, data) {

        // TODO validate data is a plain object
        if (typeof data !== 'object') {
            throw new Error('Invalid arguments. Data must be an object.');
        }

        sendResult({
            EventStreamAction: 5,
            EventStreamSubject: subscription.privateEventStreamSubject,
            MethodName: streamingMethod.method.Method.Name,
            MethodRequestSubject: streamingMethod.method.MethodRequestSubject,
            ResultContextJson: data,
            Server: instance.info(),
            StreamId: subscription.streamId
        });
    }

    function pushToBranch(streamingMethod, data, branches) {
        if (typeof streamingMethod !== 'object' || !Array.isArray(streamingMethod.branchKeyToStreamIdMap)) {
            return;
        }

        // TODO validate data is a plain object
        if (typeof data !== 'object') {
            throw new Error('Invalid arguments. Data must be an object.');
        }

        if (typeof branches === 'string') {
            branches = [branches]; // user wants to push to single branch
        } else if (!Array.isArray(branches) || branches.length <= 0) {
            branches = null;
        }

        // get the StreamId's from the method's branch map
        var streamIdList = streamingMethod.branchKeyToStreamIdMap
            .filter(function (br) {
                return (
                    branches === null || (Boolean(br) && typeof br.key === 'string' && branches.indexOf(br.key) >= 0)
                );
            }).map(function (br) {
                return br.streamId;
            });

        streamIdList.forEach(function (streamId) {

            sendResult({
                EventStreamAction: 5,
                EventStreamSubject: streamingMethod.globalEventStreamSubject,
                MethodName: streamingMethod.method.Method.Name,
                MethodRequestSubject: streamingMethod.method.MethodRequestSubject,
                ResultContextJson: data,
                Server: instance.info(),
                StreamId: streamId
            });

        });
    }

    function getSubscriptionList(streamingMethod, branchKey) {
        if (typeof streamingMethod !== 'object') {
            return [];
        }

        var subscriptions = [];

        if (typeof branchKey !== 'string') {
            subscriptions = streamingMethod.subscriptions;
        } else {
            subscriptions = streamingMethod.subscriptions.filter(function (sub) {
                return sub.branchKey === branchKey;
            });
        }

        return subscriptions;
    }

    function getBranchList(streamingMethod) {
        if (typeof streamingMethod !== 'object') {
            return [];
        }

        return getUniqueBranchNames(streamingMethod);

        // TODO the agm-api passes each sub to protocol methods for creating the sub front obj
    }

    // Returns the names of branches for which there are live subscriptions
    function getUniqueBranchNames(streamingMethod) {
        var keysWithDuplicates = streamingMethod.subscriptions.map(function (sub) {
            var result = null;
            if (typeof sub === 'object' && typeof sub.branchKey === 'string') {
                result = sub.branchKey;
            }
            return result;
        });

        var seen = [];

        var branchArray = keysWithDuplicates.filter(function (bKey) {
            if (bKey === null || seen.indexOf(bKey) >= 0) {
                return false;
            }
            seen.push(bKey);
            return true;
        });

        return branchArray;
    }

    /** setting user-provided handlers */ // TODO replace innerds with callback.js
    function addRequestHandler(handlerFunc) {
        if (typeof handlerFunc !== 'function') {
            return;
        }

        requestHandler = handlerFunc;
    }

    function addSubAddedHandler(handlerFunc) {
        if (typeof handlerFunc !== 'function') {
            return;
        }

        subAddedHandler = handlerFunc;
    }

    function addSubRemovedHandler(handlerFunc) {
        if (typeof handlerFunc !== 'function') {
            return;
        }

        subRemovedHandler = handlerFunc;
    }

    return { // an instance of the publisher
        isStreamMsg: isStreamMsgForStreamingMethod,
        processSubscriberMsg: processSubscriberMsg,
        pushData: pushToBranch,
        pushDataToSingle: pushDataToSingle,
        closeAllSubscriptions: closeMultipleSubscriptions,
        closeSingleSubscription: closeSingleSubscription,
        getSubscriptionList: getSubscriptionList,
        getBranchList: getBranchList,
        onSubRequest: addRequestHandler,
        acceptRequestOnBranch: acceptRequestOnBranch,
        rejectRequest: rejectRequest,
        onSubAdded: addSubAddedHandler,
        onSubRemoved: addSubRemovedHandler,
        generateNewStreamId: generateNewStreamId

    };
};

},{"./../../helpers/random":46,"./helpers":49}],52:[function(require,module,exports){
var random = require('./../../helpers/random');
var callbackRegistry = require('callback-registry');
var Streaming = require('./server-streaming');
var helpers = require('./helpers');

module.exports = function (connection, instance, configuration, vault) {
    'use strict';
    var invocationMessagesMap = {};  // {invocationId: Invocation_RequestMessage}

    var reqCounter = 0;
    var presenceTimer;
    var heartbeatTimer;
    var callbacks = callbackRegistry();
    var streaming = new Streaming(connection, instance);

    connection.on('MethodInvocationRequestMessage', handleMethodInvocationMessage);

    if (heartbeatTimer === undefined) {
        heartbeatTimer = setInterval(sendHeartbeat, configuration.server.heartbeat_interval);
    }

    function nextRequestSubject() {
        return 'req_' + (reqCounter++) + '_' + random();
    }

    // Constructs a heartbeat message
    function constructHeartbeat() {
        return {
            PublishingInterval: configuration.server.heartbeat_interval,
            Instance: instance.info()
        };
    }

    // Constructs a presence message
    function constructPresence() {
        var methods = vault.getList();

        return {
            PublishingInterval: configuration.server.presence_interval,
            Instance: instance.info(),
            MethodDefinitions: methods.map(function (m) {
                return m.method
            })
        };
    }

    // Sends a presence
    function sendPresence() {
        connection.send('ServerPresenceMessage', constructPresence());
    }

    // Sends a heartbeat
    function sendHeartbeat() {
        connection.send('ServerHeartbeatMessage', constructHeartbeat());
    }

    function createNewMethodMessage(methodIdentifier, subject) {
        // If we are given a string instead of an object, we presume that is the method's name:
        if (typeof methodIdentifier === 'string') {
            methodIdentifier = { name: methodIdentifier };
        }

        // Set default values
        if (typeof methodIdentifier.version !== 'number') {
            methodIdentifier.version = 0;
        }

        // Convert the method definition to the format that AGM requires
        return {
            Method: {
                Name: methodIdentifier.name,
                InputSignature: methodIdentifier.accepts,
                ResultSignature: methodIdentifier.returns,
                Description: methodIdentifier.description,
                DisplayName: methodIdentifier.displayName,
                Version: methodIdentifier.version,
                ObjectTypeRestrictions: methodIdentifier.objectTypes
            },
            MethodRequestSubject: subject
        };
    }

    function register(repoMethod, success) {

        // Get a request subject for this method
        var reqSubj = nextRequestSubject();

        repoMethod.method = createNewMethodMessage(repoMethod.definition, reqSubj);

        announceNewMethod();

        success();
    }

    /** Create a streaming method */
    function createStream(repoMethod, streamDef, success) {

        var reqSubj = nextRequestSubject();

        var streamConverted = createNewMethodMessage(streamDef, reqSubj);
        streamConverted.Method.Flags = 32; // 100000 bitmask with the largest flag (streaming: true)

        // Used for presences
        repoMethod.method = streamConverted;

        // Utility things for this protocol
        repoMethod.globalEventStreamSubject = streamDef.name + '.jsStream.' + random();
        repoMethod.subscriptions = [];
        repoMethod.branchKeyToStreamIdMap = []; // [ {branchKey: '', streamId: 'strj_nds7`8`6y2378yb'}, {...}, ...]

        announceNewMethod();

        success();
    }

    function announceNewMethod() {

        // Send presence so the clients know we have it
        sendPresence();

        // Start sending presence regularly (if we aren't already doing it)
        if (presenceTimer === undefined) {
            presenceTimer = setInterval(sendPresence, configuration.server.presence_interval);
        }
    }

    // Listens for method invocations
    function handleMethodInvocationMessage(message) {
        var subject = message.MethodRequestSubject;
        var methodList = vault.getList();

        var method = methodList.filter(function (m) {
            return m.method.MethodRequestSubject === subject;
        })[0];

        // Stop if the message isn't for us
        if (method === undefined) {
            return;
        }

        // TODO see if have to move this earlier - i.e. if some messages from Client don't have MethodRequestSubject
        // Check if message is stream-related : defer to streaming module
        if (streaming.isStreamMsg(message, method)) {
            streaming.processSubscriberMsg(message, method);
            return;
        }

        var invocationId = message.Context.InvocationId;
        invocationMessagesMap[invocationId] = message;

        var invocationArgs = {
            args: message.Context.ArgumentsJson,
            instance: helpers.convertInfoToInstance(message.Client)
        };
        callbacks.execute('onInvoked', method, invocationId, invocationArgs);
    }

    function onInvoked(callback) {
        callbacks.add('onInvoked', callback);
    }

    function methodInvocationResult(executedMethod, invocationId, err, result) {

        var message = invocationMessagesMap[invocationId];
        if (!message) {
            return;
        }

        // Don't send result if the client does not require it
        if (message.MethodResponseSubject === 'null') {
            return;
        }

        if (executedMethod === undefined) {
            return;
        }

        var resultMessage = {
            MethodRequestSubject: message.MethodRequestSubject,
            MethodResponseSubject: message.MethodResponseSubject,
            MethodName: executedMethod.method.Method.Name,
            InvocationId: invocationId,
            ResultContextJson: result,
            Server: instance.info(),
            ResultMessage: err,
            Status: err ? 1 : 0
        };
        // Send result
        connection.send('MethodInvocationResultMessage', resultMessage);

        delete invocationMessagesMap[invocationId];
    }

    function unregister() {
        sendPresence();
    }

    return {
        register: register,
        onInvoked: onInvoked,
        methodInvocationResult: methodInvocationResult,
        unregister: unregister,

        // stream-related
        createStream: createStream,
        getBranchList: streaming.getBranchList,
        getSubscriptionList: streaming.getSubscriptionList,
        closeAllSubscriptions: streaming.closeAllSubscriptions,
        closeSingleSubscription: streaming.closeSingleSubscription,
        pushDataToSingle: streaming.pushDataToSingle,
        pushData: streaming.pushData,
        onSubRequest: streaming.onSubRequest,
        acceptRequestOnBranch: streaming.acceptRequestOnBranch,
        rejectRequest: streaming.rejectRequest,
        onSubAdded: streaming.onSubAdded,
        onSubRemoved: streaming.onSubRemoved
    }
};

},{"./../../helpers/random":46,"./helpers":49,"./server-streaming":51,"callback-registry":6}],53:[function(require,module,exports){
/**
 * Handles registering methods and sending data to clients
 */


module.exports = function (instance, connection, repository, session, logger) {
    'use strict';
    connection.on('subscribed', handleSubscribed);
    connection.on('event', handleEventData);
    connection.on('subscription-cancelled', handleSubscriptionCancelled);

    var MSG_TYPE_SUBSCRIBE = 'subscribe';
    var STATUS_AWAITING_ACCEPT = 'awaitingAccept'; // not even one server has accepted yet
    var STATUS_SUBSCRIBED = 'subscribed'; // at least one server has responded as 'Accepting'
    var ERR_MSG_SUB_FAILED = 'Subscription failed.';
    var ERR_MSG_SUB_REJECTED = 'Subscription rejected.';
    var ON_CLOSE_MSG_SERVER_INIT = 'ServerInitiated';
    var ON_CLOSE_MSG_CLIENT_INIT = 'ClientInitiated';

    var subscriptionsList = {};
    var subscriptionIdToLocalKeyMap = {};
    var nextSubLocalKey = 0;

    function getNextSubscriptionLocalKey() {
        var current = nextSubLocalKey;
        nextSubLocalKey += 1;

        return current;
    }

    function subscribe(streamingMethod, argumentObj, targetServers, stuff, success, error) {
        if (targetServers.length === 0) {
            error(ERR_MSG_SUB_FAILED + ' No available servers matched the target params.');
            return;
        }

        logger.debug('subscribe to target servers: ', targetServers)

        // Note: used to find the subscription in subList. Do not confuse it with the gw-generated subscription_id
        var subLocalKey = getNextSubscriptionLocalKey();

        var pendingSub = registerSubscription(
            subLocalKey,
            streamingMethod,
            argumentObj,
            success,
            error,
            stuff.method_response_timeout
        );

        if (typeof pendingSub !== 'object') {
            error(ERR_MSG_SUB_FAILED + ' Unable to register the user callbacks.');
            return;
        }

        targetServers.forEach(function(target) {

            var serverId = target.server.id;

            pendingSub.trackedServers.push({
                serverId: serverId,
                subscriptionId: undefined // is assigned by gw3
            });

            var msg = {
                type: MSG_TYPE_SUBSCRIBE,
                server_id: serverId,
                method_id: streamingMethod.info.id,
                arguments_kv: argumentObj
            };

            connection.send(msg, { serverId: serverId, subLocalKey: subLocalKey })
                .then(handleSubscribed)['catch'](handleErrorSubscribing);

        });
    }

    function registerSubscription(subLocalKey, method, args, success, error, timeout) {
        subscriptionsList[subLocalKey] = {
            status: STATUS_AWAITING_ACCEPT,
            method: method,
            arguments: args,
            success: success,
            error: error,
            trackedServers: [],
            handlers: {
                onData: [],
                onClosed: []
                // onFailed: []
            },
            queued: {
                data: [],
                closers: []
            },
            timeoutId: undefined
        };

        subscriptionsList[subLocalKey].timeoutId = setTimeout(function () {
            if (subscriptionsList[subLocalKey] === undefined) {
                return; // no such subscription
            }

            var pendingSub = subscriptionsList[subLocalKey];

            if (pendingSub.status === STATUS_AWAITING_ACCEPT) {
                error({
                    method: method,
                    called_with: args,
                    message: ERR_MSG_SUB_FAILED + ' Subscription attempt timed out after ' + timeout + 'ms.'
                });

                // None of the target servers has answered the subscription attempt
                delete subscriptionsList[subLocalKey];

            } else if (pendingSub.status === STATUS_SUBSCRIBED && pendingSub.trackedServers.length > 0) {
                // Clean the trackedServers, removing those without valid streamId
                pendingSub.trackedServers = pendingSub.trackedServers.filter(function (server) {
                    return (typeof server.streamId !== 'undefined')
                });

                delete pendingSub.timeoutId;

                if (pendingSub.trackedServers.length <= 0) {
                    // There are no open streams, some servers accepted then closed very quickly
                    //  (that's why the status changed but there's no good server with a StreamId)

                    // call the onClosed handlers
                    callOnClosedHandlers(pendingSub);

                    delete subscriptionsList[subLocalKey];
                }
            }
        }, timeout);

        return subscriptionsList[subLocalKey]
    }

    function handleErrorSubscribing(errorResponse) {
        // A target server is rejecting
        logger.debug('Subscription attempt failed', errorResponse);

        var tag = errorResponse._tag;
        var subLocalKey = tag.subLocalKey;

        var pendingSub = subscriptionsList[subLocalKey];

        if (typeof pendingSub !== 'object') {
            return;
        }

        pendingSub.trackedServers = pendingSub.trackedServers.filter(function (server) {
            return server.serverId !== tag.serverId;
        });

        if (pendingSub.trackedServers.length <= 0) {
            clearTimeout(pendingSub.timeoutId);

            if (pendingSub.status === STATUS_AWAITING_ACCEPT) {
                // Reject with reason
                var reason = (typeof errorResponse.reason === 'string' && errorResponse.reason !== '')
                    ? ' Publisher said "' + errorResponse.reason + '".'
                    : ' No reason given.';

                var callArgs = typeof pendingSub.arguments === 'object'
                    ? JSON.stringify(pendingSub.arguments)
                    : '{}';

                pendingSub.error(ERR_MSG_SUB_REJECTED + reason + ' Called with:' + callArgs);


            } else if (pendingSub.status === STATUS_SUBSCRIBED) {
                // The timeout may or may not have expired yet,
                // but the status is 'subscribed' and trackedServers is now empty

                callOnClosedHandlers(pendingSub);
            }


            delete subscriptionsList[subLocalKey];
        }
    }

    function handleSubscribed(msg) {
        logger.debug('handleSubscribed', msg);

        var subLocalKey = msg._tag.subLocalKey;
        var pendingSub = subscriptionsList[subLocalKey];

        if (typeof pendingSub !== 'object') {
            return;
        }

        var serverId = msg._tag.serverId;

        // Add a subscription_id to this trackedServer

        var acceptingServer = pendingSub.trackedServers
            .filter(function(server) {
                return server.serverId === serverId;
            })[0];

        if (typeof acceptingServer !== 'object') {
            return;
        }

        acceptingServer.subscriptionId = msg.subscription_id;
        subscriptionIdToLocalKeyMap[msg.subscription_id] = subLocalKey;

        var isFirstResponse = (pendingSub.status === STATUS_AWAITING_ACCEPT);

        pendingSub.status = STATUS_SUBSCRIBED;

        if (isFirstResponse) {
            // Pass in the subscription object
            pendingSub.success({
                onData: function (dataCallback) {
                    if (typeof dataCallback !== 'function') {
                        throw new TypeError('The data callback must be a function.')
                    }

                    this.handlers.onData.push(dataCallback);
                    if (this.handlers.onData.length === 1 && this.queued.data.length > 0) {
                        this.queued.data.forEach(function (dataItem) {
                            dataCallback(dataItem)
                        })
                    }
                }.bind(pendingSub),
                onClosed: function (closedCallback) {
                    if (typeof closedCallback !== 'function') {
                        throw new TypeError('The callback must be a function.')
                    }
                    this.handlers.onClosed.push(closedCallback)
                }.bind(pendingSub),
                onFailed: function () { /* Will not be implemented for browser. */
                },
                close: closeSubscription.bind(subLocalKey),
                requestArguments: pendingSub.arguments,
                serverInstance: repository.getServerById(serverId).getInfoForUser(),
                stream: pendingSub.method
            });
        }
    }

    function handleEventData(msg) {
        logger.debug('handleEventData', msg);

        var subLocalKey = subscriptionIdToLocalKeyMap[msg.subscription_id];

        if (typeof subLocalKey === 'undefined') {
            return;
        }

        var subscription = subscriptionsList[subLocalKey];

        if (typeof subscription !== 'object') {
            return;
        }

        var trackedServersFound = subscription.trackedServers.filter(function (server) {
            return server.subscriptionId === msg.subscription_id;
        });

        if (trackedServersFound.length !== 1) {
            return;
        }

        var isPrivateData = msg.oob && msg.snapshot;

        var sendingServerId = trackedServersFound[0].serverId;

        // Create the arrivedData object, new object for each handler call
        function receivedStreamData() {
            return {
                data: msg.data,
                server: repository.getServerById(sendingServerId).getInfoForUser(),
                requestArguments: subscription.arguments || {},
                message: null,
                private: isPrivateData
            };
        }

        var onDataHandlers = subscription.handlers.onData;
        var queuedData = subscription.queued.data;

        if (onDataHandlers.length > 0) {
            onDataHandlers.forEach(function (callback) {
                if (typeof callback === 'function') {
                    callback(receivedStreamData())
                }
            })
        } else {
            queuedData.push(receivedStreamData())
        }
    }

    function handleSubscriptionCancelled(msg) {
        logger.debug('handleSubscriptionCancelled', msg);

        var subLocalKey = subscriptionIdToLocalKeyMap[msg.subscription_id];

        if (typeof subLocalKey === 'undefined') {
            return;
        }

        var subscription = subscriptionsList[subLocalKey];

        if (typeof subscription !== 'object') {
            return;
        }

        // Filter tracked servers
        var expectedNewLength = subscription.trackedServers.length - 1;

        subscription.trackedServers = subscription.trackedServers.filter(function(server) {
            if (server.subscriptionId === msg.subscription_id) {
                subscription.queued.closers.push(server.serverId);
                return false;
            } else {
                return true;
            }
        });

        // Check if a server was actually removed
        if (subscription.trackedServers.length !== expectedNewLength) {
            return;
        }

        // Check if this was the last remaining server
        if (subscription.trackedServers.length <= 0) {
            clearTimeout(subscription.timeoutId);
            callOnClosedHandlers(subscription);
            delete subscriptionsList[subLocalKey];
        }

        delete subscriptionIdToLocalKeyMap[msg.subscription_id]
    }

    function callOnClosedHandlers(subscription, reason) {

        var closersCount = subscription.queued.closers.length;
        var closingServerId = (closersCount > 0) ? subscription.queued.closers[closersCount - 1] : null;

        var closingServer = null;
        if (typeof closingServerId === 'number') {
            closingServer = repository.getServerById(closingServerId).getInfoForUser();
        }

        subscription.handlers.onClosed.forEach(function (callback) {
            if (typeof callback !== 'function') {
                return;
            }

            callback({
                message: reason || ON_CLOSE_MSG_SERVER_INIT,
                requestArguments: subscription.arguments,
                server: closingServer,
                stream: subscription.method
            });
        });
    }

    function closeSubscription(subLocalKey) {
        logger.debug('closeSubscription', subLocalKey);

        var subscription = subscriptionsList[subLocalKey];

        if (typeof subscription !== 'object') {
            return;
        }

        // Tell each server that we're unsubscribing
        subscription.trackedServers.forEach(function (server) {
            if (typeof server.subscriptionId === 'undefined') {
                return;
            }

            connection.sendFireAndForget({
                type: 'unsubscribe',
                subscription_id: server.subscriptionId,
                reason_uri: '',
                reason: ON_CLOSE_MSG_CLIENT_INIT
            });

            delete subscriptionIdToLocalKeyMap[server.subscriptionId];
        });

        subscription.trackedServers = [];

        callOnClosedHandlers(subscription, ON_CLOSE_MSG_CLIENT_INIT);

        delete subscriptionsList[subLocalKey];


    }

    return { subscribe: subscribe };
};

},{}],54:[function(require,module,exports){
var callbackRegistry = require('callback-registry');
var Streaming = require('./client-streaming');

/**
 * Handles session lifetime and events
 */
module.exports = function (instance, connection, repository, session, logger) {
    'use strict';
    connection.on('peer-added', handlePeerAdded);
    connection.on('peer-removed', handlePeerRemoved);
    connection.on('methods-added', handleMethodsAddedMessage);
    connection.on('methods-removed', handleMethodsRemovedMessage);

    var callbacks = callbackRegistry();
    var streaming = new Streaming(instance, connection, repository, session, logger);

    function handlePeerAdded(msg) {
        var newPeerId = msg.new_peer_id;
        var remoteId = msg.identity;

        var serverInfo = {
            machine: remoteId.machine,
            pid: remoteId.process,
            instance: remoteId.instance,
            application: remoteId.application,
            environment: remoteId.environment,
            region: remoteId.region,
            user: remoteId.user
        };

        repository.addServer(serverInfo, newPeerId);
    }

    function handlePeerRemoved(msg) {
        var removedPeerId = msg.removed_id;
        var reason = msg.reason;

        repository.removeServerById(removedPeerId, reason);
    }

    function handleMethodsAddedMessage(msg) {
        var serverId = msg.server_id;
        var methods = msg.methods;

        methods.forEach(function (method) {
            var methodInfo = {
                id: method.id,
                name: method.name,
                displayName: method.display_name,
                description: method.description,
                version: method.version,
                objectTypes: method.object_types,
                accepts: method.input_signature,
                returns: method.result_signature
            };

            repository.addServerMethod(serverId, methodInfo);
        });
    }

    function handleMethodsRemovedMessage(msg) {
        var serverId = msg.server_id;
        var methodIdList = msg.methods;

        var server = repository.getServerById(serverId);

        var serverMethodKeys = Object.keys(server.methods);

        serverMethodKeys.forEach(function (methodKey) {

            var method = server.methods[methodKey];

            if (methodIdList.indexOf(method.info.id) > -1) {

                repository.removeServerMethod(serverId, methodKey)
            }

        });
    }

    function invoke(id, method, args, target) {

        var serverId = target.id;
        var methodId = method.info.id;

        logger.debug('sending call (' + id + ') for method id ' + methodId + ' to server ' + serverId);
        var msg = {
            type: 'call',
            server_id: serverId,
            method_id: methodId,
            arguments_kv: args
        };

        // we transfer the invocation id as tag
        connection.send(msg, { invocationId: id, serverId: serverId })
            .then(handleResultMessage);
    }

    function onInvocationResult(callback) {
        callbacks.add('onResult', callback);
    }

    function handleResultMessage(msg) {
        logger.debug('handle result message ' + msg);

        var invocationId = msg._tag.invocationId;
        var result = msg.result;
        var serverId = msg._tag.serverId;
        var server = repository.getServerById(serverId);

        callbacks.execute('onResult', invocationId, server.getInfoForUser(), 0, result, '');
    }

    return {
        invoke: invoke,
        onInvocationResult: onInvocationResult,
        subscribe: streaming.subscribe
    };
};

},{"./client-streaming":53,"callback-registry":6}],55:[function(require,module,exports){
var random = require('./../../helpers/random');
var Promise = require('es6-promise').Promise;
var promisify = require('./../../helpers/promisify');

/**
* Provides way of delegating error and success messages from gw3 to the client or server
*/
module.exports = function (connection, logger) {
    'use strict';

    var peerId = connection.getPeerId();

    connection.on('welcome', handleWelcomeMessage); // subscribe for welcome so we get our peer-id
    connection.on('error', handleErrorMessage);
    connection.on('success', handleSuccessMessage);
    connection.on('result', handleSuccessMessage);
    connection.on('subscribed', handleSuccessMessage);

    var requestsMap = {};

    function handleErrorMessage(msg) {
        var requestId = msg.request_id;
        var entry = requestsMap[requestId];
        if (!entry) {
            return;
        }

        logger.error('error message ' + JSON.stringify(msg));
        entry.error(msg);
    }

    function handleSuccessMessage(msg) {
        var requestId = msg.request_id;

        var entry = requestsMap[requestId];
        if (!entry) {
            return;
        }
        entry.success(msg);
    }

    function handleWelcomeMessage(msg) {
        handleSuccessMessage(msg);
    }

    function getNextRequestId() {
        return random();
    }

    /**
     * Send a message
     * @param msg message to send
     * @param tag a custom object (tag) - it will be transferred to success/error callback
     * @param success
     * @param error
     */
    function send(msg, tag, success, error) {
        // Allows function caller to override request_id
        var requestId = getNextRequestId();
        msg.request_id = msg.request_id ? msg.request_id : requestId;
        msg.peer_id = peerId;

        var promise = new Promise(function (resolve, reject) {
            requestsMap[requestId] = {
                success: function(successMsg) {
                    delete requestsMap[requestId];
                    successMsg._tag = tag;
                    resolve(successMsg);
                },
                error: function(errorMsg) {
                    delete requestsMap[requestId];
                    errorMsg._tag = tag;
                    reject(errorMsg);
                }
            };
            connection.send('tick42-agm', msg);
        });

        return promisify(promise, success, error);
    }

    function sendFireAndForget(msg) {
        // Allows function caller to override request_id
        msg.request_id = msg.request_id ? msg.request_id : getNextRequestId();
        msg.peer_id = peerId;

        connection.send('tick42-agm', msg);
    }

    return {
        send: send,
        sendFireAndForget: sendFireAndForget,
        on: connection.on,
        peerId : peerId
    }
};

},{"./../../helpers/promisify":45,"./../../helpers/random":46,"es6-promise":11}],56:[function(require,module,exports){
var sessionFactory = require('./session');
var serverFactory = require('./server');
var clientFactory = require('./client');
var connectionWrapperFactory = require('./conwrap');
var Promise = require('es6-promise').Promise;

module.exports = function (instance, connection, repository, vault, configuration) {
    'use strict';

    var logger = configuration.logger.subLogger('gw2-protocol');

    if (!connection.getPeerId()) {
        throw new Error('Not logged in! Can not continue');
    }

    var connectionWrapper = connectionWrapperFactory(connection, logger);
    var session = sessionFactory(instance, connectionWrapper, repository, logger.subLogger('session'));
    var server = serverFactory(instance, connectionWrapper, repository, vault, session, logger.subLogger('server'));
    var client = clientFactory(instance, connectionWrapper, repository, session, logger.subLogger('client'));

    return new Promise(function (resolve, reject) {

        session.onConnected(function (err) {
            if (err) {
                reject(err);
                return;
            }

            resolve({
                invoke: client.invoke,
                onInvocationResult: client.onInvocationResult,
                register: server.register,
                // TODO change params
                unregister: server.unregister,
                onInvoked: server.onInvoked,
                methodInvocationResult: server.methodInvocationResult,

                // stream-related
                subscribe: client.subscribe,
                createStream: server.createStream,
                getBranchList: server.getBranchList,
                getSubscriptionList: server.getSubscriptionList,
                closeAllSubscriptions: server.closeAllSubscriptions,
                closeSingleSubscription: server.closeSingleSubscription,
                pushData: server.pushData,
                pushDataToSingle: server.pushDataToSingle,
                onSubRequest: server.onSubRequest,
                acceptRequestOnBranch: server.acceptRequestOnBranch,
                rejectRequest: server.rejectRequest,
                onSubAdded: server.onSubAdded,
                onSubRemoved: server.onSubRemoved
            });
        });
        session.start();
    });
};

},{"./client":54,"./conwrap":55,"./server":58,"./session":59,"es6-promise":11}],57:[function(require,module,exports){
var callbackRegistry = require('callback-registry');

/**
 * Handles registering methods and sending data to clients
 */
module.exports = function (instance, connection, repository, vault, session, logger) {
    'use strict';
    connection.on('add-interest', handleAddInterest);
    connection.on('remove-interest', handleRemoveInterest);

    var SUBSCRIPTION_REQUEST = 'onSubscriptionRequest';
    var SUBSCRIPTION_ADDED = 'onSubscriptionAdded';
    var SUBSCRIPTION_REMOVED = 'onSubscriptionRemoved';
    var ERR_URI_SUBSCRIPTION_FAILED = 'com.tick42.agm.errors.subscription.failure';
    var callbacks = callbackRegistry();
    var nextStreamId = 0;

    // TODO there are many of these incrementing integer id's -> make a helper module
    function getNextStreamId() {
        var current = nextStreamId;
        nextStreamId += 1;
        return current;
    }

    /**
     * Processes a subscription request
     */
    function handleAddInterest(msg) {

        logger.debug('server_AddInterest ', msg);

        var caller = repository.getServerById(msg.caller_id);
        var instance = (typeof caller.getInfoForUser === 'function') ? caller.getInfoForUser() : null;

        // call subscriptionRequestHandler
        var requestContext = {
            msg: msg,
            arguments: msg.arguments_kv || {},
            instance: instance
        };

        var streamingMethod = vault.getById(msg.method_id);

        if (streamingMethod === undefined) {
            sendSubscriptionFailed(
                'No method with id ' + msg.method_id + ' on this server.',
                msg.subscription_id
            );
            return;
        }

        if (streamingMethod.subscriptionsMap && streamingMethod.subscriptionsMap[msg.subscription_id]) {
            sendSubscriptionFailed(
                'A subscription with id ' + msg.subscription_id + ' already exists.',
                msg.subscription_id
            );
            return;
        }

        callbacks.execute(SUBSCRIPTION_REQUEST, requestContext, streamingMethod);
    }

    function sendSubscriptionFailed(reason, subscriptionId) {
        var errorMessage = {
            type: 'error',
            reason_uri: ERR_URI_SUBSCRIPTION_FAILED,
            reason: reason,
            request_id: subscriptionId // this overrides connection wrapper
        };

        connection.sendFireAndForget(errorMessage);
    }

    function acceptRequestOnBranch (requestContext, streamingMethod, branch) {
        console.log('requestContext', requestContext);

        if (typeof branch !== 'string') {
            branch = '';
            console.log('empty branch', branch)
        }

        if (typeof streamingMethod.subscriptionsMap !== 'object') {
            throw new TypeError('The streaming method is missing its subscriptions.');
        }

        if (!Array.isArray(streamingMethod.branchKeyToStreamIdMap)) {
            throw new TypeError('The streaming method is missing its branches.');
        }

        var streamId = getStreamId(streamingMethod, branch);

        // Add a new subscription to the method
        var key = requestContext.msg.subscription_id;

        var subscription = {
            id: key,
            arguments: requestContext.arguments,
            instance: requestContext.instance,
            branchKey: branch,
            streamId: streamId,
            subscribeMsg: requestContext.msg
        };

        streamingMethod.subscriptionsMap[key] = subscription;

        // Inform the gw
        connection.sendFireAndForget({
            type: 'accepted',
            subscription_id: key,
            stream_id: streamId
        });

        // Pass state above-protocol for user objects
        callbacks.execute(SUBSCRIPTION_ADDED, subscription, streamingMethod)
    }

    function getStreamId(streamingMethod, branchKey) {
        if (typeof branchKey !== 'string') {
            branchKey = '';
        }

        var needleBranch = streamingMethod.branchKeyToStreamIdMap.filter(function (branch) {
            return branch.key === branchKey;
        })[0];

        var streamId = (needleBranch ? needleBranch.streamId : undefined);

        if (typeof    streamId !== 'string' || streamId === '') {
            streamId = getNextStreamId();
            streamingMethod.branchKeyToStreamIdMap.push({ key: branchKey, streamId: streamId });
        }

        return streamId;
    }

    function rejectRequest(requestContext, streamingMethod, reason) {
        if (typeof reason !== 'string') {
            reason = '';
        }

        sendSubscriptionFailed(
            'Subscription rejected by user. ' + reason,
            requestContext.msg.subscription_id
        )
    }

    function onSubscriptionLifetimeEvent(eventName, handlerFunc) {
        callbacks.add(eventName, handlerFunc)
    }

    function pushToBranch(streamingMethod, data, branches) {
        if (typeof streamingMethod !== 'object' || !Array.isArray(streamingMethod.branchKeyToStreamIdMap)) {
            return;
        }

        // TODO validate data is a plain object
        if (typeof data !== 'object') {
            throw new Error('Invalid arguments. Data must be an object.');
        }

        if (typeof branches === 'string') {
            branches = [branches]; // user wants to push to single branch
        } else if (!Array.isArray(branches) || branches.length <= 0) {
            branches = null;
        }

        // get the StreamId's from the method's branch map
        var streamIdList = streamingMethod.branchKeyToStreamIdMap
            .filter(function (br) {
                return (
                    branches === null || (Boolean(br) && typeof br.key === 'string' && branches.indexOf(br.key) >= 0)
                );
            }).map(function (br) {
                return br.streamId;
            });

        streamIdList.forEach(function (streamId) {
            connection.sendFireAndForget({
                type: 'publish',
                stream_id: streamId,
                // sequence: null,  // the streamingMethod might be used for this
                // snapshot: false, // ...and this
                data: data
            })
        });
    }

    function pushDataToSingle(streamingMethod, subscription, data) {
        // TODO validate data is a plain object
        if (typeof data !== 'object') {
            throw new Error('Invalid arguments. Data must be an object.');
        }

        connection.sendFireAndForget({
            type: 'post',
            subscription_id: subscription.id,
            // sequence: null,  // the streamingMethod might be used for this
            // snapshot: false, // ...and this
            data: data
        })
    }

    function closeSingleSubscription(streamingMethod, subscription) {

        delete streamingMethod.subscriptionsMap[subscription.id];

        connection.sendFireAndForget({
            type: 'drop-subscription',
            subscription_id: subscription.id,
            reason: 'Server dropping a single subscription'
        });

        var subscriber = subscription.instance;

        callbacks.execute(SUBSCRIPTION_REMOVED, subscriber, streamingMethod);
    }

    function closeMultipleSubscriptions(streamingMethod, branchKey) {
        if (typeof streamingMethod !== 'object' || typeof streamingMethod.subscriptionsMap !== 'object') {
            return;
        }

        var subscriptionsToClose = Object.keys(streamingMethod.subscriptionsMap)
            .map(function(key) {
                return streamingMethod.subscriptionsMap[key];
            });

        if (typeof branchKey === 'string') {
            subscriptionsToClose = subscriptionsToClose.filter(function(sub) {
                return sub.branchKey === branchKey;
            });
        }

        subscriptionsToClose.forEach(function (subscription) {
            delete streamingMethod.subscriptionsMap[subscription.id];

            connection.sendFireAndForget({
                type: 'drop-subscription',
                subscription_id: subscription.id,
                reason: 'Server dropping all subscriptions on stream_id: ' + subscription.streamId
            });
        });
    }

    function getSubscriptionList(streamingMethod, branchKey) {
        if (typeof streamingMethod !== 'object') {
            return [];
        }

        var subscriptions = [];

        var allSubscriptions = Object.keys(streamingMethod.subscriptionsMap).map(function(key) {
            return streamingMethod.subscriptionsMap[key];
        });

        if (typeof branchKey !== 'string') {
            subscriptions = allSubscriptions;
        } else {
            subscriptions = allSubscriptions.filter(function (sub) {
                return sub.branchKey === branchKey;
            });
        }

        return subscriptions;
    }

    function getBranchList(streamingMethod) {
        if (typeof streamingMethod !== 'object') {
            return [];
        }

        var allSubscriptions = Object.keys(streamingMethod.subscriptionsMap).map(function(key) {
            return streamingMethod.subscriptionsMap[key];
        });

        var keysWithDuplicates = allSubscriptions.map(function (sub) {
            var result = null;
            if (typeof sub === 'object' && typeof sub.branchKey === 'string') {
                result = sub.branchKey;
            }
            return result;
        });

        var seen = [];

        var branchArray = keysWithDuplicates.filter(function (bKey) {
            if (bKey === null || seen.indexOf(bKey) >= 0) {
                return false;
            }
            seen.push(bKey);
            return true;
        });

        return branchArray;
    }

    function handleRemoveInterest(msg) {
        logger.debug('handleRemoveInterest', msg);

        var streamingMethod = vault.getById(msg.method_id)

        if (typeof msg.subscription_id !== 'string' ||
            typeof streamingMethod !== 'object' ||
            typeof streamingMethod.subscriptionsMap[msg.subscription_id] !== 'object'
        ) {
            return;
        }

        var subscriber = streamingMethod.subscriptionsMap[msg.subscription_id].instance;

        delete streamingMethod.subscriptionsMap[msg.subscription_id];

        callbacks.execute(SUBSCRIPTION_REMOVED, subscriber, streamingMethod);
    }

    return {
        pushData: pushToBranch,
        pushDataToSingle: pushDataToSingle,
        onSubRequest: onSubscriptionLifetimeEvent.bind(null, SUBSCRIPTION_REQUEST),
        onSubAdded: onSubscriptionLifetimeEvent.bind(null, SUBSCRIPTION_ADDED),
        onSubRemoved: onSubscriptionLifetimeEvent.bind(null, SUBSCRIPTION_REMOVED),
        acceptRequestOnBranch: acceptRequestOnBranch,
        rejectRequest: rejectRequest,
        getSubscriptionList: getSubscriptionList,
        getBranchList: getBranchList,
        closeSingleSubscription: closeSingleSubscription,
        closeMultipleSubscriptions: closeMultipleSubscriptions
    };
};


},{"callback-registry":6}],58:[function(require,module,exports){
var callbackRegistry = require('callback-registry');
var Streaming = require('./server-streaming');

/**
 * Handles registering methods and sending data to clients
 */
module.exports = function (instance, connection, repository, vault, session, logger) {
    'use strict';
    var callbacks = callbackRegistry();
    var streaming = new Streaming(instance, connection, repository, vault, session, logger);

    connection.on('invoke', handleInvokeMessage);

    function handleRegisteredMessage(msg) {
        var methodId = msg._tag.methodId;
        var repoMethod = vault.getById(methodId);

        if (repoMethod && repoMethod.registrationCallbacks) {
            logger.debug('registered method ' + repoMethod.definition.name + ' with id ' + methodId);
            repoMethod.registrationCallbacks.success();
        }
    }

    function handleErrorRegister(msg) {
        logger.warn(msg);

        var methodId = msg._tag.methodId;
        var repoMethod = vault.getById(methodId);

        if (repoMethod && repoMethod.registrationCallbacks) {
            logger.debug('failed to register method ' + repoMethod.definition.name + ' with id ' + methodId);
            repoMethod.registrationCallbacks.fail();
        }
    }

    function handleInvokeMessage(msg) {
        var invocationId = msg.invocation_id;
        var peerId = msg.peer_id;
        var methodId = msg.method_id;
        var args = msg.arguments_kv;

        logger.debug('received invocation for method id "' + methodId + '"');

        var methodList = vault.getList();

        var method = methodList.filter(function (m) {
            return m._repoId === methodId;
        })[0];

        // Stop if the message isn't for us
        if (method === undefined) {
            return;
        }

        var client = repository.getServerById(peerId);
        var invocationArgs = { args: args, instance: client.getInfoForUser() };

        callbacks.execute('onInvoked', method, invocationId, invocationArgs);
    }

    function createStream(repoMethod, streamDef, success, fail) {
        var isStreaming = true;

        // Utility things for this protocol
        repoMethod.subscriptionsMap = {}; // ~subscription_id~ : {id:~, branchKey: '~', arguments: {~}, instance:{~}, etc.}
        repoMethod.branchKeyToStreamIdMap = []; // [ {branchKey: '', streamId: 7}, {...}, ...]

        register(repoMethod, success, fail, isStreaming);
    }

    function register(repoMethod, success, fail, isStreaming) {

        var methodDef = repoMethod.definition;

        // TODO review, why is this type of closure necessary
        repoMethod.registrationCallbacks = {
            success: success,
            fail: fail
        };

        var flags = {};
        if (isStreaming === true) {
            flags = { supportsStreaming: true }
        }

        logger.debug('registering method "' + methodDef.name + '"');
        var registerMsg = {
            type: 'register',
            methods: [{
                id: repoMethod._repoId,
                name: methodDef.name,
                display_name: methodDef.displayName,
                description: methodDef.description,
                version: methodDef.version,
                flags: flags,
                object_types: methodDef.objectTypes,
                input_signature: methodDef.accepts,
                result_signature: methodDef.returns,
                restrictions: undefined
            }]
        };

        connection.send(registerMsg, { methodId: repoMethod._repoId })
            .then(handleRegisteredMessage)['catch'](handleErrorRegister);
    }

    function onInvoked(callback) {
        callbacks.add('onInvoked', callback);
    }

    function methodInvocationResult(registrationId, invocationId, err, result) {
        var msg = {
            type: 'yield',
            invocation_id: invocationId,
            peer_id: session.peerId(),
            result: result
        };

        connection.sendFireAndForget(msg);
    }

    function unregister(method) {
        var msg = {
            type: 'unregister',
            methods: [method._repoId]
        };

        connection.send(msg)
            .then(handleUnregisteredMessage);
    }

    function handleUnregisteredMessage(msg) {
        var requestId = msg.request_id;

        logger.debug('unregistered by requestId ' + requestId);
    }

    return {
        register: register,
        onInvoked: onInvoked,
        methodInvocationResult: methodInvocationResult,
        unregister: unregister,

        createStream: createStream,
        getBranchList: streaming.getBranchList,
        getSubscriptionList: streaming.getSubscriptionList,
        closeAllSubscriptions: streaming.closeMultipleSubscriptions,
        closeSingleSubscription: streaming.closeSingleSubscription,
        pushData: streaming.pushData,
        pushDataToSingle: streaming.pushDataToSingle,
        onSubRequest: streaming.onSubRequest,
        acceptRequestOnBranch: streaming.acceptRequestOnBranch,
        rejectRequest: streaming.rejectRequest,
        onSubAdded: streaming.onSubAdded,
        onSubRemoved: streaming.onSubRemoved
    }
};

},{"./server-streaming":57,"callback-registry":6}],59:[function(require,module,exports){
var callbackRegistry = require('callback-registry');

/**
 * Handles session lifetime and events
 */
module.exports = function (instance, connection, repository, logger) {
    'use strict';
    var domain = 'com.tick42.agm';

    connection.on('leave', handleGoodbyeMessage)

    var myPeerId = connection.peerId;
    var callbacks = callbackRegistry();
    var joined = false;

    function start() {
        logger.debug('starting session ...');
        logger.debug('joining domain "' + domain);

        var joinMsg = {
            type: 'join',
            domain: domain
        };
        connection.send(joinMsg)
            .then(handleJoined);
    }

    function handleJoined() {
        joined = true;
        repository.addServer(instance, myPeerId);
        logger.debug('joined to AGM domain!');
        callbacks.execute('onConnected');
    }

    function stop() {
        logger.debug('stopping session...');
        var msg = ['LEAVE', myPeerId, domain];
        connection.send(msg);
    }

    function handleGoodbyeMessage() {
        joined = false;
        myPeerId = undefined;
    }

    function onConnected(callback) {
        if (connected()) {
            callback();
            return;
        }

        callbacks.add('onConnected', callback);
    }

    function connected() {
        return joined;
    }

    return {
        start: start,
        stop: stop,
        connected: connected,
        peerId: function () {
            return myPeerId;
        },
        onConnected: onConnected
    }
};

},{"callback-registry":6}],60:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "tick42-agm@3.2.1",
      "C:\\work\\stash\\GLUE-dev\\js-glue"
    ]
  ],
  "_from": "tick42-agm@3.2.1",
  "_id": "tick42-agm@3.2.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/tick42-agm",
  "_nodeVersion": "6.3.0",
  "_npmUser": {},
  "_npmVersion": "3.8.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "tick42-agm",
    "raw": "tick42-agm@3.2.1",
    "rawSpec": "3.2.1",
    "scope": null,
    "spec": "3.2.1",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_shasum": "8bbc835f300b81777591b455f04a3170ebb44182",
  "_shrinkwrap": null,
  "_spec": "tick42-agm@3.2.1",
  "_where": "C:\\work\\stash\\GLUE-dev\\js-glue",
  "author": {
    "name": "Tick42",
    "url": "http://www.tick42.com"
  },
  "bin": {
    "build": "./bin/build.js",
    "clean": "./bin/clean.js",
    "file-versionify": "./bin/file-versionify.js",
    "minify": "./bin/minify.js"
  },
  "bugs": {
    "url": "https://jira.tick42.com/browse/APPCTRL"
  },
  "dependencies": {
    "callback-registry": "^1.0.1",
    "cuid": "^1.3.8",
    "es6-promise": "^3.0.2",
    "tick42-gateway-connection": "^2.0.0",
    "util-deprecate": "^1.0.2"
  },
  "description": "JavaScript AGM",
  "devDependencies": {
    "blanket": "^1.1.6",
    "bluebird": "^2.9.30",
    "browserify": "^13.0.0",
    "browserify-replacify": "^0.0.4",
    "browserify-versionify": "^1.0.4",
    "eslint": "^3.1.1",
    "eslint-config-standard": "^5.3.5",
    "eslint-config-tick42": "^1.0.0",
    "eslint-plugin-promise": "^2.0.0",
    "eslint-plugin-standard": "^2.0.0",
    "fs": "0.0.2",
    "http-server": "^0.9.0",
    "jsdom": "^8.1.0",
    "minifyify": "^7.3.2",
    "onchange": "^2.1.2",
    "phantomjs": "^1.9.12",
    "qunitjs": "^1.15.0",
    "shelljs": "^0.6.0"
  },
  "dist": {
    "shasum": "8bbc835f300b81777591b455f04a3170ebb44182",
    "tarball": "http://192.168.0.234:4873/tick42-agm/-/tick42-agm-3.2.1.tgz"
  },
  "gitHead": "b36517ac0a3bcb7a692be161bb2af4e48ee694af",
  "keywords": [
    "agm",
    "javascript",
    "library"
  ],
  "main": "library/agm.js",
  "name": "tick42-agm",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "scripts": {
    "build": "npm run eslint && node bin/clean.js && node bin/build.js && node bin/minify && node bin/file-versionify",
    "eslint": "eslint library",
    "eslint:fix": "eslint library --fix",
    "prepublish": "npm update & npm run build",
    "serve": "http-server -p 8000 -a 127.0.0.1",
    "test": "npm run eslint && mocha --require ./test/test_helper \"test/**/*.js\"",
    "watch": "onchange \"./library/**/*.js\" -iv -e \"./bin\" -- npm run build"
  },
  "title": "Tick42 AGM",
  "version": "3.2.1"
}

},{}],61:[function(require,module,exports){
(function (global){
var application = require('./application');
var instance = require('./instance');
var helpers = require('./helpers');
var PackageJson = require('../package.json');
var deprecate = require('util-deprecate');

module.exports = global.app_manager = function appManager(agm, windows) {
    'use strict';
    var apps = application(agm, function () {
        return instances;
    });

    var instances = instance(agm, apps);
    var manager = {
        applications: apps.all,
        application: apps.get_by_id,
        onAppAdded: helpers.addCallback('added').bind(apps),
        onAppAvailable: helpers.addCallback('available').bind(apps),
        onAppRemoved: helpers.addCallback('removed').bind(apps),
        onAppUnavailable: helpers.addCallback('unavailable').bind(apps),

        instances: instances.all,
        onInstanceStarted: helpers.addCallback('started').bind(instances),
        onInstanceStopped: helpers.addCallback('stopped').bind(instances),
        onInstanceUpdated: helpers.addCallback('updated').bind(instances),

        getBranches: function (success, error) {
            agm.invoke('T42.ACS.GetBranches', {}, 'best', {}, function (e) {
                if (success) {
                    success(helpers.vals(e.returned.Branches));
                }
            }, error);
        },

        getCurrentBranch: function (success, error) {
            agm.invoke('T42.ACS.GetCurrentBranch', {}, 'best', {}, function (e) {
                if (success) {
                    success(e.returned.Branch);
                }
            }, error);
        },

        setCurrentBranch: function (branch, success, error) {
            agm.invoke('T42.ACS.SetCurrentBranch', { Branch: branch }, 'best', {}, success, error);
        },

        currentUser: function (success, error) {
            agm.invoke('T42.ACS.GetUser', {}, 'best', {}, success, error);
        },

        getFunctionalEntitlement: function (fn, success, error) {
            agm.invoke('T42.ACS.GetFunctionalEntitlement', { Function: fn }, 'best', {}, function (e) {
                if (success) {
                    success(e.returned.Entitlement);
                }
            }, error);
        },

        getFunctionalEntitlementBranch: function (fn, br, success, error) {
            agm.invoke('T42.ACS.GetFunctionalEntitlement', { Function: fn, Branch: br }, 'best', {}, function (e) {
                if (success) {
                    success(e.returned.Entitlement);
                }
            }, error);
        },

        canI: function (fn, success, error) {
            agm.invoke('T42.ACS.CanI', { Function: fn }, 'best', {}, success, error);
        },

        canIBranch: function (fn, branch, success, error) {
            agm.invoke('T42.ACS.CanI', { Function: fn, Branch: branch }, 'best', {}, success, error);
        },

        exit: function () {
            agm.invoke('T42.ACS.Shutdown', {}, 'all', {},
                function (a) {
                    console.log(a);
                },

                function (e) {
                    console.log(e);
                });
        },

        setRegion: function (region, success, error) {
            agm.invoke('T42.ACS.SetConfigurationRegion', { Region: region }, 'best', {}, success, error);
        },

        getRegion: function (success, error) {
            agm.invoke('T42.ACS.GetConfigurationRegion', {}, 'best', {}, function (e) {
                if (success) {
                    success(e.returned.Region);
                }
            }, error);
        },

        _trigger_app_event: apps._trigger,
        _trigger_instance_event: instances._trigger

    };

    // Create event bindings

    // Tell the app when its instances are added/removed

    manager.onInstanceStarted(function (instance) {
        if (!instance.application) {
            return;
        }
        // Trigger "instance_started" event on application
        manager._trigger_app_event('instanceStarted', instance, instance.application.name);

        // Trigger "window_opened" event on instance
        if (!windows || !glue) {
            return;
        }
        var id = (instance.context && instance.context.guid) ? instance.context.guid : instance.id;
        var container = instance.application.configuration.container;

        if (container) {
            glue.agm.invoke('T42.Wnd.FindById', { windowId: instance.id }, { application: container }, {}, windowOpened, function (e) {
                console.log(e);
            });
        }

        function windowOpened(a) {
            // Wrap the window in a window object, using the glue windows lib
            var w = a.returned[Object.keys(a.returned)[0]];
            var win = glue.windows._from_event(w.windowName, container, w.url, w.windowId, w.windowStyleAttributes, w.windowTitle);

            // Trigger the window opened event
            manager._trigger_instance_event('windowAdded', win, id);
        }
    });

    manager.onInstanceStopped(function (instance) {
        if (instance.application) {
            manager._trigger_app_event('instanceStopped', instance, instance.application.name);

            var id = (instance.context && instance.context.guid) ? instance.context.guid : instance.id;
            manager._trigger_instance_event('windowRemoved', {}, id);

        }
    });

    manager.onInstanceUpdated(function () {
        // if (instance.application) {
        // manager._trigger_app_event("instance_stopped", instance, instance.application.name);

        // var id = (instance.context && instance.context.guid) ? instance.context.guid : instance.id;
        // manager._trigger_instance_event("title_changed", {}, id);
        // }
    });

    // When an app is removed, remove also its instances

    manager.onAppRemoved(function (app) {
        app.instances.forEach(function (instance) {
            var id = (instance.context && instance.context.guid) ? instance.context.guid : instance.id;
            manager._trigger_instance_event('stopped', {}, id);
        });
    });

    var branchChangedCallback;
    manager.onBranchesChanged = function (callback) {
        branchChangedCallback = callback;
    };

    function onBranchChanged(e) {
        if (typeof branchChangedCallback === 'function') {
            branchChangedCallback(helpers.vals(e));
        }
    }

    function handleAppReady(app) {
        if (app.IsReady) {
            manager._trigger_app_event('available', app);
        } else {

            manager._trigger_app_event('unavailable', app);
        }
    }

    function appFailed(e) {
        manager._trigger_instance_event('error', e, e.Context.guid);
    }

    // deprecates
    manager.can_i = deprecate(manager.canI, 'appManager.can_i is deprecated and might be removed from future versions of glue. Use appManager.canI() instead');
    manager.can_i_branch = deprecate(manager.canIBranch, 'appManager.can_i_branch is deprecated and might be removed from future versions of glue. Use appManager.canIbranch() instead');
    manager.current_user = deprecate(manager.currentUser, 'appManager.current_user is deprecated and might be removed from future versions of glue. Use appManager.currentUser() instead');
    manager.set_current_branch = deprecate(manager.setCurrentBranch, 'appManager.set_current_branch is deprecated and might be removed from future versions of glue. Use appManager.setCurrentBranch() instead');
    manager.get_current_branch = deprecate(manager.getCurrentBranch, 'appManager.get_current_branch is deprecated and might be removed from future versions of glue. Use appManager.getCurrentBranch() instead');
    manager.get_branches = deprecate(manager.getBranches, 'appManager.get_branches is deprecated and might be removed from future versions of glue. Use appManager.getBranches() instead');
    manager.get_functional_entitlement_branch = deprecate(manager.getFunctionalEntitlementBranch, 'appManager.get_functional_entitlement_branch is deprecated and might be removed from future versions of glue. Use appManager.getFunctionalEntitlementBranch() instead');
    manager.get_functional_entitlement = deprecate(manager.getFunctionalEntitlement, 'appManager.get_functional_entitlement is deprecated and might be removed from future versions of glue. Use appManager.getFunctionalEntitlement() instead');
    manager.get_region = deprecate(manager.getRegion, 'appManager.get_region is deprecated and might be removed from future versions of glue. Use appManager.getRegion() instead');
    manager.set_region = deprecate(manager.setRegion, 'appManager.set_region is deprecated and might be removed from future versions of glue. Use appManager.setRegion() instead');
    manager.on_app_unavailable = deprecate(manager.onAppUnavailable, 'appManager.on_app_unavailable is deprecated and might be removed from future versions of glue. Use appManager.onAppUnavailable() instead');
    manager.on_app_removed = deprecate(manager.onAppRemoved, 'appManager.on_app_removed is deprecated and might be removed from future versions of glue. Use appManager.onAppRemoved() instead');
    manager.on_app_added = deprecate(manager.onAppAdded, 'appManager.on_app_added is deprecated and might be removed from future versions of glue. Use appManager.onAppAdded() instead');
    manager.on_app_available = deprecate(manager.onAppAvailable, 'appManager.on_app_available is deprecated and might be removed from future versions of glue. Use appManager.onAppAvailable() instead');
    manager.on_branches_changed = deprecate(manager.onBranchesChanged, 'appManager.on_branches_changed  is deprecated and might be removed from future versions of glue. Use appManager.onBranchesChanged() instead');
    manager.on_instance_started = deprecate(manager.onInstanceStarted, 'appManager.on_instance_started is deprecated and might be removed from future versions of glue. Use appManager.onInstanceStarted() instead');
    manager.on_instance_stopped = deprecate(manager.onInstanceStopped, 'appManager.on_instance_stopped is deprecated and might be removed from future versions of glue. Use appManager.onInstanceStopped() instead');
    manager.on_instance_updated = deprecate(manager.onInstanceUpdated, 'appManager.on_instance_updated is deprecated and might be removed from future versions of glue. Use appManager.onInstanceUpdated() instead');

    if (agm && agm.subscribe) {

        manager.agm = agm;
        var handlers = [
            { event: 'OnApplicationAdded', trigger: 'added', on: apps },
            { event: 'OnApplicationRemoved', trigger: 'removed', on: apps },
            { event: 'OnApplicationChanged', trigger: 'changed', on: apps },
            { event: 'OnApplicationStarted', trigger: 'started', on: instances },
            { event: 'OnApplicationStopped', trigger: 'stopped', on: instances },
            { event: 'OnApplicationUpdated', trigger: 'updated', on: instances },
            { event: 'OnApplicationAgmServerReady', trigger: 'agmReady', on: instances },
            { event: 'OnApplicationReady', func: handleAppReady },
            { event: 'OnBranchesModified', func: onBranchChanged },
            { event: 'OnApplicationStartFailed', raw_func: appFailed }
        ];

        agm.serverMethodAdded(function (resp) {
            if ((resp.server.application.indexOf('AppManager') !== -1 && resp.method.name.indexOf('T42.ACS.OnEvent') !== -1)) {
                agm.subscribe('T42.ACS.OnEvent', { target: 'all' })
                    .then(function (subscription) {
                        subscription.onData(function (streamData) {
                            var events = streamData.data;
                            handlers.forEach(function (handler) {
                                var objects = events[handler.event];
                                if (objects) {

                                    if (handler.raw_func !== undefined) {
                                        handler.raw_func(objects);
                                        return;
                                    }

                                    helpers.vals(objects).forEach(function (object) {
                                        if (handler.on !== undefined) {
                                            handler.on._trigger(handler.trigger, object);
                                        } else {
                                            handler.func(object);
                                        }
                                    });
                                }
                            });
                        });
                    });
            }
        });
    }

    manager.version = PackageJson.version;

    return manager;
};

global.tick42 = global.tick42 || {};
global.tick42.app_manager = global.app_manager;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../package.json":66,"./application":62,"./helpers":64,"./instance":65,"util-deprecate":109}],62:[function(require,module,exports){
var eventManager = require('./event_manager');
var helpers = require('./helpers');
var deprecate = require('util-deprecate');

module.exports = function (agm, instances) {
    'use strict';
    var appProto = helpers.addCallbacks({

        start: function (params, success, error) {
            params = params || {};
            params.guid = params.guid || Math.floor(Math.random() * 10000000);
            if (agm) {
                agm.invoke('T42.ACS.StartApplication', { Name: this.name, Context: params }, 'best', {}, success, error);
            }

            return instances()._trigger('create', { Context: params });

        }

    }, ['Added', 'Removed', 'Available', 'Unavailable', 'InstanceStarted', 'InstanceStopped', 'Changed'], 'on');

    // deprecated
    appProto.on_added = deprecate(appProto.onAdded, 'application.on_added is deprecated and might be removed from future versions of glue. Use application.onAdded() instead');
    appProto.on_removed = deprecate(appProto.onRemoved, 'application.on_removed is deprecated and might be removed from future versions of glue. Use application.onRemoved() instead');
    appProto.on_available = deprecate(appProto.onAvailable, 'application.on_available is deprecated and might be removed from future versions of glue. Use application.onAvailable() instead');
    appProto.on_unavailable = deprecate(appProto.onUnavailable, 'application.on_unavailable is deprecated and might be removed from future versions of glue. Use application.onUnavailable() instead');
    appProto.on_instance_started = deprecate(appProto.onInstanceStarted, 'application.on_instance_started is deprecated and might be removed from future versions of glue. Use application.onInstanceStarted() instead');
    appProto.on_instance_stopped = deprecate(appProto.onInstanceStopped, 'application.on_instance_stopped is deprecated and might be removed from future versions of glue. Use application.onInstanceStopped() instead');
    appProto.on_changed = deprecate(appProto.onChanged, 'application.on_changed is deprecated and might be removed from future versions of glue. Use application.onChanged() instead');

    // constructor, init_event, id_field

    function updateApp(props, obj) {
        obj.name = props.Name;
        obj.title = props.Title;
        obj.version = props.Version;
        obj.instances = [];
        obj.configuration = {};
        obj.configuration.auto_start = props.AutoStart;
        obj.configuration.caption = props.Caption;
        obj.configuration.hidden = props.IsHidden;
        obj.configuration.container = props.ApplicationName;
        // obj.disabled = props.IsDisabled;
        obj.configuration.allow_multiple = props.AllowMultiple;
        obj.available = props.IsReady || false;
        obj.icon = props.Icon;
        obj.sortOrder = props.SortOrder;
        obj.userProperties = props.UserProperties;
        return obj;
    }

    var appToEventManager = {
        create: function createApp(props) {
            return updateApp(props, Object.create(appProto));
        },

        update: updateApp,
        init_event: 'added',
        exit_event: 'removed',
        id_field: 'Name',
        callbacks: {
            available: function () {
                this.available = true;
            },

            changed: function (props) {
                this.icon = props.Icon;
                this.title = props.Title;
                this.configuration.caption = props.Caption;
            },

            unavailable: function () {
                this.available = false;
            },

            instanceStarted: function (instance) {
                this.instances.push(instance);
            },

            instanceStopped: function (instance) {
                this.instances = this.instances.filter(function (myInstance) {
                    return myInstance !== instance;
                });
            }
        }
    };
    // deprecated
    appToEventManager.callbacks.instance_started = deprecate(appToEventManager.callbacks.instanceStarted, 'application.instance_started is deprecated and might be removed from future versions of glue. Use application.instanceStarted() instead');
    appToEventManager.callbacks.instance_stopped = deprecate(appToEventManager.callbacks.instanceStopped, 'application.instance_stopped is deprecated and might be removed from future versions of glue. Use application.instanceStopped() instead');

    return eventManager(appToEventManager);
};

},{"./event_manager":63,"./helpers":64,"util-deprecate":109}],63:[function(require,module,exports){
var helpers = require('./helpers');

function execCallbacks(obj, arr, val) {
    'use strict';
    if (arr !== undefined) {
        arr.forEach(function (callback) {
            callback.call(obj, val);
        });
    }
}

module.exports = function createEnvironment(settings) {
    'use strict';
    var objects = {};
    var globalCallbacks = {};
    return {
        all: function () {
            return helpers.vals(objects);
        },

        get_by_id: function (id) {
            return objects[id];
        },

        _trigger: function (type, props, id) {
            id = id || (typeof settings.id_field === 'function' ? settings.id_field(props) : props[settings.id_field]);

            // Quit if we receive an event for an object before initiating it.
            if (objects[id] === undefined && (type !== settings.init_event && type !== settings.create_event)) {
                // console.log ("Received '"+type+"' event before '"+settings.init_event+"'");
                return;
            }

            // Create or retrieve an object, representing the entity
            var obj = objects[id] = objects[id] || initObject(settings.create(props));

            if (type === settings.init_event) {
                // Quit if we receive a init event for an object that is already active
                if (obj.active) {
                    // console.log ("Received second '"+settings.init_event+"' for app "+id);
                    return;
                    // Else, make it active
                } else {
                    obj.active = true;
                    settings.update(props, obj);
                }
                // When the entity is removed, set it to non-active
            } else if (type === settings.exit_event) {
                obj.active = false;

                // When a create event is received, just return the object without doing anything else
            } else if (type === settings.create_event) {
                return obj;

            } else if (type === settings.update_event) {
                settings.update(props, obj);
            }

            // Execute system callbacks
            if (settings.callbacks[type] !== undefined) {
                settings.callbacks[type].call(obj, props);
            }

            // make sure that errors in user specified callbacks does not
            // break our library
            try {
                // Execute global callbacks
                execCallbacks(undefined, globalCallbacks[type], obj);

                // Execute user-defined callbacks that are attached to the object
                execCallbacks(obj, obj.callbacks[type], props);
            } catch (e) {
                console.error(e);
            }
            // When the entity is removed, remove all callbacks (after you execute them)
            if (type === settings.exit_event) {
                obj.callbacks = {};
            }

            return obj;

        },
        // Expose the global callbacks object so that user can register some
        callbacks: globalCallbacks
    };
};

function initObject(object) {
    'use strict';
    object.callbacks = {};
    object.active = false;
    return object;
}

},{"./helpers":64}],64:[function(require,module,exports){
function noop() {
    'use strict';
}

function execIf(condition) {
    'use strict';
    return function (app, callback) {
        if (condition(app)) {
            callback.call(app);
        }
    };
}

exports.addCallbacks = function addCallbacks(object, events, prefix) {
    'use strict';
    events.forEach(function (event) {
        if (typeof event === 'string') {
            event = { name: event, trigger_when: noop };
        }

        object[prefix + event.name] = exports.addCallback(event.name, execIf(event.trigger_when));
    });

    return object;

};

exports.addCallback = function addCallback(key, onAdd) {
    'use strict';
    return function (callback) {
        var obj = this.callbacks;
        if (typeof key !== 'undefined') {
            key = key.charAt(0).toLowerCase() + key.slice(1);
        }

        if (obj[key] === undefined) {
            obj[key] = [callback];
        } else {
            obj[key].push(callback);
        }

        if (typeof onAdd === 'function') {
            onAdd(this, callback);
        }

        return this;
    };
};

exports.vals = function vals(obj) {
    'use strict';
    return Object.keys(obj).reduce(function (arr, key) {
        arr.push(obj[key]);
        return arr;
    }, []);
};

},{}],65:[function(require,module,exports){
var eventManager = require('./event_manager');
var helpers = require('./helpers');
var deprecate = require('util-deprecate');

module.exports = function (agm, apps) {
    'use strict';
    var instanceProto = helpers.addCallbacks({
        stop: function (params, success, error) {
            agm.invoke('T42.ACS.StopApplication', { Name: this.application.name, Id: this.id }, 'best', {}, success, error);
        },

        activate: function (params, success, error) {
            agm.invoke('T42.ACS.ActivateApplication', { Name: this.application.name, Id: this.id }, 'best', {}, success, error);
        }
    }, [
        {
            name: 'WindowAdded', trigger_when: function (app) {
                return app.active && app.main_window !== undefined;
            }
        },
        {
            name: 'WindowRemoved', trigger_when: function (app) {
                return app.main_window === undefined;
            }
        },
        {
            name: 'Started', trigger_when: function (app) {
                return app.id !== undefined && app.active;
            }
        },
        {
            name: 'Stopped', trigger_when: function (app) {
                return app.id !== undefined && !app.active;
            }
        },
        {
            name: 'AgmReady', trigger_when: function (app) {
                return app.active && app.agm !== undefined;
            }
        },
        {
            name: 'Error', trigger_when: function (app) {
                return app.error !== undefined;
            }
        }
    ], 'on');

    // deprecated
    instanceProto.on_window_added = deprecate(instanceProto.onWindowAdded, 'instance.on_window_added is deprecated and might be removed from future versions of glue. Use instance.onWindowAdded() instead');
    instanceProto.on_window_removed = deprecate(instanceProto.onWindowRemoved, 'instance.on_window_removed is deprecated and might be removed from future versions of glue. Use instance.onWindowRemoved() instead');
    instanceProto.on_started = deprecate(instanceProto.onStarted, 'instance.on_started is deprecated and might be removed from future versions of glue. Use instance.onStarted() instead');
    instanceProto.on_stopped = deprecate(instanceProto.onStopped, 'instance.on_stopped is deprecated and might be removed from future versions of glue. Use instance.onStopped() instead');
    instanceProto.on_agm_ready = deprecate(instanceProto.onAgmReady, 'instance.on_agm_ready is deprecated and might be removed from future versions of glue. Use instance.onAgmReady() instead');
    instanceProto.on_error = deprecate(instanceProto.onError, 'instance.on_error is deprecated and might be removed from future versions of glue. Use instance.onError() instead');

    function updateInstance(props, obj) {
        obj.id = props.Id;
        obj.application = apps.get_by_id(props.Name);
        obj.context = props.Context;
        obj.title = props.Title;
        return obj;
    }

    var instanceToEventManager = {
        create: function (props) {
            return updateInstance(props, Object.create(instanceProto));
        },

        update: updateInstance,
        create_event: 'create',
        init_event: 'started',
        exit_event: 'stopped',
        update_event: 'updated',
        id_field: function (e) {
            return e.Context !== undefined && e.Context.guid !== undefined ? e.Context.guid : e.Id;
        },

        callbacks: {
            agmReady: function (e) {
                // get the first AGM
                var serverName = Object.keys(e.AgmServers)[0];
                // Attach it to the object
                this.agm = convertAgmInstance(e.AgmServers[serverName]);
            },

            error: function (e) {
                this.error = e;
            },

            windowAdded: function (win) {
                this.main_window = win;
                this.windows = this.windows || [];
                this.windows.push(win);
            },

            windowRemoved: function () {
                this.main_window = undefined;
                this.windows = [];
            }
        }
    };

    // deprecated
    instanceToEventManager.callbacks.agm_ready = deprecate(instanceToEventManager.callbacks.agmReady, 'instance.agm_ready is deprecated and might be removed from future versions of glue. Use instance.agmReady() instead');
    instanceToEventManager.callbacks.window_added = deprecate(instanceToEventManager.callbacks.windowAdded, 'instance.window_added is deprecated and might be removed from future versions of glue. Use instance.windowAdded() instead');
    instanceToEventManager.callbacks.window_removed = deprecate(instanceToEventManager.callbacks.windowRemoved, 'instance.window_removed is deprecated and might be removed from future versions of glue. Use instance.windowRemoved() instead');

    return eventManager(instanceToEventManager);
};

function convertAgmInstance(agm) {
    'use strict';
    return {
        machine: agm.machineName,
        user: agm.userName,
        environment: agm.environment,
        application: agm.applicationName

    };
}

},{"./event_manager":63,"./helpers":64,"util-deprecate":109}],66:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "tick42-app-manager@2.3.6",
      "C:\\work\\stash\\GLUE-dev\\js-glue"
    ]
  ],
  "_from": "tick42-app-manager@2.3.6",
  "_id": "tick42-app-manager@2.3.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/tick42-app-manager",
  "_nodeVersion": "6.0.0",
  "_npmUser": {},
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "tick42-app-manager",
    "raw": "tick42-app-manager@2.3.6",
    "rawSpec": "2.3.6",
    "scope": null,
    "spec": "2.3.6",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://192.168.0.234:4873/tick42-app-manager/-/tick42-app-manager-2.3.6.tgz",
  "_shasum": "6739553e9fdc35be1917d4edf9be6b7db1239a57",
  "_shrinkwrap": null,
  "_spec": "tick42-app-manager@2.3.6",
  "_where": "C:\\work\\stash\\GLUE-dev\\js-glue",
  "author": {
    "name": "Tick42",
    "url": "http://www.tick42.com"
  },
  "bin": {
    "build": "./bin/build.js",
    "clean": "./bin/clean.js",
    "file-versionify": "./bin/file-versionify.js",
    "minify": "./bin/minify.js"
  },
  "dependencies": {
    "util-deprecate": "^1.0.2"
  },
  "description": "App Manager API for JavaScript",
  "devDependencies": {
    "blanket": "^1.1.6",
    "bootstrap": "^3.3.4",
    "browserify": "^13.0.0",
    "browserify-replacify": "^0.0.4",
    "browserify-versionify": "^1.0.4",
    "eslint": "^3.1.1",
    "eslint-config-standard": "^5.3.5",
    "eslint-config-tick42": "^1.0.0",
    "eslint-plugin-promise": "^2.0.0",
    "eslint-plugin-standard": "^2.0.0",
    "fs": "0.0.2",
    "http-server": "^0.8.0",
    "jquery": "^2.1.4",
    "jsdom": "^8.1.0",
    "lodash": "^3.9.3",
    "minifyify": "^7.3.2",
    "onchange": "^2.1.2",
    "phantomjs": "^1.9.12",
    "qunitjs": "^1.15.0",
    "shelljs": "^0.6.0",
    "tick42-agm": "^1.3.0",
    "uglifyify": "^3.0.1"
  },
  "directories": {
    "example": "examples"
  },
  "dist": {
    "shasum": "6739553e9fdc35be1917d4edf9be6b7db1239a57",
    "tarball": "http://192.168.0.234:4873/tick42-app-manager/-/tick42-app-manager-2.3.6.tgz"
  },
  "gitHead": "d5659099b35a9761415747b6fe73d5c5668a134d",
  "license": "ISC",
  "main": "library/app_manager.js",
  "name": "tick42-app-manager",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "https://ibaltadzhieva@stash.tick42.com/scm/ofgw/js-app-manager.git"
  },
  "scripts": {
    "build": "npm run eslint && node bin/clean.js && node bin/build.js && node bin/minify && node bin/file-versionify",
    "eslint": "eslint library",
    "eslint:fix": "eslint library --fix",
    "prepublish": "npm update & npm run build",
    "test": "npm run eslint && mocha --require ./test/test_helper \"test/**/*.js\"",
    "watch": "onchange \"./library/*.js\" -iv -e \"./bin\" -- npm run build"
  },
  "version": "2.3.6"
}

},{}],67:[function(require,module,exports){
/**
 * @module appconfig
 */
var _ = require('./util');
var Model = require('./model');
var helpers = require('./helpers');

var events = {
    connect: 'connect',
    disconnect: 'disconnect',
    update: 'update',
    status: 'status'
};

var EventBus = function () {
    'use strict';
    var subscriptionsByType;
    var on = function (type, once, callback, scope) {
        if (!_.isFunction(callback)) {
            return;
        }

        var subscription = {
            type: type,
            once: once,
            callback: callback,
            scope: scope
        };

        var subscriptions = subscriptionsByType[type];
        if (typeof subscriptions === 'undefined') {
            subscriptions = subscriptionsByType[type] = [];
        }

        subscription.id = subscriptions.push(subscription) - 1;
        return subscription;
    };

    var emit = function () {
        var args = [].slice.call(arguments);
        var type = args.splice(0, 1)[0];
        var subscriptions = subscriptionsByType[type];
        if (typeof subscriptions === 'undefined') {
            subscriptions = subscriptionsByType[type] = [];
        }

        subscriptions.forEach(function (subscription) {
            if (!subscription) {
                return;
            }

            try {
                subscription.callback.apply(subscription.scope, args);
            } catch (x) {
                _.warn('Exception during execution of callback', subscription, args, x);
            }

            if (subscription.once) {
                off(subscription);
            }
        });
    };

    var off = function (subscription) {
        var subscriptions = subscriptionsByType[subscription.type];
        if (typeof subscriptions !== 'undefined') {
            delete subscriptions[subscription.id];
        }
    };

    var resume = function (subscription) {
        if (typeof subscription.id === 'undefined') {
            return on(subscription.type, subscription.once, subscription.callback, subscription.scope);
        } else {
            var subscriptions = subscriptionsByType[subscription.type];
            if (typeof subscriptions === 'undefined') {
                subscriptions = subscriptionsByType[subscription.type] = [];
            }

            subscriptions[subscription.id] = subscription;
            return subscription;
        }
    };

    var reset = function () {
        if (typeof subscriptionsByType !== 'undefined') {
            Object.keys(subscriptionsByType).forEach(function (type) {
                var subscriptions = subscriptionsByType[type];
                if (typeof subscriptions !== 'undefined') {
                    subscriptions.forEach(function (subscription) {
                        delete subscription.id;
                    });
                }
            });
        }

        subscriptionsByType = {};
    };

    reset();
    return {
        on: on,
        emit: emit,
        off: off,
        resume: resume,
        reset: reset

    };
};

var AppConfig = function () {
    'use strict';
    var defaultListen  = true;
    var gateway;
    var initGateway;
    var bus = new EventBus();
    var model = new Model(bus);

    var root = require('./props')(model.root);
    var self = this;

    var gatewayConnection;
    var pollingIntervalId;
    var clearPollingInterval = function () {
        if (typeof pollingIntervalId !== 'undefined') {
            clearInterval(pollingIntervalId);
        }
    };

    // Public API
    self.init = function (settings) {
        settings = settings || {};
        var isIdentityValid = typeof settings.identity === 'object' &&
          Object.keys(settings.identity).length > 0;

        if (isIdentityValid) {
            self.identity = settings.identity;
        }

        defaultListen = settings.defaultListen || defaultListen;
        if (!self.identity) {
            throw new TypeError('identity must be non empty object.');
        }

        model.separator = settings.defaultSeparator || model.separator;

        self.schema = settings.schema || self.schema || 'ApplicationConfiguration';

        initGateway = _.isFunction(settings.gateway)
        ? settings.gateway
        : function () {
            if (typeof settings.gateway === 'undefined') {
                settings.gateway = {};
            }

            if (typeof settings.gateway.instance === 'undefined') {
                settings.gateway.instance = _.uuid();
            }

            return require('./gateway')(settings.gateway);
        };
    };

    self.connect = function (listen, callback, scope) {
        clearPollingInterval();
        var subscription;
        if (arguments.length > 0) {
            if (_.isFunction(listen)) {
                callback = listen;
                scope = callback;
                listen = defaultListen;
            }

            subscription = bus.on(events.connect, true, callback, scope);
        }

        var error;
        if (!self.identity) {
            error = 'identity is not specified. did you forget to call init()?';
        } else {
            if (!gateway) {
                gateway = initGateway();
            }

            if (!listen) {
                gatewayConnection =
                  gateway.connect(
                    self.schema,
                    self.identity,
                    false,
                    function (error, snapshot) {
                        if (typeof error === 'undefined') {
                            model.applySnapshot(snapshot);
                        }

                        bus.emit(events.connect, error);
                    },

                    function (error, status) {
                        bus.emit(events.status, error, status);
                    });
            } else {
                var connectEmitted = false;
                gatewayConnection = gateway.connect(
                  self.schema,
                  self.identity,
                  true,
                  function (error, snapshot, updates) {
                      if (typeof snapshot !== 'undefined') {
                          model.applySnapshot(snapshot);
                      }

                      if (typeof updates !== 'undefined') {
                          model.applyUpdates(updates);
                      }

                      if (!connectEmitted) {
                          connectEmitted = true;
                          bus.emit(events.connect, error);
                      }
                  },

                  function (error, status) {
                      var LISTEN_NOT_SUPPORTED = 8;
                      if (status.code === LISTEN_NOT_SUPPORTED) {
                          pollingIntervalId = setInterval(function () {
                              gateway.disconnect(gatewayConnection);
                              gatewayConnection = gateway.connect(self.schema, self.identity, false, function (error, snapshot) {
                                  model.applySnapshot(snapshot, false);
                              });
                          }, 2000);
                      }
                  });
            }
        }

        if (error) {
            setTimeout(bus.emit, 0, events.connect, error);
            throw new Error(error);
        }

        return subscription;

    };

    self.props = function (section, separator) {
        return root.props(section, separator);
    };

    self.modify = function (modifications, callback, scope) {
        if (typeof modifications === 'object') {
            modifications = [modifications];
        }

        var subscription = bus.on(events.update, true, callback, scope);

        return subscription;
    };

    self.onConnect = function (callback, scope) {
        return bus.on(events.connect, false, callback, scope);

    };

    self.onDisconnect = function (callback, scope) {
        return bus.on(events.disconnect, false, callback, scope);
    };

    self.off = function (subscription) {
        if (subscription) {
            bus.off(subscription);
        }
    };

    self.on = function (subscription) {
        if (subscription) {
            bus.resume(subscription);
        }
    };

    self.disconnect = function (callback, scope) {
        if (_.isFunction(callback)) {
            bus.on(events.disconnect, true, callback, scope);
        }

        clearPollingInterval();
        if (typeof gateway !== 'undefined') {
            gateway.disconnect(gatewayConnection, function (error) {
                bus.emit(events.disconnect, error);
            });

            gateway = undefined;
        } else {
            bus.emit(events.disconnect, 'not connected');
        }
    };
};

AppConfig.prototype.identityEqual = helpers.identityEqual;
AppConfig.prototype.identityToString = helpers.identityToString;

module.exports = function () {
    'use strict';
    return new AppConfig();
};

},{"./gateway":68,"./helpers":69,"./model":70,"./props":71,"./util":72}],68:[function(require,module,exports){
var gatewayConnection = require('tick42-gateway-connection');
var helpers = require('./helpers');
var identityToString = helpers.identityToString;
var PRODUCT = 'appconfig';

var GatewayTransport = function (options) {
    'use strict';
    var connection;
    var dataHandlers = {};
    var statusHandlers = {};
    options = options || {};

    function handleStatusMessage(msg) {
        var handler = statusHandlers[msg.instance];
        if (handler) {
            handler(msg.error, msg.status);
        }
    }

    function handleDataMessage(msg) {
        var schema = msg.schema;
        var schemaHandlers = dataHandlers[schema];
        if (typeof schemaHandlers === 'undefined') {
            return;
        }

        var identityKey = identityToString(msg.identity, true);
        var identityHandlers = schemaHandlers[identityKey];
        if (typeof identityHandlers === 'undefined') {
            return;
        }

        identityHandlers.forEach(function (handler) {
            if (handler) {
                handler(msg.error, msg.snapshot, msg.updates);
            }
        });
    }

    function ensureConnection() {
        if (typeof (connection) === 'undefined') {
            if (typeof options.connection !== 'undefined') {
                connection = options.connection;
            } else {
                connection = gatewayConnection(options.settings, options.custom_connection);
            }
        }
    }

    var dataSubscription;
    var statusSubscription;
    var connect = function (schema, identity, listen, handler, statusHandler) {
        ensureConnection();
        var schemaHandlers = dataHandlers[schema];
        if (typeof schemaHandlers === 'undefined') {
            schemaHandlers = dataHandlers[schema] = {};
        }

        var identityKey = identityToString(identity, true);
        var identityHandlers = schemaHandlers[identityKey];
        if (typeof identityHandlers === 'undefined') {
            identityHandlers = schemaHandlers[identityKey] = [];
        }

        var handlerToRegister;
        var index;
        if (listen) {
            handlerToRegister = handler;
        } else {
            handlerToRegister = function (error, snapshot, updates) {
                handler(error, snapshot, updates);
                delete identityHandlers[index];
            };
        }

        index = identityHandlers.push(handlerToRegister) - 1;

        if (typeof (dataSubscription) === 'undefined') {
            dataSubscription = connection.on(PRODUCT, GatewayTransport.MessageType.DATA, function (msg) {
                handleDataMessage(msg);
            });
        }

        var instance = options.instance;
        statusHandlers[instance] = statusHandler;
        if (typeof (statusSubscription) === 'undefined') {
            statusSubscription = connection.on(PRODUCT, GatewayTransport.MessageType.STATUS, function (msg) {
                handleStatusMessage(msg);
            });
        }

        var msg = {
            schema: schema,
            identity: identity,
            instance: instance,
            listen: listen
        };
        connection.send(PRODUCT, GatewayTransport.MessageType.CONNECT, msg);
        return {
            schema: schema,
            identity: identity,
            listen: listen,
            handler: handler,
            index: index
        };
    };

    var modify = function (schema, identity, modifications) {
        ensureConnection();
        connection.send(PRODUCT, GatewayTransport.MessageType.MODIFY, modifications);
    };

    var disconnect = function (descriptor) {
        var schemaHandlers = dataHandlers[descriptor.schema];
        if (typeof schemaHandlers !== 'undefined') {
            var identityKey = identityToString(descriptor.identity, true);
            var identityHandlers = schemaHandlers[identityKey];
            if (typeof identityHandlers !== 'undefined') {
                var handler = identityHandlers[descriptor.index];
                if (typeof handler !== 'undefined') {
                    var msg = {
                        schema: descriptor.schema,
                        identity: descriptor.identity,
                        instance: options.instance
                    };
                    connection.send(GatewayTransport.MessageType.DISCONNECT, msg);
                    delete identityHandlers[descriptor.index];
                }

                if (identityHandlers.length === 0) {
                    delete schemaHandlers[identityKey];
                }
            }

            if (Object.keys(schemaHandlers).length === 0) {
                delete dataHandlers[descriptor.schema];
            }
        }

        if (Object.keys(dataHandlers).length === 0) {
            if (typeof (dataSubscription) !== 'undefined') {
                connection.off(dataSubscription);
            }
        }

        delete statusHandlers[descriptor.instance];
        if (Object.keys(statusHandlers).length === 0) {
            if (typeof statusSubscription !== 'undefined') {
                connection.off(statusSubscription);
            }
        }
    };

    return {
        connect: connect,
        modify: modify,
        disconnect: disconnect
    };
};

GatewayTransport.MessageType = {
    // { schema: 'ApplicationConfiguration', identity: {}, listen: true, instance: '' }
    CONNECT: 'connect',
    // { schema: 'ApplicationConfiguration', identity: {}, instance: '' }
    DISCONNECT: 'disconnect',
    // { schema: 'ApplicationConfiguration', identity: {}, updates: [], instance: '' }
    MODIFY: 'modify',
    // { schema: 'ApplicationConfiguration', identity: {}, error: '', snapshot: {defaultKeyValue: '', keys: [], props: {}}, updates: [] }
    DATA: 'data',
    // { schema: 'ApplicationConfiguration', identity: {}, instance: '', status: '', error: '' }
    STATUS: 'status'
};

module.exports = GatewayTransport;

},{"./helpers":69,"tick42-gateway-connection":78}],69:[function(require,module,exports){
function escapeIdentityText(text) {
    'use strict';
    if (typeof text === 'string') {
        return text.replace(/[\\]/g, '\\\\').replace(/[:]/g, '\\:');
    } else {
        return text;
    }
}

function identityToString(identity, includeKeys, separator, order) {
    'use strict';
    if (typeof (identity) === 'undefined') {
        return null;
    }

    separator = separator || '/';
    var keys = Object.keys(identity);
    if (typeof (order) === 'function') {
        keys.sort(order);
    } else {
        keys.sort();
    }

    return keys.map(function (key) {
        return includeKeys ? (escapeIdentityText(key) + ':' + escapeIdentityText(identity[key])) : identity[key];
    }).join(separator);
}

function identityEqual(identity1, identity2) {
    'use strict';
    return identityToString(identity1, true) === identityToString(identity2, true);
}

function flatten(props, separator, name) {
    'use strict';
    separator = separator || '.';
    var prefix = name ? name + separator : '';
    var val = {};
    Object.keys(props).forEach(function (key) {
        if (key.indexOf(prefix) !== 0) {
            return;
        }

        var path = key.substring(prefix.length);
        var target = val;
        var parts = path.split(separator);
        var i;
        for (i = 0; i < parts.length - 1; i++) {
            if (!target[parts[i]]) {
                target[parts[i]] = {};
            }

            target = target[parts[i]];
        }

        target[parts[i]] = props[key].value;
    });

    return val;
}

function propEqual(lhs, rhs) {
    'use strict';
    if (lhs.value !== rhs.value) {
        return false;
    }

    for (var i = 0; i < lhs.underlying.length; i++) {
        var lhsUnderlying = lhs.underlying[i];
        var rhsUnderlying = rhs.underlying[i] || {};
        if (lhsUnderlying.value !== rhsUnderlying.value || !identityEqual(lhsUnderlying.parent, rhsUnderlying.parent)) {
            return false;
        }
    }

    return true;
}

module.exports = {
    flatten: flatten,
    propEqual: propEqual,
    identityToString: identityToString,
    identityEqual: identityEqual
};

},{}],70:[function(require,module,exports){
var propEqual = require('./helpers').propEqual;

var UpdateType = {
    Added: 'Added',
    Changed: 'Changed',
    Removed: 'Removed'
};

var Model = function (bus, separator) {
    'use strict';
    this.bus = bus;
    this.root = new ViewModel(this, '', separator || '.');
    this.views = {};
};

var ViewModel = function (model, path, separator) {
    'use strict';
    var self = this;
    self.model = model;
    self.props = {};
    self.separator = separator || model.separator;
    self.path = path;
};

ViewModel.prototype.getViewModel = function (name, separator) {
    'use strict';
    var path = this.path + name + (separator ? separator : '.');
    var model = this.model;
    if (path === '') {
        return model.root;
    }

    if (!model.views[path]) {
        var bestParent = '';
        // fill subview references and choose best parent props to copy from.
        Object.keys(model.views).forEach(function (key) {
            if (path.indexOf(key) === 0) {
                if (bestParent.length < key.length) {
                    bestParent = key;
                }
                // keep subviews sorted.
                var subviews = model.views[key].subviews;
                for (var i = 0; i < subviews.length; i++) {
                    if (subviews[i].indexOf(path)) {
                        subviews.splice(i, 0, path);
                        return;
                    }
                }

                subviews.push(path);
            }
        });

        var viewModel = new ViewModel(model, path, separator);

        var parentProps = bestParent === '' ? model.root.props : model.views[bestParent].model.props;
        Object.keys(parentProps).forEach(function (key) {
            var prop = parentProps[key];
            if (prop.name.indexOf(path) === 0) {
                var name = prop.name.substring(path.length);
                viewModel.props[name] = prop;
            }
        });

        model.views[path] = {
            subviews: [],
            model: viewModel
        };
    }

    return model.views[path].model;
};

ViewModel.prototype.on = function (callback, scope) {
    'use strict';
    return this.model.on(this.path, callback, scope);
};

Model.prototype.on = function (path, callback, scope) {
    'use strict';
    var type = updateTypeForPath(path);
    return this.bus.on(type, false, callback, scope);
};

Model.prototype.applySnapshot = function (snapshot, isSnapshot) {
    'use strict';
    isSnapshot = typeof isSnapshot === 'undefined' ? true : isSnapshot;

    var updates = toUpdates(isSnapshot ? {} : this.root.props, snapshot.props);
    applyUpdatesAndEmitEvents(this, updates, isSnapshot);
};

function updateTypeForPath(path) {
    'use strict';
    var type = 'update';
    if (path !== '') {
        type = type + '|' + path;
    }

    return type;
}

// shallow copy
function cloneUpdateForPath(update, path) {
    'use strict';
    var clone = {
        type: update.type,
        name: update.name.substring(path.length)
    };

    switch (update.type) {
        case UpdateType.Changed:
            clone.oldValue = update.oldValue;
            clone.value = update.value;
            break;
        case UpdateType.Added:
            clone.value = update.value;
            break;
        case UpdateType.Removed:
            break;
        default:
            break;
    }
    return clone;
}

function applyUpdatesAndEmitEvents(model, updates, isSnapshot) {
    'use strict';
    var views = Object.keys(model.views);
    var effectiveUpdates = { '': updates };
    if (views.length > 0) {
        // sort views for prefix search
        if (views.length > 1) {
            views.sort();
        }

        updates.forEach(function (update) {
            var view;
            for (var i = 0; i < views.length; views++) {
                if (update.name.indexOf(views[i]) === 0) {
                    view = views[i];
                    break;
                }
            }

            if (typeof view === 'undefined') {
                return;
            }

            effectiveUpdates[view].push(cloneUpdateForPath(update, view));
        });
    }

    var affectedPaths = Object.keys(effectiveUpdates);
    if (affectedPaths.length > 1) {
        affectedPaths.sort();
    }

    affectedPaths.forEach(function (path) {
        var viewModel = path === '' ? model.root : model.views[path].model;
        if (isSnapshot) {
            viewModel.props = {};
        }

        effectiveUpdates[path].forEach(function (update) {
            switch (update.type) {
                case UpdateType.Added:
               // break omitted
                case UpdateType.Changed:
                // changed works even for missing properties
                    viewModel.props[update.name] = update.value;
                    break;
                case UpdateType.Removed:
                    delete viewModel.props[update.name];
                    break;
                default:
                // do nothing
                    break;
            }
        });
    });

    affectedPaths.forEach(function (path) {
        var type = updateTypeForPath(path);
        model.bus.emit(type, isSnapshot, updates);
    });
}

Model.prototype.applyUpdates = function (updates) {
    'use strict';
    applyUpdatesAndEmitEvents(this, updates, false);
};

function toUpdates(image, snapshot) {
    'use strict';
    snapshot = snapshot || {};
    var updates = [];
    var toDelete = Object.keys(image);
    Object.keys(snapshot).forEach(function (key) {
        var update = {};
        if (typeof image[key] === 'undefined') {
            update.type = UpdateType.Added;
        } else {
            if (!propEqual(image[key], snapshot[key])) {
                update.type = UpdateType.Changed;
                update.oldValue = image[key];
            }

            var indexToDelete;
            for (indexToDelete = 0; indexToDelete < toDelete.length; toDelete++) {
                if (toDelete[indexToDelete] === key) {
                    break;
                }
            }

            if (typeof toDelete[indexToDelete] !== 'undefined') {
                toDelete.splice(indexToDelete, 1);
            }
        }

        if (update.type) {
            update.value = snapshot[key];
            update.name = key;
            updates.push(update);
        }
    });

    toDelete.forEach(function (key) {
        updates.push({
            type: UpdateType.Removed,
            name: key
        });
    });

    return updates;
}

module.exports = Model;

},{"./helpers":69}],71:[function(require,module,exports){
var flatten = require('./helpers').flatten;

var Props = function (model) {
    'use strict';
    var prop = function (name) {
        return model.props[name];
    };

    var val = function val(name) {
        if (typeof name === 'undefined' || typeof model.props[name] === 'undefined') {
            return flatten(model.props, model.separator, name);
        }

        return model.props[name].value;
    };

    var props = function (section, separator) {
        section = section || '';
        if (section === '') {
            // TODO: support separator change for '' (same) section.
            return self;
        }

        separator = separator || model.separator;
        return new Props(model.getViewModel(section, separator));
    };

    var forEach = function (callback, scope) {
        Object.keys(model.props).forEach(function (key) {
            callback.call(scope, model.props[key]);
        });
    };

    var onUpdate = function (callback, scope) {
        model.on(callback, scope);
    };

    var self = {
        prop: prop,
        val: val,
        props: props,
        forEach: forEach,
        onUpdate: onUpdate
    };
    return self;
};

module.exports = Props;

},{"./helpers":69}],72:[function(require,module,exports){
var uuid = function () {
    'use strict';
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0;
        var v = c === 'x' ? r : ((r & 0x3) | 0x8);
        return v.toString(16);
    });
};

var isFunction = function (value) {
    'use strict';
    if (value === undefined || value === null) {
        return false;
    }

    return typeof value === 'function';
};

var isString = function (value) {
    'use strict';
    return typeof value === 'string';
};

var levels = {
    debug: 'debug',
    info: 'info',
    warn: 'warn',
    error: 'error'
};
var log = function (level, args) {
    'use strict';
    if (console) {
        var logger = console[level];
        if (isFunction(logger)) {
            var now = new Date();
            [].splice.call(args, 0, 0, now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds());
            logger.apply(console, args);
        }
    }
};

var info = function () {
    'use strict';
    log(levels.info, arguments);
};

var warn = function () {
    'use strict';
    log(levels.warn, arguments);
};

var debug = function () {
    'use strict';
    log(levels.debug, arguments);
};

module.exports = {
    uuid: uuid,
    isFunction: isFunction,
    isString: isString,
    log: log,
    warn: warn,
    info: info,
    debug: debug
};

},{}],73:[function(require,module,exports){
function createBridge() {
    'use strict';

    return {};
}

module.exports = createBridge;

},{}],74:[function(require,module,exports){
function createBridge() {
    'use strict';
    var facade = htmlContainer.sharedContextFacade;

    function all() {
        var allObj = facade.all();
        if (!allObj || !allObj.keys) {
            return [];
        }
        return allObj.keys;
    }

    function update(name, data) {
        return facade.update(name, data);
    }

    function set(name, data) {
        facade.set(name, data);
    }

    function subscribe(name, callback) {
        return facade.subscribe(name, callback);
    }

    function unsubscribe(key) {
        facade.unsubscribe(key);
    }

    return {
        all: all,
        update: update,
        set: set,
        subscribe: subscribe,
        unsubscribe: unsubscribe
    };
}

module.exports = createBridge;



},{}],75:[function(require,module,exports){
var PackageJson = require('../package.json');
var hcBridge = require('./bridges/hc.js');
var gwBridge = require('./bridges/gw.js');

function contexts(config) {
    'use strict';
    var bridge = getBridge(config);

    function getBridge(config) {
        if (typeof htmlContainer !== 'undefined') {
            if (!htmlContainer.sharedContextFacade) {
                return 'Your version of HtmlContainer does not support contexts. Get version 1.46.0.0 or later to have that feature.';
            }
            return hcBridge(config);
        }
        return gwBridge(config);
    }

    function all() {
        return bridge.all();
    }

    function update(name, data) {
        return bridge.update(name, data);
    }

    function set(name, data) {
        return bridge.set(name, data);
    }

    function subscribe(name, callback) {
        return bridge.subscribe(name, callback);
    }

    function unsubscribe(key) {
        bridge.unsubscribe(key);
    }

    // bridge being a string means the initializtion failed and there is some error in that string
    if (typeof bridge === 'string') {
        return {
            error: bridge,
            version: PackageJson.version
        };
    }

    return {
        all: all,
        update: update,
        set: set,
        subscribe: subscribe,
        unsubscribe: unsubscribe,
        version: PackageJson.version
    };
}

module.exports = contexts;

},{"../package.json":76,"./bridges/gw.js":73,"./bridges/hc.js":74}],76:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "tick42-contexts@0.0.2",
      "C:\\work\\stash\\GLUE-dev\\js-glue"
    ]
  ],
  "_from": "tick42-contexts@0.0.2",
  "_id": "tick42-contexts@0.0.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/tick42-contexts",
  "_nodeVersion": "5.3.0",
  "_npmUser": {},
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "name": "tick42-contexts",
    "raw": "tick42-contexts@0.0.2",
    "rawSpec": "0.0.2",
    "scope": null,
    "spec": "0.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://192.168.0.234:4873/tick42-contexts/-/tick42-contexts-0.0.2.tgz",
  "_shasum": "af038bb59ec4309129f392e763b4b55274ceee5e",
  "_shrinkwrap": null,
  "_spec": "tick42-contexts@0.0.2",
  "_where": "C:\\work\\stash\\GLUE-dev\\js-glue",
  "author": {
    "name": "Tick42"
  },
  "bin": {
    "build": "./bin/build.js",
    "clean": "./bin/clean.js",
    "file-versionify": "./bin/file-versionify.js",
    "minify": "./bin/minify.js"
  },
  "dependencies": {
    "tick42-gateway-connection": ">=1.1.9"
  },
  "description": "A library for shared contexts",
  "devDependencies": {
    "browserify": "^13.0.0",
    "browserify-replacify": "^0.0.4",
    "browserify-versionify": "^1.0.4",
    "eslint": "^3.1.1",
    "eslint-config-standard": "^5.3.5",
    "eslint-config-tick42": "^1.0.0",
    "eslint-plugin-promise": "^2.0.0",
    "eslint-plugin-standard": "^2.0.0",
    "minifyify": "^7.3.2",
    "onchange": "^2.1.2"
  },
  "dist": {
    "shasum": "af038bb59ec4309129f392e763b4b55274ceee5e",
    "tarball": "http://192.168.0.234:4873/tick42-contexts/-/tick42-contexts-0.0.2.tgz"
  },
  "gitHead": "ad0ff4156b209cdeb0b8553ff0b3daa33585f76d",
  "license": "ISC",
  "main": "library/main.js",
  "name": "tick42-contexts",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "https://kpopov@stash.tick42.com/scm/tg/js-contexts.git"
  },
  "scripts": {
    "build": "npm run eslint && node bin/clean.js && node bin/build.js && node bin/minify && node bin/file-versionify",
    "eslint": "eslint library",
    "eslint:fix": "eslint library --fix",
    "prepublish": "npm update & npm run build",
    "watch": "onchange \"./library/*.js\" -iv -e \"./bin\" -- npm run build"
  },
  "version": "0.0.2"
}

},{}],77:[function(require,module,exports){
var callbackRegistry = require('callback-registry');
var packageJson = require('../package.json');

/**
 * A template for gateway connections - this is extended from specific protocols and transports.
 */
module.exports = function (settings) {
    'use strict';
    // The message handlers that have to be executed for each received message
    var messageHandlers = {};
    var ids = 0;
    var registry = callbackRegistry();

    return {
        _connected : false,

        // assembles a new message to be sent to gateway,
        // this should be replaced from concrete gateway connection
        _createMessage: function(type, message, id) {
            throw new Error('Not implemented - you should extend the connection with protocol ' + type + message + id);
        },

        // processes a new message calling the distribute method,
        // this should be replaced from concrete if they have different message structure
        _processMessage: function(message) {
            throw new Error('Not implemented - you should extend the connection with protocol ' + message);
        },

        // Executes appropriate message handlers for the message type.
        _distributeMessage: function (message, type) {
            // Retrieve handlers for the message type
            var handlers = messageHandlers[type.toLowerCase()];
            if (handlers !== undefined) {
                // Execute them
                Object.keys(handlers).forEach(function (handlerId) {
                    var handler = handlers[handlerId];
                    if (handler !== undefined) {
                        handler(message);
                    }
                });
            }
        },

        // triggers connection change notifying all users
        _triggerConnectionChanged: function(connected) {
            this._connected = connected;

            if (connected) {
                registry.execute('connected');
            } else {
                registry.execute('disconnected');
            }
        },

        // Attaches a handler
        on: function (product, type, messageHandler) {
            type = type.toLowerCase();
            if (messageHandlers[type] === undefined) {
                messageHandlers[type] = {};
            }

            var id = ids++;
            messageHandlers[type][id] = messageHandler;

            return {
                type: type,
                id: id
            };
        },

        // Remove a handler
        off: function (info) {
            delete messageHandlers[info.type.toLowerCase()][info.id];
        },

        connected: function (callback) {
            if (this._connected) {
                callback(settings.ws || settings.http);
            }

            registry.add('connected', callback);
        },

        disconnected: function (callback) {
            registry.add('disconnected', callback);
        },

        login: function() {
            return true;
        },

        logout: function() {
            return true;
        },

        // Init function that will be called after successful login
        init: function() {
            return true;
        },

        protocolVersion : settings.protocolVersion || 1,

        version: packageJson.version
    }
};


},{"../package.json":86,"callback-registry":6}],78:[function(require,module,exports){
(function (global){
var baseConnection = require('./connection');

/**
 * Check readme.md for detailed description
 */
var connection = function (settings, customConnection) {
    'use strict';
    settings = settings || {};
    var connection = baseConnection(settings);

    // if running in HC we use gw1 protocol and hc transport
    if (global.htmlContainer !== undefined) {
        connection = require('./protocols/gw1')(connection, settings);
        return require('./transports/hc')(connection, settings);
    }

    // if running in the browser - let's check which protocol version user wants
    if (settings.protocolVersion === 3) {
        connection = require('./protocols/gw3')(connection, settings);
    } else if (settings.protocolVersion === 2) {
        connection = require('./protocols/gw2')(connection, settings);
    } else {
        connection = require('./protocols/gw1')(connection, settings);
    }

    if (settings.ws !== undefined) {
        return require('./transports/ws')(connection, settings);
    } else if (settings.http !== undefined) {
        return require('./transports/http')(connection, settings);
    } else if (customConnection !== undefined) {
        return require('./transports/mock')(connection, customConnection, settings);
    } else {
        throw new Error('No connection. Make sure you are running the application from Tick42 HtmlContainer or fill the \'connection.websocket_url\' property.');
    }
};

if (global.tick42 === undefined) {
    global.tick42 = {};
}

global.tick42.connection = connection;

module.exports = connection;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./connection":77,"./protocols/gw1":79,"./protocols/gw2":80,"./protocols/gw3":81,"./transports/hc":82,"./transports/http":83,"./transports/mock":84,"./transports/ws":85}],79:[function(require,module,exports){
// Connection to gateway V1 - the one that runs on the desktop without authentication
var Promise = require('es6-promise').Promise;

module.exports = function(connection) {
    'use strict';

    connection._processMessage = function(message) {
        message = JSON.parse(message);
        connection._distributeMessage(message.message, message.type);
    };

    connection._createMessage = function(type, message, id) {
        return JSON.stringify({
            type: type,
            message: message,
            id: id
        });
    };

    connection.login = function() {
        return new Promise(function(resolve) {
            resolve();
        });
    };
    return connection;
};

},{"es6-promise":11}],80:[function(require,module,exports){
// Connection to gateway V2 - gw1 +  authentication
var Promise = require('es6-promise').Promise;

module.exports = function(connection) {
    'use strict';

    var sessionCookie;
    connection._processMessage = function(message) {
        message = JSON.parse(message);
        var dataType = message.type;

        if (dataType === 'SEND')  {
            message = message.data;
            connection._distributeMessage(message.message, message.type);
        } else {
            connection._distributeMessage(message, message.type);
        }
    };

    connection._createMessage = function(type, message, id) {
        if (type === 'LOGIN') {
            return JSON.stringify(message);
        }

        if (type === 'LOGOUT') {
            return JSON.stringify({ type: 'LOGOUT' });
        }

        return JSON.stringify({
            type: 'SEND',
            sessionCookie: sessionCookie,
            data: {
                type: type,
                message: message,
                id: id
            }
        });
    };

    connection.login = function(message) {
        return new Promise(function(resolve, reject) {
            var request;
            if (message.token) {
                request = {
                    token: message.token,
                    type: 'LOGIN_TOKEN'
                };
            } else if (message.username) {
                request = {
                    user: message.username,
                    password: message.password,
                    type: 'LOGIN'
                };
            } else {
                throw new Error('invalid auth message' + JSON.stringify(message));
            }

            var lrSubs = connection.on('', 'LOGIN_RESPONSE', function (response) {
                connection.off(lrSubs);

                if (response && !response.errorMessage) {
                    sessionCookie = response.sessionCookie;
                    resolve(response);
                } else {
                    reject(response);
                }
            });

            connection.send('', 'LOGIN', request);
        });
    };

    connection.logout = function() {
        connection.send('', 'LOGOUT');
    };

    return connection;
};


},{"es6-promise":11}],81:[function(require,module,exports){
var cuid = require('cuid');
var Promise = require('es6-promise').Promise;
var URLSearchParams = require('url-search-params');

module.exports = function(connection, settings) {
    'use strict';
    var datePrefix = '#T42_DATE(';
    var datePostfix = ')';
    var datePrefixLen = datePrefix.length;
    var dateMinLen = datePrefixLen + 1 + datePostfix.length;// prefix + postfix + at least one char
    var datePrefixFirstChar = datePrefix[0];

    connection.instance = cuid();

    connection._processMessage = function(message) {
        message = JSON.parse(message, function(key, value) {
            if (typeof key !== 'string') {
                return value;
            }
            if (key[0] !== datePrefixFirstChar) {
                return value;
            }
            if (value.length < dateMinLen) {
                return value;
            }
            var milliseconds = parseInt(value.substring(datePrefixLen), 10);
            if (isNaN(milliseconds)) {
                return value;
            }
            return new Date(milliseconds);
        });
        connection._distributeMessage(message, message.type);
    };

    connection._createMessage =  function(type, message) {
        return JSON.stringify(message, function (key, value) {
            // serialize dates as #T42_DATE(<MILLISECONDS_FROM_1970_01_01>)

            if (value === null || typeof value !== 'object') {
                return value;
            }
            // some duck typing
            if (!value.getTime) {
                return value;
            }

            if (!(value instanceof Date)) {
                return value;
            }

            return datePrefix + value.getTime() + datePostfix;
        });
    };

    connection.login = function(message) {
        return new Promise(function(resolve, reject) {
            var authentication = {};
            var gwToken = getGatewayToken();
            if (gwToken) {
                authentication.method = 'gateway-token';
                authentication.token = gwToken;
            } else if (message.token) {
                authentication.method = 'access-token';
                authentication.token = message.token;
            } else if (message.username) {
                authentication.method = 'secret';
                authentication.user = message.username;
                authentication.secret = message.password;
            } else {
                throw new Error('invalid auth message' + JSON.stringify(message));
            }

            var requestId = cuid();
            var helloMsg = {
                request_id: requestId,
                type: 'hello',
                identity: { application: settings.application, instance: connection.instance },
                authentication: authentication
            };

            var welcomeSub = connection.on('', 'welcome', function (msg) {
                if (msg.request_id !== requestId) {
                    return;
                }

                connection.off(welcomeSub);
                connection.off(errorSub);
                connection.peerId = msg.peer_id;
                connection.gwToken = gwToken;
                resolve(msg);
            });

            var errorSub = connection.on('', 'error', function (msg) {
                if (msg.request_id !== requestId) {
                    return;
                }

                connection.off(errorSub);
                connection.off(welcomeSub);
                reject(msg);
            });

            connection.send('', 'LOGIN', helloMsg);
        });
    };

    connection.logout = function() {
        connection.send('', 'LOGOUT');
    };

    function getGatewayToken() {
        if (settings.gwTokenProvider) {
            return settings.gwTokenProvider.get();
        }

        if (location && location.search) {
            var searchParams = new URLSearchParams(location.search.slice(1));
            return searchParams.get('t42gwtoken');
        }

        return null;
    }

    return connection;
};


},{"cuid":7,"es6-promise":11,"url-search-params":108}],82:[function(require,module,exports){
(function (global){
/**
 * Connection to HtmlContainer
 */
module.exports = function (connection) {
    'use strict';
    var connectionId = Math.floor(1e10 * Math.random()).toString();
    // Route messages to facade(s)
    connection.send = function (product, type, message) {
        if (product === 'metrics') {
            global.htmlContainer.metricsFacade.send(type, JSON.stringify(message));
        } else if (product === 'log') {
            global.htmlContainer.loggingFacade.send(type, JSON.stringify(message));
        } else if (product === 'appconfig') {
            global.htmlContainer.appConfigFacade.send(type, JSON.stringify(message), connectionId);
        }
    };

    if (global.htmlContainer.appConfigFacade !== undefined) {
        global.htmlContainer.appConfigFacade.initConnection(
            connectionId,
            function (messageAsJson) {
                return connection._handle_message(JSON.parse(messageAsJson));
            });
    }

    global.connections = global.connections || {};
    // Expose function for sending messages:
    global.connections['connection' + connectionId] = connection._handle_message;

    return connection;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],83:[function(require,module,exports){
(function (global){
module.exports = function (connection, settings) {
    'use strict';
    var url = settings.http;
    // polling interval in ms, default is 1 second
    var interval = settings.http_interval_ms;
    if (!interval) {
        interval = 1000;
    }

    function logDebug(message) {
        if (global.console !== undefined && (settings.debug === true || settings.trace === true)) {
            console.log(message);
        }
    }

    function logTrace(message) {
        if (global.console !== undefined && settings.trace === true) {
            console.log(message);
        }
    }

    logDebug('Attemping to connect to Gateway via HTTP with url \'' + url + '\' and polling interval ' + interval + ' ms');

    connection.init = function() {
        poll(url, interval, 0, function (items) {
            for (var index = 0; index < items.length; index++) {
                connection._processMessage(items[index]);
            }
        });
    }

    connection.send = function (product, type, message, id) {
        var msg = connection._createMessage(type, message, id);
        httpPost(url, msg);
    };

    /**
     * Polls data from a given url on some interval
     * @param url       Base server url. A sequence url param may be added based on the seq param
     * @param interval  Interval (in ms) between polling requestts
     * @param seq       Next sequence number we should ask for (if 0 the server will return the last known message)
     * @param ondata    Data callback
     */
    function poll(url, interval, seq, ondata) {
        // construct the get Url - if seq != 0 add as url param to get
        // only messages after this sequence
        var getUrl = url;

        if (seq !== 0) {
            getUrl = url + '?sequence=' + seq + '&no-cache=' + new Date().getTime();
        }

        // create a request
        var xmlhttp = createCORSRequest('GET', getUrl, function () {
            if (seq === 0) {
                logDebug('Connected to Gateway on ' + url);
            }

            logTrace('Response from \'' + getUrl + '\' is ' + xmlhttp.responseText);
            var message = JSON.parse(xmlhttp.responseText);
            // the server returns the number of the next sequence that we must query for
            var nextSeq = message.nextSequence;
            // call user callbacke
            ondata(message.data);
            // re-schedule
            setTimeout(function () {
                poll(url, interval, nextSeq, ondata);
            }, interval);
        });

        xmlhttp.onerror = function (ev) {
            console.log('Error polling data from http server \'' + getUrl + '\' - ' + ev);
            // re-schedule
            setTimeout(function () {
                poll(url, interval, seq, ondata);
            }, interval);
        };

        logTrace('Sending GET to \'' + getUrl + '\'');
        xmlhttp.send();
    }

    /**
     * POSTs a message to a given url
     */
    function httpPost(url, message) {
        // create a request
        var xmlhttp = createCORSRequest('POST', url);
        logTrace('Sending POST to \'' + url + '\' : ' + message);
        xmlhttp.send(message);
    }

    /**
     * Creates CORS request (cross domain requests) for different browsers - XMLHttpRequest withCredentials
     * for Chrome and FF and XDomainRequest for IE
     */
    function createCORSRequest(method, url, resultCallback) {
        var xhr = new XMLHttpRequest();

        if ('withCredentials' in xhr) {
            // Check if the XMLHttpRequest object has a "withCredentials" property.
            // "withCredentials" only exists on XMLHTTPRequest2 objects.
            xhr.open(method, url, true);
            if (typeof resultCallback !== 'undefined') {
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        resultCallback();
                    }
                };
            }
        } else if (typeof XDomainRequest !== 'undefined') {
            // Otherwise, check if XDomainRequest.
            // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
            xhr = new XDomainRequest();
            xhr.open(method, url);
            if (typeof resultCallback !== 'undefined') {
                xhr.onload = resultCallback;
            }
        } else {
            // Otherwise, CORS is not supported by the browser.
            xhr = null;
        }

        return xhr;
    }

    return connection;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],84:[function(require,module,exports){
/**
 * Used for tests
 */
module.exports = function(connection, customConnection) {
    'use strict';
    connection.send = function (product, type, message) {
        customConnection.publish({
            type: type,
            message: message
        });
    };

    customConnection.subscribe(connection._handle_message);
    return connection;
};

},{}],85:[function(require,module,exports){
(function (global){
module.exports = function (connection, settings) {
    'use strict';

    // Load the 'ws' library, but only if we are running under node js
    var WebSocket = require('detect-node') ? require('ws') : global.WebSocket;

    function initiateSocket() {
        var ws = new WebSocket(settings.ws);
        ws.onclose = function () {
            connection._triggerConnectionChanged(false);
        };
        // Log on connection
        ws.onopen = function () {
            connection._triggerConnectionChanged(true);
        };
        // Attach handler
        ws.onmessage = function (message) {
            connection._processMessage(message.data);
        };

        return ws;
    }

    // Holds callback execution until socket connection is established.
    function waitForSocketConnection (callback) {
        if (!callback) {
            return;
        }

        if (socket.readyState === 1) {
            return callback();
        } else if (socket.readyState > 1) {
            // > 1 means closing or closed
            socket = initiateSocket();
        }

        setTimeout(function () {
            waitForSocketConnection(callback);
        }, 50); // wait 5 milliseconds for the connection...
    }

    // Initiate a new socket (this gets re-executed on reconnect)
    var socket = initiateSocket();

    // Create a function for sending a message
    connection.send = function (product, type, message, id) {
        waitForSocketConnection(function() {
            var msg = connection._createMessage(type, message, id);
            if (!msg) {
                return;
            }
            socket.send(msg);
        });
    };

    connection.websocket_url = function (a) {
        settings.websocket_url = a;
        socket.close();
        socket = initiateSocket();
    };

    return connection;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"detect-node":8,"ws":110}],86:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "tick42-gateway-connection@2.1.0",
      "C:\\work\\stash\\GLUE-dev\\js-glue"
    ]
  ],
  "_from": "tick42-gateway-connection@2.1.0",
  "_id": "tick42-gateway-connection@2.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/tick42-gateway-connection",
  "_nodeVersion": "6.3.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/tick42-gateway-connection-2.1.0.tgz_1474889735209_0.150190212065354"
  },
  "_npmUser": {
    "email": "kkpopov@hotmail.com",
    "name": "kiril.popov"
  },
  "_npmVersion": "3.8.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "tick42-gateway-connection",
    "raw": "tick42-gateway-connection@2.1.0",
    "rawSpec": "2.1.0",
    "scope": null,
    "spec": "2.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/",
    "/tick42-agm",
    "/tick42-appconfig",
    "/tick42-contexts",
    "/tick42-logger",
    "/tick42-metrics"
  ],
  "_shasum": "8389af2a2f7fd3aa4ac42f0f175707d3c6514de7",
  "_shrinkwrap": null,
  "_spec": "tick42-gateway-connection@2.1.0",
  "_where": "C:\\work\\stash\\GLUE-dev\\js-glue",
  "bin": {
    "build": "./bin/build.js",
    "clean": "./bin/clean.js",
    "file-versionify": "./bin/file-versionify.js",
    "minify": "./bin/minify.js"
  },
  "dependencies": {
    "browserify-versionify": "^1.0.4",
    "callback-registry": "^1.0.1",
    "cuid": "^1.3.8",
    "detect-node": "^2.0.3",
    "es6-promise": "^3.2.1",
    "url-search-params": "^0.5.0",
    "ws": "^0.7.2"
  },
  "description": "Tick42 Gateway Connection.",
  "devDependencies": {
    "blanket": "^1.1.6",
    "browserify": "^13.0.0",
    "browserify-replacify": "^0.0.4",
    "browserify-versionify": "^1.0.4",
    "eslint": "^3.1.1",
    "eslint-config-standard": "^5.3.5",
    "eslint-config-tick42": "^1.0.0",
    "eslint-plugin-promise": "^2.0.0",
    "eslint-plugin-standard": "^2.0.0",
    "fs": "0.0.2",
    "jsdom": "^8.1.0",
    "minifyify": "^7.3.2",
    "onchange": "^2.1.2",
    "phantomjs": "^1.9.12",
    "qunitjs": "^1.15.0",
    "shelljs": "^0.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "8389af2a2f7fd3aa4ac42f0f175707d3c6514de7",
    "tarball": "http://192.168.0.234:4873/tick42-gateway-connection/-/tick42-gateway-connection-2.1.0.tgz"
  },
  "gitHead": "10fbaf1d8d51742a1a9c67dc297dfb4aacc4ce24",
  "main": "library/main.js",
  "maintainers": [
    {
      "email": "kkpopov@hotmail.com",
      "name": "kiril.popov"
    }
  ],
  "name": "tick42-gateway-connection",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "scripts": {
    "build": "npm run eslint && node bin/clean.js && node bin/build.js && node bin/minify && node bin/file-versionify",
    "eslint": "eslint library",
    "eslint:fix": "eslint library --fix ",
    "prepublish": "npm update & npm run build",
    "test": "npm run eslint && mocha --require ./test/test_helper \"test/**/*.js\"",
    "watch": "onchange \"./library/*.js\" -iv -e \"./bin\" -- npm run build"
  },
  "version": "2.1.0"
}

},{}],87:[function(require,module,exports){
var asciiTable = require('ascii-table');
var tick42Connection = require('tick42-gateway-connection');
var PackageJson = require('../package.json');

var levels = ['trace', 'debug', 'info', 'warn', 'error', 'off'];

function serializePath(path) {
    'use strict';
    return path.length === 0 ? '' : path.join('.');
}

var isConnection = function (c) {
    'use strict';
    return typeof c === 'object' && typeof c.send === 'function' && typeof c.on === 'function';
};

function getLevel(logger, level) {
    'use strict';
    // Retrieves the console or publish level of a logger
    // logger - the logger for which to retrieve the level
    // level - a string which can either be "publishLevel" for retrieving the publish level or "c_level" for retrieving the console level.
    if (logger[level] !== undefined) {
        return logger[level];
    } else if (logger.parent !== undefined) {
        return getLevel(logger.parent, level);
    }
}

function messageToTable(title, rows) {
    'use strict';
    // Display message as table in file
    var keys = getAllKeys(rows);
    // fill rows with message properties
    var tableRows = rows.map(function (obj) {
        return keys.map(function (key) {
            return obj[key];
        });
    });

    var tableMessage = asciiTable.factory({
        title: title,
        heading: keys,
        rows: tableRows
    });
    return tableMessage.toString();
}

function getAllKeys(data) {
    'use strict';
    // Accepts an array of objects and returns an array of all the keys from all objects
    var allKeys = [];

    data.forEach(function (obj) {
        Object.keys(obj).forEach(function (key) {
            if (allKeys.indexOf(key) === -1) {
                allKeys.push(key);
            }
        });
    });

    return allKeys;
}

function logger(configuration) {
    'use strict';
    if (typeof configuration.connection !== 'object') {
        configuration.connection = {};
    }

    // Set debug for the connection module if global debug is set
    configuration.connection.debug = configuration.debug;

    // Init connection
    // Determine if we are given a ready 'connection' object or a configuration.
    var connection = isConnection(configuration.connection) ? configuration.connection : tick42Connection(configuration.connection);

    var idKeys = ['system', 'service', 'instance'];

    // Convert instance to string, throw exceptions if it is not full
    var instanceStr = idKeys.map(function (key) {
        var prop = configuration.identity[key];
        if (typeof prop !== 'string') {
            throw new Error('Please specify "' + key + '" in your identity');
        }

        return prop;
    }).join('/');

    var loggerProto = {
        subLogger: function (name) {
            // Check if the sublogger is already created
            var existingSublogger = this.subloggers.filter(function (subLogger) {
                return subLogger.name === name;
            })[0];

            if (existingSublogger !== undefined) {
                return existingSublogger;
            }

            // Check if the name isn't the same as one of the parent properties
            Object.keys(this).forEach(function (key) {
                if (key === name) {
                    throw new Error('This sub logger name is not allowed.');
                }
            });
            // Check if the name isn't the same as one of the parent methods
            Object.keys(loggerProto).forEach(function (key) {
                if (key === name) {
                    throw new Error('This sub logger name is not allowed.');
                }
            });

            var path = this.path.slice(0);
            path.push(this.name);
            return createLogger(name, path, this);
        },

        publishLevel: function (level) {
            if (level !== null && level !== undefined) {
                this._publishLevel = level;
            }

            return getLevel(this, '_publishLevel');
        },

        consoleLevel: function (level) {
            if (level !== null && level !== undefined) {
                this._consoleLevel = level;
            }

            return getLevel(this, '_consoleLevel');
        },

        metricsLevel: function (level, metricsSystem) {
            if (level !== null && level !== undefined) {
                this._metricLevel = level;
            }

            if (metricsSystem !== undefined) {
                if (typeof metricsSystem === 'object' && typeof metricsSystem.objectMetric === 'function') {
                    this.metricSystem = metricsSystem;
                } else {
                    throw new Error('Please specify metric system ');
                }
            }
        },

        table: function (message) {
            // message must be in an array, to be displayed as table
            if (!Array.isArray(message)) {
                throw new Error('The message must be in an array');
            }

            // Retrieve logger name and levels
            var loggerName = getLoggerName(this);

            // Publish in console
            if (shouldPublish(getLevel(this, '_consoleLevel'), 'info')) {
                console.info(loggerName + ':');
                console.table(message);
            }
            // Publish in file
            if (shouldPublish(getLevel(this, '_publishLevel'), 'info')) {
                connection.send('log', 'LogMessage', {
                    instance: instanceStr,
                    level: levels.indexOf('info'),
                    logger: loggerName,
                    message: messageToTable(loggerName, message)
                });
            }
        },

        log: function (message, level) {
            publishMessage(this, level || 'info', message);
        }
    };

    function createLogger(name, path, parent) {
        var logger = Object.create(loggerProto);
        logger.name = name;
        logger.path = path;
        logger.subloggers = [];
        logger.parent = parent;
        if (parent !== undefined) {
            // add sublogger to subloggers array
            parent.subloggers.push(logger);
            // add easy access to sublogger
            parent[logger.name] = logger;
            // create metric system
            if (parent.metricSystem !== undefined) {
                logger.metricsLevel('warn', parent.metricSystem.subSystem(logger.name));
            }
        }

        levels.forEach(function (level) {
            logger[level] = function (message) {
                publishMessage(logger, level, message);
            };
        });

        logger.off = function () {};

        logger.version = PackageJson.version;

        return logger;
    }

    function publishMessage(logger, level, message) {
        // Retrieve logger name and levels
        var loggerName = getLoggerName(logger);

        // Add stack trace if the message is an error
        if (level === 'error') {
            var e = new Error();
            if (e.stack) {
                message = message + '\n' + (e.stack.split('\n')
                    .slice(3)
                    .join('\n'));
            }
        }

        // Publish in console
        if (shouldPublish(getLevel(logger, '_consoleLevel'), level)) {
            if (!console[level]) {
                return;
            }
            console[level](loggerName + ': ' + message);
        }
        // Publish in file
        if (shouldPublish(getLevel(logger, '_publishLevel'), level)) {
            connection.send('log', 'LogMessage', {
                instance: instanceStr,
                level: levels.indexOf(level),
                logger: loggerName,
                message: message
            });
        }

        // Publish in metrics
        if (shouldPublish(getLevel(logger, '_metricLevel'), level)) {
            if (logger.metricSystem !== undefined) {
                logger.metricSystem.objectMetric('LogMessage', {
                    Time: new Date(),
                    Logger: loggerName,
                    Level: level,
                    Message: message
                });

                if (level === 'error') {
                    logger.metricSystem.setState(100, message);
                }
            }
        }
    }

    var shouldPublish = function (publishLevel, messageLevel) {
        return (!publishLevel || levels.indexOf(publishLevel) <= levels.indexOf(messageLevel));
    };

    var getLoggerName = function (logger) {
        var loggerPathAndName = logger.path.slice();
        loggerPathAndName.push(logger.name);
        return '[' + serializePath(loggerPathAndName) + ']';
    };

    var mainLogger = createLogger('main', [], undefined);
    mainLogger.publishLevel('warn');
    mainLogger.consoleLevel('info');
    mainLogger.metricsLevel('warn');

    return mainLogger;
}

if (typeof window !== 'undefined') {
    window.tick42 = window.tick42 || {};
    window.tick42.log = logger;
}

module.exports = logger;

},{"../package.json":88,"ascii-table":5,"tick42-gateway-connection":78}],88:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "tick42-logger@2.0.6",
      "C:\\work\\stash\\GLUE-dev\\js-glue"
    ]
  ],
  "_from": "tick42-logger@2.0.6",
  "_id": "tick42-logger@2.0.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/tick42-logger",
  "_nodeVersion": "6.3.0",
  "_npmUser": {},
  "_npmVersion": "3.8.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "tick42-logger",
    "raw": "tick42-logger@2.0.6",
    "rawSpec": "2.0.6",
    "scope": null,
    "spec": "2.0.6",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_shasum": "04124763b30d2bbe199e38aac715e308e425c023",
  "_shrinkwrap": null,
  "_spec": "tick42-logger@2.0.6",
  "_where": "C:\\work\\stash\\GLUE-dev\\js-glue",
  "author": {
    "name": "Tick42"
  },
  "bin": {
    "build": "./bin/build.js",
    "clean": "./bin/clean.js",
    "file-versionify": "./bin/file-versionify.js",
    "minify": "./bin/minify.js"
  },
  "dependencies": {
    "ascii-table": "0.0.8",
    "tick42-gateway-connection": ">=1.1.9"
  },
  "description": "A library for logging",
  "devDependencies": {
    "blanket": "^1.1.6",
    "browserify": "^13.0.0",
    "browserify-replacify": "^0.0.4",
    "browserify-versionify": "^1.0.4",
    "eslint": "^3.1.1",
    "eslint-config-standard": "^5.3.5",
    "eslint-config-tick42": "^1.0.0",
    "eslint-plugin-promise": "^2.0.0",
    "eslint-plugin-standard": "^2.0.0",
    "fs": "0.0.2",
    "jsdom": "^8.1.0",
    "minifyify": "^7.3.2",
    "onchange": "^2.1.2",
    "phantomjs": "^1.9.12",
    "qunitjs": "^1.15.0",
    "shelljs": "^0.6.0"
  },
  "dist": {
    "shasum": "04124763b30d2bbe199e38aac715e308e425c023",
    "tarball": "http://192.168.0.234:4873/tick42-logger/-/tick42-logger-2.0.6.tgz"
  },
  "gitHead": "34be3019b237911937638a6f4abf1e820f6d1829",
  "license": "ISC",
  "main": "library/logger",
  "name": "tick42-logger",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "https://stash.tick42.com:8443/scm/ofgw/js-logger.git"
  },
  "scripts": {
    "build": "npm run eslint && node bin/clean.js && node bin/build.js && node bin/minify && node bin/file-versionify",
    "eslint": "eslint library",
    "eslint:fix": "eslint library --fix",
    "prepublish": "npm update & npm run build",
    "test": "npm run eslint && mocha --require ./test/test_helper \"test/**/*.js\"",
    "watch": "onchange \"./library/*.js\" -iv -e \"./bin\" -- npm run build"
  },
  "version": "2.0.6"
}

},{}],89:[function(require,module,exports){
"use strict";
var objectMetric_1 = require("../metrics/objectMetric");
var stringMetric_1 = require("../metrics/stringMetric");
var numberMetric_1 = require("../metrics/numberMetric");
var timestampMetric_1 = require("../metrics/timestampMetric");
var MetricSerializer = (function () {
    function MetricSerializer() {
    }
    MetricSerializer.metricToMessage = function (metric) {
        var def = MetricSerializer._getMetricDefinition(metric.name, metric.value, metric.path, metric.type, metric.description, metric.period, metric.resolution);
        return {
            id: metric.id,
            instance: metric.repo.instance,
            definition: def,
            value: MetricSerializer._serializeValue(metric.value, metric),
        };
    };
    MetricSerializer._getMetricDefinition = function (name, value, path, type, description, resolution, period) {
        var def = {
            name: name,
            description: description,
            type: type ? type : MetricSerializer._getTypeFromValue(value),
            path: path,
            resolution: resolution,
            period: period
        };
        if (def.type === objectMetric_1.ObjectMetric.type) {
            def.Composite = Object.keys(value).reduce(function (arr, key) {
                var val = value[key];
                arr.push(MetricSerializer._getMetricDefinition(key, val, path));
                return arr;
            }, []);
        }
        return def;
    };
    MetricSerializer._serializeValue = function (value, metric) {
        if (value && value.constructor === Date) {
            return {
                value: {
                    type: this._valueTypes.indexOf("date"),
                    value: value.valueOf(),
                    isArray: false
                }
            };
        }
        else if (typeof value === "object") {
            return {
                CompositeValue: Object.keys(value).reduce(function (arr, key) {
                    var val = MetricSerializer._serializeValue(value[key]);
                    val.InnerMetricName = key;
                    arr.push(val);
                    return arr;
                }, [])
            };
        }
        else {
            var valueType = metric ? metric.getValueType() : undefined;
            valueType = valueType | this._valueTypes.indexOf(typeof value);
            return { value: { type: valueType, value: value, isArray: false } };
        }
    };
    MetricSerializer._getTypeFromValue = function (value) {
        var typeAsString = value.constructor === Date ? 'timestamp' : typeof value;
        switch (typeAsString) {
            case 'string':
                return stringMetric_1.StringMetric.type;
            case 'number':
                return numberMetric_1.NumberMetric.type;
            case 'timestamp':
                return timestampMetric_1.TimestampMetric.type;
            case 'object':
                return objectMetric_1.ObjectMetric.type;
        }
        return 0;
    };
    MetricSerializer._valueTypes = [
        "boolean",
        "int",
        "number",
        "long",
        "string",
        "date",
        "object"];
    return MetricSerializer;
}());
exports.MetricSerializer = MetricSerializer;

},{"../metrics/numberMetric":94,"../metrics/objectMetric":95,"../metrics/stringMetric":98,"../metrics/timestampMetric":100}],90:[function(require,module,exports){
"use strict";
var metricSerializer_1 = require("./metricSerializer");
var MetricsBridge = (function () {
    function MetricsBridge(repo, connection) {
        var _this = this;
        this._repo = repo;
        this._connection = connection;
        connection.on('metrics', "MetricsSnapshotRequest", function (instanceInfo) {
            if (instanceInfo.Instance !== repo.instance) {
                return;
            }
            _this.sendFull(_this._repo);
        });
    }
    MetricsBridge.prototype.sendFull = function (repo) {
        var rootSystem = repo.root;
        if (!rootSystem) {
            return;
        }
        if (rootSystem.subSystems.length == 0) {
            return;
        }
        this.sendFullSystem(rootSystem);
    };
    MetricsBridge.prototype.sendFullSystem = function (s) {
        var _this = this;
        this.createSystem(s);
        s.subSystems.forEach(function (sub) {
            _this.sendFullSystem((sub));
        });
        s.metrics.forEach(function (m) {
            _this.createMetric(m);
        });
    };
    MetricsBridge.prototype.createMetric = function (metric) {
        this._send("CreateMetric", metricSerializer_1.MetricSerializer.metricToMessage(metric));
    };
    MetricsBridge.prototype.updateMetric = function (metric) {
        this._send("UpdateMetric", metricSerializer_1.MetricSerializer.metricToMessage(metric));
    };
    MetricsBridge.prototype.createSystem = function (system) {
        if (system.parent !== undefined) {
            this._send("CreateMetricSystem", {
                id: system.id,
                instance: system.repo.instance,
                definition: { name: system.name, description: system.description, path: system.path }
            });
        }
    };
    MetricsBridge.prototype.updateSystem = function (system, state) {
        this._send("UpdateMetricSystem", {
            id: system.id,
            instance: system.repo.instance,
            state: state
        });
    };
    MetricsBridge.prototype.heartbeat = function (repo, interval) {
        this._send("HeartbeatMetrics", { publishingInterval: interval, instance: repo.instance });
    };
    MetricsBridge.prototype._send = function (type, message) {
        this._connection.send("metrics", type, message);
    };
    return MetricsBridge;
}());
exports.MetricsBridge = MetricsBridge;

},{"./metricSerializer":89}],91:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var AddressMetric = (function (_super) {
    __extends(AddressMetric, _super);
    function AddressMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, AddressMetric.type, value || '');
    }
    AddressMetric.type = 8;
    return AddressMetric;
}(metric_1.Metric));
exports.AddressMetric = AddressMetric;

},{"./metric":93}],92:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var CountMetric = (function (_super) {
    __extends(CountMetric, _super);
    function CountMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, CountMetric.type, value || 0);
    }
    CountMetric.prototype.increment = function () {
        this.incrementBy(1);
    };
    CountMetric.prototype.decrement = function () {
        this.decrementBy(1);
    };
    CountMetric.prototype.incrementBy = function (n) {
        this.update((this.value || 0) + n);
    };
    CountMetric.prototype.decrementBy = function (n) {
        this.update((this.value || 0) - n);
    };
    CountMetric.prototype.getValueType = function () {
        return 3;
    };
    CountMetric.type = 3;
    return CountMetric;
}(metric_1.Metric));
exports.CountMetric = CountMetric;

},{"./metric":93}],93:[function(require,module,exports){
"use strict";
var Metric = (function () {
    function Metric(def, parent, transport, type, value) {
        this.name = def.name;
        this.description = def.description;
        this.period = def.period;
        this.resolution = def.resolution;
        this.system = parent;
        this.repo = parent.repo;
        this.id = parent.path + "/" + this.name;
        this.value = value;
        this.type = type;
        this.path = parent.path.slice(0);
        this.path.push(parent.name);
        this._transport = transport;
        this._transport.createMetric(this);
    }
    Metric.prototype.update = function (value) {
        this.value = value;
        this._transport.updateMetric(this);
    };
    Metric.prototype.getValueType = function () {
        return undefined;
    };
    Metric.type = 0;
    return Metric;
}());
exports.Metric = Metric;

},{}],94:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var NumberMetric = (function (_super) {
    __extends(NumberMetric, _super);
    function NumberMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, NumberMetric.type, value || 0);
    }
    NumberMetric.prototype.increment = function () {
        this.incrementBy(1);
    };
    NumberMetric.prototype.decrement = function () {
        this.decrementBy(1);
    };
    NumberMetric.prototype.incrementBy = function (n) {
        this.update((this.value || 0) + n);
    };
    NumberMetric.prototype.decrementBy = function (n) {
        this.update((this.value || 0) - n);
    };
    NumberMetric.type = 2;
    return NumberMetric;
}(metric_1.Metric));
exports.NumberMetric = NumberMetric;

},{"./metric":93}],95:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var ObjectMetric = (function (_super) {
    __extends(ObjectMetric, _super);
    function ObjectMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, ObjectMetric.type, value);
    }
    ObjectMetric.prototype.update = function (value) {
        _super.prototype.update.call(this, value);
    };
    ObjectMetric.type = 11;
    return ObjectMetric;
}(metric_1.Metric));
exports.ObjectMetric = ObjectMetric;

},{"./metric":93}],96:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var RateMetric = (function (_super) {
    __extends(RateMetric, _super);
    function RateMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, RateMetric.type, value || 0);
    }
    RateMetric.type = 4;
    return RateMetric;
}(metric_1.Metric));
exports.RateMetric = RateMetric;

},{"./metric":93}],97:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var StatisticsMetric = (function (_super) {
    __extends(StatisticsMetric, _super);
    function StatisticsMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, StatisticsMetric.type, value || 0);
    }
    StatisticsMetric.type = 6;
    return StatisticsMetric;
}(metric_1.Metric));
exports.StatisticsMetric = StatisticsMetric;

},{"./metric":93}],98:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var StringMetric = (function (_super) {
    __extends(StringMetric, _super);
    function StringMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, StringMetric.type, value || '');
    }
    StringMetric.type = 1;
    return StringMetric;
}(metric_1.Metric));
exports.StringMetric = StringMetric;

},{"./metric":93}],99:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var TimespanMetric = (function (_super) {
    __extends(TimespanMetric, _super);
    function TimespanMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, TimespanMetric.type, value || false);
    }
    TimespanMetric.prototype.start = function () {
        this.update(true);
    };
    TimespanMetric.prototype.stop = function () {
        this.update(false);
    };
    TimespanMetric.type = 10;
    return TimespanMetric;
}(metric_1.Metric));
exports.TimespanMetric = TimespanMetric;

},{"./metric":93}],100:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var TimestampMetric = (function (_super) {
    __extends(TimestampMetric, _super);
    function TimestampMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, TimestampMetric.type, value || new Date());
    }
    TimestampMetric.prototype.now = function () {
        this.update(new Date());
    };
    TimestampMetric.type = 7;
    return TimestampMetric;
}(metric_1.Metric));
exports.TimestampMetric = TimestampMetric;

},{"./metric":93}],101:[function(require,module,exports){
"use strict";
var system_1 = require("./system");
var transport_1 = require("./bridge/transport");
var Repository = (function () {
    function Repository(config) {
        this._config = config;
        this._transport = new transport_1.MetricsBridge(this, config.connection);
        this.instance = config.identity.system + '/' + config.identity.service + '/' + config.identity.instance;
        this.identity = config.identity;
        this._startHeartbeating();
        this.root = new system_1.System('', this, this._transport);
        this._initSystemMetrics(this.root, config.clickStream || config.clickStream === undefined);
    }
    Repository.prototype._startHeartbeating = function () {
        var _this = this;
        this._transport.heartbeat(this, this._config.settings.heartbeatInterval);
        setInterval(function () {
            _this._transport.heartbeat(_this, _this._config.settings.heartbeatInterval);
        }, this._config.settings.heartbeatInterval);
    };
    Repository.prototype._initSystemMetrics = function (rootSystem, useClickStream) {
        if (typeof navigator !== 'undefined') {
            rootSystem.stringMetric('UserAgent', navigator.userAgent);
        }
        if (useClickStream && typeof document !== 'undefined') {
            var clickStream_1 = rootSystem.subSystem("ClickStream");
            var documentClickHandler = function (e) {
                if (!e.target) {
                    return;
                }
                clickStream_1.objectMetric("LastBrowserEvent", {
                    type: "click",
                    timestamp: new Date(),
                    target: {
                        className: e.target ? e.target.className : '',
                        id: e.target.id,
                        type: '<' + e.target.tagName.toLowerCase() + '>',
                        href: e.target.href || ""
                    }
                });
            };
            clickStream_1.objectMetric("Page", {
                title: document.title,
                page: window.location.href
            });
            if (document.addEventListener) {
                document.addEventListener('click', documentClickHandler);
            }
            else {
                document.attachEvent('onclick', documentClickHandler);
            }
        }
    };
    return Repository;
}());
exports.Repository = Repository;

},{"./bridge/transport":90,"./system":102}],102:[function(require,module,exports){
"use strict";
var numberMetric_1 = require("./metrics/numberMetric");
var timespanMetric_1 = require("./metrics/timespanMetric");
var stringMetric_1 = require("./metrics/stringMetric");
var addressMetric_1 = require("./metrics/addressMetric");
var objectMetric_1 = require("./metrics/objectMetric");
var timestampMetric_1 = require("./metrics/timestampMetric");
var countMetric_1 = require("./metrics/countMetric");
var statisticsMetric_1 = require("./metrics/statisticsMetric");
var rateMetric_1 = require("./metrics/rateMetric");
var System = (function () {
    function System(name, repo, transport, parent, description) {
        this.metrics = [];
        this.subSystems = [];
        this.name = name;
        this.description = description || '';
        this.repo = repo;
        this.parent = parent;
        this._transport = transport;
        this.path = this._buildPath(this.parent);
        this.id = (this.path.length > 0 ? this.path.join('/') + '/' : '') + this.name;
        this.identity = repo.identity;
        this.root = repo.root;
        this._transport.createSystem(this);
    }
    System.prototype.subSystem = function (name, description) {
        if (!name || name.length === 0) {
            throw new Error('name is required');
        }
        var matchingSystems = this.subSystems.filter(function (s) { return s.name === name; });
        if (matchingSystems.length > 0) {
            return matchingSystems[0];
        }
        var system = new System(name, this.repo, this._transport, this, description);
        this.subSystems.push(system);
        return system;
    };
    System.prototype.setState = function (state, description) {
        this._transport.updateSystem(this, { state: state, description: description });
    };
    System.prototype.stringMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, stringMetric_1.StringMetric.type, value, function (metricDef) {
            return new stringMetric_1.StringMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.numberMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, numberMetric_1.NumberMetric.type, value, function (metricDef) {
            return new numberMetric_1.NumberMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.countMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, countMetric_1.CountMetric.type, value, function (metricDef) {
            return new countMetric_1.CountMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.addressMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, addressMetric_1.AddressMetric.type, value, function (metricDef) {
            return new addressMetric_1.AddressMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.objectMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, objectMetric_1.ObjectMetric.type, value, function (metricDef) {
            return new objectMetric_1.ObjectMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.timespanMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, timespanMetric_1.TimespanMetric.type, value, function (metricDef) {
            return new timespanMetric_1.TimespanMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.timestampMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, timestampMetric_1.TimestampMetric.type, value, function (metricDef) {
            return new timestampMetric_1.TimestampMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.rateMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, rateMetric_1.RateMetric.type, value, function (metricDef) {
            return new rateMetric_1.RateMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.statiticsMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, statisticsMetric_1.StatisticsMetric.type, value, function (metricDef) {
            return new statisticsMetric_1.StatisticsMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype._unionToMetricDef = function (definition) {
        var metricDef;
        if (typeof definition === 'string') {
            metricDef = { name: definition };
        }
        else {
            metricDef = definition;
        }
        if (metricDef.name === undefined) {
            throw new Error('Metric name is required.');
        }
        return metricDef;
    };
    System.prototype._getOrCreateMetric = function (definition, expectedType, value, createFunc) {
        var metricDef = this._unionToMetricDef(definition);
        var matchingMetrics = this.metrics.filter(function (m) { return m.name === metricDef.name; });
        if (matchingMetrics.length > 0) {
            var existingMetric = matchingMetrics[0];
            if (existingMetric.type !== expectedType) {
                throw new Error('A metric named ' + metricDef.name + ' is already defined with different type');
            }
            if (typeof value !== 'undefined') {
                existingMetric.update(value);
            }
            return existingMetric;
        }
        var newMetric = createFunc(metricDef);
        this.metrics.push(newMetric);
        return newMetric;
    };
    System.prototype._buildPath = function (system) {
        if (!system || !system.parent) {
            return [];
        }
        var path = this._buildPath(system.parent);
        path.push(system.name);
        return path;
    };
    return System;
}());
exports.System = System;

},{"./metrics/addressMetric":91,"./metrics/countMetric":92,"./metrics/numberMetric":94,"./metrics/objectMetric":95,"./metrics/rateMetric":96,"./metrics/statisticsMetric":97,"./metrics/stringMetric":98,"./metrics/timespanMetric":99,"./metrics/timestampMetric":100}],103:[function(require,module,exports){
"use strict";
var repository_1 = require("./core/repository");
var tick42_gateway_connection_1 = require('tick42-gateway-connection');
var windowAsAny = typeof window === 'undefined' ? (new Object()) : window;
windowAsAny.tick42 = windowAsAny.tick42 || {};
windowAsAny.tick42.metrics = windowAsAny.tick42.metrics || function (config) {
    if (!config.identity) {
        throw new Error('Identity missing from metrics configuration');
    }
    if (!config.identity.service || typeof config.identity.service !== 'string') {
        throw new Error('Service missing or invalid in metrics identity configuration');
    }
    if (!config.identity.system || typeof config.identity.system !== 'string') {
        throw new Error('System missing or invalid in metrics identity configuration');
    }
    if (!config.identity.instance || typeof config.identity.instance !== 'string') {
        throw new Error('Instancemissing or invalid in metrics identity configuration');
    }
    config.settings = config.settings || {};
    config.settings.heartbeatInterval = config.settings.heartbeatInterval || 15000;
    if (typeof config.connection !== "object") {
        config.connection = {};
    }
    if (!(typeof config.connection === "object" && typeof config.connection.send === "function" && typeof config.connection.on === "function")) {
        config.connection = tick42_gateway_connection_1.connection(config.connection);
    }
    var repo = new repository_1.Repository(config);
    repo['version'] = repo.root['version'] = '2.0.15';
    return repo.root;
};
module.exports = windowAsAny.tick42.metrics;

},{"./core/repository":101,"tick42-gateway-connection":78}],104:[function(require,module,exports){
  var helpers = module.exports = {};

  helpers.invokeAgmSuccessCallback = function (callback, callbackAargument) {
      'use strict';
      if (typeof callback === 'function') {
          callback(callbackAargument);
      }
  }

  helpers.invokeAgmErrorCallback =  function (callback, error) {
      'use strict';
      if (typeof callback === 'function') {
          callback(error.message);
      }
  }

  helpers.execCallbacks =  function (arr, val) {
      'use strict';
      if (arr !== undefined) {
          arr.forEach(function(callback) {
              callback(val);
          });
      }
  }

  helpers.vals = function(obj) {
      'use strict';
      return Object.keys(obj).reduce(function(arr, key) {
          arr.push(obj[key]);
          return arr;
      }, []);
  }

},{}],105:[function(require,module,exports){
var deprecate = require('util-deprecate');
var helpers = require('./helpers');

module.exports.init = init;
module.exports.create = createWindow;

var agm;

function setWindowStyleAttributes(windowStyles) {
    'use strict';
    // Adding windowStyleAttributes
    if (windowStyles !== undefined && typeof windowStyles !== 'object') {
        return JSON.parse(windowStyles);
    } else if (windowStyles !== undefined && typeof windowStyles === 'object') {
        return windowStyles;
    } else {
        return {};
    }
}

function init(a) {
    'use strict';
    agm = a;
}


function createWindow(id, internalId, name, containerObj, url, title, windowStyles) {
    'use strict';

    if (!containerObj) {
        throw new Error('containerObj can not be undefined');
    }

    var resultWindow;

    function addCallback(key, callback) {
        var obj = resultWindow._callbacks;
        if (obj[key] === undefined) {
            obj[key] = [callback];
        } else {
            obj[key].push(callback);
        }
    }

    // Functions for opening, closing, resizing windows
    function open(dimensions, style, success, error) {

        // A wrapper for the standard AGM "open" function
        var theWindow = this;

        // Init style objects if they are null
        dimensions = dimensions || {};
        style = style || {};

        // Take out the sticky-windows related properties from the style object

        var isSticky = style.isSticky;
        delete style.isSticky;

        var stickyGroup = style.stickyGroup;
        delete style.stickyGroup;
        delete style.hasMoveAreaThickness;
        delete style.hasSizeAreaThickness;

        var target = containerObj.getAgmTarget();

        agm.invoke('T42.Html.CreateWindow', {
            // Window name and url
            windowName: theWindow.name,
            url: theWindow.url,
            // dimensions
            top: dimensions.top,
            left: dimensions.left,
            width: dimensions.width,
            height: dimensions.height,
            // Stickywindows - related props
            isSticky: isSticky,
            stickyGroup: stickyGroup,
            // Style attributes
            windowStyleAttributes: JSON.stringify(style)

        },
            target,
            {},
            opened,
            cannotOpen);

        function opened(message) {
            // Add id to the current windows because the current HTML Container
            // doesn't support tracking the updates of the window
            if (message.returned !== undefined) {
                theWindow.id = message.returned.id;
            }
            helpers.invokeAgmSuccessCallback(success, theWindow);
        }

        function cannotOpen(e) {
            // Call the error callback
            if (typeof error === 'function') {
                error(e);
            }
            // Try to bind the returned object in case...
            // bindWindow(theWindow);
        }

        return theWindow;
    }

    function setStyle(style, success, error) {
        return agmAction('T42.Wnd.SetWindowStyle', success, error, { windowStyleAttributes: JSON.stringify(style) });
    }

    function opened() {
        return resultWindow.id !== undefined;
    }

    function handleWindowClose() {
        if (resultWindow.id !== undefined) {
            helpers.execCallbacks(resultWindow._callbacks.onClose);
            resultWindow.id = undefined;
            resultWindow._callbacks = {};
        }
    }

    function close() {
        return agmAction('T42.Wnd.Close', function(win) {
            console.log('"' + win.name +  '" window was closed.');
        }, function (err) {
            console.log('"' + resultWindow.name +  '" window was NOT closed due following error: ', err)
        });
    }

    function navigate(url, success, error) {
        return agmAction('T42.Html.OpenUrl', success, error, { url: url });
    }

    function setTitle(title, success, error) {
        return agmAction('T42.Wnd.SetWindowTitle', success, error, { title: title });
    }

    function getDetails(success, error) {
        var windowId = resultWindow.id;
        agm.invoke('T42.Wnd.FindById', { windowId: resultWindow.id }, containerObj.getAgmTarget(), {}, returnedDimensions, cannotReturnDimensions);

        function returnedDimensions(value) {
            helpers.invokeAgmSuccessCallback(success, value.returned[windowId]);
        }

        function cannotReturnDimensions(e) {
            helpers.invokeAgmErrorCallback(error, e);
        }
    }

    function moveResize(dimensions, success, error) {
        return agmAction('T42.Wnd.ResizeAndMove', success, error, dimensions)
    }

    function addTabButton(buttonInfo, success, error) {
        if (typeof buttonInfo === 'undefined') {
            if (typeof error !== 'function') {
                return;
            } else {
                error('No button info');
            }
        }

        if (buttonInfo.buttonId === undefined) {
            if (typeof error !== 'function') {
                return;
            } else {
                error('No buttonId');
            }
        }

        if (buttonInfo.imageBase64 === undefined) {
            if (typeof error !== 'function') {
                return;
            } else {
                error('No imageBase64');
            }
        }

        // Invoke the AGM method
        agm.invoke('T42.Wnd.AddButton', {
            windowId: resultWindow.id,
            buttonInfo: buttonInfo
        }, containerObj.getAgmTarget(), {}, buttonIsAdded.bind(this), buttonCannotBeAdded.bind(this));

        function buttonIsAdded() {
            var _buttonId = buttonInfo.buttonId;
            resultWindow.buttons[_buttonId] = {
                id: _buttonId,
                info: buttonInfo
            };
            helpers.invokeAgmSuccessCallback(success, this);
        }

        function buttonCannotBeAdded(e) {
            helpers.invokeAgmErrorCallback(error, e);
        }
    }

    function onTitleChanged(callback) {
        callback(resultWindow.title);
        addCallback('onTitleChanged', callback);
    }

    function onAvailable(callback) {
        if (resultWindow.opened()) {
            callback(this);
        }
        return addCallback('onAvailable', callback);
    }

    function onClose(callback) {
        addCallback('onClose', callback);
    }

    function onUrlChanged(callback) {
        addCallback('onUrlChanged', callback);
    }

    function onTabButton(callback) {
        addCallback('onTabButton', callback);
    }

    function activate(success, error) {
        return agmAction('T42.Wnd.Activate', success, error);
    }

    function maximizeRestore(success, error) {
        return agmAction('T42.Wnd.MaximizeOrRestoreDown', success, error);
    }

    function maximize(success, error) {
        return agmAction('T42.Wnd.Maximize', success, error);
    }

    function restore(success, error) {
        return agmAction('T42.Wnd.Restore', success, error);
    }

    function minimize(success, error) {
        return agmAction('T42.Wnd.Minimize', success, error);
    }

    function collapse(success, error) {
        return agmAction('T42.Wnd.Collapse', success, error);
    }

    function titleChanged(title) {
        resultWindow.title = title;
        helpers.execCallbacks(resultWindow._callbacks.onTitleChanged, title);
    }

    function urlChanged(url) {
        resultWindow.url = url;
        helpers.execCallbacks(resultWindow._callbacks.onUrlChanged, url);
    }

    // Adds an alias of an AGM method in the Window prototype
    function agmAction(action, success, error, args) {
        // Stop if the window is closed
        if (resultWindow.url === undefined) {
            if (typeof error === 'function') {
                error('Cannot execute a command on a closed window.');
            }
            return;
        }

        // Add the window ID to the arguments
        args = args || {};
        args.windowId = resultWindow.id;

        // Invoke the AGM method
        agm.invoke(action, args, containerObj.getAgmTarget(), {}, fulfilled, error);

        function fulfilled() {
            helpers.invokeAgmSuccessCallback(success, resultWindow);
        }
    }

    resultWindow = {
        _internalId: internalId,
        _callbacks: {},

        name: name,
        container: containerObj.name,
        url: url,
        id: id,
        application: containerObj.name + '.' + name,
        title: title,
        buttons: {},
        windowStyleAttributes: setWindowStyleAttributes(windowStyles),

        onAvailable: onAvailable,
        onClose: onClose,
        onUrlChanged: onUrlChanged,
        onTitleChanged: onTitleChanged,
        onTabButton: onTabButton,

        maximize: maximize,
        restore: restore,
        minimize: minimize,
        maximizeRestore: maximizeRestore,
        collapse: collapse,
        focus: activate,
        open: open,
        opened: opened,
        getDetails: getDetails,
        moveResize: moveResize,
        setTitle: setTitle,
        setStyle: setStyle,
        navigate: navigate,
        addTabButton: addTabButton,
        close: close,
        handleWindowClose: handleWindowClose,
        titleChanged: titleChanged,
        urlChanged: urlChanged,

        // deprecates
        set_style: deprecate(setStyle, 'window.set_style() is deprecated and might be removed from future versions of glue. Use window.setStyle() instead'),
        on_available: deprecate(onAvailable, 'window.on_available() is deprecated and might be removed from future versions of glue. Use window.onAvailable() instead'),
        on_close: deprecate(onClose, 'window.on_close() is deprecated and might be removed from future versions of glue. Use window.onClose() instead'),
        on_url_changed: deprecate(onUrlChanged, 'window.on_url_changed() is deprecated and might be removed from future versions of glue. Use window.onUrlChanged() instead'),
        set_title: deprecate(setTitle, 'window.set_title() is deprecated and might be removed from future versions of glue. Use window.setTitle() instead'),
        get_details: deprecate(getDetails, 'window.get_details() is deprecated and might be removed from future versions of glue. Use window.getDetails() instead'),
        move_resize: deprecate(moveResize, 'window.move_resize() is deprecated and might be removed from future versions of glue. Use window.moveResize() instead'),
        maximize_restore: deprecate(maximizeRestore, 'window.maximize_restore() is deprecated and might be removed from future versions of glue. Use window.maximizeRestore() instead')

    };
    return resultWindow;
}

},{"./helpers":104,"util-deprecate":109}],106:[function(require,module,exports){
(function (global){
var PackageJson = require('../package.json');
var deprecate = require('util-deprecate');
var windowFactory = require('./window');
var helpers = require('./helpers');

var windows = function (agm) {
    'use strict'

    windowFactory.init(agm);

    if (global.htmlContainer && agm.subscribe) {
        // Only container.
        agm.serverMethodAdded(function (resp) {
            if ((resp.server.application.indexOf('HtmlContainer.') !== -1 && resp.server.application.indexOf('.Internal') !== -1) && resp.method.name.indexOf('T42.Wnd.WindowStateChanged') !== -1) {
                agm.subscribe('T42.Wnd.WindowStateChanged', { target: 'all' }).then(function (stream) {
                    stream.onData(function (streamData) {
                        updateWindow(streamData.data, matchContainer(streamData.server.application));
                    });
                    // attach callbacks
                    // stream.on("end", handleStreamClosed);
                    // stream.on("close", handleStreamClosed);
                });
            }
        });
    }

    // Store windows that are tracked by ID and receive updates
    var windows = {};
    var containers = [];

    if (global.htmlContainer) {
        var myContainer = constructContainerObject(htmlContainer.containerName);
        addContainer(containers, myContainer);
        createWindow(htmlContainer.browserWindowName, myContainer, window.location.href, htmlContainer.windowId, htmlContainer.windowStyleAttributes);
    }

    function ensureContainerAvailiable(container, successCallback, errorCallback) {
        var containerFound = matchContainer(container)
        if (containerFound) {
            successCallback(containerFound);
            return;
        }

        setTimeout(function () {
            var containerFound = matchContainer(container)
            if (containerFound) {
                successCallback(containerFound);
            } else {
                errorCallback();
            }
        }, 2000);
    }

    function matchContainer(containerIdentifier) {
        if (containerIdentifier === undefined) {
            return containers[0];
        }
        return containers.filter(function (container) {
            return container.shortName === containerIdentifier ||
                container.name === containerIdentifier ||
                container.agmApplication === containerIdentifier;
        })[0];
    }

    function constructContainerObject(containerIdentity) {
        var parts = containerIdentity.split('.');
        if (parts.length === 2) {
            parts.splice(0, 0, 'HtmlContainer');
        }

        var agmApplication = parts[0] + '.' + parts[1] + '.' + parts[2];

        return {
            shortName: parts[2],
            name: parts[1] + '.' + parts[2],
            agmApplication: agmApplication,
            getAgmTarget: function () {
                return { application: agmApplication }
            }
        };
    }

    function addContainer(containers, container) {
        if (containers.filter(function(cont) {
            return cont.shortName === container.shortName &&
            cont.name === container.name &&
            cont.agmApplication === container.agmApplication
        }).length  === 0) {
            containers.push(container);
        }
    }

    function getCallbacks(callbacks, containerName) {
        if (callbacks.containersCallbacks[containerName] !== undefined) {
            return callbacks.allContainersCallbacks.concat(callbacks.containersCallbacks[containerName]);
        } else {
            return callbacks.allContainersCallbacks;
        }
    }

    function putCallbacks(globalCallbacks, callback, container) {
        if (container === undefined) {
            globalCallbacks.allContainersCallbacks.push(callback);
        } else {
            if (globalCallbacks.containersCallbacks[container] === undefined) {
                globalCallbacks.containersCallbacks[container] = [callback];
            } else {
                globalCallbacks.containersCallbacks[container].push(callback);
            }
        }
    }

    function updateWindow(windowInfo, containerName) {
        var theWindow = getWindow(windowInfo.windowName, containerName, windowInfo.url, windowInfo.windowId, windowInfo.windowStyleAttributes, windowInfo.windowTitle);

        if (theWindow.id === undefined) {
            theWindow.id = windowInfo.windowId;
            helpers.execCallbacks(theWindow._callbacks.onAvailable, theWindow);
        }

        if (windowInfo.state === 'TitleChanged') {
            theWindow.titleChanged(windowInfo.windowTitle);
        }

        if (windowInfo.state === 'UrlChanged') {
            theWindow.urlChanged(windowInfo.url);
        }

        if (windowInfo.state === 'Created') {
            // Execute global "window_added" callbacks
            helpers.execCallbacks(getCallbacks(windowAddedCallbacks, containerName), theWindow);
        }

        // Clear the window on close event
        if (windowInfo.state === 'Closed') {
            // Execute global "window_removed" callbacks
            helpers.execCallbacks(getCallbacks(windowRemovedCallbacks, containerName), theWindow);

            delete windows[theWindow._internalId];

            theWindow.handleWindowClose();
        }

        // ButtonClicked
        if (windowInfo.state === 'ButtonClicked') {
            // Execute global "window_added" callbacks
            if (theWindow.buttons !== undefined && Object.keys(theWindow.buttons).length !== 0) {
                if (theWindow._callbacks.onTabButton === undefined) {
                    return;
                }
                helpers.execCallbacks(theWindow._callbacks.onTabButton, windowInfo.buttonId, theWindow.buttons[windowInfo.buttonId].info);

                theWindow._callbacks.onTabButton.forEach(function (callback) {
                    callback(windowInfo.buttonId, theWindow.buttons[windowInfo.buttonId].info);
                });
            }
        }
    }

    // Create a dictionary to store the callbacks for the method "window_added".
    var windowAddedCallbacks = {
        containersCallbacks: {},
        allContainersCallbacks: []
    };

    // Create a dictionary to store the callbacks for the method "window_removed".
    var windowRemovedCallbacks = {
        containersCallbacks: {},
        allContainersCallbacks: []
    };

    function createWindowId(name, container) {
        return container.agmApplication + '.' + name;
    }

    function createWindow(name, container, url, id, windowStyles, title) {
        var windowId = createWindowId(name, container);

        var windowObj = windowFactory.create(id, windowId, name, container, url, title, windowStyles);

        windows[windowId] = windowObj;

        return windowObj;
    }

    // It is not guaranteed to return the window with the same URL and ID
    function getWindow(name, container, url, id, windowStyles, title) {

        var windowId = createWindowId(name, container);

        var existingWindow = windows[windowId];

        if (existingWindow !== undefined) {
            return existingWindow;
        } else {
            // Init object
            return createWindow(name, container, url, id, windowStyles, title);
        }
    }

    function my() {
        var h;
        if (typeof window !== 'undefined') {
            h = window.htmlContainer;
        }
        // Retrieve the current window (the onw in which your application currently resides).
        if (h === undefined) {
            return undefined;
        } else {
            return getWindow(h.browserWindowName, matchContainer(h.containerName), window.location.href, h.windowId, h.windowStyleAttributes, document.title);
        }
    }

    function open(name, url, container, dimensions, style, success, error) {
        container = container || 'Internal';
        ensureContainerAvailiable(container, function (container) {
            return getWindow(name, container, url, undefined, style)
                    .open(dimensions, style, success, error);
        }, function () {
            error('can not find container')
        });
    }

    function find (name, container, success) {

        container = matchContainer(container);

        var windowsForListing = Object.keys(windows).reduce(function (memo, winId) {
            var window = windows[winId];
            if (window.container === container.name && window.name === name) {
                memo.push(window);
            }
            return memo;
        }, []);

        if (typeof success !== 'function') {
            return windowsForListing[0];
        }

        success(windowsForListing[0]);
    }

    function list (container, success) {

        container = matchContainer(container);

        var windowsForListing = Object.keys(windows).reduce(function (memo, winId) {
            var window = windows[winId];
            if (window.container === container.name) {
                memo.push(window);
            }
            return memo;
        }, []);

        if (typeof success !== 'function') {

            return windowsForListing;
        }

        success(windowsForListing);
    }

    function windowAdded(callback, container) {
            // Add the current callback to the callback dictionary.
        putCallbacks(windowAddedCallbacks, callback, container);
            // Execute all the callbacks for already existing windows.
            // Get all existing html containers.
        api.containerAdded(function (server) {
                // If the user is subscribed to the container
            if (container === undefined || container === server) {
                    // list all the windows in the container.
                api.list(server,
                        function (listOfWindows) {
                            // execute the callback for each window.
                            listOfWindows.forEach(function (existingWindow) {
                                callback(existingWindow);
                            });
                        },
                        // Error callback if the windows cannot be listed.
                        function (e) {
                            console.log('Unable to load existing windows. ' + e);
                        }
                    );
            }
        })
    }

    function windowRemoved(callback, container) {
            // Add the current callback to the callback dictionary.
        putCallbacks(windowRemovedCallbacks, callback, container);
    }

    function containerAdded(callback) {
        agm.serverAdded(function (server) {
            if (server.application.indexOf('HtmlContainer.') !== -1) {
                var container = constructContainerObject(server.application);
                addContainer(containers, container);
                helpers.invokeAgmSuccessCallback(callback, server.application);
            }
        });
    }

    function containerRemoved(callback) {
        agm.serverRemoved(function (server) {
            if (server.application.indexOf('HtmlContainer.') !== -1) {
                helpers.invokeAgmSuccessCallback(callback, server.application);
            }
        });
    }

    // The API itself
    var api = {
        my: my,
        open: open,
        find: find,
        list: list,
        windowAdded: windowAdded,
        windowRemoved: windowRemoved,
        containerAdded: containerAdded,
        containerRemoved: containerRemoved,

        _from_event: function(name, container, url, id, windowStyles, title) {
            container = matchContainer(container);
            return getWindow(name, container, url, id, windowStyles, title);
        }
    };

    // deprecates
    api.window_added = deprecate(api.windowAdded, 'window.window_added() is deprecated and might be removed from future versions of glue. Use window.windowAdded() instead');
    api.window_removed = deprecate(api.windowRemoved, 'window.window_removed() is deprecated and might be removed from future versions of glue. Use window.windowRemoved() instead');
    api.container_added = deprecate(api.containerAdded, 'window.container_added() is deprecated and might be removed from future versions of glue. Use window.containerAdded() instead');
    api.container_removed = deprecate(api.containerRemoved, 'window.container_removed() is deprecated and might be removed from future versions of glue. Use window.containerRemoved() instead');

    api.version = PackageJson.version;

    return api;
};

if (typeof window !== 'undefined') {
    window.tick42 = window.tick42 || {};
    window.tick42.windows = windows;
}

module.exports = windows;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../package.json":107,"./helpers":104,"./window":105,"util-deprecate":109}],107:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "tick42-windows@2.2.4",
      "C:\\work\\stash\\GLUE-dev\\js-glue"
    ]
  ],
  "_from": "tick42-windows@2.2.4",
  "_id": "tick42-windows@2.2.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/tick42-windows",
  "_nodeVersion": "6.0.0",
  "_npmUser": {},
  "_npmVersion": "3.10.5",
  "_phantomChildren": {},
  "_requested": {
    "name": "tick42-windows",
    "raw": "tick42-windows@2.2.4",
    "rawSpec": "2.2.4",
    "scope": null,
    "spec": "2.2.4",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://192.168.0.234:4873/tick42-windows/-/tick42-windows-2.2.4.tgz",
  "_shasum": "0fb4c22a1fcc69b56e90232cb08ba530e3888a0f",
  "_shrinkwrap": null,
  "_spec": "tick42-windows@2.2.4",
  "_where": "C:\\work\\stash\\GLUE-dev\\js-glue",
  "author": {
    "name": "Tick42"
  },
  "bin": {
    "build": "./bin/build.js",
    "clean": "./bin/clean.js",
    "file-versionify": "./bin/file-versionify.js",
    "minify": "./bin/minify.js"
  },
  "dependencies": {
    "es6-promise": "^3.0.2",
    "util-deprecate": "^1.0.2"
  },
  "description": "A windowing API for the Tick42 HTML Container",
  "devDependencies": {
    "blanket": "^1.1.6",
    "browserify": "^13.0.0",
    "browserify-replacify": "^0.0.4",
    "browserify-versionify": "^1.0.4",
    "eslint": "^3.1.1",
    "eslint-config-standard": "^5.3.5",
    "eslint-config-tick42": "^1.0.0",
    "eslint-plugin-promise": "^2.0.0",
    "eslint-plugin-standard": "^2.0.0",
    "fs": "0.0.2",
    "jscs": "^3.0.7",
    "jsdom": "^8.1.0",
    "jshint": "^2.9.1",
    "minifyify": "^7.3.2",
    "onchange": "^2.1.2",
    "phantomjs": "^1.9.12",
    "qunitjs": "^1.15.0",
    "shelljs": "^0.6.0"
  },
  "directories": {
    "test": "tests"
  },
  "dist": {
    "shasum": "0fb4c22a1fcc69b56e90232cb08ba530e3888a0f",
    "tarball": "http://192.168.0.234:4873/tick42-windows/-/tick42-windows-2.2.4.tgz"
  },
  "gitHead": "1fd6983959193a22b854c4b3cd229f6f81ccfbe4",
  "license": "ISC",
  "main": "library/windows.js",
  "name": "tick42-windows",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "https://stash.tick42.com:8443/scm/ofgw/js-windows.git"
  },
  "scripts": {
    "build": "npm run eslint && node bin/clean.js && node bin/build.js && node bin/minify && node bin/file-versionify",
    "eslint": "eslint library",
    "eslint:fix": "eslint library --fix",
    "prepublish": "npm update & npm run build",
    "test": "npm run eslint && mocha --require ./test/test_helper \"test/**/*.js\"",
    "watch": "onchange \"./library/*.js\" -iv -e \"./bin\" -- npm run build"
  },
  "version": "2.2.4"
}

},{}],108:[function(require,module,exports){
(function (global){
/*!
Copyright (C) 2015 by WebReflection

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
'use strict';

function encode(str) {
  return encodeURIComponent(str).replace(find, replacer);
}

function decode(str) {
  return decodeURIComponent(str.replace(plus, ' '));
}

function URLSearchParams(query) {
  this[secret] = Object.create(null);
  if (!query) return;
  for (var
    index, value,
    pairs = (query || '').split('&'),
    i = 0,
    length = pairs.length; i < length; i++
  ) {
    value = pairs[i];
    index = value.indexOf('=');
    if (-1 < index) {
      this.append(
        decode(value.slice(0, index)),
        decode(value.slice(index + 1))
      );
    }
  }
}

var
  URLSearchParamsProto = URLSearchParams.prototype,
  find = /[!'\(\)~]|%20|%00/g,
  plus = /\+/g,
  replace = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  },
  replacer = function (match) {
    return replace[match];
  },
  iterable = isIterable(),
  secret = '__URLSearchParams__:' + Math.random()
;

function isIterable() {
  try {
    return !!Symbol.iterator;
  } catch(error) {
    return false;
  }
}

URLSearchParamsProto.append = function append(name, value) {
  var dict = this[secret];
  if (name in dict) {
    dict[name].push('' + value);
  } else {
    dict[name] = ['' + value];
  }
};

URLSearchParamsProto.delete = function del(name) {
  delete this[secret][name];
};

URLSearchParamsProto.get = function get(name) {
  var dict = this[secret];
  return name in dict ? dict[name][0] : null;
};

URLSearchParamsProto.getAll = function getAll(name) {
  var dict = this[secret];
  return name in dict ? dict[name].slice(0) : [];
};

URLSearchParamsProto.has = function has(name) {
  return name in this[secret];
};

URLSearchParamsProto.set = function set(name, value) {
  this[secret][name] = ['' + value];
};

URLSearchParamsProto.forEach = function forEach(callback, thisArg) {
  var dict = this[secret];
  Object.getOwnPropertyNames(dict).forEach(function(name) {
    dict[name].forEach(function(value) {
      callback.call(thisArg, value, name, this);
    }, this);
  }, this);
};

URLSearchParamsProto.keys = function keys() {
  var items = [];
  this.forEach(function(value, name) { items.push(name); });
  var iterator = {
    next: function() {
      var value = items.shift();
      return {done: value === undefined, value: value};
    }
  };

  if (iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator;
    };
  }

  return iterator;
};

URLSearchParamsProto.values = function values() {
  var items = [];
  this.forEach(function(value) { items.push(value); });
  var iterator = {
    next: function() {
      var value = items.shift();
      return {done: value === undefined, value: value};
    }
  };

  if (iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator;
    };
  }

  return iterator;
};

URLSearchParamsProto.entries = function entries() {
  var items = [];
  this.forEach(function(value, name) { items.push([name, value]); });
  var iterator = {
    next: function() {
      var value = items.shift();
      return {done: value === undefined, value: value};
    }
  };

  if (iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator;
    };
  }

  return iterator;
};

if (iterable) {
  URLSearchParamsProto[Symbol.iterator] = URLSearchParamsProto.entries;
}

/*
URLSearchParamsProto.toBody = function() {
  return new Blob(
    [this.toString()],
    {type: 'application/x-www-form-urlencoded'}
  );
};
*/

URLSearchParamsProto.toJSON = function toJSON() {
  return {};
};

URLSearchParamsProto.toString = function toString() {
  var dict = this[secret], query = [], i, key, name, value;
  for (key in dict) {
    name = encode(key);
    for (
      i = 0,
      value = dict[key];
      i < value.length; i++
    ) {
      query.push(name + '=' + encode(value[i]));
    }
  }
  return query.join('&');
};

module.exports = global.URLSearchParams || URLSearchParams;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],109:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],110:[function(require,module,exports){

/**
 * Module dependencies.
 */

var global = (function() { return this; })();

/**
 * WebSocket constructor.
 */

var WebSocket = global.WebSocket || global.MozWebSocket;

/**
 * Module exports.
 */

module.exports = WebSocket ? ws : null;

/**
 * WebSocket constructor.
 *
 * The third `opts` options object gets ignored in web browsers, since it's
 * non-standard, and throws a TypeError if passed to the constructor.
 * See: https://github.com/einaros/ws/issues/227
 *
 * @param {String} uri
 * @param {Array} protocols (optional)
 * @param {Object) opts (optional)
 * @api public
 */

function ws(uri, protocols, opts) {
  var instance;
  if (protocols) {
    instance = new WebSocket(uri, protocols);
  } else {
    instance = new WebSocket(uri);
  }
  return instance;
}

if (WebSocket) ws.prototype = WebSocket.prototype;

},{}],111:[function(require,module,exports){
module.exports={
  "name": "tick42-glue",
  "version": "3.0.0-beta.2",
  "description": "A JavaScript library which provides support for Tick42 GLUE.",
  "main": "./library/main.js",
  "bin": {
    "init-dev-mode": "bin/init-dev-mode.js",
    "remove-installed-dependencies": "bin/remove-installed-dependencies.js",
    "remove-development-dependencies": "bin/remove-development-dependencies.js",
    "build": "./bin/build.js",
    "clean": "./bin/clean.js",
    "file-versionify": "bin/file-versionify.js",
    "minify": "./bin/minify.js"
  },
  "scripts": {
    "eslint": "eslint library",
    "eslint:fix": "eslint library --fix",
    "test": "npm run eslint && mocha --require ./test/test_helper \"test/**/*.js\"",
    "build": "npm run eslint && node bin/clean.js && node bin/build.js && node bin/minify && node bin/file-versionify",
    "build:dev": "npm run eslint:fix && node bin/clean && node bin/build",
    "prepublish": "npm update && npm run build",
    "init:develop": "node bin/init-dev-mode",
    "clear:develop": "node bin/remove-development-dependencies",
    "watch": "onchange \"./library/*.js\" \"./node_modules/tick42-*/library/*.js\"  \"./node_modules/tick42-*/library_js/*.js\" \"../node_modules/tick42-*/library/**.js\"  \"../node_modules/tick42-*/library_js/*.js\" -iv -e \"./bin\" -- npm run build:dev",
    "watch:develop": "node bin/remove-installed-dependencies && npm run watch",
    "watch:prod": "npm install && npm run watch"
  },
  "repository": {
    "type": "git",
    "url": "https://bmarinov@stash.tick42.com:8443/scm/ofgw/js-glue.git"
  },
  "author": {
    "name": "Tick42",
    "url": "http://www.tick42.com"
  },
  "license": "ISC",
  "dependencies": {
    "cuid": "^1.3.8",
    "detect-node": "^2.0.3",
    "es5-shim": "^4.1.14",
    "object-assign": "^4.1.0",
    "tick42-activity": "^2.2.1",
    "tick42-agm": "^3.2.0",
    "tick42-app-manager": "^2.3.6",
    "tick42-appconfig": "^0.1.2",
    "tick42-contexts": "^0.0.2",
    "tick42-gateway-connection": "^2.0.3",
    "tick42-logger": "^2.0.5",
    "tick42-metrics": "^2.0.15",
    "tick42-windows": "^2.2.3"
  },
  "devDependencies": {
      "eslint": "^3.1.1",
      "eslint-config-standard": "^5.3.5",
      "eslint-config-tick42": "^1.0.0",
      "eslint-plugin-promise": "^2.0.0",
      "eslint-plugin-standard": "^2.0.0",
      "browserify": "^13.0.0",
      "browserify-replacify": "^0.0.4",
      "browserify-versionify": "^1.0.4",
      "chai": "^3.5.0",
      "fs": "0.0.2",
      "jsdom": "^8.1.0",
      "jshint": "^2.9.1",
      "minifyify": "^7.3.2",
      "mocha": "^2.4.5",
      "onchange": "^2.1.2",
      "shelljs": "^0.6.0"
  }
}

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWJyYXJ5L2NvbmZpZy5qcyIsImxpYnJhcnkvZ2x1ZS5qcyIsImxpYnJhcnkvbWFpbi5qcyIsIm5vZGVfbW9kdWxlcy9hc2NpaS10YWJsZS9hc2NpaS10YWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9hc2NpaS10YWJsZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jYWxsYmFjay1yZWdpc3RyeS9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY3VpZC9kaXN0L2Jyb3dzZXItY3VpZC5qcyIsIm5vZGVfbW9kdWxlcy9kZXRlY3Qtbm9kZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lczUtc2hpbS9lczUtc2hhbS5qcyIsIm5vZGVfbW9kdWxlcy9lczUtc2hpbS9lczUtc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2VzNi1wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL0FQSS9hY3Rpdml0eUFQSS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWN0aXZpdHkvbGlicmFyeV9qcy9BUEkvYWN0aXZpdHlNYW5hZ2VtZW50QVBJLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL0FQSS9hY3Rpdml0eU15QVBJLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2FjdGl2aXR5Q29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2FjdGl2aXR5TW9kdWxlLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2JyaWRnZXMvaGNCcmlkZ2UuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvY29udHJhY3RzL2FjdGl2aXR5U3RhdHVzLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2NvbnRyYWN0cy9lbnRpdHlFdmVudC5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWN0aXZpdHkvbGlicmFyeV9qcy9jb3JlL2FjdGl2aXR5QUdNLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2NvcmUvYWN0aXZpdHlNYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2NvcmUvbG9jYWxXaW5kb3dGYWN0b3J5LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2NvcmUvcHJveHlXaW5kb3dGYWN0b3J5LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2VudGl0aWVzL2FjdGl2aXR5LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2VudGl0aWVzL2FjdGl2aXR5RW50aXR5LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2VudGl0aWVzL2FjdGl2aXR5VHlwZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWN0aXZpdHkvbGlicmFyeV9qcy9lbnRpdGllcy9hY3Rpdml0eVdpbmRvdy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWN0aXZpdHkvbGlicmFyeV9qcy9lbnRpdGllcy93aW5kb3dUeXBlLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2hlbHBlcnMvZW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24uanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvaGVscGVycy9sb2dnZXIuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvaGVscGVycy9wcm9taXNlRXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWN0aXZpdHkvbGlicmFyeV9qcy9oZWxwZXJzL3JlYWR5TWFya2VyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2hlbHBlcnMvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvYWdtLWNsaWVudC1pbnZva2UuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L2FnbS1jbGllbnQuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L2FnbS1pbnN0YW5jZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvYWdtLW5hdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvYWdtLXJlcG9zaXRvcnkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L2FnbS1zZXJ2ZXItc3RyZWFtaW5nLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9hZ20tc2VydmVyLXZhdWx0LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9hZ20tc2VydmVyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9hZ20uanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L2hlbHBlcnMvcHJvbWlzaWZ5LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9oZWxwZXJzL3JhbmRvbS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvcHJvdG9jb2xzL2d3MS9jbGllbnQtc3RyZWFtaW5nLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9wcm90b2NvbHMvZ3cxL2NsaWVudC5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvcHJvdG9jb2xzL2d3MS9oZWxwZXJzLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9wcm90b2NvbHMvZ3cxL3Byb3RvY29sLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9wcm90b2NvbHMvZ3cxL3NlcnZlci1zdHJlYW1pbmcuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L3Byb3RvY29scy9ndzEvc2VydmVyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9wcm90b2NvbHMvZ3czL2NsaWVudC1zdHJlYW1pbmcuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L3Byb3RvY29scy9ndzMvY2xpZW50LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9wcm90b2NvbHMvZ3czL2NvbndyYXAuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L3Byb3RvY29scy9ndzMvcHJvdG9jb2wuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L3Byb3RvY29scy9ndzMvc2VydmVyLXN0cmVhbWluZy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvcHJvdG9jb2xzL2d3My9zZXJ2ZXIuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L3Byb3RvY29scy9ndzMvc2Vzc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL3BhY2thZ2UuanNvbiIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwLW1hbmFnZXIvbGlicmFyeS9hcHBfbWFuYWdlci5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwLW1hbmFnZXIvbGlicmFyeS9hcHBsaWNhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwLW1hbmFnZXIvbGlicmFyeS9ldmVudF9tYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hcHAtbWFuYWdlci9saWJyYXJ5L2hlbHBlcnMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFwcC1tYW5hZ2VyL2xpYnJhcnkvaW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFwcC1tYW5hZ2VyL3BhY2thZ2UuanNvbiIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwY29uZmlnL2xpYnJhcnkvYXBwY29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hcHBjb25maWcvbGlicmFyeS9nYXRld2F5LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hcHBjb25maWcvbGlicmFyeS9oZWxwZXJzLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hcHBjb25maWcvbGlicmFyeS9tb2RlbC5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwY29uZmlnL2xpYnJhcnkvcHJvcHMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFwcGNvbmZpZy9saWJyYXJ5L3V0aWwuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWNvbnRleHRzL2xpYnJhcnkvYnJpZGdlcy9ndy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItY29udGV4dHMvbGlicmFyeS9icmlkZ2VzL2hjLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1jb250ZXh0cy9saWJyYXJ5L21haW4uanMiLCJub2RlX21vZHVsZXMvdGljazQyLWNvbnRleHRzL3BhY2thZ2UuanNvbiIsIm5vZGVfbW9kdWxlcy90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uL2xpYnJhcnkvY29ubmVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uL2xpYnJhcnkvbWFpbi5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uL2xpYnJhcnkvcHJvdG9jb2xzL2d3MS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uL2xpYnJhcnkvcHJvdG9jb2xzL2d3Mi5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uL2xpYnJhcnkvcHJvdG9jb2xzL2d3My5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uL2xpYnJhcnkvdHJhbnNwb3J0cy9oYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uL2xpYnJhcnkvdHJhbnNwb3J0cy9odHRwLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24vbGlicmFyeS90cmFuc3BvcnRzL21vY2suanMiLCJub2RlX21vZHVsZXMvdGljazQyLWdhdGV3YXktY29ubmVjdGlvbi9saWJyYXJ5L3RyYW5zcG9ydHMvd3MuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWdhdGV3YXktY29ubmVjdGlvbi9wYWNrYWdlLmpzb24iLCJub2RlX21vZHVsZXMvdGljazQyLWxvZ2dlci9saWJyYXJ5L2xvZ2dlci5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbG9nZ2VyL3BhY2thZ2UuanNvbiIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvYnJpZGdlL21ldHJpY1NlcmlhbGl6ZXIuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL2JyaWRnZS90cmFuc3BvcnQuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL21ldHJpY3MvYWRkcmVzc01ldHJpYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvbWV0cmljcy9jb3VudE1ldHJpYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvbWV0cmljcy9tZXRyaWMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL21ldHJpY3MvbnVtYmVyTWV0cmljLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvY29yZS9tZXRyaWNzL29iamVjdE1ldHJpYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvbWV0cmljcy9yYXRlTWV0cmljLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvY29yZS9tZXRyaWNzL3N0YXRpc3RpY3NNZXRyaWMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL21ldHJpY3Mvc3RyaW5nTWV0cmljLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvY29yZS9tZXRyaWNzL3RpbWVzcGFuTWV0cmljLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvY29yZS9tZXRyaWNzL3RpbWVzdGFtcE1ldHJpYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvcmVwb3NpdG9yeS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvc3lzdGVtLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvbWV0cmljc01vZHVsZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItd2luZG93cy9saWJyYXJ5L2hlbHBlcnMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLXdpbmRvd3MvbGlicmFyeS93aW5kb3cuanMiLCJub2RlX21vZHVsZXMvdGljazQyLXdpbmRvd3MvbGlicmFyeS93aW5kb3dzLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi13aW5kb3dzL3BhY2thZ2UuanNvbiIsIm5vZGVfbW9kdWxlcy91cmwtc2VhcmNoLXBhcmFtcy9idWlsZC91cmwtc2VhcmNoLXBhcmFtcy5ub2RlLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvd3MvbGliL2Jyb3dzZXIuanMiLCJwYWNrYWdlLmpzb24iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pvQkE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDOUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25qQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDamhFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDam9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDamJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDamxCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN6R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN0ZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMxVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNuTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3JKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbGRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9NQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3WUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2xHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3JRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDalRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDaElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM3VUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDeFZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2pOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBjdWlkID0gcmVxdWlyZSgnY3VpZCcpO1xuICAgIHZhciBvYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG4gICAgdmFyIGhjO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGhjID0gd2luZG93Lmh0bWxDb250YWluZXJcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREZWZhdWx0Q29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgdmFyIHVpZCA9IGN1aWQoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFwcENvbmZpZ0ZhY2FkZUNvbmZpZzogaGMgPyBoYy5hcHBDb25maWdGYWNhZGUuY29uZmlnIDogeyBpZGVudGl0eToge30gfSxcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uOiBnZXRBcHBsaWNhdGlvbk5hbWUodWlkKSxcbiAgICAgICAgICAgIG1ldHJpY3M6IGdldE1ldHJpY3NEZWZhdWx0cyh1aWQpLFxuICAgICAgICAgICAgYWdtOiB7IHByZXNlbmNlSW50ZXJ2YWw6IDMwMDAgfSxcbiAgICAgICAgICAgIGdhdGV3YXk6IGdldEdhdGV3YXlEZWZhdWx0cygpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TWV0cmljc0RlZmF1bHRzKHVpZCkge1xuICAgICAgICB2YXIgZG9jdW1lbnRUaXRsZSA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudC50aXRsZSA6ICdua25vd24nO1xuICAgICAgICAvLyBjaGVjayBmb3IgZW1wdHkgdGl0bGVzXG4gICAgICAgIGRvY3VtZW50VGl0bGUgPSBkb2N1bWVudFRpdGxlIHx8ICdub25lJztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN5c3RlbTogaGMgPyAnSHRtbENvbnRhaW5lci4nICsgaGMuY29udGFpbmVyTmFtZSA6ICdCcm93c2VyJyxcbiAgICAgICAgICAgIHNlcnZpY2U6IGhjID8gJ0pTLicgKyBoYy5icm93c2VyV2luZG93TmFtZSA6IGRvY3VtZW50VGl0bGUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaGMgPyAnficgKyBoYy5tYWNoaW5lTmFtZSA6ICd+JyArIHVpZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0R2F0ZXdheURlZmF1bHRzKCkge1xuICAgICAgICB2YXIgZ2F0ZXdheVVSTCA9ICdsb2NhbGhvc3Q6MjIwMzcnO1xuICAgICAgICB2YXIgaXNTU0wgPSBpc1NlY3VyZUNvbm5lY3Rpb24oKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd3M6IGlzU1NMID8gJ3dzczovLycgKyBnYXRld2F5VVJMIDogJ3dzOi8vJyArIGdhdGV3YXlVUkwsXG4gICAgICAgICAgICBodHRwOiBpc1NTTCA/ICdodHRwczonICsgZ2F0ZXdheVVSTCA6ICdodHRwOi8vJyArIGdhdGV3YXlVUkwsXG4gICAgICAgICAgICBwcm90b2NvbFZlcnNpb24gOiAxXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NlY3VyZUNvbm5lY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubG9jYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09ICdodHRwOic7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVmYXVsdHMgdG8gc2VjdXJlIGZvciBub2RlIGVudi5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QXBwbGljYXRpb25OYW1lKHVpZCkge1xuICAgICAgICBpZiAoaGMpIHtcbiAgICAgICAgICAgIHJldHVybiBoYy5jb250YWluZXJOYW1lICsgJy4nICsgaGMuYnJvd3NlcldpbmRvd05hbWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5hZ21fYXBwbGljYXRpb24gfHwgZG9jdW1lbnQudGl0bGUpICsgdWlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdOb2RlSlMnICsgdWlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwQ29uZmlnKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBpZGVudGl0eSA9IHt9O1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHNldHRpbmdzLmlkZW50aXR5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlkZW50aXR5W2tleV0gPSBzdXBwbGFudChzZXR0aW5ncy5pZGVudGl0eVtrZXldKVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb2JqZWN0QXNzaWduKHt9LCBzZXR0aW5ncywgeyBpZGVudGl0eTogaWRlbnRpdHkgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdXBwbGFudCh0ZW1wbGF0ZSwgcGF0dGVybikge1xuICAgICAgICB2YXIgcCA9IHBhdHRlcm4gfHwgL1xceyhbXnt9XSopXFx9L2c7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKHAsIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzO1xuICAgICAgICAgICAga2V5LnNwbGl0KCcuJykuZm9yRWFjaChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogbWF0Y2g7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0cyA9IGdldERlZmF1bHRDb25maWd1cmF0aW9uKCk7XG4gICAgdmFyIG9wdGlvbnMgPSBvYmplY3RBc3NpZ24oe30sIGRlZmF1bHRzLCBjb25maWd1cmF0aW9uKTtcbiAgICBvcHRpb25zLmdhdGV3YXkud3MgPSBvcHRpb25zLmdhdGV3YXkud3MgfHwgZGVmYXVsdHMuZ2F0ZXdheS53cztcbiAgICBvcHRpb25zLmdhdGV3YXkuaHR0cCA9IG9wdGlvbnMuZ2F0ZXdheS53cyB8fCBkZWZhdWx0cy5nYXRld2F5Lmh0dHA7XG5cbiAgICB2YXIgZ2F0ZXdheUNvbm5lY3Rpb24gPSB7fTtcbiAgICBpZiAoaGMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnYXRld2F5Q29ubmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKHJlcXVpcmUoJ2RldGVjdC1ub2RlJykgfHwgKCdXZWJTb2NrZXQnIGluIHdpbmRvdyAmJiB3aW5kb3cuV2ViU29ja2V0LkNMT1NJTkcgPT09IDIpKSB7XG4gICAgICAgIGdhdGV3YXlDb25uZWN0aW9uID0geyB3czogb3B0aW9ucy5nYXRld2F5LndzLCBwcm90b2NvbFZlcnNpb246IG9wdGlvbnMuZ2F0ZXdheS5wcm90b2NvbFZlcnNpb24gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnYXRld2F5Q29ubmVjdGlvbiA9IHsgaHR0cDogb3B0aW9ucy5nYXRld2F5Lmh0dHAsIHByb3RvY29sVmVyc2lvbjogb3B0aW9ucy5nYXRld2F5LnByb3RvY29sVmVyc2lvbiAgfTtcbiAgICB9XG5cbiAgICBpZiAoZ2F0ZXdheUNvbm5lY3Rpb24pIHtcbiAgICAgICAgZ2F0ZXdheUNvbm5lY3Rpb24uYXBwbGljYXRpb24gPSBvcHRpb25zLmFwcGxpY2F0aW9uO1xuICAgICAgICBnYXRld2F5Q29ubmVjdGlvbi5nd1Rva2VuUHJvdmlkZXIgPSBvcHRpb25zLmd3VG9rZW5Qcm92aWRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjb25uZWN0aW9uOiBnYXRld2F5Q29ubmVjdGlvbixcbiAgICAgICAgYXBwQ29uZmlnOiBhcHBDb25maWcoZGVmYXVsdHMuYXBwQ29uZmlnRmFjYWRlQ29uZmlnKSwgLy8gTm90IGNvbmZpZ3VyYWJsZSBjdXJyZW50bHlcbiAgICAgICAgbG9nZ2VyOiB7XG4gICAgICAgICAgICBpZGVudGl0eToge1xuICAgICAgICAgICAgICAgIHN5c3RlbTogb3B0aW9ucy5tZXRyaWNzLnN5c3RlbSxcbiAgICAgICAgICAgICAgICBzZXJ2aWNlOiBvcHRpb25zLm1ldHJpY3Muc2VydmljZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogb3B0aW9ucy5tZXRyaWNzLmluc3RhbmNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1ldHJpY3M6IHtcbiAgICAgICAgICAgIGlkZW50aXR5OiB7XG4gICAgICAgICAgICAgICAgc3lzdGVtOiBvcHRpb25zLm1ldHJpY3Muc3lzdGVtLFxuICAgICAgICAgICAgICAgIHNlcnZpY2U6IG9wdGlvbnMubWV0cmljcy5zZXJ2aWNlLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBvcHRpb25zLm1ldHJpY3MuaW5zdGFuY2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWdtOiB7XG4gICAgICAgICAgICBpbnN0YW5jZTogeyBhcHBsaWNhdGlvbjogb3B0aW9ucy5hcHBsaWNhdGlvbiB9LFxuICAgICAgICAgICAgc2VydmVyOiB7XG4gICAgICAgICAgICAgICAgaGVhcmJlYXRfaW50ZXJ2YWw6IGRlZmF1bHRzLmFnbS5oZWFydGJlYXRJbnRlcnZhbCwgLy8gTm90IGNvbmZpZ3VyYWJsZSBjdXJyZW50bHlcbiAgICAgICAgICAgICAgICBwcmVzZW5jZV9pbnRlcnZhbDogb3B0aW9ucy5hZ20ucHJlc2VuY2VJbnRlcnZhbFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBtZXRyaWNzID0gcmVxdWlyZSgndGljazQyLW1ldHJpY3MnKTtcbiAgICB2YXIgYWdtID0gcmVxdWlyZSgndGljazQyLWFnbScpO1xuICAgIHZhciBnYXRld2F5Q29ubmVjdGlvbiA9IHJlcXVpcmUoJ3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24nKTtcbiAgICB2YXIgbG9nZ2VyID0gcmVxdWlyZSgndGljazQyLWxvZ2dlcicpO1xuICAgIHZhciBhcHBjb25maWcgPSByZXF1aXJlKCd0aWNrNDItYXBwY29uZmlnJyk7XG4gICAgdmFyIHdpbmRvd3MgPSByZXF1aXJlKCd0aWNrNDItd2luZG93cycpO1xuICAgIHZhciBhcHBNYW5hZ2VyID0gcmVxdWlyZSgndGljazQyLWFwcC1tYW5hZ2VyJyk7XG4gICAgdmFyIGFjdGl2aXR5ID0gcmVxdWlyZSgndGljazQyLWFjdGl2aXR5Jyk7XG4gICAgdmFyIGNvbnRleHRzID0gcmVxdWlyZSgndGljazQyLWNvbnRleHRzJyk7XG4gICAgdmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG4gICAgdmFyIHBqc29uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG4gICAgdmFyIGdldENvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnLmpzJyk7XG5cbiAgICAvLyBJbml0IHRoZSBHTFVFIG5hbWVzcGFjZVxuICAgIHZhciBoYyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5odG1sQ29udGFpbmVyO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgLy8gZ3dQcm90b2NvbFZlcnNpb24gMiByZXF1aXJlcyBhdXRoIChUT0RPIC0gd2Ugc2hvdWxkIGNoYW5nZSAzIHRvIGJlIHRoZSBzYW1lKVxuICAgICAgICBpZiAoIW9wdGlvbnMuYXV0aCAmJiBvcHRpb25zLmdhdGV3YXkucHJvdG9jb2xWZXJzaW9uID4gMSkge1xuICAgICAgICAgICAgcmVqZWN0KCdZb3UgbmVlZCB0byBwcm92aWRlIGF1dGggaW5mb3JtYXRpb24nKVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGdsdWVDb25maWcgPSBnZXRDb25maWcob3B0aW9ucyk7XG4gICAgICAgIHZhciBfY29ubmVjdGlvbiA9IGdhdGV3YXlDb25uZWN0aW9uKGdsdWVDb25maWcuY29ubmVjdGlvbik7XG5cbiAgICAgICAgZ2x1ZUNvbmZpZy5hZ20uY29ubmVjdGlvbiA9IF9jb25uZWN0aW9uO1xuICAgICAgICBnbHVlQ29uZmlnLmxvZ2dlci5jb25uZWN0aW9uID0gX2Nvbm5lY3Rpb247XG4gICAgICAgIGdsdWVDb25maWcubWV0cmljcy5jb25uZWN0aW9uID0gX2Nvbm5lY3Rpb247XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0aCkge1xuICAgICAgICAgICAgdmFyIGF1dGhSZXF1ZXN0O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmF1dGggPT09ICdzdHJpbmcnIHx8IG9wdGlvbnMuYXV0aCBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2Ygb3B0aW9ucy5hdXRoID09PSAnbnVtYmVyJyB8fCBvcHRpb25zLmF1dGggaW5zdGFuY2VvZiBOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBhdXRoUmVxdWVzdCA9IHsgdG9rZW46IG9wdGlvbnMuYXV0aCB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob3B0aW9ucy5hdXRoKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgICAgICAgICBhdXRoUmVxdWVzdCA9IG9wdGlvbnMuYXV0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGF1dGggb2JqZWN0IC0gJyArIEpTT04uc3RyaW5naWZ5KGF1dGhSZXF1ZXN0KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9jb25uZWN0aW9uLmxvZ2luKGF1dGhSZXF1ZXN0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2x1ZUNvbmZpZy5hZ20uaW5zdGFuY2UubWFjaGluZSA9IGNsaWVudC5pcEFkZHJlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbHVlQ29uZmlnLmFnbS5pbnN0YW5jZS51c2VyID0gY2xpZW50LnVzZXJuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2NvbmZpZ3VyZShnbHVlQ29uZmlnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZ2x1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZ2x1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoX2NvbmZpZ3VyZShnbHVlQ29uZmlnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBfY29uZmlndXJlKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hZ20sIF93aW5kb3dzLCBfYXBwTWFuYWdlciwgX2FwcENvbmZpZywgX2FjdGl2aXRpZXMsIF9sb2dnZXIsIF9yb290TWV0cmljcywgX21ldHJpY3MsIF9pbmZvLCBfZmVlZGJhY2ssIF9jb250ZXh0cztcblxuICAgICAgICAgICAgICAgIC8vIExvZ2dlclxuICAgICAgICAgICAgICAgIF9sb2dnZXIgPSBsb2dnZXIoY29uZmlndXJhdGlvbi5sb2dnZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gTWV0cmljc1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ubWV0cmljcy5sb2dnZXIgPSBfbG9nZ2VyLnN1YkxvZ2dlcignbWV0cmljcycpO1xuICAgICAgICAgICAgICAgIF9yb290TWV0cmljcyA9IG1ldHJpY3MoY29uZmlndXJhdGlvbi5tZXRyaWNzKTtcbiAgICAgICAgICAgICAgICBfbWV0cmljcyA9IF9yb290TWV0cmljcy5zdWJTeXN0ZW0oJ0FwcCcpO1xuICAgICAgICAgICAgICAgIF9sb2dnZXIubWV0cmljc0xldmVsKCd3YXJuJywgX21ldHJpY3MucGFyZW50LnN1YlN5c3RlbSgnTG9nRXZlbnRzJykpO1xuXG4gICAgICAgICAgICAgICAgLy8gQUdNXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi5hZ20ubWV0cmljcyA9IF9yb290TWV0cmljcy5zdWJTeXN0ZW0oJ0FHTScpO1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uYWdtLmxvZ2dlciA9IF9sb2dnZXIuc3ViTG9nZ2VyKCdhZ20nKTtcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLmFnbS5sb2dnZXIuY29uc29sZUxldmVsKCdkZWJ1ZycpO1xuXG4gICAgICAgICAgICAgICAgYWdtKGNvbmZpZ3VyYXRpb24uYWdtKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYWdtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYWdtID0gYWdtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5kb3dzXG4gICAgICAgICAgICAgICAgICAgICAgICBfd2luZG93cyA9IHdpbmRvd3MoX2FnbSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcE1hbmFnZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hcHBNYW5hZ2VyID0gYXBwTWFuYWdlcihfYWdtLCBfd2luZG93cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYy5hcHBDb25maWdGYWNhZGUgJiYgaGMuYXBwQ29uZmlnRmFjYWRlLmNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYXBwQ29uZmlnID0gYXBwY29uZmlnKCkuaW5pdChnbHVlQ29uZmlnLmFwcENvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWN0aXZpdGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYy5hY3Rpdml0eUZhY2FkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZpdHlMb2dnZXIgPSBfbG9nZ2VyLnN1YkxvZ2dlcignYWN0aXZpdHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlMb2dnZXIucHVibGlzaExldmVsKCdkZWJ1ZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUxvZ2dlci5jb25zb2xlTGV2ZWwoJ2luZm8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlMb2dnZXIubWV0cmljc0xldmVsKCdvZmYnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWN0aXZpdGllcyA9IGFjdGl2aXR5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnbTogX2FnbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlcjogYWN0aXZpdHlMb2dnZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dHMgPSBjb250ZXh0cygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHVlVmVyc2lvbjogcGpzb24udmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0aWVzOiBfYWN0aXZpdGllcyA/IF9hY3Rpdml0aWVzLnZlcnNpb24gOiAndW5rbm93bicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0cmljczogX21ldHJpY3MucmVwby52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnbTogX2FnbS52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd3M6IF93aW5kb3dzLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyOiBfbG9nZ2VyLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwTWFuYWdlcjogX2FwcE1hbmFnZXIudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uOiBfY29ubmVjdGlvbi52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRzOiBfY29udGV4dHMudmVyc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2ZlZWRiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2FnbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZ20uaW52b2tlKCdUNDIuQUNTLkZlZWRiYWNrJywge30sICdiZXN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0aWVzOiBfYWN0aXZpdGllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ206IF9hZ20sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwQ29uZmlnOiBfYXBwQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcE1hbmFnZXI6IF9hcHBNYW5hZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb246IF9jb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRzOiBfY29udGV4dHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVlZGJhY2s6IF9mZWVkYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvOiBfaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXI6IF9sb2dnZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0cmljczogX21ldHJpY3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogcGpzb24udmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dzOiBfd2luZG93c1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KVxufTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBEbyBub3QgZG8gYW55dGhpbmcgaWYgdGhlcmUgaXMgbm8gc3VwcG9ydCBvZiBFQ01BU2NyaXB0IDVcbiAgICBpZiAodHlwZW9mIFtdLmZvckVhY2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVxdWlyZSgnZXM1LXNoaW0nKTtcbiAgICAgICAgcmVxdWlyZSgnZXM1LXNoaW0vZXM1LXNoYW0nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0IGxvZ2ljIHRoYXQgd2UgZm9sbG93OlxuICAgICAqIHYxIHN1cHBvcnRzIGF1dG9Jbml0XG4gICAgICogdjIsIHYzIGRvZXMgbm90IHN1cHBvcnQgYXV0by1pbml0IC10aGlzIG1lYW5zIHRoYXQgeW91IHNob3VsZCB1c2UgR2x1ZSBmYWN0b3J5IG1ldGhvZCB0byBpbml0IGdsdWVcbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlR2x1ZSA9IHJlcXVpcmUoJy4vZ2x1ZScpO1xuICAgIHZhciBjb25maWcgPSBnbG9iYWwuZ2x1ZUNvbmZpZyB8fCB7fTtcblxuICAgIGNvbmZpZy5nYXRld2F5ID0gY29uZmlnLmdhdGV3YXkgfHwge307XG4gICAgY29uZmlnLmdhdGV3YXkucHJvdG9jb2xWZXJzaW9uID0gY29uZmlnLmdhdGV3YXkucHJvdG9jb2xWZXJzaW9uIHx8IDM7XG4gICAgdmFyIGF1dG9Jbml0ID0gY29uZmlnLmF1dG9Jbml0IHx8IGNvbmZpZy5nYXRld2F5LnByb3RvY29sVmVyc2lvbiA9PT0gMTtcblxuICAgIGlmIChhdXRvSW5pdCAmJiBjb25maWcuZ2F0ZXdheS5wcm90b2NvbFZlcnNpb24gPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZ2x1ZSBhdXRvIGluaXQgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGdhdGV3YXkgcHJvdG9jb2wgdmVyc2lvbiAxIC0gc3dpdGNoIHRvIDEgb3IgdHVybiBvZmYgYXV0byBpbml0Jyk7XG4gICAgfVxuXG4gICAgLy8gaWYgaW4gbm9kZSBzd2l0Y2ggdG8gdjJcbiAgICBpZiAocmVxdWlyZSgnZGV0ZWN0LW5vZGUnKSkge1xuICAgICAgICBhdXRvSW5pdCA9IGZhbHNlO1xuICAgICAgICBjb25maWcuZ2F0ZXdheS5wcm90b2NvbFZlcnNpb24gPSAyO1xuICAgIH1cblxuICAgIGlmIChhdXRvSW5pdCkge1xuICAgICAgICBjcmVhdGVHbHVlKGNvbmZpZylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChnbHVlKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsLmdsdWUgPSBnbHVlO1xuICAgICAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZXJyb3IgYXV0byBpbml0aWFsaW5nIGdsdWUnLCBlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgZmFjdG9yeSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmICghKG9wdGlvbnMuZ2F0ZXdheSAmJiBvcHRpb25zLmdhdGV3YXkucHJvdG9jb2xWZXJzaW9uKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5nYXRld2F5LnByb3RvY29sVmVyc2lvbiA9IGNvbmZpZy5nYXRld2F5LnByb3RvY29sVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlR2x1ZShvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvdy5HbHVlID0gZmFjdG9yeTtcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnlcbn0oKSk7XG4iLCIvKipcbiAqIChjKSAyMDEzIEJlYXUgU29yZW5zZW5cbiAqIE1JVCBMaWNlbnNlZFxuICogRm9yIGFsbCBkZXRhaWxzIGFuZCBkb2N1bWVudGF0aW9uOlxuICogaHR0cHM6Ly9naXRodWIuY29tL3NvcmVuc2VuL2FzY2lpLXRhYmxlXG4gKi9cblxuOyhmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlXG4gICwgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbi8qKlxuICogQXNjaWlUYWJsZSBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdGl0bGUgb3IgSlNPTiB0YWJsZVxuICogQHBhcmFtIHtPYmplY3R9IHRhYmxlIG9wdGlvbnNcbiAqICAtIGBwcmVmaXhgIC0gc3RyaW5nIHByZWZpeCBhZGRlZCB0byBlYWNoIGxpbmUgb24gcmVuZGVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQXNjaWlUYWJsZShuYW1lLCBvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdGhpcy5yZXNldChuYW1lKVxufVxuXG4vKiFcbiAqIEN1cnJlbnQgbGlicmFyeSB2ZXJzaW9uLCBzaG91bGQgbWF0Y2ggYHBhY2thZ2UuanNvbmBcbiAqL1xuXG5Bc2NpaVRhYmxlLlZFUlNJT04gPSAnMC4wLjgnXG5cbi8qIVxuICogQWxpZ25tZW50IGNvbnN0YW50c1xuICovXG5cbkFzY2lpVGFibGUuTEVGVCA9IDBcbkFzY2lpVGFibGUuQ0VOVEVSID0gMVxuQXNjaWlUYWJsZS5SSUdIVCA9IDJcblxuLyohXG4gKiBTdGF0aWMgbWV0aG9kc1xuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRhYmxlIGluc3RhbmNlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB0aXRsZSBvciBKU09OIHRhYmxlXG4gKiBAcGFyYW0ge09iamVjdH0gdGFibGUgb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLmZhY3RvcnkgPSBmdW5jdGlvbihuYW1lLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgQXNjaWlUYWJsZShuYW1lLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEFsaWduIHRoZSBhIHN0cmluZyBhdCB0aGUgZ2l2ZW4gbGVuZ3RoXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRpcmVjdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBpbnB1dFxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmluZyBsZW5ndGhcbiAqIEBwYXJhbSB7TnVtYmVyfSBwYWRkaW5nIGNoYXJhY3RlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLmFsaWduID0gZnVuY3Rpb24oZGlyLCBzdHIsIGxlbiwgcGFkKSB7XG4gIGlmIChkaXIgPT09IEFzY2lpVGFibGUuTEVGVCkgcmV0dXJuIEFzY2lpVGFibGUuYWxpZ25MZWZ0KHN0ciwgbGVuLCBwYWQpXG4gIGlmIChkaXIgPT09IEFzY2lpVGFibGUuUklHSFQpIHJldHVybiBBc2NpaVRhYmxlLmFsaWduUmlnaHQoc3RyLCBsZW4sIHBhZClcbiAgaWYgKGRpciA9PT0gQXNjaWlUYWJsZS5DRU5URVIpIHJldHVybiBBc2NpaVRhYmxlLmFsaWduQ2VudGVyKHN0ciwgbGVuLCBwYWQpXG4gIHJldHVybiBBc2NpaVRhYmxlLmFsaWduQXV0byhzdHIsIGxlbiwgcGFkKVxufVxuXG4vKipcbiAqIExlZnQgYWxpZ24gYSBzdHJpbmcgYnkgcGFkZGluZyBpdCBhdCBhIGdpdmVuIGxlbmd0aFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpbmcgbGVuZ3RoXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFkZGluZyBjaGFyYWN0ZXIgKG9wdGlvbmFsLCBkZWZhdWx0ICcnKVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLmFsaWduTGVmdCA9IGZ1bmN0aW9uKHN0ciwgbGVuLCBwYWQpIHtcbiAgaWYgKCFsZW4gfHwgbGVuIDwgMCkgcmV0dXJuICcnXG4gIGlmIChzdHIgPT09IHVuZGVmaW5lZCB8fCBzdHIgPT09IG51bGwpIHN0ciA9ICcnXG4gIGlmICh0eXBlb2YgcGFkID09PSAndW5kZWZpbmVkJykgcGFkID0gJyAnXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykgc3RyID0gc3RyLnRvU3RyaW5nKClcbiAgdmFyIGFsZW4gPSBsZW4gKyAxIC0gc3RyLmxlbmd0aFxuICBpZiAoYWxlbiA8PSAwKSByZXR1cm4gc3RyXG4gIHJldHVybiBzdHIgKyBBcnJheShsZW4gKyAxIC0gc3RyLmxlbmd0aCkuam9pbihwYWQpXG59XG5cbi8qKlxuICogQ2VudGVyIGFsaWduIGEgc3RyaW5nIGJ5IHBhZGRpbmcgaXQgYXQgYSBnaXZlbiBsZW5ndGhcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaW5nIGxlbmd0aFxuICogQHBhcmFtIHtTdHJpbmd9IHBhZGRpbmcgY2hhcmFjdGVyIChvcHRpb25hbCwgZGVmYXVsdCAnJylcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5hbGlnbkNlbnRlciA9IGZ1bmN0aW9uKHN0ciwgbGVuLCBwYWQpIHtcbiAgaWYgKCFsZW4gfHwgbGVuIDwgMCkgcmV0dXJuICcnXG4gIGlmIChzdHIgPT09IHVuZGVmaW5lZCB8fCBzdHIgPT09IG51bGwpIHN0ciA9ICcnXG4gIGlmICh0eXBlb2YgcGFkID09PSAndW5kZWZpbmVkJykgcGFkID0gJyAnXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykgc3RyID0gc3RyLnRvU3RyaW5nKClcbiAgdmFyIG5MZW4gPSBzdHIubGVuZ3RoXG4gICAgLCBoYWxmID0gTWF0aC5mbG9vcihsZW4gLyAyIC0gbkxlbiAvIDIpXG4gICAgLCBvZGRzID0gTWF0aC5hYnMoKG5MZW4gJSAyKSAtIChsZW4gJSAyKSlcbiAgICAsIGxlbiA9IHN0ci5sZW5ndGhcblxuICByZXR1cm4gQXNjaWlUYWJsZS5hbGlnblJpZ2h0KCcnLCBoYWxmLCBwYWQpIFxuICAgICsgc3RyXG4gICAgKyBBc2NpaVRhYmxlLmFsaWduTGVmdCgnJywgaGFsZiArIG9kZHMsIHBhZClcbn1cblxuLyoqXG4gKiBSaWdodCBhbGlnbiBhIHN0cmluZyBieSBwYWRkaW5nIGl0IGF0IGEgZ2l2ZW4gbGVuZ3RoXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmluZyBsZW5ndGhcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWRkaW5nIGNoYXJhY3RlciAob3B0aW9uYWwsIGRlZmF1bHQgJycpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUuYWxpZ25SaWdodCA9IGZ1bmN0aW9uKHN0ciwgbGVuLCBwYWQpIHtcbiAgaWYgKCFsZW4gfHwgbGVuIDwgMCkgcmV0dXJuICcnXG4gIGlmIChzdHIgPT09IHVuZGVmaW5lZCB8fCBzdHIgPT09IG51bGwpIHN0ciA9ICcnXG4gIGlmICh0eXBlb2YgcGFkID09PSAndW5kZWZpbmVkJykgcGFkID0gJyAnXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykgc3RyID0gc3RyLnRvU3RyaW5nKClcbiAgdmFyIGFsZW4gPSBsZW4gKyAxIC0gc3RyLmxlbmd0aFxuICBpZiAoYWxlbiA8PSAwKSByZXR1cm4gc3RyXG4gIHJldHVybiBBcnJheShsZW4gKyAxIC0gc3RyLmxlbmd0aCkuam9pbihwYWQpICsgc3RyXG59XG5cbi8qKlxuICogQXV0byBhbGlnbiBzdHJpbmcgdmFsdWUgYmFzZWQgb24gb2JqZWN0IHR5cGVcbiAqXG4gKiBAcGFyYW0ge0FueX0gb2JqZWN0IHRvIHN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmluZyBsZW5ndGhcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWRkaW5nIGNoYXJhY3RlciAob3B0aW9uYWwsIGRlZmF1bHQgJycpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUuYWxpZ25BdXRvID0gZnVuY3Rpb24oc3RyLCBsZW4sIHBhZCkge1xuICBpZiAoc3RyID09PSB1bmRlZmluZWQgfHwgc3RyID09PSBudWxsKSBzdHIgPSAnJ1xuICB2YXIgdHlwZSA9IHRvU3RyaW5nLmNhbGwoc3RyKVxuICBwYWQgfHwgKHBhZCA9ICcgJylcbiAgbGVuID0gK2xlblxuICBpZiAodHlwZSAhPT0gJ1tvYmplY3QgU3RyaW5nXScpIHtcbiAgICBzdHIgPSBzdHIudG9TdHJpbmcoKVxuICB9XG4gIGlmIChzdHIubGVuZ3RoIDwgbGVuKSB7XG4gICAgc3dpdGNoKHR5cGUpIHtcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6IHJldHVybiBBc2NpaVRhYmxlLmFsaWduUmlnaHQoc3RyLCBsZW4sIHBhZClcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBBc2NpaVRhYmxlLmFsaWduTGVmdChzdHIsIGxlbiwgcGFkKVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbi8qKlxuICogRmlsbCBhbiBhcnJheSBhdCBhIGdpdmVuIHNpemUgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYXJyYXkgc2l6ZVxuICogQHBhcmFtIHtBbnl9IGZpbGwgdmFsdWVcbiAqIEByZXR1cm4ge0FycmF5fSBmaWxsZWQgYXJyYXlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5hcnJheUZpbGwgPSBmdW5jdGlvbihsZW4sIGZpbGwpIHtcbiAgdmFyIGFyciA9IG5ldyBBcnJheShsZW4pXG4gIGZvciAodmFyIGkgPSAwOyBpICE9PSBsZW47IGkrKykge1xuICAgIGFycltpXSA9IGZpbGw7XG4gIH1cbiAgcmV0dXJuIGFyclxufVxuXG4vKiFcbiAqIEluc3RhbmNlIG1ldGhvZHNcbiAqL1xuXG4vKipcbiAqIFJlc2V0IHRoZSB0YWJsZSBzdGF0ZSBiYWNrIHRvIGRlZmF1bHRzXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB0aXRsZSBvciBKU09OIHRhYmxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnJlc2V0ID0gXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdGhpcy5fX25hbWUgPSAnJ1xuICB0aGlzLl9fbmFtZUFsaWduID0gQXNjaWlUYWJsZS5DRU5URVJcbiAgdGhpcy5fX3Jvd3MgPSBbXVxuICB0aGlzLl9fbWF4Q2VsbHMgPSAwXG4gIHRoaXMuX19hbGlnbnMgPSBbXVxuICB0aGlzLl9fY29sTWF4ZXMgPSBbXVxuICB0aGlzLl9fc3BhY2luZyA9IDFcbiAgdGhpcy5fX2hlYWRpbmcgPSBudWxsXG4gIHRoaXMuX19oZWFkaW5nQWxpZ24gPSBBc2NpaVRhYmxlLkNFTlRFUlxuICB0aGlzLnNldEJvcmRlcigpXG5cbiAgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG4gICAgdGhpcy5fX25hbWUgPSBuYW1lXG4gIH0gZWxzZSBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICB0aGlzLmZyb21KU09OKG5hbWUpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHRhYmxlIGJvcmRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBob3Jpem9udGFsIGVkZ2VzIChvcHRpb25hbCwgZGVmYXVsdCBgfGApXG4gKiBAcGFyYW0ge1N0cmluZ30gdmVydGljYWwgZWRnZXMgKG9wdGlvbmFsLCBkZWZhdWx0IGAtYClcbiAqIEBwYXJhbSB7U3RyaW5nfSB0b3AgY29ybmVycyAob3B0aW9uYWwsIGRlZmF1bHQgYC5gKVxuICogQHBhcmFtIHtTdHJpbmd9IGJvdHRvbSBjb3JuZXJzIChvcHRpb25hbCwgZGVmYXVsdCBgJ2ApXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnNldEJvcmRlciA9IGZ1bmN0aW9uKGVkZ2UsIGZpbGwsIHRvcCwgYm90dG9tKSB7XG4gIHRoaXMuX19ib3JkZXIgPSB0cnVlXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgZmlsbCA9IHRvcCA9IGJvdHRvbSA9IGVkZ2VcbiAgfVxuICB0aGlzLl9fZWRnZSA9IGVkZ2UgfHwgJ3wnXG4gIHRoaXMuX19maWxsID0gZmlsbCB8fCAnLSdcbiAgdGhpcy5fX3RvcCA9IHRvcCB8fCAnLidcbiAgdGhpcy5fX2JvdHRvbSA9IGJvdHRvbSB8fCBcIidcIlxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIFJlbW92ZSBhbGwgdGFibGUgYm9yZGVyc1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUucmVtb3ZlQm9yZGVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX19ib3JkZXIgPSBmYWxzZVxuICB0aGlzLl9fZWRnZSA9ICcgJ1xuICB0aGlzLl9fZmlsbCA9ICcgJ1xuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIFNldCB0aGUgY29sdW1uIGFsaWdubWVudCBhdCBhIGdpdmVuIGluZGV4XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNvbHVtbiBpbmRleFxuICogQHBhcmFtIHtOdW1iZXJ9IGFsaWdubWVudCBkaXJlY3Rpb25cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuc2V0QWxpZ24gPSBmdW5jdGlvbihpZHgsIGRpcikge1xuICB0aGlzLl9fYWxpZ25zW2lkeF0gPSBkaXJcbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHRpdGxlIG9mIHRoZSB0YWJsZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0aXRsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5zZXRUaXRsZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdGhpcy5fX25hbWUgPSBuYW1lXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogR2V0IHRoZSB0aXRsZSBvZiB0aGUgdGFibGVcbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRpdGxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9fbmFtZVxufVxuXG4vKipcbiAqIFNldCB0YWJsZSB0aXRsZSBhbGlnbm1lbnRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGlyZWN0aW9uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnNldFRpdGxlQWxpZ24gPSBmdW5jdGlvbihkaXIpIHtcbiAgdGhpcy5fX25hbWVBbGlnbiA9IGRpclxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIEFzY2lpVGFibGUgc29ydGluZyBzaG9ydGN1dCB0byBzb3J0IHJvd3NcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzb3J0aW5nIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gIHRoaXMuX19yb3dzLnNvcnQobWV0aG9kKVxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIFNvcnQgcm93cyBiYXNlZCBvbiBzb3J0IG1ldGhvZCBmb3IgZ2l2ZW4gY29sdW1uXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNvbHVtbiBpbmRleFxuICogQHBhcmFtIHtGdW5jdGlvbn0gc29ydGluZyBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuc29ydENvbHVtbiA9IGZ1bmN0aW9uKGlkeCwgbWV0aG9kKSB7XG4gIHRoaXMuX19yb3dzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBtZXRob2QoYVtpZHhdLCBiW2lkeF0pXG4gIH0pXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogU2V0IHRhYmxlIGhlYWRpbmcgZm9yIGNvbHVtbnNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnNldEhlYWRpbmcgPSBmdW5jdGlvbihyb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxIHx8IHRvU3RyaW5nLmNhbGwocm93KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIHJvdyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICB9XG4gIHRoaXMuX19oZWFkaW5nID0gcm93XG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogR2V0IHRhYmxlIGhlYWRpbmcgZm9yIGNvbHVtbnNcbiAqXG4gKiBAcmV0dXJuIHtBcnJheX0gY29weSBvZiBoZWFkaW5nc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5nZXRIZWFkaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9faGVhZGluZy5zbGljZSgpXG59XG5cbi8qKlxuICogU2V0IGhlYWRpbmcgYWxpZ25tZW50XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRpcmVjdGlvblxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5zZXRIZWFkaW5nQWxpZ24gPSBmdW5jdGlvbihkaXIpIHtcbiAgdGhpcy5fX2hlYWRpbmdBbGlnbiA9IGRpclxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIEFkZCBhIHJvdyBvZiBpbmZvcm1hdGlvbiB0byB0aGUgdGFibGVcbiAqIFxuICogQHBhcmFtIHsuLi58QXJyYXl9IGFyZ3VtZW50IHZhbHVlcyBpbiBvcmRlciBvZiBjb2x1bW5zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLmFkZFJvdyA9IGZ1bmN0aW9uKHJvdykge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgfHwgdG9TdHJpbmcuY2FsbChyb3cpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgcm93ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gIH1cbiAgdGhpcy5fX21heENlbGxzID0gTWF0aC5tYXgodGhpcy5fX21heENlbGxzLCByb3cubGVuZ3RoKVxuICB0aGlzLl9fcm93cy5wdXNoKHJvdylcbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBHZXQgYSBjb3B5IG9mIGFsbCByb3dzIG9mIHRoZSB0YWJsZVxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBjb3B5IG9mIHJvd3NcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuZ2V0Um93cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fX3Jvd3Muc2xpY2UoKS5tYXAoZnVuY3Rpb24ocm93KSB7XG4gICAgcmV0dXJuIHJvdy5zbGljZSgpXG4gIH0pXG59XG5cbi8qKlxuICogQWRkIHJvd3MgaW4gdGhlIGZvcm1hdCBvZiBhIHJvdyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSByb3cgbWF0cml4XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLmFkZFJvd01hdHJpeCA9IGZ1bmN0aW9uKHJvd3MpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5hZGRSb3cocm93c1tpXSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIEFkZCByb3dzIGZyb20gdGhlIGdpdmVuIGRhdGEgYXJyYXksIHByb2Nlc3NlZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gcm93Q2FsbGJhY2suXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGF0YVxuICogQHBhcmFtIChGdW5jdGlvbikgcm93Q2FsbGJhY2tcbiAqIEBwYXJhbSAoQm9vbGVhbikgYXNNYXRyaXggLSBjb250cm9scyBpZiB0aGUgcm93IGNyZWF0ZWQgYnkgcm93Q2FsbGJhY2sgc2hvdWxkIGJlIGFzc2lnbmVkIGFzIHJvdyBtYXRyaXhcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuYWRkRGF0YSA9IGZ1bmN0aW9uKGRhdGEsIHJvd0NhbGxiYWNrLCBhc01hdHJpeCkge1xuICBpZiAodG9TdHJpbmcuY2FsbChkYXRhKSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZvciAodmFyIGluZGV4ID0gMCwgbGltaXQgPSBkYXRhLmxlbmd0aDsgaW5kZXggPCBsaW1pdDsgaW5kZXgrKykge1xuICAgIHZhciByb3cgPSByb3dDYWxsYmFjayhkYXRhW2luZGV4XSk7XG4gICAgaWYoYXNNYXRyaXgpIHtcbiAgICAgIHRoaXMuYWRkUm93TWF0cml4KHJvdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkUm93KHJvdyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbiAgLyoqXG4gKiBSZXNldCB0aGUgY3VycmVudCByb3cgc3RhdGVcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLmNsZWFyUm93cyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9fcm93cyA9IFtdXG4gIHRoaXMuX19tYXhDZWxscyA9IDBcbiAgdGhpcy5fX2NvbE1heGVzID0gW11cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBBcHBseSBhbiBldmVuIHNwYWNlZCBjb2x1bW4ganVzdGlmaWNhdGlvblxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb24gLyBvZmZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuc2V0SnVzdGlmeSA9IGZ1bmN0aW9uKHZhbCkge1xuICBhcmd1bWVudHMubGVuZ3RoID09PSAwICYmICh2YWwgPSB0cnVlKVxuICB0aGlzLl9fanVzdGlmeSA9ICEhdmFsXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogQ29udmVydCB0aGUgY3VycmVudCBpbnN0YW5jZSB0byBhIEpTT04gc3RydWN0dXJlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBqc29uIHJlcHJlc2VudGF0aW9uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHRpdGxlOiB0aGlzLmdldFRpdGxlKClcbiAgLCBoZWFkaW5nOiB0aGlzLmdldEhlYWRpbmcoKVxuICAsIHJvd3M6IHRoaXMuZ2V0Um93cygpXG4gIH1cbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgdGFibGUgZnJvbSBhIEpTT04gb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGpzb24gcmVwcmVzZW50YXRpb25cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUucGFyc2UgPSBcbkFzY2lpVGFibGUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiB0aGlzXG4gICAgLmNsZWFyKClcbiAgICAuc2V0VGl0bGUob2JqLnRpdGxlKVxuICAgIC5zZXRIZWFkaW5nKG9iai5oZWFkaW5nKVxuICAgIC5hZGRSb3dNYXRyaXgob2JqLnJvd3MpXG59XG5cbi8qKlxuICogUmVuZGVyIHRoZSB0YWJsZSB3aXRoIHRoZSBjdXJyZW50IGluZm9ybWF0aW9uXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSBmb3JtYXR0ZWQgdGFibGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUucmVuZGVyID1cbkFzY2lpVGFibGUucHJvdG90eXBlLnZhbHVlT2YgPVxuQXNjaWlUYWJsZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCBib2R5ID0gW11cbiAgICAsIG1MZW4gPSB0aGlzLl9fbWF4Q2VsbHNcbiAgICAsIG1heCA9IEFzY2lpVGFibGUuYXJyYXlGaWxsKG1MZW4sIDApXG4gICAgLCB0b3RhbCA9IG1MZW4gKiAzXG4gICAgLCByb3dzID0gdGhpcy5fX3Jvd3NcbiAgICAsIGp1c3RpZnlcbiAgICAsIGJvcmRlciA9IHRoaXMuX19ib3JkZXJcbiAgICAsIGFsbCA9IHRoaXMuX19oZWFkaW5nIFxuICAgICAgICA/IFt0aGlzLl9faGVhZGluZ10uY29uY2F0KHJvd3MpXG4gICAgICAgIDogcm93c1xuXG4gIC8vIENhbGN1bGF0ZSBtYXggdGFibGUgY2VsbCBsZW5ndGhzIGFjcm9zcyBhbGwgcm93c1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbC5sZW5ndGg7IGkrKykge1xuICAgIHZhciByb3cgPSBhbGxbaV1cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG1MZW47IGsrKykge1xuICAgICAgdmFyIGNlbGwgPSByb3dba11cbiAgICAgIG1heFtrXSA9IE1hdGgubWF4KG1heFtrXSwgY2VsbCA/IGNlbGwudG9TdHJpbmcoKS5sZW5ndGggOiAwKVxuICAgIH1cbiAgfVxuICB0aGlzLl9fY29sTWF4ZXMgPSBtYXhcbiAganVzdGlmeSA9IHRoaXMuX19qdXN0aWZ5ID8gTWF0aC5tYXguYXBwbHkobnVsbCwgbWF4KSA6IDBcblxuICAvLyBHZXQgXG4gIG1heC5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcbiAgICB0b3RhbCArPSBqdXN0aWZ5ID8ganVzdGlmeSA6IHggKyBzZWxmLl9fc3BhY2luZ1xuICB9KVxuICBqdXN0aWZ5ICYmICh0b3RhbCArPSBtYXgubGVuZ3RoKVxuICB0b3RhbCAtPSB0aGlzLl9fc3BhY2luZ1xuXG4gIC8vIEhlYWRpbmdcbiAgYm9yZGVyICYmIGJvZHkucHVzaCh0aGlzLl9zZXBlcmF0b3IodG90YWwgLSBtTGVuICsgMSwgdGhpcy5fX3RvcCkpXG4gIGlmICh0aGlzLl9fbmFtZSkge1xuICAgIGJvZHkucHVzaCh0aGlzLl9yZW5kZXJUaXRsZSh0b3RhbCAtIG1MZW4gKyAxKSlcbiAgICBib3JkZXIgJiYgYm9keS5wdXNoKHRoaXMuX3NlcGVyYXRvcih0b3RhbCAtIG1MZW4gKyAxKSlcbiAgfVxuICBpZiAodGhpcy5fX2hlYWRpbmcpIHtcbiAgICBib2R5LnB1c2godGhpcy5fcmVuZGVyUm93KHRoaXMuX19oZWFkaW5nLCAnICcsIHRoaXMuX19oZWFkaW5nQWxpZ24pKVxuICAgIGJvZHkucHVzaCh0aGlzLl9yb3dTZXBlcmF0b3IobUxlbiwgdGhpcy5fX2ZpbGwpKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fX3Jvd3MubGVuZ3RoOyBpKyspIHtcbiAgICBib2R5LnB1c2godGhpcy5fcmVuZGVyUm93KHRoaXMuX19yb3dzW2ldLCAnICcpKVxuICB9XG4gIGJvcmRlciAmJiBib2R5LnB1c2godGhpcy5fc2VwZXJhdG9yKHRvdGFsIC0gbUxlbiArIDEsIHRoaXMuX19ib3R0b20pKVxuXG4gIHZhciBwcmVmaXggPSB0aGlzLm9wdGlvbnMucHJlZml4IHx8ICcnXG4gIHJldHVybiBwcmVmaXggKyBib2R5LmpvaW4oJ1xcbicgKyBwcmVmaXgpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgbGluZSBzZXBlcmF0b3JcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaW5nIHNpemVcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaWRlIHZhbHVlcyAoZGVmYXVsdCAnfCcpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5fc2VwZXJhdG9yID0gZnVuY3Rpb24obGVuLCBzZXApIHtcbiAgc2VwIHx8IChzZXAgPSB0aGlzLl9fZWRnZSlcbiAgcmV0dXJuIHNlcCArIEFzY2lpVGFibGUuYWxpZ25SaWdodChzZXAsIGxlbiwgdGhpcy5fX2ZpbGwpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcm93IHNlcGVyYXRvclxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gc2VwZXJhdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5fcm93U2VwZXJhdG9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciBibGFua3MgPSBBc2NpaVRhYmxlLmFycmF5RmlsbCh0aGlzLl9fbWF4Q2VsbHMsIHRoaXMuX19maWxsKVxuICByZXR1cm4gdGhpcy5fcmVuZGVyUm93KGJsYW5rcywgdGhpcy5fX2ZpbGwpXG59XG5cbi8qKlxuICogUmVuZGVyIHRoZSB0YWJsZSB0aXRsZSBpbiBhIGNlbnRlcmVkIGJveFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpbmcgc2l6ZVxuICogQHJldHVybiB7U3RyaW5nfSBmb3JtYXR0ZWQgdGl0bGVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLl9yZW5kZXJUaXRsZSA9IGZ1bmN0aW9uKGxlbikge1xuICB2YXIgbmFtZSA9ICcgJyArIHRoaXMuX19uYW1lICsgJyAnXG4gICAgLCBzdHIgPSBBc2NpaVRhYmxlLmFsaWduKHRoaXMuX19uYW1lQWxpZ24sIG5hbWUsIGxlbiAtIDEsICcgJylcbiAgcmV0dXJuIHRoaXMuX19lZGdlICsgc3RyICsgdGhpcy5fX2VkZ2Vcbn1cblxuLyoqXG4gKiBSZW5kZXIgYW4gaW52ZGl2aWR1YWwgcm93XG4gKlxuICogQHBhcmFtIHtBcnJheX0gcm93XG4gKiBAcGFyYW0ge1N0cmluZ30gY29sdW1uIHNlcGVyYXRvclxuICogQHBhcmFtIHtOdW1iZXJ9IHRvdGFsIHJvdyBhbGlnbm1lbnQgKG9wdGlvbmFsLCBkZWZhdWx0IGBhdXRvYClcbiAqIEByZXR1cm4ge1N0cmluZ30gZm9ybWF0dGVkIHJvd1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuX3JlbmRlclJvdyA9IGZ1bmN0aW9uKHJvdywgc3RyLCBhbGlnbikge1xuICB2YXIgdG1wID0gWycnXVxuICAgICwgbWF4ID0gdGhpcy5fX2NvbE1heGVzXG5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLl9fbWF4Q2VsbHM7IGsrKykge1xuICAgIHZhciBjZWxsID0gcm93W2tdXG4gICAgICAsIGp1c3QgPSB0aGlzLl9fanVzdGlmeSA/IE1hdGgubWF4LmFwcGx5KG51bGwsIG1heCkgOiBtYXhba11cbiAgICAgIC8vICwgcGFkID0gayA9PT0gdGhpcy5fX21heENlbGxzIC0gMSA/IGp1c3QgOiBqdXN0ICsgdGhpcy5fX3NwYWNpbmdcbiAgICAgICwgcGFkID0ganVzdFxuICAgICAgLCBjQWxpZ24gPSB0aGlzLl9fYWxpZ25zW2tdXG4gICAgICAsIHVzZSA9IGFsaWduXG4gICAgICAsIG1ldGhvZCA9ICdhbGlnbkF1dG8nXG4gIFxuICAgIGlmICh0eXBlb2YgYWxpZ24gPT09ICd1bmRlZmluZWQnKSB1c2UgPSBjQWxpZ25cblxuICAgIGlmICh1c2UgPT09IEFzY2lpVGFibGUuTEVGVCkgbWV0aG9kID0gJ2FsaWduTGVmdCdcbiAgICBpZiAodXNlID09PSBBc2NpaVRhYmxlLkNFTlRFUikgbWV0aG9kID0gJ2FsaWduQ2VudGVyJ1xuICAgIGlmICh1c2UgPT09IEFzY2lpVGFibGUuUklHSFQpIG1ldGhvZCA9ICdhbGlnblJpZ2h0J1xuXG4gICAgdG1wLnB1c2goQXNjaWlUYWJsZVttZXRob2RdKGNlbGwsIHBhZCwgc3RyKSlcbiAgfVxuICB2YXIgZnJvbnQgPSB0bXAuam9pbihzdHIgKyB0aGlzLl9fZWRnZSArIHN0cilcbiAgZnJvbnQgPSBmcm9udC5zdWJzdHIoMSwgZnJvbnQubGVuZ3RoKVxuICByZXR1cm4gZnJvbnQgKyBzdHIgKyB0aGlzLl9fZWRnZVxufVxuXG4vKiFcbiAqIEFsaWFzZXNcbiAqL1xuXG4vLyBDcmVhdGUgbWV0aG9kIHNob3J0Y3V0cyB0byBhbGwgYWxpZ25tZW50IG1ldGhvZHMgZm9yIGVhY2ggZGlyZWN0aW9uXG47WydMZWZ0JywgJ1JpZ2h0JywgJ0NlbnRlciddLmZvckVhY2goZnVuY3Rpb24oZGlyKSB7XG4gIHZhciBjb25zdGFudCA9IEFzY2lpVGFibGVbZGlyLnRvVXBwZXJDYXNlKCldXG5cbiAgO1snc2V0QWxpZ24nLCAnc2V0VGl0bGVBbGlnbicsICdzZXRIZWFkaW5nQWxpZ24nXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIC8vIENhbGwgdGhlIGJhc2UgbWV0aG9kIHdpdGggdGhlIGRpcmVjdGlvbiBjb25zdGFudCBhcyB0aGUgbGFzdCBhcmd1bWVudFxuICAgIEFzY2lpVGFibGUucHJvdG90eXBlW21ldGhvZCArIGRpcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLmNvbmNhdChjb25zdGFudClcbiAgICAgIHJldHVybiB0aGlzW21ldGhvZF0uYXBwbHkodGhpcywgYXJncylcbiAgICB9XG4gIH0pXG59KVxuXG4vKiFcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbmlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBBc2NpaVRhYmxlXG59IGVsc2Uge1xuICB0aGlzLkFzY2lpVGFibGUgPSBBc2NpaVRhYmxlXG59XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYXNjaWktdGFibGUnKSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHR2YXIgY2FsbGJhY2tzID0ge307XHJcblxyXG5cdGZ1bmN0aW9uIGFkZChrZXksIGNhbGxiYWNrKSB7XHJcblx0XHR2YXIgY2FsbGJhY2tzRm9yS2V5ID0gY2FsbGJhY2tzW2tleV07XHJcblxyXG5cdFx0aWYgKCFjYWxsYmFja3NGb3JLZXkpIHtcclxuXHRcdFx0Y2FsbGJhY2tzRm9yS2V5ID0gW107XHJcblx0XHRcdGNhbGxiYWNrc1trZXldID0gY2FsbGJhY2tzRm9yS2V5O1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBuZXdMZW4gPSBjYWxsYmFja3NGb3JLZXkucHVzaChjYWxsYmFjayk7XHJcblx0XHR2YXIgaXRlbUluZGV4ID0gbmV3TGVuIC0gMTtcclxuXHJcblx0XHQvLyBjYWxsYmFjayBpZCBpcyBmb3JtZWQgYXMgPGl0ZW0taW5kZXg+XzxrZXk+LCB3ZSB1c2UgdGhhdCBpZCB0byByZW1vdmUgdGhlIGNhbGxiYWNrIFxyXG5cdFx0cmV0dXJuIGl0ZW1JbmRleCArICdfJyArIGtleTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFja0lkKSB7XHJcblx0XHR2YXIgcGFydHMgPSBjYWxsYmFja0lkLnNwbGl0KCdfJyk7XHJcblx0XHRpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgaW5kZXggPSBwYXJ0c1swXTtcclxuXHRcdHZhciBrZXkgPSBwYXJ0c1sxXTtcclxuXHRcdFxyXG5cdFx0dmFyIGNhbGxiYWNrQXJyYXkgPSBjYWxsYmFja3Nba2V5XTtcclxuXHRcdGlmICghY2FsbGJhY2tBcnJheSB8fCBjYWxsYmFja0FycmF5Lmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0ZGVsZXRlIGNhbGxiYWNrQXJyYXlbaW5kZXhdO1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBleGVjdXRlKGtleSwgYXJndW1lbnRzQXJyKSB7XHJcblx0XHR2YXIgY2FsbGJhY2tzRm9yS2V5ID0gY2FsbGJhY2tzW2tleV07XHJcblx0XHRpZiAoIWNhbGxiYWNrc0ZvcktleSB8fCBjYWxsYmFja3NGb3JLZXkubGVuZ3RoID09PSAwKXtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBhcmdzID0gW10uc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuXHJcblx0XHRjYWxsYmFja3NGb3JLZXkuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuXHRcdFx0Y2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGFkZDogYWRkLFxyXG5cdFx0cmVtb3ZlOiByZW1vdmUsXHJcblx0XHRleGVjdXRlOiBleGVjdXRlXHJcblx0fTtcclxufTtcclxuIiwiLyoqXG4gKiBjdWlkLmpzXG4gKiBDb2xsaXNpb24tcmVzaXN0YW50IFVJRCBnZW5lcmF0b3IgZm9yIGJyb3dzZXJzIGFuZCBub2RlLlxuICogU2VxdWVudGlhbCBmb3IgZmFzdCBkYiBsb29rdXBzIGFuZCByZWNlbmN5IHNvcnRpbmcuXG4gKiBTYWZlIGZvciBlbGVtZW50IElEcyBhbmQgc2VydmVyLXNpZGUgbG9va3Vwcy5cbiAqXG4gKiBFeHRyYWN0ZWQgZnJvbSBDTENUUlxuICpcbiAqIENvcHlyaWdodCAoYykgRXJpYyBFbGxpb3R0IDIwMTJcbiAqIE1JVCBMaWNlbnNlXG4gKi9cblxuLypnbG9iYWwgd2luZG93LCBuYXZpZ2F0b3IsIGRvY3VtZW50LCByZXF1aXJlLCBwcm9jZXNzLCBtb2R1bGUgKi9cbihmdW5jdGlvbiAoYXBwKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIG5hbWVzcGFjZSA9ICdjdWlkJyxcbiAgICBjID0gMCxcbiAgICBibG9ja1NpemUgPSA0LFxuICAgIGJhc2UgPSAzNixcbiAgICBkaXNjcmV0ZVZhbHVlcyA9IE1hdGgucG93KGJhc2UsIGJsb2NrU2l6ZSksXG5cbiAgICBwYWQgPSBmdW5jdGlvbiBwYWQobnVtLCBzaXplKSB7XG4gICAgICB2YXIgcyA9IFwiMDAwMDAwMDAwXCIgKyBudW07XG4gICAgICByZXR1cm4gcy5zdWJzdHIocy5sZW5ndGgtc2l6ZSk7XG4gICAgfSxcblxuICAgIHJhbmRvbUJsb2NrID0gZnVuY3Rpb24gcmFuZG9tQmxvY2soKSB7XG4gICAgICByZXR1cm4gcGFkKChNYXRoLnJhbmRvbSgpICpcbiAgICAgICAgICAgIGRpc2NyZXRlVmFsdWVzIDw8IDApXG4gICAgICAgICAgICAudG9TdHJpbmcoYmFzZSksIGJsb2NrU2l6ZSk7XG4gICAgfSxcblxuICAgIHNhZmVDb3VudGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgYyA9IChjIDwgZGlzY3JldGVWYWx1ZXMpID8gYyA6IDA7XG4gICAgICBjKys7IC8vIHRoaXMgaXMgbm90IHN1YmxpbWluYWxcbiAgICAgIHJldHVybiBjIC0gMTtcbiAgICB9LFxuXG4gICAgYXBpID0gZnVuY3Rpb24gY3VpZCgpIHtcbiAgICAgIC8vIFN0YXJ0aW5nIHdpdGggYSBsb3dlcmNhc2UgbGV0dGVyIG1ha2VzXG4gICAgICAvLyBpdCBIVE1MIGVsZW1lbnQgSUQgZnJpZW5kbHkuXG4gICAgICB2YXIgbGV0dGVyID0gJ2MnLCAvLyBoYXJkLWNvZGVkIGFsbG93cyBmb3Igc2VxdWVudGlhbCBhY2Nlc3NcblxuICAgICAgICAvLyB0aW1lc3RhbXBcbiAgICAgICAgLy8gd2FybmluZzogdGhpcyBleHBvc2VzIHRoZSBleGFjdCBkYXRlIGFuZCB0aW1lXG4gICAgICAgIC8vIHRoYXQgdGhlIHVpZCB3YXMgY3JlYXRlZC5cbiAgICAgICAgdGltZXN0YW1wID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpKS50b1N0cmluZyhiYXNlKSxcblxuICAgICAgICAvLyBQcmV2ZW50IHNhbWUtbWFjaGluZSBjb2xsaXNpb25zLlxuICAgICAgICBjb3VudGVyLFxuXG4gICAgICAgIC8vIEEgZmV3IGNoYXJzIHRvIGdlbmVyYXRlIGRpc3RpbmN0IGlkcyBmb3IgZGlmZmVyZW50XG4gICAgICAgIC8vIGNsaWVudHMgKHNvIGRpZmZlcmVudCBjb21wdXRlcnMgYXJlIGZhciBsZXNzXG4gICAgICAgIC8vIGxpa2VseSB0byBnZW5lcmF0ZSB0aGUgc2FtZSBpZClcbiAgICAgICAgZmluZ2VycHJpbnQgPSBhcGkuZmluZ2VycHJpbnQoKSxcblxuICAgICAgICAvLyBHcmFiIHNvbWUgbW9yZSBjaGFycyBmcm9tIE1hdGgucmFuZG9tKClcbiAgICAgICAgcmFuZG9tID0gcmFuZG9tQmxvY2soKSArIHJhbmRvbUJsb2NrKCk7XG5cbiAgICAgICAgY291bnRlciA9IHBhZChzYWZlQ291bnRlcigpLnRvU3RyaW5nKGJhc2UpLCBibG9ja1NpemUpO1xuXG4gICAgICByZXR1cm4gIChsZXR0ZXIgKyB0aW1lc3RhbXAgKyBjb3VudGVyICsgZmluZ2VycHJpbnQgKyByYW5kb20pO1xuICAgIH07XG5cbiAgYXBpLnNsdWcgPSBmdW5jdGlvbiBzbHVnKCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkudG9TdHJpbmcoMzYpLFxuICAgICAgY291bnRlcixcbiAgICAgIHByaW50ID0gYXBpLmZpbmdlcnByaW50KCkuc2xpY2UoMCwxKSArXG4gICAgICAgIGFwaS5maW5nZXJwcmludCgpLnNsaWNlKC0xKSxcbiAgICAgIHJhbmRvbSA9IHJhbmRvbUJsb2NrKCkuc2xpY2UoLTIpO1xuXG4gICAgICBjb3VudGVyID0gc2FmZUNvdW50ZXIoKS50b1N0cmluZygzNikuc2xpY2UoLTQpO1xuXG4gICAgcmV0dXJuIGRhdGUuc2xpY2UoLTIpICtcbiAgICAgIGNvdW50ZXIgKyBwcmludCArIHJhbmRvbTtcbiAgfTtcblxuICBhcGkuZ2xvYmFsQ291bnQgPSBmdW5jdGlvbiBnbG9iYWxDb3VudCgpIHtcbiAgICAvLyBXZSB3YW50IHRvIGNhY2hlIHRoZSByZXN1bHRzIG9mIHRoaXNcbiAgICB2YXIgY2FjaGUgPSAoZnVuY3Rpb24gY2FsYygpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgY291bnQgPSAwO1xuXG4gICAgICAgIGZvciAoaSBpbiB3aW5kb3cpIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgfSgpKTtcblxuICAgIGFwaS5nbG9iYWxDb3VudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhY2hlOyB9O1xuICAgIHJldHVybiBjYWNoZTtcbiAgfTtcblxuICBhcGkuZmluZ2VycHJpbnQgPSBmdW5jdGlvbiBicm93c2VyUHJpbnQoKSB7XG4gICAgcmV0dXJuIHBhZCgobmF2aWdhdG9yLm1pbWVUeXBlcy5sZW5ndGggK1xuICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5sZW5ndGgpLnRvU3RyaW5nKDM2KSArXG4gICAgICBhcGkuZ2xvYmFsQ291bnQoKS50b1N0cmluZygzNiksIDQpO1xuICB9O1xuXG4gIC8vIGRvbid0IGNoYW5nZSBhbnl0aGluZyBmcm9tIGhlcmUgZG93bi5cbiAgaWYgKGFwcC5yZWdpc3Rlcikge1xuICAgIGFwcC5yZWdpc3RlcihuYW1lc3BhY2UsIGFwaSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGFwaTtcbiAgfSBlbHNlIHtcbiAgICBhcHBbbmFtZXNwYWNlXSA9IGFwaTtcbiAgfVxuXG59KHRoaXMuYXBwbGl0dWRlIHx8IHRoaXMpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG5cbi8vIE9ubHkgTm9kZS5KUyBoYXMgYSBwcm9jZXNzIHZhcmlhYmxlIHRoYXQgaXMgb2YgW1tDbGFzc11dIHByb2Nlc3NcbnRyeSB7XG4gbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScgXG59IGNhdGNoKGUpIHt9XG4iLCIvKiFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuICogQGxpY2Vuc2UgZXM1LXNoaW0gQ29weXJpZ2h0IDIwMDktMjAxNSBieSBjb250cmlidXRvcnMsIE1JVCBMaWNlbnNlXG4gKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG4vLyB2aW06IHRzPTQgc3RzPTQgc3c9NCBleHBhbmR0YWJcblxuLy8gQWRkIHNlbWljb2xvbiB0byBwcmV2ZW50IElJRkUgZnJvbSBiZWluZyBwYXNzZWQgYXMgYXJndW1lbnQgdG8gY29uY2F0ZW5hdGVkIGNvZGUuXG47XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvdGVtcGxhdGVzL3JldHVybkV4cG9ydHMuanNcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qIGdsb2JhbCBkZWZpbmUsIGV4cG9ydHMsIG1vZHVsZSAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGNhbGwgPSBGdW5jdGlvbi5jYWxsO1xuICAgIHZhciBwcm90b3R5cGVPZk9iamVjdCA9IE9iamVjdC5wcm90b3R5cGU7XG4gICAgdmFyIG93bnMgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QuaGFzT3duUHJvcGVydHkpO1xuICAgIHZhciBpc0VudW1lcmFibGUgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUpO1xuICAgIHZhciB0b1N0ciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC50b1N0cmluZyk7XG5cbiAgICAvLyBJZiBKUyBlbmdpbmUgc3VwcG9ydHMgYWNjZXNzb3JzIGNyZWF0aW5nIHNob3J0Y3V0cy5cbiAgICB2YXIgZGVmaW5lR2V0dGVyO1xuICAgIHZhciBkZWZpbmVTZXR0ZXI7XG4gICAgdmFyIGxvb2t1cEdldHRlcjtcbiAgICB2YXIgbG9va3VwU2V0dGVyO1xuICAgIHZhciBzdXBwb3J0c0FjY2Vzc29ycyA9IG93bnMocHJvdG90eXBlT2ZPYmplY3QsICdfX2RlZmluZUdldHRlcl9fJyk7XG4gICAgaWYgKHN1cHBvcnRzQWNjZXNzb3JzKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4gICAgICAgIGRlZmluZUdldHRlciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5fX2RlZmluZUdldHRlcl9fKTtcbiAgICAgICAgZGVmaW5lU2V0dGVyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Ll9fZGVmaW5lU2V0dGVyX18pO1xuICAgICAgICBsb29rdXBHZXR0ZXIgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QuX19sb29rdXBHZXR0ZXJfXyk7XG4gICAgICAgIGxvb2t1cFNldHRlciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5fX2xvb2t1cFNldHRlcl9fKTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuICAgIH1cblxuICAgIHZhciBpc1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKG8pIHtcbiAgICAgICAgcmV0dXJuIG8gPT0gbnVsbCB8fCAodHlwZW9mIG8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBvICE9PSAnZnVuY3Rpb24nKTtcbiAgICB9O1xuXG4gICAgLy8gRVM1IDE1LjIuMy4yXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjJcbiAgICBpZiAoIU9iamVjdC5nZXRQcm90b3R5cGVPZikge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzI2lzc3VlLzJcbiAgICAgICAgLy8gaHR0cDovL2Vqb2huLm9yZy9ibG9nL29iamVjdGdldHByb3RvdHlwZW9mL1xuICAgICAgICAvLyByZWNvbW1lbmRlZCBieSBmc2NoYWVmZXIgb24gZ2l0aHViXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHN1cmUsIGFuZCB3ZWJyZWZsZWN0aW9uIHNheXMgXl9eXG4gICAgICAgIC8vIC4uLiB0aGlzIHdpbGwgbmVyZXZlciBwb3NzaWJseSByZXR1cm4gbnVsbFxuICAgICAgICAvLyAuLi4gT3BlcmEgTWluaSBicmVha3MgaGVyZSB3aXRoIGluZmluaXRlIGxvb3BzXG4gICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKG9iamVjdCkge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgICAgICAgICAgIHZhciBwcm90byA9IG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG4gICAgICAgICAgICBpZiAocHJvdG8gfHwgcHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRvU3RyKG9iamVjdC5jb25zdHJ1Y3RvcikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvdHlwZU9mT2JqZWN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBDb3JyZWN0bHkgcmV0dXJuIG51bGwgZm9yIE9iamVjdHMgY3JlYXRlZCB3aXRoIGBPYmplY3QuY3JlYXRlKG51bGwpYFxuICAgICAgICAgICAgICAgIC8vIChzaGFtbWVkIG9yIG5hdGl2ZSkgb3IgYHsgX19wcm90b19fOiBudWxsfWAuICBBbHNvIHJldHVybnMgbnVsbCBmb3JcbiAgICAgICAgICAgICAgICAvLyBjcm9zcy1yZWFsbSBvYmplY3RzIG9uIGJyb3dzZXJzIHRoYXQgbGFjayBgX19wcm90b19fYCBzdXBwb3J0IChsaWtlXG4gICAgICAgICAgICAgICAgLy8gSUUgPDExKSwgYnV0IHRoYXQncyB0aGUgYmVzdCB3ZSBjYW4gZG8uXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy4zXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjNcblxuICAgIHZhciBkb2VzR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29yayA9IGZ1bmN0aW9uIGRvZXNHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3JrKG9iamVjdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2JqZWN0LnNlbnRpbmVsID0gMDtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgJ3NlbnRpbmVsJykudmFsdWUgPT09IDA7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGNoZWNrIHdoZXRoZXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIHdvcmtzIGlmIGl0J3MgZ2l2ZW4uIE90aGVyd2lzZSwgc2hpbSBwYXJ0aWFsbHkuXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29ya3NPbk9iamVjdCA9IGRvZXNHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3JrKHt9KTtcbiAgICAgICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25Eb20gPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGRvZXNHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3JrKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgICAgICAgaWYgKCFnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3Jrc09uRG9tIHx8ICFnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3Jrc09uT2JqZWN0KSB7XG4gICAgICAgICAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yRmFsbGJhY2sgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIHx8IGdldE93blByb3BlcnR5RGVzY3JpcHRvckZhbGxiYWNrKSB7XG4gICAgICAgIHZhciBFUlJfTk9OX09CSkVDVCA9ICdPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIGNhbGxlZCBvbiBhIG5vbi1vYmplY3Q6ICc7XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUob2JqZWN0KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJSX05PTl9PQkpFQ1QgKyBvYmplY3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtYWtlIGEgdmFsaWFudCBhdHRlbXB0IHRvIHVzZSB0aGUgcmVhbCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICAgICAgICAgIC8vIGZvciBJOCdzIERPTSBlbGVtZW50cy5cbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjay5jYWxsKE9iamVjdCwgb2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0aGUgc2hpbSBpZiB0aGUgcmVhbCBvbmUgZG9lc24ndCB3b3JrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGVzY3JpcHRvcjtcblxuICAgICAgICAgICAgLy8gSWYgb2JqZWN0IGRvZXMgbm90IG93bnMgcHJvcGVydHkgcmV0dXJuIHVuZGVmaW5lZCBpbW1lZGlhdGVseS5cbiAgICAgICAgICAgIGlmICghb3ducyhvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBvYmplY3QgaGFzIGEgcHJvcGVydHkgdGhlbiBpdCdzIGZvciBzdXJlIGBjb25maWd1cmFibGVgLCBhbmRcbiAgICAgICAgICAgIC8vIHByb2JhYmx5IGBlbnVtZXJhYmxlYC4gRGV0ZWN0IGVudW1lcmFiaWxpdHkgdGhvdWdoLlxuICAgICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBpc0VudW1lcmFibGUob2JqZWN0LCBwcm9wZXJ0eSksXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBJZiBKUyBlbmdpbmUgc3VwcG9ydHMgYWNjZXNzb3IgcHJvcGVydGllcyB0aGVuIHByb3BlcnR5IG1heSBiZSBhXG4gICAgICAgICAgICAvLyBnZXR0ZXIgb3Igc2V0dGVyLlxuICAgICAgICAgICAgaWYgKHN1cHBvcnRzQWNjZXNzb3JzKSB7XG4gICAgICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSBgX19sb29rdXBHZXR0ZXJfX2Agd2lsbCByZXR1cm4gYSBnZXR0ZXIgZXZlblxuICAgICAgICAgICAgICAgIC8vIGlmIG9iamVjdCBoYXMgb3duIG5vbiBnZXR0ZXIgcHJvcGVydHkgYWxvbmcgd2l0aCBhIHNhbWUgbmFtZWRcbiAgICAgICAgICAgICAgICAvLyBpbmhlcml0ZWQgZ2V0dGVyLiBUbyBhdm9pZCBtaXNiZWhhdmlvciB3ZSB0ZW1wb3JhcnkgcmVtb3ZlXG4gICAgICAgICAgICAgICAgLy8gYF9fcHJvdG9fX2Agc28gdGhhdCBgX19sb29rdXBHZXR0ZXJfX2Agd2lsbCByZXR1cm4gZ2V0dGVyIG9ubHlcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCdzIG93bmVkIGJ5IGFuIG9iamVjdC5cbiAgICAgICAgICAgICAgICB2YXIgcHJvdG90eXBlID0gb2JqZWN0Ll9fcHJvdG9fXztcbiAgICAgICAgICAgICAgICB2YXIgbm90UHJvdG90eXBlT2ZPYmplY3QgPSBvYmplY3QgIT09IHByb3RvdHlwZU9mT2JqZWN0O1xuICAgICAgICAgICAgICAgIC8vIGF2b2lkIHJlY3Vyc2lvbiBwcm9ibGVtLCBicmVha2luZyBpbiBPcGVyYSBNaW5pIHdoZW5cbiAgICAgICAgICAgICAgICAvLyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycpXG4gICAgICAgICAgICAgICAgLy8gb3IgYW55IG90aGVyIE9iamVjdC5wcm90b3R5cGUgYWNjZXNzb3JcbiAgICAgICAgICAgICAgICBpZiAobm90UHJvdG90eXBlT2ZPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZU9mT2JqZWN0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBnZXR0ZXIgPSBsb29rdXBHZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgdmFyIHNldHRlciA9IGxvb2t1cFNldHRlcihvYmplY3QsIHByb3BlcnR5KTtcblxuICAgICAgICAgICAgICAgIGlmIChub3RQcm90b3R5cGVPZk9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmNlIHdlIGhhdmUgZ2V0dGVyIGFuZCBzZXR0ZXIgd2UgY2FuIHB1dCB2YWx1ZXMgYmFjay5cbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2V0dGVyIHx8IHNldHRlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGdldHRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9IHNldHRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCB3YXMgYWNjZXNzb3IgcHJvcGVydHkgd2UncmUgZG9uZSBhbmQgcmV0dXJuIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gb3JkZXIgdG8gYXZvaWQgYWRkaW5nIGB2YWx1ZWAgdG8gdGhlIGRlc2NyaXB0b3IuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgd2UgZ290IHRoaXMgZmFyIHdlIGtub3cgdGhhdCBvYmplY3QgaGFzIGFuIG93biBwcm9wZXJ0eSB0aGF0IGlzXG4gICAgICAgICAgICAvLyBub3QgYW4gYWNjZXNzb3Igc28gd2Ugc2V0IGl0IGFzIGEgdmFsdWUgYW5kIHJldHVybiBkZXNjcmlwdG9yLlxuICAgICAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICB9O1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy40XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjRcbiAgICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuNVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy41XG4gICAgaWYgKCFPYmplY3QuY3JlYXRlKSB7XG5cbiAgICAgICAgLy8gQ29udHJpYnV0ZWQgYnkgQnJhbmRvbiBCZW52aWUsIE9jdG9iZXIsIDIwMTJcbiAgICAgICAgdmFyIGNyZWF0ZUVtcHR5O1xuICAgICAgICB2YXIgc3VwcG9ydHNQcm90byA9ICEoeyBfX3Byb3RvX186IG51bGwgfSBpbnN0YW5jZW9mIE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBwcm9kdWNlcyBmYWxzZSBwb3NpdGl2ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBPcGVyYSBNaW5pID0+IG5vdCBhIHJlbGlhYmxlIGNoZWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2JqZWN0LnByb3RvdHlwZS5fX3Byb3RvX18gPT09IG51bGxcblxuICAgICAgICAvLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4gICAgICAgIC8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4gICAgICAgIC8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4gICAgICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgICAgIHZhciBzaG91bGRVc2VBY3RpdmVYID0gZnVuY3Rpb24gc2hvdWxkVXNlQWN0aXZlWCgpIHtcbiAgICAgICAgICAgIC8vIHJldHVybiBlYXJseSBpZiBkb2N1bWVudC5kb21haW4gbm90IHNldFxuICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5kb21haW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGhpcyBzdXBwb3J0cyBJRTggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgdXNlZFxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbiAgICAgICAgLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbiAgICAgICAgdmFyIGdldEVtcHR5VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIGdldEVtcHR5VmlhQWN0aXZlWCgpIHtcbiAgICAgICAgICAgIHZhciBlbXB0eTtcbiAgICAgICAgICAgIHZhciB4RG9jO1xuXG4gICAgICAgICAgICB4RG9jID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSAnc2NyaXB0JztcbiAgICAgICAgICAgIHhEb2Mud3JpdGUoJzwnICsgc2NyaXB0ICsgJz48LycgKyBzY3JpcHQgKyAnPicpO1xuICAgICAgICAgICAgeERvYy5jbG9zZSgpO1xuXG4gICAgICAgICAgICBlbXB0eSA9IHhEb2MucGFyZW50V2luZG93Lk9iamVjdC5wcm90b3R5cGU7XG4gICAgICAgICAgICB4RG9jID0gbnVsbDtcblxuICAgICAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiB1c2luZyBhbiBpZnJhbWVcbiAgICAgICAgLy8gYmVmb3JlIHRoZSBhY3RpdmV4IGFwcHJvYWNoIHdhcyBhZGRlZFxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbiAgICAgICAgdmFyIGdldEVtcHR5VmlhSUZyYW1lID0gZnVuY3Rpb24gZ2V0RW1wdHlWaWFJRnJhbWUoKSB7XG4gICAgICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgZW1wdHk7XG5cbiAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zY3JpcHQtdXJsICovXG4gICAgICAgICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JztcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2NyaXB0LXVybCAqL1xuXG4gICAgICAgICAgICBlbXB0eSA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdC5wcm90b3R5cGU7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgICAgIGlmcmFtZSA9IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiBlbXB0eTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKiBnbG9iYWwgZG9jdW1lbnQgKi9cbiAgICAgICAgaWYgKHN1cHBvcnRzUHJvdG8gfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgX19wcm90b19fOiBudWxsIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW4gb2xkIElFIF9fcHJvdG9fXyBjYW4ndCBiZSB1c2VkIHRvIG1hbnVhbGx5IHNldCBgbnVsbGAsIG5vciBkb2VzXG4gICAgICAgICAgICAvLyBhbnkgb3RoZXIgbWV0aG9kIGV4aXN0IHRvIG1ha2UgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSBub3RoaW5nLFxuICAgICAgICAgICAgLy8gYXNpZGUgZnJvbSBPYmplY3QucHJvdG90eXBlIGl0c2VsZi4gSW5zdGVhZCwgY3JlYXRlIGEgbmV3IGdsb2JhbFxuICAgICAgICAgICAgLy8gb2JqZWN0IGFuZCAqc3RlYWwqIGl0cyBPYmplY3QucHJvdG90eXBlIGFuZCBzdHJpcCBpdCBiYXJlLiBUaGlzIGlzXG4gICAgICAgICAgICAvLyB1c2VkIGFzIHRoZSBwcm90b3R5cGUgdG8gY3JlYXRlIG51bGxhcnkgb2JqZWN0cy5cbiAgICAgICAgICAgIGNyZWF0ZUVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB3aGljaCBhcHByb2FjaCB0byB1c2VcbiAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbiAgICAgICAgICAgICAgICB2YXIgZW1wdHkgPSBzaG91bGRVc2VBY3RpdmVYKCkgPyBnZXRFbXB0eVZpYUFjdGl2ZVgoKSA6IGdldEVtcHR5VmlhSUZyYW1lKCk7XG5cbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5Lmhhc093blByb3BlcnR5O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkuaXNQcm90b3R5cGVPZjtcbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkudG9Mb2NhbGVTdHJpbmc7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5LnRvU3RyaW5nO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS52YWx1ZU9mO1xuXG4gICAgICAgICAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBlbXB0eTtcbiAgICAgICAgICAgICAgICAvLyBzaG9ydC1jaXJjdWl0IGZ1dHVyZSBjYWxsc1xuICAgICAgICAgICAgICAgIGNyZWF0ZUVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcblxuICAgICAgICAgICAgdmFyIG9iamVjdDtcbiAgICAgICAgICAgIHZhciBUeXBlID0gZnVuY3Rpb24gVHlwZSgpIHt9OyAvLyBBbiBlbXB0eSBjb25zdHJ1Y3Rvci5cblxuICAgICAgICAgICAgaWYgKHByb3RvdHlwZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9iamVjdCA9IGNyZWF0ZUVtcHR5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChwcm90b3R5cGUgIT09IG51bGwgJiYgaXNQcmltaXRpdmUocHJvdG90eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIGBwYXJlbnRgIGNhbiBiZSBgbnVsbGBcbiAgICAgICAgICAgICAgICAgICAgLy8gT1IgKmFueSogYGluc3RhbmNlb2YgT2JqZWN0YCAgKE9iamVjdHxGdW5jdGlvbnxBcnJheXxSZWdFeHB8ZXRjKVxuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgYHR5cGVvZmAgdGhvLCBiL2MgaW4gb2xkIElFLCBET00gZWxlbWVudHMgYXJlIG5vdCBgaW5zdGFuY2VvZiBPYmplY3RgXG4gICAgICAgICAgICAgICAgICAgIC8vIGxpa2UgdGhleSBhcmUgaW4gbW9kZXJuIGJyb3dzZXJzLiBVc2luZyBgT2JqZWN0LmNyZWF0ZWAgb24gRE9NIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzLi4uZXJyLi4ucHJvYmFibHkgaW5hcHByb3ByaWF0ZSwgYnV0IHRoZSBuYXRpdmUgdmVyc2lvbiBhbGxvd3MgZm9yIGl0LlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QgcHJvdG90eXBlIG1heSBvbmx5IGJlIGFuIE9iamVjdCBvciBudWxsJyk7IC8vIHNhbWUgbXNnIGFzIENocm9tZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBUeXBlLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBuZXcgVHlwZSgpO1xuICAgICAgICAgICAgICAgIC8vIElFIGhhcyBubyBidWlsdC1pbiBpbXBsZW1lbnRhdGlvbiBvZiBgT2JqZWN0LmdldFByb3RvdHlwZU9mYFxuICAgICAgICAgICAgICAgIC8vIG5laXRoZXIgYF9fcHJvdG9fX2AsIGJ1dCB0aGlzIG1hbnVhbGx5IHNldHRpbmcgYF9fcHJvdG9fX2Agd2lsbFxuICAgICAgICAgICAgICAgIC8vIGd1YXJhbnRlZSB0aGF0IGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIHdpbGwgd29yayBhcyBleHBlY3RlZCB3aXRoXG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0cyBjcmVhdGVkIHVzaW5nIGBPYmplY3QuY3JlYXRlYFxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmplY3QsIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuNlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy42XG5cbiAgICAvLyBQYXRjaCBmb3IgV2ViS2l0IGFuZCBJRTggc3RhbmRhcmQgbW9kZVxuICAgIC8vIERlc2lnbmVkIGJ5IGhheCA8aGF4LmdpdGh1Yi5jb20+XG4gICAgLy8gcmVsYXRlZCBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3VlcyNpc3N1ZS81XG4gICAgLy8gSUU4IFJlZmVyZW5jZTpcbiAgICAvLyAgICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2RkMjgyOTAwLmFzcHhcbiAgICAvLyAgICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2RkMjI5OTE2LmFzcHhcbiAgICAvLyBXZWJLaXQgQnVnczpcbiAgICAvLyAgICAgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTM2NDIzXG5cbiAgICB2YXIgZG9lc0RlZmluZVByb3BlcnR5V29yayA9IGZ1bmN0aW9uIGRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsob2JqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCAnc2VudGluZWwnLCB7fSk7XG4gICAgICAgICAgICByZXR1cm4gJ3NlbnRpbmVsJyBpbiBvYmplY3Q7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGNoZWNrIHdoZXRoZXIgZGVmaW5lUHJvcGVydHkgd29ya3MgaWYgaXQncyBnaXZlbi4gT3RoZXJ3aXNlLFxuICAgIC8vIHNoaW0gcGFydGlhbGx5LlxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5V29ya3NPbk9iamVjdCA9IGRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsoe30pO1xuICAgICAgICB2YXIgZGVmaW5lUHJvcGVydHlXb3Jrc09uRG9tID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgZG9lc0RlZmluZVByb3BlcnR5V29yayhkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgICAgIGlmICghZGVmaW5lUHJvcGVydHlXb3Jrc09uT2JqZWN0IHx8ICFkZWZpbmVQcm9wZXJ0eVdvcmtzT25Eb20pIHtcbiAgICAgICAgICAgIHZhciBkZWZpbmVQcm9wZXJ0eUZhbGxiYWNrID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnRpZXNGYWxsYmFjayA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFPYmplY3QuZGVmaW5lUHJvcGVydHkgfHwgZGVmaW5lUHJvcGVydHlGYWxsYmFjaykge1xuICAgICAgICB2YXIgRVJSX05PTl9PQkpFQ1RfREVTQ1JJUFRPUiA9ICdQcm9wZXJ0eSBkZXNjcmlwdGlvbiBtdXN0IGJlIGFuIG9iamVjdDogJztcbiAgICAgICAgdmFyIEVSUl9OT05fT0JKRUNUX1RBUkdFVCA9ICdPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbGVkIG9uIG5vbi1vYmplY3Q6ICc7XG4gICAgICAgIHZhciBFUlJfQUNDRVNTT1JTX05PVF9TVVBQT1JURUQgPSAnZ2V0dGVycyAmIHNldHRlcnMgY2FuIG5vdCBiZSBkZWZpbmVkIG9uIHRoaXMgamF2YXNjcmlwdCBlbmdpbmUnO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZShvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJfTk9OX09CSkVDVF9UQVJHRVQgKyBvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKGRlc2NyaXB0b3IpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJfTk9OX09CSkVDVF9ERVNDUklQVE9SICsgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtYWtlIGEgdmFsaWFudCBhdHRlbXB0IHRvIHVzZSB0aGUgcmVhbCBkZWZpbmVQcm9wZXJ0eVxuICAgICAgICAgICAgLy8gZm9yIEk4J3MgRE9NIGVsZW1lbnRzLlxuICAgICAgICAgICAgaWYgKGRlZmluZVByb3BlcnR5RmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHlGYWxsYmFjay5jYWxsKE9iamVjdCwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0aGUgc2hpbSBpZiB0aGUgcmVhbCBvbmUgZG9lc24ndCB3b3JrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBpdCdzIGEgZGF0YSBwcm9wZXJ0eS5cbiAgICAgICAgICAgIGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICAvLyBmYWlsIHNpbGVudGx5IGlmICd3cml0YWJsZScsICdlbnVtZXJhYmxlJywgb3IgJ2NvbmZpZ3VyYWJsZSdcbiAgICAgICAgICAgICAgICAvLyBhcmUgcmVxdWVzdGVkIGJ1dCBub3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAvLyBhbHRlcm5hdGUgYXBwcm9hY2g6XG4gICAgICAgICAgICAgICAgaWYgKCAvLyBjYW4ndCBpbXBsZW1lbnQgdGhlc2UgZmVhdHVyZXM7IGFsbG93IGZhbHNlIGJ1dCBub3QgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlKSB8fFxuICAgICAgICAgICAgICAgICAgICAoJ2VudW1lcmFibGUnIGluIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuZW51bWVyYWJsZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKCdjb25maWd1cmFibGUnIGluIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlKVxuICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1RoaXMgaW1wbGVtZW50YXRpb24gb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5IGRvZXMgbm90IHN1cHBvcnQgY29uZmlndXJhYmxlLCBlbnVtZXJhYmxlLCBvciB3cml0YWJsZS4nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0c0FjY2Vzc29ycyAmJiAobG9va3VwR2V0dGVyKG9iamVjdCwgcHJvcGVydHkpIHx8IGxvb2t1cFNldHRlcihvYmplY3QsIHByb3BlcnR5KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXMgYWNjZXNzb3JzIGFyZSBzdXBwb3J0ZWQgb25seSBvbiBlbmdpbmVzIGltcGxlbWVudGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBgX19wcm90b19fYCB3ZSBjYW4gc2FmZWx5IG92ZXJyaWRlIGBfX3Byb3RvX19gIHdoaWxlIGRlZmluaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgcHJvcGVydHkgdG8gbWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgaGl0IGFuIGluaGVyaXRlZFxuICAgICAgICAgICAgICAgICAgICAvLyBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3RvdHlwZSA9IG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGVPZk9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRpbmcgYSBwcm9wZXJ0eSBhbnl3YXkgc2luY2UgZ2V0dGVyIC8gc2V0dGVyIG1heSBiZVxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmVkIG9uIG9iamVjdCBpdHNlbGYuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RbcHJvcGVydHldID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dGluZyBvcmlnaW5hbCBgX19wcm90b19fYCBiYWNrIG5vdy5cbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0dldHRlciA9ICdnZXQnIGluIGRlc2NyaXB0b3I7XG4gICAgICAgICAgICAgICAgdmFyIGhhc1NldHRlciA9ICdzZXQnIGluIGRlc2NyaXB0b3I7XG4gICAgICAgICAgICAgICAgaWYgKCFzdXBwb3J0c0FjY2Vzc29ycyAmJiAoaGFzR2V0dGVyIHx8IGhhc1NldHRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZ290IHRoYXQgZmFyIHRoZW4gZ2V0dGVycyBhbmQgc2V0dGVycyBjYW4gYmUgZGVmaW5lZCAhIVxuICAgICAgICAgICAgICAgIGlmIChoYXNHZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lR2V0dGVyKG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IuZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhhc1NldHRlcikge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVTZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvci5zZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy43XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjdcbiAgICBpZiAoIU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIHx8IGRlZmluZVByb3BlcnRpZXNGYWxsYmFjaykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMob2JqZWN0LCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAvLyBtYWtlIGEgdmFsaWFudCBhdHRlbXB0IHRvIHVzZSB0aGUgcmVhbCBkZWZpbmVQcm9wZXJ0aWVzXG4gICAgICAgICAgICBpZiAoZGVmaW5lUHJvcGVydGllc0ZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnRpZXNGYWxsYmFjay5jYWxsKE9iamVjdCwgb2JqZWN0LCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IHRoZSBzaGltIGlmIHRoZSByZWFsIG9uZSBkb2Vzbid0IHdvcmtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgcHJvcGVydGllc1twcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjhcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuOFxuICAgIGlmICghT2JqZWN0LnNlYWwpIHtcbiAgICAgICAgT2JqZWN0LnNlYWwgPSBmdW5jdGlvbiBzZWFsKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Quc2VhbCBjYW4gb25seSBiZSBjYWxsZWQgb24gT2JqZWN0cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbWlzbGVhZGluZyBhbmQgYnJlYWtzIGZlYXR1cmUtZGV0ZWN0aW9uLCBidXRcbiAgICAgICAgICAgIC8vIGFsbG93cyBcInNlY3VyYWJsZVwiIGNvZGUgdG8gXCJncmFjZWZ1bGx5XCIgZGVncmFkZSB0byB3b3JraW5nXG4gICAgICAgICAgICAvLyBidXQgaW5zZWN1cmUgY29kZS5cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy45XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjlcbiAgICBpZiAoIU9iamVjdC5mcmVlemUpIHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSA9IGZ1bmN0aW9uIGZyZWV6ZShvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmZyZWV6ZSBjYW4gb25seSBiZSBjYWxsZWQgb24gT2JqZWN0cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbWlzbGVhZGluZyBhbmQgYnJlYWtzIGZlYXR1cmUtZGV0ZWN0aW9uLCBidXRcbiAgICAgICAgICAgIC8vIGFsbG93cyBcInNlY3VyYWJsZVwiIGNvZGUgdG8gXCJncmFjZWZ1bGx5XCIgZGVncmFkZSB0byB3b3JraW5nXG4gICAgICAgICAgICAvLyBidXQgaW5zZWN1cmUgY29kZS5cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZGV0ZWN0IGEgUmhpbm8gYnVnIGFuZCBwYXRjaCBpdFxuICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5mcmVlemUoZnVuY3Rpb24gKCkge30pO1xuICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICBPYmplY3QuZnJlZXplID0gKGZ1bmN0aW9uIChmcmVlemVPYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBmcmVlemUob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJlZXplT2JqZWN0KG9iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfShPYmplY3QuZnJlZXplKSk7XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy4xMFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4xMFxuICAgIGlmICghT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG4gICAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QucHJldmVudEV4dGVuc2lvbnMgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1pc2xlYWRpbmcgYW5kIGJyZWFrcyBmZWF0dXJlLWRldGVjdGlvbiwgYnV0XG4gICAgICAgICAgICAvLyBhbGxvd3MgXCJzZWN1cmFibGVcIiBjb2RlIHRvIFwiZ3JhY2VmdWxseVwiIGRlZ3JhZGUgdG8gd29ya2luZ1xuICAgICAgICAgICAgLy8gYnV0IGluc2VjdXJlIGNvZGUuXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuMTFcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTFcbiAgICBpZiAoIU9iamVjdC5pc1NlYWxlZCkge1xuICAgICAgICBPYmplY3QuaXNTZWFsZWQgPSBmdW5jdGlvbiBpc1NlYWxlZChvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmlzU2VhbGVkIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuMTJcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTJcbiAgICBpZiAoIU9iamVjdC5pc0Zyb3plbikge1xuICAgICAgICBPYmplY3QuaXNGcm96ZW4gPSBmdW5jdGlvbiBpc0Zyb3plbihvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmlzRnJvemVuIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuMTNcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTNcbiAgICBpZiAoIU9iamVjdC5pc0V4dGVuc2libGUpIHtcbiAgICAgICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSA9IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShvYmplY3QpIHtcbiAgICAgICAgICAgIC8vIDEuIElmIFR5cGUoTykgaXMgbm90IE9iamVjdCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gICAgICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5pc0V4dGVuc2libGUgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAyLiBSZXR1cm4gdGhlIEJvb2xlYW4gdmFsdWUgb2YgdGhlIFtbRXh0ZW5zaWJsZV1dIGludGVybmFsIHByb3BlcnR5IG9mIE8uXG4gICAgICAgICAgICB2YXIgbmFtZSA9ICcnO1xuICAgICAgICAgICAgd2hpbGUgKG93bnMob2JqZWN0LCBuYW1lKSkge1xuICAgICAgICAgICAgICAgIG5hbWUgKz0gJz8nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqZWN0W25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IG93bnMob2JqZWN0LCBuYW1lKTtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxuXG59KSk7XG4iLCIvKiFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuICogQGxpY2Vuc2UgZXM1LXNoaW0gQ29weXJpZ2h0IDIwMDktMjAxNSBieSBjb250cmlidXRvcnMsIE1JVCBMaWNlbnNlXG4gKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG4vLyB2aW06IHRzPTQgc3RzPTQgc3c9NCBleHBhbmR0YWJcblxuLy8gQWRkIHNlbWljb2xvbiB0byBwcmV2ZW50IElJRkUgZnJvbSBiZWluZyBwYXNzZWQgYXMgYXJndW1lbnQgdG8gY29uY2F0ZW5hdGVkIGNvZGUuXG47XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvdGVtcGxhdGVzL3JldHVybkV4cG9ydHMuanNcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qIGdsb2JhbCBkZWZpbmUsIGV4cG9ydHMsIG1vZHVsZSAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEJyaW5ncyBhbiBlbnZpcm9ubWVudCBhcyBjbG9zZSB0byBFQ01BU2NyaXB0IDUgY29tcGxpYW5jZVxuICAgICAqIGFzIGlzIHBvc3NpYmxlIHdpdGggdGhlIGZhY2lsaXRpZXMgb2YgZXJzdHdoaWxlIGVuZ2luZXMuXG4gICAgICpcbiAgICAgKiBBbm5vdGF0ZWQgRVM1OiBodHRwOi8vZXM1LmdpdGh1Yi5jb20vIChzcGVjaWZpYyBsaW5rcyBiZWxvdylcbiAgICAgKiBFUzUgU3BlYzogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL3B1YmxpY2F0aW9ucy9maWxlcy9FQ01BLVNUL0VjbWEtMjYyLnBkZlxuICAgICAqIFJlcXVpcmVkIHJlYWRpbmc6IGh0dHA6Ly9qYXZhc2NyaXB0d2VibG9nLndvcmRwcmVzcy5jb20vMjAxMS8xMi8wNS9leHRlbmRpbmctamF2YXNjcmlwdC1uYXRpdmVzL1xuICAgICAqL1xuXG4gICAgLy8gU2hvcnRjdXQgdG8gYW4gb2Z0ZW4gYWNjZXNzZWQgcHJvcGVydGllcywgaW4gb3JkZXIgdG8gYXZvaWQgbXVsdGlwbGVcbiAgICAvLyBkZXJlZmVyZW5jZSB0aGF0IGNvc3RzIHVuaXZlcnNhbGx5LiBUaGlzIGFsc28gaG9sZHMgYSByZWZlcmVuY2UgdG8ga25vd24tZ29vZFxuICAgIC8vIGZ1bmN0aW9ucy5cbiAgICB2YXIgJEFycmF5ID0gQXJyYXk7XG4gICAgdmFyIEFycmF5UHJvdG90eXBlID0gJEFycmF5LnByb3RvdHlwZTtcbiAgICB2YXIgJE9iamVjdCA9IE9iamVjdDtcbiAgICB2YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7XG4gICAgdmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xuICAgIHZhciBGdW5jdGlvblByb3RvdHlwZSA9ICRGdW5jdGlvbi5wcm90b3R5cGU7XG4gICAgdmFyICRTdHJpbmcgPSBTdHJpbmc7XG4gICAgdmFyIFN0cmluZ1Byb3RvdHlwZSA9ICRTdHJpbmcucHJvdG90eXBlO1xuICAgIHZhciAkTnVtYmVyID0gTnVtYmVyO1xuICAgIHZhciBOdW1iZXJQcm90b3R5cGUgPSAkTnVtYmVyLnByb3RvdHlwZTtcbiAgICB2YXIgYXJyYXlfc2xpY2UgPSBBcnJheVByb3RvdHlwZS5zbGljZTtcbiAgICB2YXIgYXJyYXlfc3BsaWNlID0gQXJyYXlQcm90b3R5cGUuc3BsaWNlO1xuICAgIHZhciBhcnJheV9wdXNoID0gQXJyYXlQcm90b3R5cGUucHVzaDtcbiAgICB2YXIgYXJyYXlfdW5zaGlmdCA9IEFycmF5UHJvdG90eXBlLnVuc2hpZnQ7XG4gICAgdmFyIGFycmF5X2NvbmNhdCA9IEFycmF5UHJvdG90eXBlLmNvbmNhdDtcbiAgICB2YXIgYXJyYXlfam9pbiA9IEFycmF5UHJvdG90eXBlLmpvaW47XG4gICAgdmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuICAgIHZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xuICAgIHZhciBtYXggPSBNYXRoLm1heDtcbiAgICB2YXIgbWluID0gTWF0aC5taW47XG5cbiAgICAvLyBIYXZpbmcgYSB0b1N0cmluZyBsb2NhbCB2YXJpYWJsZSBuYW1lIGJyZWFrcyBpbiBPcGVyYSBzbyB1c2UgdG9fc3RyaW5nLlxuICAgIHZhciB0b19zdHJpbmcgPSBPYmplY3RQcm90b3R5cGUudG9TdHJpbmc7XG5cbiAgICAvKiBnbG9iYWwgU3ltYm9sICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgb25lLXZhci1kZWNsYXJhdGlvbi1wZXItbGluZSwgbm8tcmVkZWNsYXJlLCBtYXgtc3RhdGVtZW50cy1wZXItbGluZSAqL1xuICAgIHZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG4gICAgdmFyIGlzQ2FsbGFibGU7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1jYWxsYWJsZSAqLyB2YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzIC8sIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGbih2YWx1ZSkgeyB0cnkgeyB2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpOyB2YXIgc2luZ2xlU3RyaXBwZWQgPSBmblN0ci5yZXBsYWNlKC9cXC9cXC8uKlxcbi9nLCAnJyk7IHZhciBtdWx0aVN0cmlwcGVkID0gc2luZ2xlU3RyaXBwZWQucmVwbGFjZSgvXFwvXFwqWy5cXHNcXFNdKlxcKlxcLy9nLCAnJyk7IHZhciBzcGFjZVN0cmlwcGVkID0gbXVsdGlTdHJpcHBlZC5yZXBsYWNlKC9cXG4vbWcsICcgJykucmVwbGFjZSgvIHsyfS9nLCAnICcpOyByZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KHNwYWNlU3RyaXBwZWQpOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgLyogbm90IGEgZnVuY3Rpb24gKi8gfSB9LCB0cnlGdW5jdGlvbk9iamVjdCA9IGZ1bmN0aW9uIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKSB7IHRyeSB7IGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfSBmblRvU3RyLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsIGdlbkNsYXNzID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJywgaXNDYWxsYWJsZSA9IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHsgaWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH0gaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfSBpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfSBpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH0gdmFyIHN0ckNsYXNzID0gdG9fc3RyaW5nLmNhbGwodmFsdWUpOyByZXR1cm4gc3RyQ2xhc3MgPT09IGZuQ2xhc3MgfHwgc3RyQ2xhc3MgPT09IGdlbkNsYXNzOyB9O1xuXG4gICAgdmFyIGlzUmVnZXg7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1yZWdleCAqLyB2YXIgcmVnZXhFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjLCB0cnlSZWdleEV4ZWMgPSBmdW5jdGlvbiB0cnlSZWdleEV4ZWModmFsdWUpIHsgdHJ5IHsgcmVnZXhFeGVjLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgcmVnZXhDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nOyBpc1JlZ2V4ID0gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkgeyBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH0gcmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5UmVnZXhFeGVjKHZhbHVlKSA6IHRvX3N0cmluZy5jYWxsKHZhbHVlKSA9PT0gcmVnZXhDbGFzczsgfTtcbiAgICB2YXIgaXNTdHJpbmc7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1zdHJpbmcgKi8gdmFyIHN0clZhbHVlID0gU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mLCB0cnlTdHJpbmdPYmplY3QgPSBmdW5jdGlvbiB0cnlTdHJpbmdPYmplY3QodmFsdWUpIHsgdHJ5IHsgc3RyVmFsdWUuY2FsbCh2YWx1ZSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9LCBzdHJpbmdDbGFzcyA9ICdbb2JqZWN0IFN0cmluZ10nOyBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7IGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7IHJldHVybiB0cnVlOyB9IGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfSByZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlTdHJpbmdPYmplY3QodmFsdWUpIDogdG9fc3RyaW5nLmNhbGwodmFsdWUpID09PSBzdHJpbmdDbGFzczsgfTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG9uZS12YXItZGVjbGFyYXRpb24tcGVyLWxpbmUsIG5vLXJlZGVjbGFyZSwgbWF4LXN0YXRlbWVudHMtcGVyLWxpbmUgKi9cblxuICAgIC8qIGlubGluZWQgZnJvbSBodHRwOi8vbnBtanMuY29tL2RlZmluZS1wcm9wZXJ0aWVzICovXG4gICAgdmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSAkT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgICAgICAkT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqLnggPT09IG9iajtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIEVTMyAqL1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSgpKTtcbiAgICB2YXIgZGVmaW5lUHJvcGVydGllcyA9IChmdW5jdGlvbiAoaGFzKSB7XG4gICAgICAgIC8vIERlZmluZSBjb25maWd1cmFibGUsIHdyaXRhYmxlLCBhbmQgbm9uLWVudW1lcmFibGUgcHJvcHNcbiAgICAgICAgLy8gaWYgdGhleSBkb24ndCBleGlzdC5cbiAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5O1xuICAgICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBtZXRob2QsIGZvcmNlQXNzaWduKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZXRob2RcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZvcmNlQXNzaWduICYmIChuYW1lIGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3RbbmFtZV0gPSBtZXRob2Q7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKG9iamVjdCwgbWFwLCBmb3JjZUFzc2lnbikge1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBtYXApIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzLmNhbGwobWFwLCBuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIG1hcFtuYW1lXSwgZm9yY2VBc3NpZ24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KE9iamVjdFByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSkpO1xuXG4gICAgLy9cbiAgICAvLyBVdGlsXG4gICAgLy8gPT09PT09XG4gICAgLy9cblxuICAgIC8qIHJlcGxhY2VhYmxlIHdpdGggaHR0cHM6Ly9ucG1qcy5jb20vcGFja2FnZS9lcy1hYnN0cmFjdCAvaGVscGVycy9pc1ByaW1pdGl2ZSAqL1xuICAgIHZhciBpc1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKGlucHV0KSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IG51bGwgfHwgKHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGUgIT09ICdmdW5jdGlvbicpO1xuICAgIH07XG5cbiAgICB2YXIgaXNBY3R1YWxOYU4gPSAkTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIGlzQWN0dWFsTmFOKHgpIHtcbiAgICAgICAgcmV0dXJuIHggIT09IHg7XG4gICAgfTtcblxuICAgIHZhciBFUyA9IHtcbiAgICAgICAgLy8gRVM1IDkuNFxuICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3g5LjRcbiAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vdG8taW50ZWdlclxuICAgICAgICAvKiByZXBsYWNlYWJsZSB3aXRoIGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZXMtYWJzdHJhY3QgRVM1LlRvSW50ZWdlciAqL1xuICAgICAgICBUb0ludGVnZXI6IGZ1bmN0aW9uIFRvSW50ZWdlcihudW0pIHtcbiAgICAgICAgICAgIHZhciBuID0gK251bTtcbiAgICAgICAgICAgIGlmIChpc0FjdHVhbE5hTihuKSkge1xuICAgICAgICAgICAgICAgIG4gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuICE9PSAwICYmIG4gIT09ICgxIC8gMCkgJiYgbiAhPT0gLSgxIC8gMCkpIHtcbiAgICAgICAgICAgICAgICBuID0gKG4gPiAwIHx8IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IEVTNS5Ub1ByaW1pdGl2ZSAqL1xuICAgICAgICBUb1ByaW1pdGl2ZTogZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQpIHtcbiAgICAgICAgICAgIHZhciB2YWwsIHZhbHVlT2YsIHRvU3RyO1xuICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlT2YgPSBpbnB1dC52YWx1ZU9mO1xuICAgICAgICAgICAgaWYgKGlzQ2FsbGFibGUodmFsdWVPZikpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSB2YWx1ZU9mLmNhbGwoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9TdHIgPSBpbnB1dC50b1N0cmluZztcbiAgICAgICAgICAgIGlmIChpc0NhbGxhYmxlKHRvU3RyKSkge1xuICAgICAgICAgICAgICAgIHZhbCA9IHRvU3RyLmNhbGwoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEVTNSA5LjlcbiAgICAgICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4OS45XG4gICAgICAgIC8qIHJlcGxhY2VhYmxlIHdpdGggaHR0cHM6Ly9ucG1qcy5jb20vcGFja2FnZS9lcy1hYnN0cmFjdCBFUzUuVG9PYmplY3QgKi9cbiAgICAgICAgVG9PYmplY3Q6IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICBpZiAobyA9PSBudWxsKSB7IC8vIHRoaXMgbWF0Y2hlcyBib3RoIG51bGwgYW5kIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgbyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJE9iamVjdChvKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiByZXBsYWNlYWJsZSB3aXRoIGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZXMtYWJzdHJhY3QgRVM1LlRvVWludDMyICovXG4gICAgICAgIFRvVWludDMyOiBmdW5jdGlvbiBUb1VpbnQzMih4KSB7XG4gICAgICAgICAgICByZXR1cm4geCA+Pj4gMDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvL1xuICAgIC8vIEZ1bmN0aW9uXG4gICAgLy8gPT09PT09PT1cbiAgICAvL1xuXG4gICAgLy8gRVMtNSAxNS4zLjQuNVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjMuNC41XG5cbiAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuXG4gICAgZGVmaW5lUHJvcGVydGllcyhGdW5jdGlvblByb3RvdHlwZSwge1xuICAgICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKHRoYXQpIHsgLy8gLmxlbmd0aCBpcyAxXG4gICAgICAgICAgICAvLyAxLiBMZXQgVGFyZ2V0IGJlIHRoZSB0aGlzIHZhbHVlLlxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgICAgICAgICAvLyAyLiBJZiBJc0NhbGxhYmxlKFRhcmdldCkgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnICsgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDMuIExldCBBIGJlIGEgbmV3IChwb3NzaWJseSBlbXB0eSkgaW50ZXJuYWwgbGlzdCBvZiBhbGwgb2YgdGhlXG4gICAgICAgICAgICAvLyAgIGFyZ3VtZW50IHZhbHVlcyBwcm92aWRlZCBhZnRlciB0aGlzQXJnIChhcmcxLCBhcmcyIGV0YyksIGluIG9yZGVyLlxuICAgICAgICAgICAgLy8gWFhYIHNsaWNlZEFyZ3Mgd2lsbCBzdGFuZCBpbiBmb3IgXCJBXCIgaWYgdXNlZFxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7IC8vIGZvciBub3JtYWwgY2FsbFxuICAgICAgICAgICAgLy8gNC4gTGV0IEYgYmUgYSBuZXcgbmF0aXZlIEVDTUFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAgICAgLy8gMTEuIFNldCB0aGUgW1tQcm90b3R5cGVdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIHRvIHRoZSBzdGFuZGFyZFxuICAgICAgICAgICAgLy8gICBidWlsdC1pbiBGdW5jdGlvbiBwcm90b3R5cGUgb2JqZWN0IGFzIHNwZWNpZmllZCBpbiAxNS4zLjMuMS5cbiAgICAgICAgICAgIC8vIDEyLiBTZXQgdGhlIFtbQ2FsbF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgICAgICAvLyAgIDE1LjMuNC41LjEuXG4gICAgICAgICAgICAvLyAxMy4gU2V0IHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgICAgICAvLyAgIDE1LjMuNC41LjIuXG4gICAgICAgICAgICAvLyAxNC4gU2V0IHRoZSBbW0hhc0luc3RhbmNlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgICAgIC8vICAgMTUuMy40LjUuMy5cbiAgICAgICAgICAgIHZhciBib3VuZDtcbiAgICAgICAgICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIDE1LjMuNC41LjIgW1tDb25zdHJ1Y3RdXVxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gRiB0aGF0IHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBiaW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gbGlzdCBvZiBhcmd1bWVudHMgRXh0cmFBcmdzLCB0aGUgZm9sbG93aW5nIHN0ZXBzIGFyZSB0YWtlbjpcbiAgICAgICAgICAgICAgICAgICAgLy8gMS4gTGV0IHRhcmdldCBiZSB0aGUgdmFsdWUgb2YgRidzIFtbVGFyZ2V0RnVuY3Rpb25dXVxuICAgICAgICAgICAgICAgICAgICAvLyAgIGludGVybmFsIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAgICAvLyAyLiBJZiB0YXJnZXQgaGFzIG5vIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kLCBhXG4gICAgICAgICAgICAgICAgICAgIC8vICAgVHlwZUVycm9yIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICAgICAgICAgICAgICAgIC8vIDMuIExldCBib3VuZEFyZ3MgYmUgdGhlIHZhbHVlIG9mIEYncyBbW0JvdW5kQXJnc11dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbGlzdCBib3VuZEFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIgZm9sbG93ZWQgYnkgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAgICAgLy8gICB2YWx1ZXMgYXMgdGhlIGxpc3QgRXh0cmFBcmdzIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgICAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbWV0aG9kIG9mIHRhcmdldCBwcm92aWRpbmcgYXJncyBhcyB0aGUgYXJndW1lbnRzLlxuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhcHBseS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X2NvbmNhdC5jYWxsKGFyZ3MsIGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gMTUuMy40LjUuMSBbW0NhbGxdXVxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2Qgb2YgYSBmdW5jdGlvbiBvYmplY3QsIEYsXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBiaW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB2YWx1ZSBhbmQgYSBsaXN0IG9mIGFyZ3VtZW50cyBFeHRyYUFyZ3MsIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RlcHMgYXJlIHRha2VuOlxuICAgICAgICAgICAgICAgICAgICAvLyAxLiBMZXQgYm91bmRBcmdzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZEFyZ3NdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAgICAvLyAyLiBMZXQgYm91bmRUaGlzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZFRoaXNdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAgICAvLyAzLiBMZXQgdGFyZ2V0IGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tUYXJnZXRGdW5jdGlvbl1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbGlzdCBib3VuZEFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIgZm9sbG93ZWQgYnkgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAgICAgLy8gICB2YWx1ZXMgYXMgdGhlIGxpc3QgRXh0cmFBcmdzIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgICAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2RcbiAgICAgICAgICAgICAgICAgICAgLy8gICBvZiB0YXJnZXQgcHJvdmlkaW5nIGJvdW5kVGhpcyBhcyB0aGUgdGhpcyB2YWx1ZSBhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwcm92aWRpbmcgYXJncyBhcyB0aGUgYXJndW1lbnRzLlxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGVxdWl2OiB0YXJnZXQuY2FsbCh0aGlzLCAuLi5ib3VuZEFyZ3MsIC4uLmFyZ3MpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcHBseS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X2NvbmNhdC5jYWxsKGFyZ3MsIGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gMTUuIElmIHRoZSBbW0NsYXNzXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgVGFyZ2V0IGlzIFwiRnVuY3Rpb25cIiwgdGhlblxuICAgICAgICAgICAgLy8gICAgIGEuIExldCBMIGJlIHRoZSBsZW5ndGggcHJvcGVydHkgb2YgVGFyZ2V0IG1pbnVzIHRoZSBsZW5ndGggb2YgQS5cbiAgICAgICAgICAgIC8vICAgICBiLiBTZXQgdGhlIGxlbmd0aCBvd24gcHJvcGVydHkgb2YgRiB0byBlaXRoZXIgMCBvciBMLCB3aGljaGV2ZXIgaXNcbiAgICAgICAgICAgIC8vICAgICAgIGxhcmdlci5cbiAgICAgICAgICAgIC8vIDE2LiBFbHNlIHNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIDAuXG5cbiAgICAgICAgICAgIHZhciBib3VuZExlbmd0aCA9IG1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuXG4gICAgICAgICAgICAvLyAxNy4gU2V0IHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gdGhlIHZhbHVlc1xuICAgICAgICAgICAgLy8gICBzcGVjaWZpZWQgaW4gMTUuMy41LjEuXG4gICAgICAgICAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcnJheV9wdXNoLmNhbGwoYm91bmRBcmdzLCAnJCcgKyBpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gWFhYIEJ1aWxkIGEgZHluYW1pYyBmdW5jdGlvbiB3aXRoIGRlc2lyZWQgYW1vdW50IG9mIGFyZ3VtZW50cyBpcyB0aGUgb25seVxuICAgICAgICAgICAgLy8gd2F5IHRvIHNldCB0aGUgbGVuZ3RoIHByb3BlcnR5IG9mIGEgZnVuY3Rpb24uXG4gICAgICAgICAgICAvLyBJbiBlbnZpcm9ubWVudHMgd2hlcmUgQ29udGVudCBTZWN1cml0eSBQb2xpY2llcyBlbmFibGVkIChDaHJvbWUgZXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIC8vIGZvciBleC4pIGFsbCB1c2Ugb2YgZXZhbCBvciBGdW5jdGlvbiBjb3N0cnVjdG9yIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgICAgICAvLyBIb3dldmVyIGluIGFsbCBvZiB0aGVzZSBlbnZpcm9ubWVudHMgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgZXhpc3RzXG4gICAgICAgICAgICAvLyBhbmQgc28gdGhpcyBjb2RlIHdpbGwgbmV2ZXIgYmUgZXhlY3V0ZWQuXG4gICAgICAgICAgICBib3VuZCA9ICRGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGFycmF5X2pvaW4uY2FsbChib3VuZEFyZ3MsICcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgICAgICAgICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICAgICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIGRhbmdsaW5nIHJlZmVyZW5jZXMuXG4gICAgICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVE9ET1xuICAgICAgICAgICAgLy8gMTguIFNldCB0aGUgW1tFeHRlbnNpYmxlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiB0byB0cnVlLlxuXG4gICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICAvLyAxOS4gTGV0IHRocm93ZXIgYmUgdGhlIFtbVGhyb3dUeXBlRXJyb3JdXSBmdW5jdGlvbiBPYmplY3QgKDEzLjIuMykuXG4gICAgICAgICAgICAvLyAyMC4gQ2FsbCB0aGUgW1tEZWZpbmVPd25Qcm9wZXJ0eV1dIGludGVybmFsIG1ldGhvZCBvZiBGIHdpdGhcbiAgICAgICAgICAgIC8vICAgYXJndW1lbnRzIFwiY2FsbGVyXCIsIFByb3BlcnR5RGVzY3JpcHRvciB7W1tHZXRdXTogdGhyb3dlciwgW1tTZXRdXTpcbiAgICAgICAgICAgIC8vICAgdGhyb3dlciwgW1tFbnVtZXJhYmxlXV06IGZhbHNlLCBbW0NvbmZpZ3VyYWJsZV1dOiBmYWxzZX0sIGFuZFxuICAgICAgICAgICAgLy8gICBmYWxzZS5cbiAgICAgICAgICAgIC8vIDIxLiBDYWxsIHRoZSBbW0RlZmluZU93blByb3BlcnR5XV0gaW50ZXJuYWwgbWV0aG9kIG9mIEYgd2l0aFxuICAgICAgICAgICAgLy8gICBhcmd1bWVudHMgXCJhcmd1bWVudHNcIiwgUHJvcGVydHlEZXNjcmlwdG9yIHtbW0dldF1dOiB0aHJvd2VyLFxuICAgICAgICAgICAgLy8gICBbW1NldF1dOiB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSxcbiAgICAgICAgICAgIC8vICAgYW5kIGZhbHNlLlxuXG4gICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICAvLyBOT1RFIEZ1bmN0aW9uIG9iamVjdHMgY3JlYXRlZCB1c2luZyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBkbyBub3RcbiAgICAgICAgICAgIC8vIGhhdmUgYSBwcm90b3R5cGUgcHJvcGVydHkgb3IgdGhlIFtbQ29kZV1dLCBbW0Zvcm1hbFBhcmFtZXRlcnNdXSwgYW5kXG4gICAgICAgICAgICAvLyBbW1Njb3BlXV0gaW50ZXJuYWwgcHJvcGVydGllcy5cbiAgICAgICAgICAgIC8vIFhYWCBjYW4ndCBkZWxldGUgcHJvdG90eXBlIGluIHB1cmUtanMuXG5cbiAgICAgICAgICAgIC8vIDIyLiBSZXR1cm4gRi5cbiAgICAgICAgICAgIHJldHVybiBib3VuZDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gX1BsZWFzZSBub3RlOiBTaG9ydGN1dHMgYXJlIGRlZmluZWQgYWZ0ZXIgYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBhcyB3ZVxuICAgIC8vIHVzZSBpdCBpbiBkZWZpbmluZyBzaG9ydGN1dHMuXG4gICAgdmFyIG93bnMgPSBjYWxsLmJpbmQoT2JqZWN0UHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiAgICB2YXIgdG9TdHIgPSBjYWxsLmJpbmQoT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgICB2YXIgYXJyYXlTbGljZSA9IGNhbGwuYmluZChhcnJheV9zbGljZSk7XG4gICAgdmFyIGFycmF5U2xpY2VBcHBseSA9IGFwcGx5LmJpbmQoYXJyYXlfc2xpY2UpO1xuICAgIHZhciBzdHJTbGljZSA9IGNhbGwuYmluZChTdHJpbmdQcm90b3R5cGUuc2xpY2UpO1xuICAgIHZhciBzdHJTcGxpdCA9IGNhbGwuYmluZChTdHJpbmdQcm90b3R5cGUuc3BsaXQpO1xuICAgIHZhciBzdHJJbmRleE9mID0gY2FsbC5iaW5kKFN0cmluZ1Byb3RvdHlwZS5pbmRleE9mKTtcbiAgICB2YXIgcHVzaENhbGwgPSBjYWxsLmJpbmQoYXJyYXlfcHVzaCk7XG4gICAgdmFyIGlzRW51bSA9IGNhbGwuYmluZChPYmplY3RQcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpO1xuICAgIHZhciBhcnJheVNvcnQgPSBjYWxsLmJpbmQoQXJyYXlQcm90b3R5cGUuc29ydCk7XG5cbiAgICAvL1xuICAgIC8vIEFycmF5XG4gICAgLy8gPT09PT1cbiAgICAvL1xuXG4gICAgdmFyIGlzQXJyYXkgPSAkQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KG9iaikge1xuICAgICAgICByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9O1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xM1xuICAgIC8vIFJldHVybiBsZW4rYXJnQ291bnQuXG4gICAgLy8gW2J1Z2ZpeCwgaWVsdDhdXG4gICAgLy8gSUUgPCA4IGJ1ZzogW10udW5zaGlmdCgwKSA9PT0gdW5kZWZpbmVkIGJ1dCBzaG91bGQgYmUgXCIxXCJcbiAgICB2YXIgaGFzVW5zaGlmdFJldHVyblZhbHVlQnVnID0gW10udW5zaGlmdCgwKSAhPT0gMTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHVuc2hpZnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFycmF5X3Vuc2hpZnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH0sIGhhc1Vuc2hpZnRSZXR1cm5WYWx1ZUJ1Zyk7XG5cbiAgICAvLyBFUzUgMTUuNC4zLjJcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjMuMlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2lzQXJyYXlcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKCRBcnJheSwgeyBpc0FycmF5OiBpc0FycmF5IH0pO1xuXG4gICAgLy8gVGhlIElzQ2FsbGFibGUoKSBjaGVjayBpbiB0aGUgQXJyYXkgZnVuY3Rpb25zXG4gICAgLy8gaGFzIGJlZW4gcmVwbGFjZWQgd2l0aCBhIHN0cmljdCBjaGVjayBvbiB0aGVcbiAgICAvLyBpbnRlcm5hbCBjbGFzcyBvZiB0aGUgb2JqZWN0IHRvIHRyYXAgY2FzZXMgd2hlcmVcbiAgICAvLyB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gd2FzIGFjdHVhbGx5IGEgcmVndWxhclxuICAgIC8vIGV4cHJlc3Npb24gbGl0ZXJhbCwgd2hpY2ggaW4gVjggYW5kXG4gICAgLy8gSmF2YVNjcmlwdENvcmUgaXMgYSB0eXBlb2YgXCJmdW5jdGlvblwiLiAgT25seSBpblxuICAgIC8vIFY4IGFyZSByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbHMgcGVybWl0dGVkIGFzXG4gICAgLy8gcmVkdWNlIHBhcmFtZXRlcnMsIHNvIGl0IGlzIGRlc2lyYWJsZSBpbiB0aGVcbiAgICAvLyBnZW5lcmFsIGNhc2UgZm9yIHRoZSBzaGltIHRvIG1hdGNoIHRoZSBtb3JlXG4gICAgLy8gc3RyaWN0IGFuZCBjb21tb24gYmVoYXZpb3Igb2YgcmVqZWN0aW5nIHJlZ3VsYXJcbiAgICAvLyBleHByZXNzaW9ucy5cblxuICAgIC8vIEVTNSAxNS40LjQuMThcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMThcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9hcnJheS9mb3JFYWNoXG5cbiAgICAvLyBDaGVjayBmYWlsdXJlIG9mIGJ5LWluZGV4IGFjY2VzcyBvZiBzdHJpbmcgY2hhcmFjdGVycyAoSUUgPCA5KVxuICAgIC8vIGFuZCBmYWlsdXJlIG9mIGAwIGluIGJveGVkU3RyaW5nYCAoUmhpbm8pXG4gICAgdmFyIGJveGVkU3RyaW5nID0gJE9iamVjdCgnYScpO1xuICAgIHZhciBzcGxpdFN0cmluZyA9IGJveGVkU3RyaW5nWzBdICE9PSAnYScgfHwgISgwIGluIGJveGVkU3RyaW5nKTtcblxuICAgIHZhciBwcm9wZXJseUJveGVzQ29udGV4dCA9IGZ1bmN0aW9uIHByb3Blcmx5Qm94ZWQobWV0aG9kKSB7XG4gICAgICAgIC8vIENoZWNrIG5vZGUgMC42LjIxIGJ1ZyB3aGVyZSB0aGlyZCBwYXJhbWV0ZXIgaXMgbm90IGJveGVkXG4gICAgICAgIHZhciBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gdHJ1ZTtcbiAgICAgICAgdmFyIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0cnVlO1xuICAgICAgICB2YXIgdGhyZXdFeGNlcHRpb24gPSBmYWxzZTtcbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBtZXRob2QuY2FsbCgnZm9vJywgZnVuY3Rpb24gKF8sIF9fLCBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWV0aG9kLmNhbGwoWzFdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJseUJveGVzU3RyaWN0ID0gdHlwZW9mIHRoaXMgPT09ICdzdHJpbmcnO1xuICAgICAgICAgICAgICAgIH0sICd4Jyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyZXdFeGNlcHRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIW1ldGhvZCAmJiAhdGhyZXdFeGNlcHRpb24gJiYgcHJvcGVybHlCb3hlc05vblN0cmljdCAmJiBwcm9wZXJseUJveGVzU3RyaWN0O1xuICAgIH07XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbi8qLCB0aGlzQXJnKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBUO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5mb3JFYWNoIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggY2FsbCwgcGFzc2luZyBhcmd1bWVudHM6XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnRleHQsIHByb3BlcnR5IHZhbHVlLCBwcm9wZXJ0eSBrZXksIHRoaXNBcmcgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrZm4oc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrZm4uY2FsbChULCBzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgIXByb3Blcmx5Qm94ZXNDb250ZXh0KEFycmF5UHJvdG90eXBlLmZvckVhY2gpKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTlcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTlcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9Db3JlX0phdmFTY3JpcHRfMS41X1JlZmVyZW5jZS9PYmplY3RzL0FycmF5L21hcFxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbi8qLCB0aGlzQXJnKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9ICRBcnJheShsZW5ndGgpO1xuICAgICAgICAgICAgdmFyIFQ7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBUID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLm1hcCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBUID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfSwgIXByb3Blcmx5Qm94ZXNDb250ZXh0KEFycmF5UHJvdG90eXBlLm1hcCkpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4yMFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4yMFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfUmVmZXJlbmNlL09iamVjdHMvQXJyYXkvZmlsdGVyXG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICB2YXIgVDtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmlsdGVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlbGZbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFja2ZuKHZhbHVlLCBpLCBvYmplY3QpIDogY2FsbGJhY2tmbi5jYWxsKFQsIHZhbHVlLCBpLCBvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZmlsdGVyKSk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjE2XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjE2XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZXZlcnlcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgVDtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZXZlcnkgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmICEodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpIDogY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5ldmVyeSkpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xN1xuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xN1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NvbWVcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbi8qLCB0aGlzQXJnICovKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBUO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5zb21lIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZiAmJiAodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpIDogY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5zb21lKSk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjIxXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjIxXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9yZWR1Y2VcbiAgICB2YXIgcmVkdWNlQ29lcmNlc1RvT2JqZWN0ID0gZmFsc2U7XG4gICAgaWYgKEFycmF5UHJvdG90eXBlLnJlZHVjZSkge1xuICAgICAgICByZWR1Y2VDb2VyY2VzVG9PYmplY3QgPSB0eXBlb2YgQXJyYXlQcm90b3R5cGUucmVkdWNlLmNhbGwoJ2VzNScsIGZ1bmN0aW9uIChfLCBfXywgX19fLCBsaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgfSkgPT09ICdvYmplY3QnO1xuICAgIH1cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4vKiwgaW5pdGlhbFZhbHVlKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnJlZHVjZSBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbm8gdmFsdWUgdG8gcmV0dXJuIGlmIG5vIGluaXRpYWwgdmFsdWUgYW5kIGFuIGVtcHR5IGFycmF5XG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGZbaSsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgYXJyYXkgY29udGFpbnMgbm8gdmFsdWVzLCBubyBpbml0aWFsIHZhbHVlIHRvIHJldHVyblxuICAgICAgICAgICAgICAgICAgICBpZiAoKytpID49IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrZm4ocmVzdWx0LCBzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0sICFyZWR1Y2VDb2VyY2VzVG9PYmplY3QpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4yMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4yMlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfUmVmZXJlbmNlL09iamVjdHMvQXJyYXkvcmVkdWNlUmlnaHRcbiAgICB2YXIgcmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QgPSBmYWxzZTtcbiAgICBpZiAoQXJyYXlQcm90b3R5cGUucmVkdWNlUmlnaHQpIHtcbiAgICAgICAgcmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QgPSB0eXBlb2YgQXJyYXlQcm90b3R5cGUucmVkdWNlUmlnaHQuY2FsbCgnZXM1JywgZnVuY3Rpb24gKF8sIF9fLCBfX18sIGxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICB9KSA9PT0gJ29iamVjdCc7XG4gICAgfVxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4vKiwgaW5pdGlhbCovKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbm8gdmFsdWUgdG8gcmV0dXJuIGlmIG5vIGluaXRpYWwgdmFsdWUsIGVtcHR5IGFycmF5XG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2VSaWdodCBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICAgIHZhciBpID0gbGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VsZltpLS1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBhcnJheSBjb250YWlucyBubyB2YWx1ZXMsIG5vIGluaXRpYWwgdmFsdWUgdG8gcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIGlmICgtLWkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2VSaWdodCBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFja2ZuKHJlc3VsdCwgc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChpLS0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfSwgIXJlZHVjZVJpZ2h0Q29lcmNlc1RvT2JqZWN0KTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTRcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mXG4gICAgdmFyIGhhc0ZpcmVmb3gySW5kZXhPZkJ1ZyA9IEFycmF5UHJvdG90eXBlLmluZGV4T2YgJiYgWzAsIDFdLmluZGV4T2YoMSwgMikgIT09IC0xO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50LyosIGZyb21JbmRleCAqLykge1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcblxuICAgICAgICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaSA9IEVTLlRvSW50ZWdlcihhcmd1bWVudHNbMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBoYW5kbGUgbmVnYXRpdmUgaW5kaWNlc1xuICAgICAgICAgICAgaSA9IGkgPj0gMCA/IGkgOiBtYXgoMCwgbGVuZ3RoICsgaSk7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZiAmJiBzZWxmW2ldID09PSBzZWFyY2hFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH0sIGhhc0ZpcmVmb3gySW5kZXhPZkJ1Zyk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjE1XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjE1XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbGFzdEluZGV4T2ZcbiAgICB2YXIgaGFzRmlyZWZveDJMYXN0SW5kZXhPZkJ1ZyA9IEFycmF5UHJvdG90eXBlLmxhc3RJbmRleE9mICYmIFswLCAxXS5sYXN0SW5kZXhPZigwLCAtMykgIT09IC0xO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQvKiwgZnJvbUluZGV4ICovKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGkgPSBsZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaSA9IG1pbihpLCBFUy5Ub0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBoYW5kbGUgbmVnYXRpdmUgaW5kaWNlc1xuICAgICAgICAgICAgaSA9IGkgPj0gMCA/IGkgOiBsZW5ndGggLSBNYXRoLmFicyhpKTtcbiAgICAgICAgICAgIGZvciAoOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYgJiYgc2VhcmNoRWxlbWVudCA9PT0gc2VsZltpXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9LCBoYXNGaXJlZm94Mkxhc3RJbmRleE9mQnVnKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTJcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTJcbiAgICB2YXIgc3BsaWNlTm9vcFJldHVybnNFbXB0eUFycmF5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGEgPSBbMSwgMl07XG4gICAgICAgIHZhciByZXN1bHQgPSBhLnNwbGljZSgpO1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IDIgJiYgaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggPT09IDA7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIC8vIFNhZmFyaSA1LjAgYnVnIHdoZXJlIC5zcGxpY2UoKSByZXR1cm5zIHVuZGVmaW5lZFxuICAgICAgICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlfc3BsaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCAhc3BsaWNlTm9vcFJldHVybnNFbXB0eUFycmF5KTtcblxuICAgIHZhciBzcGxpY2VXb3Jrc1dpdGhFbXB0eU9iamVjdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYmogPSB7fTtcbiAgICAgICAgQXJyYXlQcm90b3R5cGUuc3BsaWNlLmNhbGwob2JqLCAwLCAwLCAxKTtcbiAgICAgICAgcmV0dXJuIG9iai5sZW5ndGggPT09IDE7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gbWF4KEVTLlRvSW50ZWdlcih0aGlzLmxlbmd0aCksIDApO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHR5cGVvZiBkZWxldGVDb3VudCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwoYXJncywgdGhpcy5sZW5ndGggLSBzdGFydCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1sxXSA9IEVTLlRvSW50ZWdlcihkZWxldGVDb3VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycmF5X3NwbGljZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0sICFzcGxpY2VXb3Jrc1dpdGhFbXB0eU9iamVjdCk7XG4gICAgdmFyIHNwbGljZVdvcmtzV2l0aExhcmdlU3BhcnNlQXJyYXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMjk1XG4gICAgICAgIC8vIFNhZmFyaSA3LzggYnJlYWtzIHdpdGggc3BhcnNlIGFycmF5cyBvZiBzaXplIDFlNSBvciBncmVhdGVyXG4gICAgICAgIHZhciBhcnIgPSBuZXcgJEFycmF5KDFlNSk7XG4gICAgICAgIC8vIG5vdGU6IHRoZSBpbmRleCBNVVNUIGJlIDggb3IgbGFyZ2VyIG9yIHRoZSB0ZXN0IHdpbGwgZmFsc2UgcGFzc1xuICAgICAgICBhcnJbOF0gPSAneCc7XG4gICAgICAgIGFyci5zcGxpY2UoMSwgMSk7XG4gICAgICAgIC8vIG5vdGU6IHRoaXMgdGVzdCBtdXN0IGJlIGRlZmluZWQgKmFmdGVyKiB0aGUgaW5kZXhPZiBzaGltXG4gICAgICAgIC8vIHBlciBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzMxM1xuICAgICAgICByZXR1cm4gYXJyLmluZGV4T2YoJ3gnKSA9PT0gNztcbiAgICB9KCkpO1xuICAgIHZhciBzcGxpY2VXb3Jrc1dpdGhTbWFsbFNwYXJzZUFycmF5cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFBlciBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzI5NVxuICAgICAgICAvLyBPcGVyYSAxMi4xNSBicmVha3Mgb24gdGhpcywgbm8gaWRlYSB3aHkuXG4gICAgICAgIHZhciBuID0gMjU2O1xuICAgICAgICB2YXIgYXJyID0gW107XG4gICAgICAgIGFycltuXSA9ICdhJztcbiAgICAgICAgYXJyLnNwbGljZShuICsgMSwgMCwgJ2InKTtcbiAgICAgICAgcmV0dXJuIGFycltuXSA9PT0gJ2EnO1xuICAgIH0oKSk7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpIHtcbiAgICAgICAgICAgIHZhciBPID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgQSA9IFtdO1xuICAgICAgICAgICAgdmFyIGxlbiA9IEVTLlRvVWludDMyKE8ubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZVN0YXJ0ID0gRVMuVG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgICAgIHZhciBhY3R1YWxTdGFydCA9IHJlbGF0aXZlU3RhcnQgPCAwID8gbWF4KChsZW4gKyByZWxhdGl2ZVN0YXJ0KSwgMCkgOiBtaW4ocmVsYXRpdmVTdGFydCwgbGVuKTtcbiAgICAgICAgICAgIHZhciBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgoRVMuVG9JbnRlZ2VyKGRlbGV0ZUNvdW50KSwgMCksIGxlbiAtIGFjdHVhbFN0YXJ0KTtcblxuICAgICAgICAgICAgdmFyIGsgPSAwO1xuICAgICAgICAgICAgdmFyIGZyb207XG4gICAgICAgICAgICB3aGlsZSAoayA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoYWN0dWFsU3RhcnQgKyBrKTtcbiAgICAgICAgICAgICAgICBpZiAob3ducyhPLCBmcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICBBW2tdID0gT1tmcm9tXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgayArPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMik7XG4gICAgICAgICAgICB2YXIgaXRlbUNvdW50ID0gaXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHRvO1xuICAgICAgICAgICAgaWYgKGl0ZW1Db3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgayA9IGFjdHVhbFN0YXJ0O1xuICAgICAgICAgICAgICAgIHZhciBtYXhLID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGsgPCBtYXhLKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb20gPSAkU3RyaW5nKGsgKyBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gJFN0cmluZyhrICsgaXRlbUNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG93bnMoTywgZnJvbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBPW3RvXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBrICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsgPSBsZW47XG4gICAgICAgICAgICAgICAgdmFyIG1pbksgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGl0ZW1Db3VudDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA+IG1pbkspIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE9bayAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBrIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtQ291bnQgPiBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgICAgICAgICAgIGsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA+IGFjdHVhbFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb20gPSAkU3RyaW5nKGsgKyBhY3R1YWxEZWxldGVDb3VudCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB0byA9ICRTdHJpbmcoayArIGl0ZW1Db3VudCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ducyhPLCBmcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE9bdG9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGsgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrID0gYWN0dWFsU3RhcnQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgT1trXSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGsgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpdGVtQ291bnQ7XG5cbiAgICAgICAgICAgIHJldHVybiBBO1xuICAgICAgICB9XG4gICAgfSwgIXNwbGljZVdvcmtzV2l0aExhcmdlU3BhcnNlQXJyYXlzIHx8ICFzcGxpY2VXb3Jrc1dpdGhTbWFsbFNwYXJzZUFycmF5cyk7XG5cbiAgICB2YXIgb3JpZ2luYWxKb2luID0gQXJyYXlQcm90b3R5cGUuam9pbjtcbiAgICB2YXIgaGFzU3RyaW5nSm9pbkJ1ZztcbiAgICB0cnkge1xuICAgICAgICBoYXNTdHJpbmdKb2luQnVnID0gQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbCgnMTIzJywgJywnKSAhPT0gJzEsMiwzJztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhc1N0cmluZ0pvaW5CdWcgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaGFzU3RyaW5nSm9pbkJ1Zykge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgICAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgIHZhciBzZXAgPSB0eXBlb2Ygc2VwYXJhdG9yID09PSAndW5kZWZpbmVkJyA/ICcsJyA6IHNlcGFyYXRvcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxKb2luLmNhbGwoaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiB0aGlzLCBzZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBoYXNTdHJpbmdKb2luQnVnKTtcbiAgICB9XG5cbiAgICB2YXIgaGFzSm9pblVuZGVmaW5lZEJ1ZyA9IFsxLCAyXS5qb2luKHVuZGVmaW5lZCkgIT09ICcxLDInO1xuICAgIGlmIChoYXNKb2luVW5kZWZpbmVkQnVnKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcCA9IHR5cGVvZiBzZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnID8gJywnIDogc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEpvaW4uY2FsbCh0aGlzLCBzZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBoYXNKb2luVW5kZWZpbmVkQnVnKTtcbiAgICB9XG5cbiAgICB2YXIgcHVzaFNoaW0gPSBmdW5jdGlvbiBwdXNoKGl0ZW0pIHtcbiAgICAgICAgdmFyIE8gPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgdmFyIG4gPSBFUy5Ub1VpbnQzMihPLmxlbmd0aCk7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBPW24gKyBpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBPLmxlbmd0aCA9IG4gKyBpO1xuICAgICAgICByZXR1cm4gbiArIGk7XG4gICAgfTtcblxuICAgIHZhciBwdXNoSXNOb3RHZW5lcmljID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICB2YXIgcmVzdWx0ID0gQXJyYXkucHJvdG90eXBlLnB1c2guY2FsbChvYmosIHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgIT09IDEgfHwgb2JqLmxlbmd0aCAhPT0gMSB8fCB0eXBlb2Ygb2JqWzBdICE9PSAndW5kZWZpbmVkJyB8fCAhb3ducyhvYmosIDApO1xuICAgIH0oKSk7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBwdXNoOiBmdW5jdGlvbiBwdXNoKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5X3B1c2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwdXNoU2hpbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfSwgcHVzaElzTm90R2VuZXJpYyk7XG5cbiAgICAvLyBUaGlzIGZpeGVzIGEgdmVyeSB3ZWlyZCBidWcgaW4gT3BlcmEgMTAuNiB3aGVuIHB1c2hpbmcgYHVuZGVmaW5lZFxuICAgIHZhciBwdXNoVW5kZWZpbmVkSXNXZWlyZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGFyci5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgIT09IDEgfHwgYXJyLmxlbmd0aCAhPT0gMSB8fCB0eXBlb2YgYXJyWzBdICE9PSAndW5kZWZpbmVkJyB8fCAhb3ducyhhcnIsIDApO1xuICAgIH0oKSk7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwgeyBwdXNoOiBwdXNoU2hpbSB9LCBwdXNoVW5kZWZpbmVkSXNXZWlyZCk7XG5cbiAgICAvLyBFUzUgMTUuMi4zLjE0XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS40LjQuMTBcbiAgICAvLyBGaXggYm94ZWQgc3RyaW5nIGJ1Z1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgc2xpY2U6IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5U2xpY2VBcHBseShhcnIsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9LCBzcGxpdFN0cmluZyk7XG5cbiAgICB2YXIgc29ydElnbm9yZXNOb25GdW5jdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgWzEsIDJdLnNvcnQobnVsbCk7XG4gICAgICAgICAgICBbMSwgMl0uc29ydCh7fSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0oKSk7XG4gICAgdmFyIHNvcnRUaHJvd3NPblJlZ2V4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBhIHByb2JsZW0gaW4gRmlyZWZveCA0LCBpbiB3aGljaCBgdHlwZW9mIC9hLyA9PT0gJ2Z1bmN0aW9uJ2BcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFsxLCAyXS5zb3J0KC9hLyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0oKSk7XG4gICAgdmFyIHNvcnRJZ25vcmVzVW5kZWZpbmVkID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gYXBwbGllcyBpbiBJRSA4LCBmb3Igb25lLlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgWzEsIDJdLnNvcnQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZUZuKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbXBhcmVGbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlTb3J0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNvbXBhcmVGbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuc29ydCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcnJheVNvcnQodGhpcywgY29tcGFyZUZuKTtcbiAgICAgICAgfVxuICAgIH0sIHNvcnRJZ25vcmVzTm9uRnVuY3Rpb25zIHx8ICFzb3J0SWdub3Jlc1VuZGVmaW5lZCB8fCAhc29ydFRocm93c09uUmVnZXgpO1xuXG4gICAgLy9cbiAgICAvLyBPYmplY3RcbiAgICAvLyA9PT09PT1cbiAgICAvL1xuXG4gICAgLy8gRVM1IDE1LjIuMy4xNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4xNFxuXG4gICAgLy8gaHR0cDovL3doYXR0aGVoZWFkc2FpZC5jb20vMjAxMC8xMC9hLXNhZmVyLW9iamVjdC1rZXlzLWNvbXBhdGliaWxpdHktaW1wbGVtZW50YXRpb25cbiAgICB2YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtKHsgJ3RvU3RyaW5nJzogbnVsbCB9LCAndG9TdHJpbmcnKTtcbiAgICB2YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG4gICAgdmFyIGhhc1N0cmluZ0VudW1CdWcgPSAhb3ducygneCcsICcwJyk7XG4gICAgdmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgdmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcbiAgICB9O1xuICAgIHZhciBibGFja2xpc3RlZEtleXMgPSB7XG4gICAgICAgICR3aW5kb3c6IHRydWUsXG4gICAgICAgICRjb25zb2xlOiB0cnVlLFxuICAgICAgICAkcGFyZW50OiB0cnVlLFxuICAgICAgICAkc2VsZjogdHJ1ZSxcbiAgICAgICAgJGZyYW1lOiB0cnVlLFxuICAgICAgICAkZnJhbWVzOiB0cnVlLFxuICAgICAgICAkZnJhbWVFbGVtZW50OiB0cnVlLFxuICAgICAgICAkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuICAgICAgICAkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG4gICAgICAgICRleHRlcm5hbDogdHJ1ZVxuICAgIH07XG4gICAgdmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qIGdsb2JhbHMgd2luZG93ICovXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGsgaW4gd2luZG93KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghYmxhY2tsaXN0ZWRLZXlzWyckJyArIGtdICYmIG93bnMod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0oKSk7XG4gICAgdmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcpIHtcbiAgICAgICAgICAgIHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgZG9udEVudW1zID0gW1xuICAgICAgICAndG9TdHJpbmcnLFxuICAgICAgICAndG9Mb2NhbGVTdHJpbmcnLFxuICAgICAgICAndmFsdWVPZicsXG4gICAgICAgICdoYXNPd25Qcm9wZXJ0eScsXG4gICAgICAgICdpc1Byb3RvdHlwZU9mJyxcbiAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgICAgICAgJ2NvbnN0cnVjdG9yJ1xuICAgIF07XG4gICAgdmFyIGRvbnRFbnVtc0xlbmd0aCA9IGRvbnRFbnVtcy5sZW5ndGg7XG5cbiAgICAvLyB0YWtlbiBkaXJlY3RseSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvaXMtYXJndW1lbnRzL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gICAgLy8gY2FuIGJlIHJlcGxhY2VkIHdpdGggcmVxdWlyZSgnaXMtYXJndW1lbnRzJykgaWYgd2UgZXZlciB1c2UgYSBidWlsZCBwcm9jZXNzIGluc3RlYWRcbiAgICB2YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cih2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuICAgIH07XG4gICAgdmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgdmFsdWUubGVuZ3RoID49IDAgJiZcbiAgICAgICAgICAgICFpc0FycmF5KHZhbHVlKSAmJlxuICAgICAgICAgICAgaXNDYWxsYWJsZSh2YWx1ZS5jYWxsZWUpO1xuICAgIH07XG4gICAgdmFyIGlzQXJndW1lbnRzID0gaXNTdGFuZGFyZEFyZ3VtZW50cyhhcmd1bWVudHMpID8gaXNTdGFuZGFyZEFyZ3VtZW50cyA6IGlzTGVnYWN5QXJndW1lbnRzO1xuXG4gICAgZGVmaW5lUHJvcGVydGllcygkT2JqZWN0LCB7XG4gICAgICAgIGtleXM6IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICAgICAgICB2YXIgaXNGbiA9IGlzQ2FsbGFibGUob2JqZWN0KTtcbiAgICAgICAgICAgIHZhciBpc0FyZ3MgPSBpc0FyZ3VtZW50cyhvYmplY3QpO1xuICAgICAgICAgICAgdmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuICAgICAgICAgICAgdmFyIGlzU3RyID0gaXNPYmplY3QgJiYgaXNTdHJpbmcob2JqZWN0KTtcblxuICAgICAgICAgICAgaWYgKCFpc09iamVjdCAmJiAhaXNGbiAmJiAhaXNBcmdzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGhlS2V5cyA9IFtdO1xuICAgICAgICAgICAgdmFyIHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0ZuO1xuICAgICAgICAgICAgaWYgKChpc1N0ciAmJiBoYXNTdHJpbmdFbnVtQnVnKSB8fCBpc0FyZ3MpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbCh0aGVLZXlzLCAkU3RyaW5nKGkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNBcmdzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBvd25zKG9iamVjdCwgbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKHRoZUtleXMsICRTdHJpbmcobmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzRG9udEVudW1CdWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb250RW51bXNMZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9udEVudW0gPSBkb250RW51bXNbal07XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgb3ducyhvYmplY3QsIGRvbnRFbnVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwodGhlS2V5cywgZG9udEVudW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoZUtleXM7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBrZXlzV29ya3NXaXRoQXJndW1lbnRzID0gJE9iamVjdC5rZXlzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFNhZmFyaSA1LjAgYnVnXG4gICAgICAgIHJldHVybiAkT2JqZWN0LmtleXMoYXJndW1lbnRzKS5sZW5ndGggPT09IDI7XG4gICAgfSgxLCAyKSk7XG4gICAgdmFyIGtleXNIYXNBcmd1bWVudHNMZW5ndGhCdWcgPSAkT2JqZWN0LmtleXMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ0tleXMgPSAkT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggIT09IDEgfHwgYXJnS2V5cy5sZW5ndGggIT09IDEgfHwgYXJnS2V5c1swXSAhPT0gMTtcbiAgICB9KDEpKTtcbiAgICB2YXIgb3JpZ2luYWxLZXlzID0gJE9iamVjdC5rZXlzO1xuICAgIGRlZmluZVByb3BlcnRpZXMoJE9iamVjdCwge1xuICAgICAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxLZXlzKGFycmF5U2xpY2Uob2JqZWN0KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEtleXMob2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sICFrZXlzV29ya3NXaXRoQXJndW1lbnRzIHx8IGtleXNIYXNBcmd1bWVudHNMZW5ndGhCdWcpO1xuXG4gICAgLy9cbiAgICAvLyBEYXRlXG4gICAgLy8gPT09PVxuICAgIC8vXG5cbiAgICB2YXIgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgPSBuZXcgRGF0ZSgtMzUwOTgyNzMyOTYwMDI5MikuZ2V0VVRDTW9udGgoKSAhPT0gMDtcbiAgICB2YXIgYU5lZ2F0aXZlVGVzdERhdGUgPSBuZXcgRGF0ZSgtMTUwOTg0MjI4OTYwMDI5Mik7XG4gICAgdmFyIGFQb3NpdGl2ZVRlc3REYXRlID0gbmV3IERhdGUoMTQ0OTY2MjQwMDAwMCk7XG4gICAgdmFyIGhhc1RvVVRDU3RyaW5nRm9ybWF0QnVnID0gYU5lZ2F0aXZlVGVzdERhdGUudG9VVENTdHJpbmcoKSAhPT0gJ01vbiwgMDEgSmFuIC00NTg3NSAxMTo1OTo1OSBHTVQnO1xuICAgIHZhciBoYXNUb0RhdGVTdHJpbmdGb3JtYXRCdWc7XG4gICAgdmFyIGhhc1RvU3RyaW5nRm9ybWF0QnVnO1xuICAgIHZhciB0aW1lWm9uZU9mZnNldCA9IGFOZWdhdGl2ZVRlc3REYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgaWYgKHRpbWVab25lT2Zmc2V0IDwgLTcyMCkge1xuICAgICAgICBoYXNUb0RhdGVTdHJpbmdGb3JtYXRCdWcgPSBhTmVnYXRpdmVUZXN0RGF0ZS50b0RhdGVTdHJpbmcoKSAhPT0gJ1R1ZSBKYW4gMDIgLTQ1ODc1JztcbiAgICAgICAgaGFzVG9TdHJpbmdGb3JtYXRCdWcgPSAhKC9eVGh1IERlYyAxMCAyMDE1IFxcZFxcZDpcXGRcXGQ6XFxkXFxkIEdNVFstXFwrXVxcZFxcZFxcZFxcZCg/OiB8JCkvKS50ZXN0KGFQb3NpdGl2ZVRlc3REYXRlLnRvU3RyaW5nKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1RvRGF0ZVN0cmluZ0Zvcm1hdEJ1ZyA9IGFOZWdhdGl2ZVRlc3REYXRlLnRvRGF0ZVN0cmluZygpICE9PSAnTW9uIEphbiAwMSAtNDU4NzUnO1xuICAgICAgICBoYXNUb1N0cmluZ0Zvcm1hdEJ1ZyA9ICEoL15XZWQgRGVjIDA5IDIwMTUgXFxkXFxkOlxcZFxcZDpcXGRcXGQgR01UWy1cXCtdXFxkXFxkXFxkXFxkKD86IHwkKS8pLnRlc3QoYVBvc2l0aXZlVGVzdERhdGUudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgdmFyIG9yaWdpbmFsR2V0RnVsbFllYXIgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIpO1xuICAgIHZhciBvcmlnaW5hbEdldE1vbnRoID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldE1vbnRoKTtcbiAgICB2YXIgb3JpZ2luYWxHZXREYXRlID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldERhdGUpO1xuICAgIHZhciBvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ0Z1bGxZZWFyKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENNb250aCA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNb250aCk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDRGF0ZSA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENEYXRlKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENEYXkgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VVRDRGF5KTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENIb3VycyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENIb3Vycyk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDTWludXRlcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNaW51dGVzKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENTZWNvbmRzID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ1NlY29uZHMpO1xuICAgIHZhciBvcmlnaW5hbEdldFVUQ01pbGxpc2Vjb25kcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNaWxsaXNlY29uZHMpO1xuICAgIHZhciBkYXlOYW1lID0gWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXTtcbiAgICB2YXIgbW9udGhOYW1lID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xuICAgIHZhciBkYXlzSW5Nb250aCA9IGZ1bmN0aW9uIGRheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEdldERhdGUobmV3IERhdGUoeWVhciwgbW9udGgsIDApKTtcbiAgICB9O1xuXG4gICAgZGVmaW5lUHJvcGVydGllcyhEYXRlLnByb3RvdHlwZSwge1xuICAgICAgICBnZXRGdWxsWWVhcjogZnVuY3Rpb24gZ2V0RnVsbFllYXIoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHllYXIgPCAwICYmIG9yaWdpbmFsR2V0TW9udGgodGhpcykgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5ZWFyO1xuICAgICAgICB9LFxuICAgICAgICBnZXRNb250aDogZnVuY3Rpb24gZ2V0TW9udGgoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRNb250aCh0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbW9udGg7XG4gICAgICAgIH0sXG4gICAgICAgIGdldERhdGU6IGZ1bmN0aW9uIGdldERhdGUoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRNb250aCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBkYXRlID0gb3JpZ2luYWxHZXREYXRlKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHllYXIgPCAwICYmIG1vbnRoID4gMTEpIHtcbiAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGF5cyA9IGRheXNJbk1vbnRoKDAsIHllYXIgKyAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRheXMgLSBkYXRlKSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VVRDRnVsbFllYXI6IGZ1bmN0aW9uIGdldFVUQ0Z1bGxZZWFyKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWVhciArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWVhcjtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VVRDTW9udGg6IGZ1bmN0aW9uIGdldFVUQ01vbnRoKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICBpZiAoeWVhciA8IDAgJiYgbW9udGggPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoO1xuICAgICAgICB9LFxuICAgICAgICBnZXRVVENEYXRlOiBmdW5jdGlvbiBnZXRVVENEYXRlKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGRheXMgPSBkYXlzSW5Nb250aCgwLCB5ZWFyICsgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkYXlzIC0gZGF0ZSkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICB9LCBoYXNOZWdhdGl2ZU1vbnRoWWVhckJ1Zyk7XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGUucHJvdG90eXBlLCB7XG4gICAgICAgIHRvVVRDU3RyaW5nOiBmdW5jdGlvbiB0b1VUQ1N0cmluZygpIHtcbiAgICAgICAgICAgIGlmICghdGhpcyB8fCAhKHRoaXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgaXMgbm90IGEgRGF0ZSBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF5ID0gb3JpZ2luYWxHZXRVVENEYXkodGhpcyk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG4gICAgICAgICAgICB2YXIgaG91ciA9IG9yaWdpbmFsR2V0VVRDSG91cnModGhpcyk7XG4gICAgICAgICAgICB2YXIgbWludXRlID0gb3JpZ2luYWxHZXRVVENNaW51dGVzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlY29uZCA9IG9yaWdpbmFsR2V0VVRDU2Vjb25kcyh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBkYXlOYW1lW2RheV0gKyAnLCAnICtcbiAgICAgICAgICAgICAgICAoZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGUpICsgJyAnICtcbiAgICAgICAgICAgICAgICBtb250aE5hbWVbbW9udGhdICsgJyAnICtcbiAgICAgICAgICAgICAgICB5ZWFyICsgJyAnICtcbiAgICAgICAgICAgICAgICAoaG91ciA8IDEwID8gJzAnICsgaG91ciA6IGhvdXIpICsgJzonICtcbiAgICAgICAgICAgICAgICAobWludXRlIDwgMTAgPyAnMCcgKyBtaW51dGUgOiBtaW51dGUpICsgJzonICtcbiAgICAgICAgICAgICAgICAoc2Vjb25kIDwgMTAgPyAnMCcgKyBzZWNvbmQgOiBzZWNvbmQpICsgJyBHTVQnO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgfHwgaGFzVG9VVENTdHJpbmdGb3JtYXRCdWcpO1xuXG4gICAgLy8gT3BlcmEgMTIgaGFzIGAsYFxuICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgdG9EYXRlU3RyaW5nOiBmdW5jdGlvbiB0b0RhdGVTdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRheSA9IHRoaXMuZ2V0RGF5KCk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gdGhpcy5nZXRNb250aCgpO1xuICAgICAgICAgICAgdmFyIHllYXIgPSB0aGlzLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICByZXR1cm4gZGF5TmFtZVtkYXldICsgJyAnICtcbiAgICAgICAgICAgICAgICBtb250aE5hbWVbbW9udGhdICsgJyAnICtcbiAgICAgICAgICAgICAgICAoZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGUpICsgJyAnICtcbiAgICAgICAgICAgICAgICB5ZWFyO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgfHwgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnKTtcblxuICAgIC8vIGNhbid0IHVzZSBkZWZpbmVQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBvZiB0b1N0cmluZyBlbnVtZXJhdGlvbiBpc3N1ZSBpbiBJRSA8PSA4XG4gICAgaWYgKGhhc05lZ2F0aXZlTW9udGhZZWFyQnVnIHx8IGhhc1RvU3RyaW5nRm9ybWF0QnVnKSB7XG4gICAgICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRheSA9IHRoaXMuZ2V0RGF5KCk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gdGhpcy5nZXRNb250aCgpO1xuICAgICAgICAgICAgdmFyIHllYXIgPSB0aGlzLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICB2YXIgaG91ciA9IHRoaXMuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgIHZhciBtaW51dGUgPSB0aGlzLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgIHZhciBzZWNvbmQgPSB0aGlzLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgIHZhciB0aW1lem9uZU9mZnNldCA9IHRoaXMuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBob3Vyc09mZnNldCA9IE1hdGguZmxvb3IoTWF0aC5hYnModGltZXpvbmVPZmZzZXQpIC8gNjApO1xuICAgICAgICAgICAgdmFyIG1pbnV0ZXNPZmZzZXQgPSBNYXRoLmZsb29yKE1hdGguYWJzKHRpbWV6b25lT2Zmc2V0KSAlIDYwKTtcbiAgICAgICAgICAgIHJldHVybiBkYXlOYW1lW2RheV0gKyAnICcgK1xuICAgICAgICAgICAgICAgIG1vbnRoTmFtZVttb250aF0gKyAnICcgK1xuICAgICAgICAgICAgICAgIChkYXRlIDwgMTAgPyAnMCcgKyBkYXRlIDogZGF0ZSkgKyAnICcgK1xuICAgICAgICAgICAgICAgIHllYXIgKyAnICcgK1xuICAgICAgICAgICAgICAgIChob3VyIDwgMTAgPyAnMCcgKyBob3VyIDogaG91cikgKyAnOicgK1xuICAgICAgICAgICAgICAgIChtaW51dGUgPCAxMCA/ICcwJyArIG1pbnV0ZSA6IG1pbnV0ZSkgKyAnOicgK1xuICAgICAgICAgICAgICAgIChzZWNvbmQgPCAxMCA/ICcwJyArIHNlY29uZCA6IHNlY29uZCkgKyAnIEdNVCcgK1xuICAgICAgICAgICAgICAgICh0aW1lem9uZU9mZnNldCA+IDAgPyAnLScgOiAnKycpICtcbiAgICAgICAgICAgICAgICAoaG91cnNPZmZzZXQgPCAxMCA/ICcwJyArIGhvdXJzT2Zmc2V0IDogaG91cnNPZmZzZXQpICtcbiAgICAgICAgICAgICAgICAobWludXRlc09mZnNldCA8IDEwID8gJzAnICsgbWludXRlc09mZnNldCA6IG1pbnV0ZXNPZmZzZXQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRlLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuOS41LjQzXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS41LjQzXG4gICAgLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgU3RyaW5nIHZhbHVlIHJlcHJlc2VudCB0aGUgaW5zdGFuY2UgaW4gdGltZVxuICAgIC8vIHJlcHJlc2VudGVkIGJ5IHRoaXMgRGF0ZSBvYmplY3QuIFRoZSBmb3JtYXQgb2YgdGhlIFN0cmluZyBpcyB0aGUgRGF0ZSBUaW1lXG4gICAgLy8gc3RyaW5nIGZvcm1hdCBkZWZpbmVkIGluIDE1LjkuMS4xNS4gQWxsIGZpZWxkcyBhcmUgcHJlc2VudCBpbiB0aGUgU3RyaW5nLlxuICAgIC8vIFRoZSB0aW1lIHpvbmUgaXMgYWx3YXlzIFVUQywgZGVub3RlZCBieSB0aGUgc3VmZml4IFouIElmIHRoZSB0aW1lIHZhbHVlIG9mXG4gICAgLy8gdGhpcyBvYmplY3QgaXMgbm90IGEgZmluaXRlIE51bWJlciBhIFJhbmdlRXJyb3IgZXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICB2YXIgbmVnYXRpdmVEYXRlID0gLTYyMTk4NzU1MjAwMDAwO1xuICAgIHZhciBuZWdhdGl2ZVllYXJTdHJpbmcgPSAnLTAwMDAwMSc7XG4gICAgdmFyIGhhc05lZ2F0aXZlRGF0ZUJ1ZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICYmIG5ldyBEYXRlKG5lZ2F0aXZlRGF0ZSkudG9JU09TdHJpbmcoKS5pbmRleE9mKG5lZ2F0aXZlWWVhclN0cmluZykgPT09IC0xO1xuICAgIHZhciBoYXNTYWZhcmk1MURhdGVCdWcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAmJiBuZXcgRGF0ZSgtMSkudG9JU09TdHJpbmcoKSAhPT0gJzE5NjktMTItMzFUMjM6NTk6NTkuOTk5Wic7XG5cbiAgICB2YXIgZ2V0VGltZSA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRUaW1lKTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZSh0aGlzKSB8fCAhaXNGaW5pdGUoZ2V0VGltZSh0aGlzKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBBZG9wZSBQaG90b3Nob3AgcmVxdWlyZXMgdGhlIHNlY29uZCBjaGVjay5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgY2FsbGVkIG9uIG5vbi1maW5pdGUgdmFsdWUuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcblxuICAgICAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRVVENNb250aCh0aGlzKTtcbiAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzExMVxuICAgICAgICAgICAgeWVhciArPSBNYXRoLmZsb29yKG1vbnRoIC8gMTIpO1xuICAgICAgICAgICAgbW9udGggPSAobW9udGggJSAxMiArIDEyKSAlIDEyO1xuXG4gICAgICAgICAgICAvLyB0aGUgZGF0ZSB0aW1lIHN0cmluZyBmb3JtYXQgaXMgc3BlY2lmaWVkIGluIDE1LjkuMS4xNS5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbbW9udGggKyAxLCBvcmlnaW5hbEdldFVUQ0RhdGUodGhpcyksIG9yaWdpbmFsR2V0VVRDSG91cnModGhpcyksIG9yaWdpbmFsR2V0VVRDTWludXRlcyh0aGlzKSwgb3JpZ2luYWxHZXRVVENTZWNvbmRzKHRoaXMpXTtcbiAgICAgICAgICAgIHllYXIgPSAoXG4gICAgICAgICAgICAgICAgKHllYXIgPCAwID8gJy0nIDogKHllYXIgPiA5OTk5ID8gJysnIDogJycpKSArXG4gICAgICAgICAgICAgICAgc3RyU2xpY2UoJzAwMDAwJyArIE1hdGguYWJzKHllYXIpLCAoMCA8PSB5ZWFyICYmIHllYXIgPD0gOTk5OSkgPyAtNCA6IC02KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAvLyBwYWQgbW9udGhzLCBkYXlzLCBob3VycywgbWludXRlcywgYW5kIHNlY29uZHMgdG8gaGF2ZSB0d28gZGlnaXRzLlxuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHN0clNsaWNlKCcwMCcgKyByZXN1bHRbaV0sIC0yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHBhZCBtaWxsaXNlY29uZHMgdG8gaGF2ZSB0aHJlZSBkaWdpdHMuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHllYXIgKyAnLScgKyBhcnJheVNsaWNlKHJlc3VsdCwgMCwgMikuam9pbignLScpICtcbiAgICAgICAgICAgICAgICAnVCcgKyBhcnJheVNsaWNlKHJlc3VsdCwgMikuam9pbignOicpICsgJy4nICtcbiAgICAgICAgICAgICAgICBzdHJTbGljZSgnMDAwJyArIG9yaWdpbmFsR2V0VVRDTWlsbGlzZWNvbmRzKHRoaXMpLCAtMykgKyAnWidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9LCBoYXNOZWdhdGl2ZURhdGVCdWcgfHwgaGFzU2FmYXJpNTFEYXRlQnVnKTtcblxuICAgIC8vIEVTNSAxNS45LjUuNDRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS45LjUuNDRcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIGEgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgRGF0ZSBvYmplY3QgZm9yIHVzZSBieVxuICAgIC8vIEpTT04uc3RyaW5naWZ5ICgxNS4xMi4zKS5cbiAgICB2YXIgZGF0ZVRvSlNPTklzU3VwcG9ydGVkID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLnByb3RvdHlwZS50b0pTT04gJiZcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsICYmXG4gICAgICAgICAgICAgICAgbmV3IERhdGUobmVnYXRpdmVEYXRlKS50b0pTT04oKS5pbmRleE9mKG5lZ2F0aXZlWWVhclN0cmluZykgIT09IC0xICYmXG4gICAgICAgICAgICAgICAgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyAvLyBnZW5lcmljXG4gICAgICAgICAgICAgICAgICAgIHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0oKSk7XG4gICAgaWYgKCFkYXRlVG9KU09OSXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgICAgICAgICAgLy8gV2hlbiB0aGUgdG9KU09OIG1ldGhvZCBpcyBjYWxsZWQgd2l0aCBhcmd1bWVudCBrZXksIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgIC8vIHN0ZXBzIGFyZSB0YWtlbjpcblxuICAgICAgICAgICAgLy8gMS4gIExldCBPIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyBUb09iamVjdCwgZ2l2aW5nIGl0IHRoZSB0aGlzXG4gICAgICAgICAgICAvLyB2YWx1ZSBhcyBpdHMgYXJndW1lbnQuXG4gICAgICAgICAgICAvLyAyLiBMZXQgdHYgYmUgRVMuVG9QcmltaXRpdmUoTywgaGludCBOdW1iZXIpLlxuICAgICAgICAgICAgdmFyIE8gPSAkT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHR2ID0gRVMuVG9QcmltaXRpdmUoTyk7XG4gICAgICAgICAgICAvLyAzLiBJZiB0diBpcyBhIE51bWJlciBhbmQgaXMgbm90IGZpbml0ZSwgcmV0dXJuIG51bGwuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHR2ID09PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUodHYpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyA0LiBMZXQgdG9JU08gYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0dldF1dIGludGVybmFsIG1ldGhvZCBvZlxuICAgICAgICAgICAgLy8gTyB3aXRoIGFyZ3VtZW50IFwidG9JU09TdHJpbmdcIi5cbiAgICAgICAgICAgIHZhciB0b0lTTyA9IE8udG9JU09TdHJpbmc7XG4gICAgICAgICAgICAvLyA1LiBJZiBJc0NhbGxhYmxlKHRvSVNPKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKHRvSVNPKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RvSVNPU3RyaW5nIHByb3BlcnR5IGlzIG5vdCBjYWxsYWJsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gNi4gUmV0dXJuIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgbWV0aG9kIG9mXG4gICAgICAgICAgICAvLyAgdG9JU08gd2l0aCBPIGFzIHRoZSB0aGlzIHZhbHVlIGFuZCBhbiBlbXB0eSBhcmd1bWVudCBsaXN0LlxuICAgICAgICAgICAgcmV0dXJuIHRvSVNPLmNhbGwoTyk7XG5cbiAgICAgICAgICAgIC8vIE5PVEUgMSBUaGUgYXJndW1lbnQgaXMgaWdub3JlZC5cblxuICAgICAgICAgICAgLy8gTk9URSAyIFRoZSB0b0pTT04gZnVuY3Rpb24gaXMgaW50ZW50aW9uYWxseSBnZW5lcmljOyBpdCBkb2VzIG5vdFxuICAgICAgICAgICAgLy8gcmVxdWlyZSB0aGF0IGl0cyB0aGlzIHZhbHVlIGJlIGEgRGF0ZSBvYmplY3QuIFRoZXJlZm9yZSwgaXQgY2FuIGJlXG4gICAgICAgICAgICAvLyB0cmFuc2ZlcnJlZCB0byBvdGhlciBraW5kcyBvZiBvYmplY3RzIGZvciB1c2UgYXMgYSBtZXRob2QuIEhvd2V2ZXIsXG4gICAgICAgICAgICAvLyBpdCBkb2VzIHJlcXVpcmUgdGhhdCBhbnkgc3VjaCBvYmplY3QgaGF2ZSBhIHRvSVNPU3RyaW5nIG1ldGhvZC4gQW5cbiAgICAgICAgICAgIC8vIG9iamVjdCBpcyBmcmVlIHRvIHVzZSB0aGUgYXJndW1lbnQga2V5IHRvIGZpbHRlciBpdHNcbiAgICAgICAgICAgIC8vIHN0cmluZ2lmaWNhdGlvbi5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuOS40LjJcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS45LjQuMlxuICAgIC8vIGJhc2VkIG9uIHdvcmsgc2hhcmVkIGJ5IERhbmllbCBGcmllc2VuIChkYW50bWFuKVxuICAgIC8vIGh0dHA6Ly9naXN0LmdpdGh1Yi5jb20vMzAzMjQ5XG4gICAgdmFyIHN1cHBvcnRzRXh0ZW5kZWRZZWFycyA9IERhdGUucGFyc2UoJyswMzM2NTgtMDktMjdUMDE6NDY6NDAuMDAwWicpID09PSAxZTE1O1xuICAgIHZhciBhY2NlcHRzSW52YWxpZERhdGVzID0gIWlzTmFOKERhdGUucGFyc2UoJzIwMTItMDQtMDRUMjQ6MDA6MDAuNTAwWicpKSB8fCAhaXNOYU4oRGF0ZS5wYXJzZSgnMjAxMi0xMS0zMVQyMzo1OTo1OS4wMDBaJykpIHx8ICFpc05hTihEYXRlLnBhcnNlKCcyMDEyLTEyLTMxVDIzOjU5OjYwLjAwMFonKSk7XG4gICAgdmFyIGRvZXNOb3RQYXJzZVkyS05ld1llYXIgPSBpc05hTihEYXRlLnBhcnNlKCcyMDAwLTAxLTAxVDAwOjAwOjAwLjAwMFonKSk7XG4gICAgaWYgKGRvZXNOb3RQYXJzZVkyS05ld1llYXIgfHwgYWNjZXB0c0ludmFsaWREYXRlcyB8fCAhc3VwcG9ydHNFeHRlbmRlZFllYXJzKSB7XG4gICAgICAgIC8vIFhYWCBnbG9iYWwgYXNzaWdubWVudCB3b24ndCB3b3JrIGluIGVtYmVkZGluZ3MgdGhhdCB1c2VcbiAgICAgICAgLy8gYW4gYWx0ZXJuYXRlIG9iamVjdCBmb3IgdGhlIGNvbnRleHQuXG4gICAgICAgIC8qIGdsb2JhbCBEYXRlOiB0cnVlICovXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4gICAgICAgIHZhciBtYXhTYWZlVW5zaWduZWQzMkJpdCA9IE1hdGgucG93KDIsIDMxKSAtIDE7XG4gICAgICAgIHZhciBoYXNTYWZhcmlTaWduZWRJbnRCdWcgPSBpc0FjdHVhbE5hTihuZXcgRGF0ZSgxOTcwLCAwLCAxLCAwLCAwLCAwLCBtYXhTYWZlVW5zaWduZWQzMkJpdCArIDEpLmdldFRpbWUoKSk7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWltcGxpY2l0LWdsb2JhbHMgKi9cbiAgICAgICAgRGF0ZSA9IChmdW5jdGlvbiAoTmF0aXZlRGF0ZSkge1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWltcGxpY2l0LWdsb2JhbHMgKi9cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZiAqL1xuICAgICAgICAgICAgLy8gRGF0ZS5sZW5ndGggPT09IDdcbiAgICAgICAgICAgIHZhciBEYXRlU2hpbSA9IGZ1bmN0aW9uIERhdGUoWSwgTSwgRCwgaCwgbSwgcywgbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIE5hdGl2ZURhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlY29uZHMgPSBzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWlsbGlzID0gbXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNTYWZhcmlTaWduZWRJbnRCdWcgJiYgbGVuZ3RoID49IDcgJiYgbXMgPiBtYXhTYWZlVW5zaWduZWQzMkJpdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd29yayBhcm91bmQgYSBTYWZhcmkgOC85IGJ1ZyB3aGVyZSBpdCB0cmVhdHMgdGhlIHNlY29uZHMgYXMgc2lnbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXNUb1NoaWZ0ID0gTWF0aC5mbG9vcihtcyAvIG1heFNhZmVVbnNpZ25lZDMyQml0KSAqIG1heFNhZmVVbnNpZ25lZDMyQml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNUb1NoaWZ0ID0gTWF0aC5mbG9vcihtc1RvU2hpZnQgLyAxZTMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyArPSBzVG9TaGlmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbGxpcyAtPSBzVG9TaGlmdCAqIDFlMztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gbGVuZ3RoID09PSAxICYmICRTdHJpbmcoWSkgPT09IFkgPyAvLyBpc1N0cmluZyhZKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZXhwbGljaXRseSBwYXNzIGl0IHRocm91Z2ggcGFyc2U6XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTmF0aXZlRGF0ZShEYXRlU2hpbS5wYXJzZShZKSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBtYWtlIGNhbGxzIGRlcGVuZGluZyBvbiBhcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGVuZ3RoIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA+PSA3ID8gbmV3IE5hdGl2ZURhdGUoWSwgTSwgRCwgaCwgbSwgc2Vjb25kcywgbWlsbGlzKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggPj0gNiA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQsIGgsIG0sIHNlY29uZHMpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA+PSA1ID8gbmV3IE5hdGl2ZURhdGUoWSwgTSwgRCwgaCwgbSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID49IDQgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBELCBoKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggPj0gMyA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA+PSAyID8gbmV3IE5hdGl2ZURhdGUoWSwgTSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID49IDEgPyBuZXcgTmF0aXZlRGF0ZShZIGluc3RhbmNlb2YgTmF0aXZlRGF0ZSA/ICtZIDogWSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTmF0aXZlRGF0ZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBOYXRpdmVEYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNQcmltaXRpdmUoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBtaXh1cHMgd2l0aCB1bmZpeGVkIERhdGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnRpZXMoZGF0ZSwgeyBjb25zdHJ1Y3RvcjogRGF0ZVNoaW0gfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gMTUuOS4xLjE1IERhdGUgVGltZSBTdHJpbmcgRm9ybWF0LlxuICAgICAgICAgICAgdmFyIGlzb0RhdGVFeHByZXNzaW9uID0gbmV3IFJlZ0V4cCgnXicgK1xuICAgICAgICAgICAgICAgICcoXFxcXGR7NH18WystXVxcXFxkezZ9KScgKyAvLyBmb3VyLWRpZ2l0IHllYXIgY2FwdHVyZSBvciBzaWduICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDYtZGlnaXQgZXh0ZW5kZWQgeWVhclxuICAgICAgICAgICAgICAgICcoPzotKFxcXFxkezJ9KScgKyAvLyBvcHRpb25hbCBtb250aCBjYXB0dXJlXG4gICAgICAgICAgICAgICAgJyg/Oi0oXFxcXGR7Mn0pJyArIC8vIG9wdGlvbmFsIGRheSBjYXB0dXJlXG4gICAgICAgICAgICAgICAgJyg/OicgKyAvLyBjYXB0dXJlIGhvdXJzOm1pbnV0ZXM6c2Vjb25kcy5taWxsaXNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgJ1QoXFxcXGR7Mn0pJyArIC8vIGhvdXJzIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgJzooXFxcXGR7Mn0pJyArIC8vIG1pbnV0ZXMgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAnKD86JyArIC8vIG9wdGlvbmFsIDpzZWNvbmRzLm1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICAgICAgJzooXFxcXGR7Mn0pJyArIC8vIHNlY29uZHMgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgJyg/OihcXFxcLlxcXFxkezEsfSkpPycgKyAvLyBtaWxsaXNlY29uZHMgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAnKT8nICtcbiAgICAgICAgICAgICAgICAnKCcgKyAvLyBjYXB0dXJlIFVUQyBvZmZzZXQgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICdafCcgKyAvLyBVVEMgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAnKD86JyArIC8vIG9mZnNldCBzcGVjaWZpZXIgKy8taG91cnM6bWludXRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgJyhbLStdKScgKyAvLyBzaWduIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICcoXFxcXGR7Mn0pJyArIC8vIGhvdXJzIG9mZnNldCBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAnOihcXFxcZHsyfSknICsgLy8gbWludXRlcyBvZmZzZXQgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAnKScgK1xuICAgICAgICAgICAgICAgICcpPyk/KT8pPycgK1xuICAgICAgICAgICAgJyQnKTtcblxuICAgICAgICAgICAgdmFyIG1vbnRocyA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNCwgMzY1XTtcblxuICAgICAgICAgICAgdmFyIGRheUZyb21Nb250aCA9IGZ1bmN0aW9uIGRheUZyb21Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gbW9udGggPiAxID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzW21vbnRoXSArXG4gICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoKHllYXIgLSAxOTY5ICsgdCkgLyA0KSAtXG4gICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoKHllYXIgLSAxOTAxICsgdCkgLyAxMDApICtcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcigoeWVhciAtIDE2MDEgKyB0KSAvIDQwMCkgK1xuICAgICAgICAgICAgICAgICAgICAzNjUgKiAoeWVhciAtIDE5NzApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciB0b1VUQyA9IGZ1bmN0aW9uIHRvVVRDKHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIG1zID0gdDtcbiAgICAgICAgICAgICAgICBpZiAoaGFzU2FmYXJpU2lnbmVkSW50QnVnICYmIG1zID4gbWF4U2FmZVVuc2lnbmVkMzJCaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd29yayBhcm91bmQgYSBTYWZhcmkgOC85IGJ1ZyB3aGVyZSBpdCB0cmVhdHMgdGhlIHNlY29uZHMgYXMgc2lnbmVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBtc1RvU2hpZnQgPSBNYXRoLmZsb29yKG1zIC8gbWF4U2FmZVVuc2lnbmVkMzJCaXQpICogbWF4U2FmZVVuc2lnbmVkMzJCaXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzVG9TaGlmdCA9IE1hdGguZmxvb3IobXNUb1NoaWZ0IC8gMWUzKTtcbiAgICAgICAgICAgICAgICAgICAgcyArPSBzVG9TaGlmdDtcbiAgICAgICAgICAgICAgICAgICAgbXMgLT0gc1RvU2hpZnQgKiAxZTM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAkTnVtYmVyKG5ldyBOYXRpdmVEYXRlKDE5NzAsIDAsIDEsIDAsIDAsIHMsIG1zKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBDb3B5IGFueSBjdXN0b20gbWV0aG9kcyBhIDNyZCBwYXJ0eSBsaWJyYXJ5IG1heSBoYXZlIGFkZGVkXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gTmF0aXZlRGF0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChvd25zKE5hdGl2ZURhdGUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgRGF0ZVNoaW1ba2V5XSA9IE5hdGl2ZURhdGVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENvcHkgXCJuYXRpdmVcIiBtZXRob2RzIGV4cGxpY2l0bHk7IHRoZXkgbWF5IGJlIG5vbi1lbnVtZXJhYmxlXG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGVTaGltLCB7XG4gICAgICAgICAgICAgICAgbm93OiBOYXRpdmVEYXRlLm5vdyxcbiAgICAgICAgICAgICAgICBVVEM6IE5hdGl2ZURhdGUuVVRDXG4gICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgIERhdGVTaGltLnByb3RvdHlwZSA9IE5hdGl2ZURhdGUucHJvdG90eXBlO1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllcyhEYXRlU2hpbS5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcjogRGF0ZVNoaW1cbiAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBVcGdyYWRlIERhdGUucGFyc2UgdG8gaGFuZGxlIHNpbXBsaWZpZWQgSVNPIDg2MDEgc3RyaW5nc1xuICAgICAgICAgICAgdmFyIHBhcnNlU2hpbSA9IGZ1bmN0aW9uIHBhcnNlKHN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGlzb0RhdGVFeHByZXNzaW9uLmV4ZWMoc3RyaW5nKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFyc2UgbW9udGhzLCBkYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICAvLyBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgICAgICAvLyBwYXJzZSB0aGUgVVRDIG9mZnNldCBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSAkTnVtYmVyKG1hdGNoWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gJE51bWJlcihtYXRjaFsyXSB8fCAxKSAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXkgPSAkTnVtYmVyKG1hdGNoWzNdIHx8IDEpIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgPSAkTnVtYmVyKG1hdGNoWzRdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlID0gJE51bWJlcihtYXRjaFs1XSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZCA9ICROdW1iZXIobWF0Y2hbNl0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZCA9IE1hdGguZmxvb3IoJE51bWJlcihtYXRjaFs3XSB8fCAwKSAqIDEwMDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aW1lIHpvbmUgaXMgbWlzc2VkLCBsb2NhbCBvZmZzZXQgc2hvdWxkIGJlIHVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIChFUyA1LjEgYnVnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vYnVncy5lY21hc2NyaXB0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTEyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0xvY2FsVGltZSA9IEJvb2xlYW4obWF0Y2hbNF0gJiYgIW1hdGNoWzhdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25PZmZzZXQgPSBtYXRjaFs5XSA9PT0gJy0nID8gMSA6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91ck9mZnNldCA9ICROdW1iZXIobWF0Y2hbMTBdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlT2Zmc2V0ID0gJE51bWJlcihtYXRjaFsxMV0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNNaW51dGVzT3JTZWNvbmRzT3JNaWxsaXNlY29uZHMgPSBtaW51dGUgPiAwIHx8IHNlY29uZCA+IDAgfHwgbWlsbGlzZWNvbmQgPiAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VyIDwgKGhhc01pbnV0ZXNPclNlY29uZHNPck1pbGxpc2Vjb25kcyA/IDI0IDogMjUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW51dGUgPCA2MCAmJiBzZWNvbmQgPCA2MCAmJiBtaWxsaXNlY29uZCA8IDEwMDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID4gLTEgJiYgbW9udGggPCAxMiAmJiBob3VyT2Zmc2V0IDwgMjQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZU9mZnNldCA8IDYwICYmIC8vIGRldGVjdCBpbnZhbGlkIG9mZnNldHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheSA+IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXkgPCAoZGF5RnJvbU1vbnRoKHllYXIsIG1vbnRoICsgMSkgLSBkYXlGcm9tTW9udGgoeWVhciwgbW9udGgpKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGF5RnJvbU1vbnRoKHllYXIsIG1vbnRoKSArIGRheSkgKiAyNCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91ciArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91ck9mZnNldCAqIHNpZ25PZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICkgKiA2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVzdWx0ICsgbWludXRlICsgbWludXRlT2Zmc2V0ICogc2lnbk9mZnNldCkgKiA2MCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kXG4gICAgICAgICAgICAgICAgICAgICAgICApICogMTAwMCArIG1pbGxpc2Vjb25kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdG9VVEMocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtOC42NGUxNSA8PSByZXN1bHQgJiYgcmVzdWx0IDw9IDguNjRlMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBOYXRpdmVEYXRlLnBhcnNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllcyhEYXRlU2hpbSwgeyBwYXJzZTogcGFyc2VTaGltIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gRGF0ZVNoaW07XG4gICAgICAgIH0oRGF0ZSkpO1xuICAgICAgICAvKiBnbG9iYWwgRGF0ZTogZmFsc2UgKi9cbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuOS40LjRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS45LjQuNFxuICAgIGlmICghRGF0ZS5ub3cpIHtcbiAgICAgICAgRGF0ZS5ub3cgPSBmdW5jdGlvbiBub3coKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBOdW1iZXJcbiAgICAvLyA9PT09PT1cbiAgICAvL1xuXG4gICAgLy8gRVM1LjEgMTUuNy40LjVcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS43LjQuNVxuICAgIHZhciBoYXNUb0ZpeGVkQnVncyA9IE51bWJlclByb3RvdHlwZS50b0ZpeGVkICYmIChcbiAgICAgICgwLjAwMDA4KS50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gICAgICAoMC45KS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgICAgICgxLjI1NSkudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gICAgICAoMTAwMDAwMDAwMDAwMDAwMDEyOCkudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4gICAgKTtcblxuICAgIHZhciB0b0ZpeGVkSGVscGVycyA9IHtcbiAgICAgICAgYmFzZTogMWU3LFxuICAgICAgICBzaXplOiA2LFxuICAgICAgICBkYXRhOiBbMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgICAgIG11bHRpcGx5OiBmdW5jdGlvbiBtdWx0aXBseShuLCBjKSB7XG4gICAgICAgICAgICB2YXIgaSA9IC0xO1xuICAgICAgICAgICAgdmFyIGMyID0gYztcbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCB0b0ZpeGVkSGVscGVycy5zaXplKSB7XG4gICAgICAgICAgICAgICAgYzIgKz0gbiAqIHRvRml4ZWRIZWxwZXJzLmRhdGFbaV07XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMuZGF0YVtpXSA9IGMyICUgdG9GaXhlZEhlbHBlcnMuYmFzZTtcbiAgICAgICAgICAgICAgICBjMiA9IE1hdGguZmxvb3IoYzIgLyB0b0ZpeGVkSGVscGVycy5iYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGl2aWRlOiBmdW5jdGlvbiBkaXZpZGUobikge1xuICAgICAgICAgICAgdmFyIGkgPSB0b0ZpeGVkSGVscGVycy5zaXplO1xuICAgICAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgYyArPSB0b0ZpeGVkSGVscGVycy5kYXRhW2ldO1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRhdGFbaV0gPSBNYXRoLmZsb29yKGMgLyBuKTtcbiAgICAgICAgICAgICAgICBjID0gKGMgJSBuKSAqIHRvRml4ZWRIZWxwZXJzLmJhc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG51bVRvU3RyaW5nOiBmdW5jdGlvbiBudW1Ub1N0cmluZygpIHtcbiAgICAgICAgICAgIHZhciBpID0gdG9GaXhlZEhlbHBlcnMuc2l6ZTtcbiAgICAgICAgICAgIHZhciBzID0gJyc7XG4gICAgICAgICAgICB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCB0b0ZpeGVkSGVscGVycy5kYXRhW2ldICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gJFN0cmluZyh0b0ZpeGVkSGVscGVycy5kYXRhW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gdDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgKz0gc3RyU2xpY2UoJzAwMDAwMDAnLCAwLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9LFxuICAgICAgICBwb3c6IGZ1bmN0aW9uIHBvdyh4LCBuLCBhY2MpIHtcbiAgICAgICAgICAgIHJldHVybiAobiA9PT0gMCA/IGFjYyA6IChuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGxvZzogZnVuY3Rpb24gbG9nKHgpIHtcbiAgICAgICAgICAgIHZhciBuID0gMDtcbiAgICAgICAgICAgIHZhciB4MiA9IHg7XG4gICAgICAgICAgICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgICAgICAgICAgICAgIG4gKz0gMTI7XG4gICAgICAgICAgICAgICAgeDIgLz0gNDA5NjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgICAgICAgICAgICAgbiArPSAxO1xuICAgICAgICAgICAgICAgIHgyIC89IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgdG9GaXhlZFNoaW0gPSBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgICAgIHZhciBmLCB4LCBzLCBtLCBlLCB6LCBqLCBrO1xuXG4gICAgICAgIC8vIFRlc3QgZm9yIE5hTiBhbmQgcm91bmQgZnJhY3Rpb25EaWdpdHMgZG93blxuICAgICAgICBmID0gJE51bWJlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgICAgIGYgPSBpc0FjdHVhbE5hTihmKSA/IDAgOiBNYXRoLmZsb29yKGYpO1xuXG4gICAgICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdOdW1iZXIudG9GaXhlZCBjYWxsZWQgd2l0aCBpbnZhbGlkIG51bWJlciBvZiBkZWNpbWFscycpO1xuICAgICAgICB9XG5cbiAgICAgICAgeCA9ICROdW1iZXIodGhpcyk7XG5cbiAgICAgICAgaWYgKGlzQWN0dWFsTmFOKHgpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ05hTic7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBpdCBpcyB0b28gYmlnIG9yIHNtYWxsLCByZXR1cm4gdGhlIHN0cmluZyB2YWx1ZSBvZiB0aGUgbnVtYmVyXG4gICAgICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkge1xuICAgICAgICAgICAgcmV0dXJuICRTdHJpbmcoeCk7XG4gICAgICAgIH1cblxuICAgICAgICBzID0gJyc7XG5cbiAgICAgICAgaWYgKHggPCAwKSB7XG4gICAgICAgICAgICBzID0gJy0nO1xuICAgICAgICAgICAgeCA9IC14O1xuICAgICAgICB9XG5cbiAgICAgICAgbSA9ICcwJztcblxuICAgICAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICAgICAgICAvLyAxZS0yMSA8IHggPCAxZTIxXG4gICAgICAgICAgICAvLyAtNzAgPCBsb2cyKHgpIDwgNzBcbiAgICAgICAgICAgIGUgPSB0b0ZpeGVkSGVscGVycy5sb2coeCAqIHRvRml4ZWRIZWxwZXJzLnBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICAgICAgICB6ID0gKGUgPCAwID8geCAqIHRvRml4ZWRIZWxwZXJzLnBvdygyLCAtZSwgMSkgOiB4IC8gdG9GaXhlZEhlbHBlcnMucG93KDIsIGUsIDEpKTtcbiAgICAgICAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDsgLy8gTWF0aC5wb3coMiwgNTIpO1xuICAgICAgICAgICAgZSA9IDUyIC0gZTtcblxuICAgICAgICAgICAgLy8gLTE4IDwgZSA8IDEyMlxuICAgICAgICAgICAgLy8geCA9IHogLyAyIF4gZVxuICAgICAgICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMCwgeik7XG4gICAgICAgICAgICAgICAgaiA9IGY7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgICAgICAgICAgIGogLT0gNztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSh0b0ZpeGVkSGVscGVycy5wb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgICAgICAgICBqID0gZSAtIDE7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5kaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMuZGl2aWRlKDEgPDwgaik7XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMSwgMSk7XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMuZGl2aWRlKDIpO1xuICAgICAgICAgICAgICAgIG0gPSB0b0ZpeGVkSGVscGVycy5udW1Ub1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSgwLCB6KTtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSgxIDw8ICgtZSksIDApO1xuICAgICAgICAgICAgICAgIG0gPSB0b0ZpeGVkSGVscGVycy5udW1Ub1N0cmluZygpICsgc3RyU2xpY2UoJzAuMDAwMDAwMDAwMDAwMDAwMDAwMDAnLCAyLCAyICsgZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZiA+IDApIHtcbiAgICAgICAgICAgIGsgPSBtLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKGsgPD0gZikge1xuICAgICAgICAgICAgICAgIG0gPSBzICsgc3RyU2xpY2UoJzAuMDAwMDAwMDAwMDAwMDAwMDAwMCcsIDAsIGYgLSBrICsgMikgKyBtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtID0gcyArIHN0clNsaWNlKG0sIDAsIGsgLSBmKSArICcuJyArIHN0clNsaWNlKG0sIGsgLSBmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG0gPSBzICsgbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH07XG4gICAgZGVmaW5lUHJvcGVydGllcyhOdW1iZXJQcm90b3R5cGUsIHsgdG9GaXhlZDogdG9GaXhlZFNoaW0gfSwgaGFzVG9GaXhlZEJ1Z3MpO1xuXG4gICAgdmFyIGhhc1RvUHJlY2lzaW9uVW5kZWZpbmVkQnVnID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiAxLjAudG9QcmVjaXNpb24odW5kZWZpbmVkKSA9PT0gJzEnO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0oKSk7XG4gICAgdmFyIG9yaWdpbmFsVG9QcmVjaXNpb24gPSBOdW1iZXJQcm90b3R5cGUudG9QcmVjaXNpb247XG4gICAgZGVmaW5lUHJvcGVydGllcyhOdW1iZXJQcm90b3R5cGUsIHtcbiAgICAgICAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBwcmVjaXNpb24gPT09ICd1bmRlZmluZWQnID8gb3JpZ2luYWxUb1ByZWNpc2lvbi5jYWxsKHRoaXMpIDogb3JpZ2luYWxUb1ByZWNpc2lvbi5jYWxsKHRoaXMsIHByZWNpc2lvbik7XG4gICAgICAgIH1cbiAgICB9LCBoYXNUb1ByZWNpc2lvblVuZGVmaW5lZEJ1Zyk7XG5cbiAgICAvL1xuICAgIC8vIFN0cmluZ1xuICAgIC8vID09PT09PVxuICAgIC8vXG5cbiAgICAvLyBFUzUgMTUuNS40LjE0XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNS40LjE0XG5cbiAgICAvLyBbYnVnZml4LCBJRSBsdCA5LCBmaXJlZm94IDQsIEtvbnF1ZXJvciwgT3BlcmEsIG9ic2N1cmUgYnJvd3NlcnNdXG4gICAgLy8gTWFueSBicm93c2VycyBkbyBub3Qgc3BsaXQgcHJvcGVybHkgd2l0aCByZWd1bGFyIGV4cHJlc3Npb25zIG9yIHRoZXlcbiAgICAvLyBkbyBub3QgcGVyZm9ybSB0aGUgc3BsaXQgY29ycmVjdGx5IHVuZGVyIG9ic2N1cmUgY29uZGl0aW9ucy5cbiAgICAvLyBTZWUgaHR0cDovL2Jsb2cuc3RldmVubGV2aXRoYW4uY29tL2FyY2hpdmVzL2Nyb3NzLWJyb3dzZXItc3BsaXRcbiAgICAvLyBJJ3ZlIHRlc3RlZCBpbiBtYW55IGJyb3dzZXJzIGFuZCB0aGlzIHNlZW1zIHRvIGNvdmVyIHRoZSBkZXZpYW50IG9uZXM6XG4gICAgLy8gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pIHNob3VsZCBiZSBbXCJcIiwgXCJcIl0sIG5vdCBbXCJcIl1cbiAgICAvLyAgICAnLicuc3BsaXQoLyguPykoLj8pLykgc2hvdWxkIGJlIFtcIlwiLCBcIi5cIiwgXCJcIiwgXCJcIl0sIG5vdCBbXCJcIiwgXCJcIl1cbiAgICAvLyAgICAndGVzc3QnLnNwbGl0KC8ocykqLykgc2hvdWxkIGJlIFtcInRcIiwgdW5kZWZpbmVkLCBcImVcIiwgXCJzXCIsIFwidFwiXSwgbm90XG4gICAgLy8gICAgICAgW3VuZGVmaW5lZCwgXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIC4uLl1cbiAgICAvLyAgICAnJy5zcGxpdCgvLj8vKSBzaG91bGQgYmUgW10sIG5vdCBbXCJcIl1cbiAgICAvLyAgICAnLicuc3BsaXQoLygpKCkvKSBzaG91bGQgYmUgW1wiLlwiXSwgbm90IFtcIlwiLCBcIlwiLCBcIi5cIl1cblxuICAgIGlmIChcbiAgICAgICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPT0gMiB8fFxuICAgICAgICAnLicuc3BsaXQoLyguPykoLj8pLykubGVuZ3RoICE9PSA0IHx8XG4gICAgICAgICd0ZXNzdCcuc3BsaXQoLyhzKSovKVsxXSA9PT0gJ3QnIHx8XG4gICAgICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT09IDQgfHxcbiAgICAgICAgJycuc3BsaXQoLy4/LykubGVuZ3RoIHx8XG4gICAgICAgICcuJy5zcGxpdCgvKCkoKS8pLmxlbmd0aCA+IDFcbiAgICApIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb21wbGlhbnRFeGVjTnBjZyA9IHR5cGVvZiAoLygpPz8vKS5leGVjKCcnKVsxXSA9PT0gJ3VuZGVmaW5lZCc7IC8vIE5QQ0c6IG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgICB2YXIgbWF4U2FmZTMyQml0SW50ID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcblxuICAgICAgICAgICAgU3RyaW5nUHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VwYXJhdG9yID09PSAndW5kZWZpbmVkJyAmJiBsaW1pdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgICAgICAgICAgICBpZiAoIWlzUmVnZXgoc2VwYXJhdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyU3BsaXQodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArIC8vIGluIEVTNlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpLCAvLyBGaXJlZm94IDMrIGFuZCBFUzZcbiAgICAgICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBsaWFudEV4ZWNOcGNnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBWYWx1ZXMgZm9yIGBsaW1pdGAsIHBlciB0aGUgc3BlYzpcbiAgICAgICAgICAgICAgICAgKiBJZiB1bmRlZmluZWQ6IDQyOTQ5NjcyOTUgLy8gbWF4U2FmZTMyQml0SW50XG4gICAgICAgICAgICAgICAgICogSWYgMCwgSW5maW5pdHksIG9yIE5hTjogMFxuICAgICAgICAgICAgICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgICAgICAgICAgICAgKiBJZiBuZWdhdGl2ZSBudW1iZXI6IDQyOTQ5NjcyOTYgLSBNYXRoLmZsb29yKE1hdGguYWJzKGxpbWl0KSlcbiAgICAgICAgICAgICAgICAgKiBJZiBvdGhlcjogVHlwZS1jb252ZXJ0LCB0aGVuIHVzZSB0aGUgYWJvdmUgcnVsZXNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgc3BsaXRMaW1pdCA9IHR5cGVvZiBsaW1pdCA9PT0gJ3VuZGVmaW5lZCcgPyBtYXhTYWZlMzJCaXRJbnQgOiBFUy5Ub1VpbnQzMihsaW1pdCk7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICAgICAgICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKG91dHB1dCwgc3RyU2xpY2Uoc3RyaW5nLCBsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cgJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoW2ldID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X3B1c2guYXBwbHkob3V0cHV0LCBhcnJheVNsaWNlKG1hdGNoLCAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID49IHNwbGl0TGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKG91dHB1dCwgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwob3V0cHV0LCBzdHJTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBzcGxpdExpbWl0ID8gYXJyYXlTbGljZShvdXRwdXQsIDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSgpKTtcblxuICAgIC8vIFtidWdmaXgsIGNocm9tZV1cbiAgICAvLyBJZiBzZXBhcmF0b3IgaXMgdW5kZWZpbmVkLCB0aGVuIHRoZSByZXN1bHQgYXJyYXkgY29udGFpbnMganVzdCBvbmUgU3RyaW5nLFxuICAgIC8vIHdoaWNoIGlzIHRoZSB0aGlzIHZhbHVlIChjb252ZXJ0ZWQgdG8gYSBTdHJpbmcpLiBJZiBsaW1pdCBpcyBub3QgdW5kZWZpbmVkLFxuICAgIC8vIHRoZW4gdGhlIG91dHB1dCBhcnJheSBpcyB0cnVuY2F0ZWQgc28gdGhhdCBpdCBjb250YWlucyBubyBtb3JlIHRoYW4gbGltaXRcbiAgICAvLyBlbGVtZW50cy5cbiAgICAvLyBcIjBcIi5zcGxpdCh1bmRlZmluZWQsIDApIC0+IFtdXG4gICAgfSBlbHNlIGlmICgnMCcuc3BsaXQodm9pZCAwLCAwKS5sZW5ndGgpIHtcbiAgICAgICAgU3RyaW5nUHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnICYmIGxpbWl0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0clNwbGl0KHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBzdHJfcmVwbGFjZSA9IFN0cmluZ1Byb3RvdHlwZS5yZXBsYWNlO1xuICAgIHZhciByZXBsYWNlUmVwb3J0c0dyb3Vwc0NvcnJlY3RseSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBncm91cHMgPSBbXTtcbiAgICAgICAgJ3gnLnJlcGxhY2UoL3goLik/L2csIGZ1bmN0aW9uIChtYXRjaCwgZ3JvdXApIHtcbiAgICAgICAgICAgIHB1c2hDYWxsKGdyb3VwcywgZ3JvdXApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdyb3Vwcy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGdyb3Vwc1swXSA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgfSgpKTtcblxuICAgIGlmICghcmVwbGFjZVJlcG9ydHNHcm91cHNDb3JyZWN0bHkpIHtcbiAgICAgICAgU3RyaW5nUHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpc0ZuID0gaXNDYWxsYWJsZShyZXBsYWNlVmFsdWUpO1xuICAgICAgICAgICAgdmFyIGhhc0NhcHR1cmluZ0dyb3VwcyA9IGlzUmVnZXgoc2VhcmNoVmFsdWUpICYmICgvXFwpWyo/XS8pLnRlc3Qoc2VhcmNoVmFsdWUuc291cmNlKTtcbiAgICAgICAgICAgIGlmICghaXNGbiB8fCAhaGFzQ2FwdHVyaW5nR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cl9yZXBsYWNlLmNhbGwodGhpcywgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVkUmVwbGFjZVZhbHVlID0gZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxMYXN0SW5kZXggPSBzZWFyY2hWYWx1ZS5sYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFZhbHVlLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gc2VhcmNoVmFsdWUuZXhlYyhtYXRjaCkgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFZhbHVlLmxhc3RJbmRleCA9IG9yaWdpbmFsTGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChhcmdzLCBhcmd1bWVudHNbbGVuZ3RoIC0gMl0sIGFyZ3VtZW50c1tsZW5ndGggLSAxXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlVmFsdWUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyX3JlcGxhY2UuY2FsbCh0aGlzLCBzZWFyY2hWYWx1ZSwgd3JhcHBlZFJlcGxhY2VWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRUNNQS0yNjIsIDNyZCBCLjIuM1xuICAgIC8vIE5vdCBhbiBFQ01BU2NyaXB0IHN0YW5kYXJkLCBhbHRob3VnaCBFQ01BU2NyaXB0IDNyZCBFZGl0aW9uIGhhcyBhXG4gICAgLy8gbm9uLW5vcm1hdGl2ZSBzZWN0aW9uIHN1Z2dlc3RpbmcgdW5pZm9ybSBzZW1hbnRpY3MgYW5kIGl0IHNob3VsZCBiZVxuICAgIC8vIG5vcm1hbGl6ZWQgYWNyb3NzIGFsbCBicm93c2Vyc1xuICAgIC8vIFtidWdmaXgsIElFIGx0IDldIElFIDwgOSBzdWJzdHIoKSB3aXRoIG5lZ2F0aXZlIHZhbHVlIG5vdCB3b3JraW5nIGluIElFXG4gICAgdmFyIHN0cmluZ19zdWJzdHIgPSBTdHJpbmdQcm90b3R5cGUuc3Vic3RyO1xuICAgIHZhciBoYXNOZWdhdGl2ZVN1YnN0ckJ1ZyA9ICcnLnN1YnN0ciAmJiAnMGInLnN1YnN0cigtMSkgIT09ICdiJztcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgICAgICBzdWJzdHI6IGZ1bmN0aW9uIHN1YnN0cihzdGFydCwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZFN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFN0YXJ0ID0gbWF4KHRoaXMubGVuZ3RoICsgc3RhcnQsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ19zdWJzdHIuY2FsbCh0aGlzLCBub3JtYWxpemVkU3RhcnQsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9LCBoYXNOZWdhdGl2ZVN1YnN0ckJ1Zyk7XG5cbiAgICAvLyBFUzUgMTUuNS40LjIwXG4gICAgLy8gd2hpdGVzcGFjZSBmcm9tOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjUuNC4yMFxuICAgIHZhciB3cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAgICAgICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjgnICtcbiAgICAgICAgJ1xcdTIwMjlcXHVGRUZGJztcbiAgICB2YXIgemVyb1dpZHRoID0gJ1xcdTIwMGInO1xuICAgIHZhciB3c1JlZ2V4Q2hhcnMgPSAnWycgKyB3cyArICddJztcbiAgICB2YXIgdHJpbUJlZ2luUmVnZXhwID0gbmV3IFJlZ0V4cCgnXicgKyB3c1JlZ2V4Q2hhcnMgKyB3c1JlZ2V4Q2hhcnMgKyAnKicpO1xuICAgIHZhciB0cmltRW5kUmVnZXhwID0gbmV3IFJlZ0V4cCh3c1JlZ2V4Q2hhcnMgKyB3c1JlZ2V4Q2hhcnMgKyAnKiQnKTtcbiAgICB2YXIgaGFzVHJpbVdoaXRlc3BhY2VCdWcgPSBTdHJpbmdQcm90b3R5cGUudHJpbSAmJiAod3MudHJpbSgpIHx8ICF6ZXJvV2lkdGgudHJpbSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgICAgICAvLyBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvZmFzdGVyLXRyaW0tamF2YXNjcmlwdFxuICAgICAgICAvLyBodHRwOi8vcGVyZmVjdGlvbmtpbGxzLmNvbS93aGl0ZXNwYWNlLWRldmlhdGlvbnMvXG4gICAgICAgIHRyaW06IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FuJ3QgY29udmVydCBcIiArIHRoaXMgKyAnIHRvIG9iamVjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICRTdHJpbmcodGhpcykucmVwbGFjZSh0cmltQmVnaW5SZWdleHAsICcnKS5yZXBsYWNlKHRyaW1FbmRSZWdleHAsICcnKTtcbiAgICAgICAgfVxuICAgIH0sIGhhc1RyaW1XaGl0ZXNwYWNlQnVnKTtcbiAgICB2YXIgdHJpbSA9IGNhbGwuYmluZChTdHJpbmcucHJvdG90eXBlLnRyaW0pO1xuXG4gICAgdmFyIGhhc0xhc3RJbmRleEJ1ZyA9IFN0cmluZ1Byb3RvdHlwZS5sYXN0SW5kZXhPZiAmJiAnYWJj44GC44GEJy5sYXN0SW5kZXhPZign44GC44GEJywgMikgIT09IC0xO1xuICAgIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nUHJvdG90eXBlLCB7XG4gICAgICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgUyA9ICRTdHJpbmcodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VhcmNoU3RyID0gJFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgICAgICAgICAgdmFyIG51bVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gJE51bWJlcihhcmd1bWVudHNbMV0pIDogTmFOO1xuICAgICAgICAgICAgdmFyIHBvcyA9IGlzQWN0dWFsTmFOKG51bVBvcykgPyBJbmZpbml0eSA6IEVTLlRvSW50ZWdlcihudW1Qb3MpO1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbWluKG1heChwb3MsIDApLCBTLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgc2VhcmNoTGVuID0gc2VhcmNoU3RyLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBrID0gc3RhcnQgKyBzZWFyY2hMZW47XG4gICAgICAgICAgICB3aGlsZSAoayA+IDApIHtcbiAgICAgICAgICAgICAgICBrID0gbWF4KDAsIGsgLSBzZWFyY2hMZW4pO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHN0ckluZGV4T2Yoc3RyU2xpY2UoUywgaywgc3RhcnQgKyBzZWFyY2hMZW4pLCBzZWFyY2hTdHIpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGsgKyBpbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICB9LCBoYXNMYXN0SW5kZXhCdWcpO1xuXG4gICAgdmFyIG9yaWdpbmFsTGFzdEluZGV4T2YgPSBTdHJpbmdQcm90b3R5cGUubGFzdEluZGV4T2Y7XG4gICAgZGVmaW5lUHJvcGVydGllcyhTdHJpbmdQcm90b3R5cGUsIHtcbiAgICAgICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaFN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsTGFzdEluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH0sIFN0cmluZ1Byb3RvdHlwZS5sYXN0SW5kZXhPZi5sZW5ndGggIT09IDEpO1xuXG4gICAgLy8gRVMtNSAxNS4xLjIuMlxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJhZGl4ICovXG4gICAgaWYgKHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMikge1xuICAgIC8qIGVzbGludC1lbmFibGUgcmFkaXggKi9cbiAgICAgICAgLyogZ2xvYmFsIHBhcnNlSW50OiB0cnVlICovXG4gICAgICAgIHBhcnNlSW50ID0gKGZ1bmN0aW9uIChvcmlnUGFyc2VJbnQpIHtcbiAgICAgICAgICAgIHZhciBoZXhSZWdleCA9IC9eW1xcLStdPzBbeFhdLztcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZyA9IHRyaW0oU3RyaW5nKHN0cikpO1xuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0ZWRSYWRpeCA9ICROdW1iZXIocmFkaXgpIHx8IChoZXhSZWdleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ1BhcnNlSW50KHN0cmluZywgZGVmYXVsdGVkUmFkaXgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfShwYXJzZUludCkpO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4zXG4gICAgaWYgKDEgLyBwYXJzZUZsb2F0KCctMCcpICE9PSAtSW5maW5pdHkpIHtcbiAgICAgICAgLyogZ2xvYmFsIHBhcnNlRmxvYXQ6IHRydWUgKi9cbiAgICAgICAgcGFyc2VGbG9hdCA9IChmdW5jdGlvbiAob3JpZ1BhcnNlRmxvYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cmluZykge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dFN0cmluZyA9IHRyaW0oU3RyaW5nKHN0cmluZykpO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvcmlnUGFyc2VGbG9hdChpbnB1dFN0cmluZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJTbGljZShpbnB1dFN0cmluZywgMCwgMSkgPT09ICctJyA/IC0wIDogcmVzdWx0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfShwYXJzZUZsb2F0KSk7XG4gICAgfVxuXG4gICAgaWYgKFN0cmluZyhuZXcgUmFuZ2VFcnJvcigndGVzdCcpKSAhPT0gJ1JhbmdlRXJyb3I6IHRlc3QnKSB7XG4gICAgICAgIHZhciBlcnJvclRvU3RyaW5nU2hpbSA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzID09PSAndW5kZWZpbmVkJyB8fCB0aGlzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyB0aGlzICsgJyB0byBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIG5hbWUgPSAnRXJyb3InO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gJFN0cmluZyhuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtc2cgPSB0aGlzLm1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1zZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBtc2cgPSAnJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1zZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBtc2cgPSAkU3RyaW5nKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbXNnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtc2cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuYW1lICsgJzogJyArIG1zZztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY2FuJ3QgdXNlIGRlZmluZVByb3BlcnRpZXMgaGVyZSBiZWNhdXNlIG9mIHRvU3RyaW5nIGVudW1lcmF0aW9uIGlzc3VlIGluIElFIDw9IDhcbiAgICAgICAgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZXJyb3JUb1N0cmluZ1NoaW07XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgdmFyIGVuc3VyZU5vbkVudW1lcmFibGUgPSBmdW5jdGlvbiAob2JqLCBwcm9wKSB7XG4gICAgICAgICAgICBpZiAoaXNFbnVtKG9iaiwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVzYy5jb25maWd1cmFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzYy5lbnVtZXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZW5zdXJlTm9uRW51bWVyYWJsZShFcnJvci5wcm90b3R5cGUsICdtZXNzYWdlJyk7XG4gICAgICAgIGlmIChFcnJvci5wcm90b3R5cGUubWVzc2FnZSAhPT0gJycpIHtcbiAgICAgICAgICAgIEVycm9yLnByb3RvdHlwZS5tZXNzYWdlID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgZW5zdXJlTm9uRW51bWVyYWJsZShFcnJvci5wcm90b3R5cGUsICduYW1lJyk7XG4gICAgfVxuXG4gICAgaWYgKFN0cmluZygvYS9taWcpICE9PSAnL2EvZ2ltJykge1xuICAgICAgICB2YXIgcmVnZXhUb1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgdmFyIHN0ciA9ICcvJyArIHRoaXMuc291cmNlICsgJy8nO1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2xvYmFsKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9ICdnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgICAgICAgICBzdHIgKz0gJ2knO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlsaW5lKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9ICdtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGNhbid0IHVzZSBkZWZpbmVQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBvZiB0b1N0cmluZyBlbnVtZXJhdGlvbiBpc3N1ZSBpbiBJRSA8PSA4XG4gICAgICAgIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcgPSByZWdleFRvU3RyaW5nO1xuICAgIH1cbn0pKTtcbiIsIi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdGVmYW5wZW5uZXIvZXM2LXByb21pc2UvbWFzdGVyL0xJQ0VOU0VcbiAqIEB2ZXJzaW9uICAgMy4zLjFcbiAqL1xuXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuRVM2UHJvbWlzZSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gb2JqZWN0T3JGdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxudmFyIF9pc0FycmF5ID0gdW5kZWZpbmVkO1xuaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gIF9pc0FycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xufSBlbHNlIHtcbiAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xufVxuXG52YXIgaXNBcnJheSA9IF9pc0FycmF5O1xuXG52YXIgbGVuID0gMDtcbnZhciB2ZXJ0eE5leHQgPSB1bmRlZmluZWQ7XG52YXIgY3VzdG9tU2NoZWR1bGVyRm4gPSB1bmRlZmluZWQ7XG5cbnZhciBhc2FwID0gZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gIHF1ZXVlW2xlbl0gPSBjYWxsYmFjaztcbiAgcXVldWVbbGVuICsgMV0gPSBhcmc7XG4gIGxlbiArPSAyO1xuICBpZiAobGVuID09PSAyKSB7XG4gICAgLy8gSWYgbGVuIGlzIDIsIHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGFzeW5jIGZsdXNoLlxuICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5XG4gICAgLy8gd2lsbCBiZSBwcm9jZXNzZWQgYnkgdGhpcyBmbHVzaCB0aGF0IHdlIGFyZSBzY2hlZHVsaW5nLlxuICAgIGlmIChjdXN0b21TY2hlZHVsZXJGbikge1xuICAgICAgY3VzdG9tU2NoZWR1bGVyRm4oZmx1c2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZUZsdXNoKCk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTY2hlZHVsZXIoc2NoZWR1bGVGbikge1xuICBjdXN0b21TY2hlZHVsZXJGbiA9IHNjaGVkdWxlRm47XG59XG5cbmZ1bmN0aW9uIHNldEFzYXAoYXNhcEZuKSB7XG4gIGFzYXAgPSBhc2FwRm47XG59XG5cbnZhciBicm93c2VyV2luZG93ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQ7XG52YXIgYnJvd3Nlckdsb2JhbCA9IGJyb3dzZXJXaW5kb3cgfHwge307XG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBicm93c2VyR2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgYnJvd3Nlckdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGlzTm9kZSA9IHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHt9KS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbn1cblxuLy8gdmVydHhcbmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmVydHhOZXh0KGZsdXNoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpO1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBub2RlLmRhdGEgPSBpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMjtcbiAgfTtcbn1cblxuLy8gd2ViIHdvcmtlclxuZnVuY3Rpb24gdXNlTWVzc2FnZUNoYW5uZWwoKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZmx1c2g7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZVNldFRpbWVvdXQoKSB7XG4gIC8vIFN0b3JlIHNldFRpbWVvdXQgcmVmZXJlbmNlIHNvIGVzNi1wcm9taXNlIHdpbGwgYmUgdW5hZmZlY3RlZCBieVxuICAvLyBvdGhlciBjb2RlIG1vZGlmeWluZyBzZXRUaW1lb3V0IChsaWtlIHNpbm9uLnVzZUZha2VUaW1lcnMoKSlcbiAgdmFyIGdsb2JhbFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnbG9iYWxTZXRUaW1lb3V0KGZsdXNoLCAxKTtcbiAgfTtcbn1cblxudmFyIHF1ZXVlID0gbmV3IEFycmF5KDEwMDApO1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBxdWV1ZVtpXTtcbiAgICB2YXIgYXJnID0gcXVldWVbaSArIDFdO1xuXG4gICAgY2FsbGJhY2soYXJnKTtcblxuICAgIHF1ZXVlW2ldID0gdW5kZWZpbmVkO1xuICAgIHF1ZXVlW2kgKyAxXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIGF0dGVtcHRWZXJ0eCgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgciA9IHJlcXVpcmU7XG4gICAgdmFyIHZlcnR4ID0gcigndmVydHgnKTtcbiAgICB2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xuICB9XG59XG5cbnZhciBzY2hlZHVsZUZsdXNoID0gdW5kZWZpbmVkO1xuLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbmlmIChpc05vZGUpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU5leHRUaWNrKCk7XG59IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG59IGVsc2UgaWYgKGlzV29ya2VyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNZXNzYWdlQ2hhbm5lbCgpO1xufSBlbHNlIGlmIChicm93c2VyV2luZG93ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IGF0dGVtcHRWZXJ0eCgpO1xufSBlbHNlIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICB2YXIgcGFyZW50ID0gdGhpcztcblxuICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoY2hpbGRbUFJPTUlTRV9JRF0gPT09IHVuZGVmaW5lZCkge1xuICAgIG1ha2VQcm9taXNlKGNoaWxkKTtcbiAgfVxuXG4gIHZhciBfc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG4gIGlmIChfc3RhdGUpIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNhbGxiYWNrID0gX2FyZ3VtZW50c1tfc3RhdGUgLSAxXTtcbiAgICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaW52b2tlQ2FsbGJhY2soX3N0YXRlLCBjaGlsZCwgY2FsbGJhY2ssIHBhcmVudC5fcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0pKCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZDtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlc29sdmVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgcmVzb2x2ZWQgd2l0aCB0aGVcbiAgcGFzc2VkIGB2YWx1ZWAuIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZXNvbHZlKDEpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgxKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlc29sdmVcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgYHZhbHVlYFxuKi9cbmZ1bmN0aW9uIHJlc29sdmUob2JqZWN0KSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICBfcmVzb2x2ZShwcm9taXNlLCBvYmplY3QpO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxudmFyIFBST01JU0VfSUQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMTYpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbnZhciBHRVRfVEhFTl9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiBzZWxmRnVsZmlsbG1lbnQoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbn1cblxuZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIEdFVF9USEVOX0VSUk9SLmVycm9yID0gZXJyb3I7XG4gICAgcmV0dXJuIEdFVF9USEVOX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4uY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHRyeVRoZW4odGhlbiwgdGhlbmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG5cbiAgICAgIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpO1xuXG4gICAgaWYgKCFzZWFsZWQgJiYgZXJyb3IpIHtcbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZSh0aGVuYWJsZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJCkge1xuICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3RvciAmJiB0aGVuJCQgPT09IHRoZW4gJiYgbWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3Rvci5yZXNvbHZlID09PSByZXNvbHZlKSB7XG4gICAgaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoZW4kJCA9PT0gR0VUX1RIRU5fRVJST1IpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgR0VUX1RIRU5fRVJST1IuZXJyb3IpO1xuICAgIH0gZWxzZSBpZiAodGhlbiQkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoZW4kJCkpIHtcbiAgICAgIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlLCB0aGVuJCQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICBfcmVqZWN0KHByb21pc2UsIHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUsIGdldFRoZW4odmFsdWUpKTtcbiAgfSBlbHNlIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoUmVqZWN0aW9uKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX29uZXJyb3IpIHtcbiAgICBwcm9taXNlLl9vbmVycm9yKHByb21pc2UuX3Jlc3VsdCk7XG4gIH1cblxuICBwdWJsaXNoKHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBmdWxmaWxsKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb21pc2UuX3Jlc3VsdCA9IHZhbHVlO1xuICBwcm9taXNlLl9zdGF0ZSA9IEZVTEZJTExFRDtcblxuICBpZiAocHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNhcChwdWJsaXNoLCBwcm9taXNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cbiAgcGFyZW50Ll9vbmVycm9yID0gbnVsbDtcblxuICBfc3Vic2NyaWJlcnNbbGVuZ3RoXSA9IGNoaWxkO1xuICBfc3Vic2NyaWJlcnNbbGVuZ3RoICsgRlVMRklMTEVEXSA9IG9uRnVsZmlsbG1lbnQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBSRUpFQ1RFRF0gPSBvblJlamVjdGlvbjtcblxuICBpZiAobGVuZ3RoID09PSAwICYmIHBhcmVudC5fc3RhdGUpIHtcbiAgICBhc2FwKHB1Ymxpc2gsIHBhcmVudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaChwcm9taXNlKSB7XG4gIHZhciBzdWJzY3JpYmVycyA9IHByb21pc2UuX3N1YnNjcmliZXJzO1xuICB2YXIgc2V0dGxlZCA9IHByb21pc2UuX3N0YXRlO1xuXG4gIGlmIChzdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2hpbGQgPSB1bmRlZmluZWQsXG4gICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZCxcbiAgICAgIGRldGFpbCA9IHByb21pc2UuX3Jlc3VsdDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgY2hpbGQgPSBzdWJzY3JpYmVyc1tpXTtcbiAgICBjYWxsYmFjayA9IHN1YnNjcmliZXJzW2kgKyBzZXR0bGVkXTtcblxuICAgIGlmIChjaGlsZCkge1xuICAgICAgaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgY2hpbGQsIGNhbGxiYWNrLCBkZXRhaWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhkZXRhaWwpO1xuICAgIH1cbiAgfVxuXG4gIHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIEVycm9yT2JqZWN0KCkge1xuICB0aGlzLmVycm9yID0gbnVsbDtcbn1cblxudmFyIFRSWV9DQVRDSF9FUlJPUiA9IG5ldyBFcnJvck9iamVjdCgpO1xuXG5mdW5jdGlvbiB0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKGRldGFpbCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBUUllfQ0FUQ0hfRVJST1IuZXJyb3IgPSBlO1xuICAgIHJldHVybiBUUllfQ0FUQ0hfRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkLFxuICAgICAgZXJyb3IgPSB1bmRlZmluZWQsXG4gICAgICBzdWNjZWVkZWQgPSB1bmRlZmluZWQsXG4gICAgICBmYWlsZWQgPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgdmFsdWUgPSB0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gVFJZX0NBVENIX0VSUk9SKSB7XG4gICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgZXJyb3IgPSB2YWx1ZS5lcnJvcjtcbiAgICAgIHZhbHVlID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgLy8gbm9vcFxuICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgX3Jlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZmFpbGVkKSB7XG4gICAgICBfcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IEZVTEZJTExFRCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBSRUpFQ1RFRCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCByZXNvbHZlcikge1xuICB0cnkge1xuICAgIHJlc29sdmVyKGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHZhbHVlKSB7XG4gICAgICBfcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgIF9yZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIF9yZWplY3QocHJvbWlzZSwgZSk7XG4gIH1cbn1cblxudmFyIGlkID0gMDtcbmZ1bmN0aW9uIG5leHRJZCgpIHtcbiAgcmV0dXJuIGlkKys7XG59XG5cbmZ1bmN0aW9uIG1ha2VQcm9taXNlKHByb21pc2UpIHtcbiAgcHJvbWlzZVtQUk9NSVNFX0lEXSA9IGlkKys7XG4gIHByb21pc2UuX3N0YXRlID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9yZXN1bHQgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3N1YnNjcmliZXJzID0gW107XG59XG5cbmZ1bmN0aW9uIEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0KSB7XG4gIHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7XG4gICAgbWFrZVByb21pc2UodGhpcy5wcm9taXNlKTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgdGhpcy5fcmVtYWluaW5nID0gaW5wdXQubGVuZ3RoO1xuXG4gICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgIHRoaXMuX2VudW1lcmF0ZSgpO1xuICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX3JlamVjdCh0aGlzLnByb21pc2UsIHZhbGlkYXRpb25FcnJvcigpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0aW9uRXJyb3IoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xufTtcblxuRW51bWVyYXRvci5wcm90b3R5cGUuX2VudW1lcmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgX2lucHV0ID0gdGhpcy5faW5wdXQ7XG5cbiAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHRoaXMuX2VhY2hFbnRyeShfaW5wdXRbaV0sIGkpO1xuICB9XG59O1xuXG5FbnVtZXJhdG9yLnByb3RvdHlwZS5fZWFjaEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5LCBpKSB7XG4gIHZhciBjID0gdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvcjtcbiAgdmFyIHJlc29sdmUkJCA9IGMucmVzb2x2ZTtcblxuICBpZiAocmVzb2x2ZSQkID09PSByZXNvbHZlKSB7XG4gICAgdmFyIF90aGVuID0gZ2V0VGhlbihlbnRyeSk7XG5cbiAgICBpZiAoX3RoZW4gPT09IHRoZW4gJiYgZW50cnkuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBfdGhlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fcmVtYWluaW5nLS07XG4gICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFByb21pc2UpIHtcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIGVudHJ5LCBfdGhlbik7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQocHJvbWlzZSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSQkKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlJCQoZW50cnkpO1xuICAgICAgfSksIGkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkKGVudHJ5KSwgaSk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbiAoc3RhdGUsIGksIHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gUEVORElORykge1xuICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuXG4gICAgaWYgKHN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgX3JlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc3VsdFtpXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gIH1cbn07XG5cbkVudW1lcmF0b3IucHJvdG90eXBlLl93aWxsU2V0dGxlQXQgPSBmdW5jdGlvbiAocHJvbWlzZSwgaSkge1xuICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChGVUxGSUxMRUQsIGksIHZhbHVlKTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoUkVKRUNURUQsIGksIHJlYXNvbik7XG4gIH0pO1xufTtcblxuLyoqXG4gIGBQcm9taXNlLmFsbGAgYWNjZXB0cyBhbiBhcnJheSBvZiBwcm9taXNlcywgYW5kIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaFxuICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiBmdWxmaWxsbWVudCB2YWx1ZXMgZm9yIHRoZSBwYXNzZWQgcHJvbWlzZXMsIG9yXG4gIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbiBvZiB0aGUgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gYmUgcmVqZWN0ZWQuIEl0IGNhc3RzIGFsbFxuICBlbGVtZW50cyBvZiB0aGUgcGFzc2VkIGl0ZXJhYmxlIHRvIHByb21pc2VzIGFzIGl0IHJ1bnMgdGhpcyBhbGdvcml0aG0uXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlc29sdmUoMik7XG4gIGxldCBwcm9taXNlMyA9IHJlc29sdmUoMyk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBUaGUgYXJyYXkgaGVyZSB3b3VsZCBiZSBbIDEsIDIsIDMgXTtcbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgYWxsYCBhcmUgcmVqZWN0ZWQsIHRoZSBmaXJzdCBwcm9taXNlXG4gIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZXMnc1xuICByZWplY3Rpb24gaGFuZGxlci4gRm9yIGV4YW1wbGU6XG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlamVjdChuZXcgRXJyb3IoXCIyXCIpKTtcbiAgbGV0IHByb21pc2UzID0gcmVqZWN0KG5ldyBFcnJvcihcIjNcIikpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gXCIyXCJcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgYWxsXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllcyBhcnJheSBvZiBwcm9taXNlc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIGBwcm9taXNlc2AgaGF2ZSBiZWVuXG4gIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gYWxsKGVudHJpZXMpIHtcbiAgcmV0dXJuIG5ldyBFbnVtZXJhdG9yKHRoaXMsIGVudHJpZXMpLnByb21pc2U7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yYWNlYCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2ggaXMgc2V0dGxlZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlXG4gIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIHNldHRsZS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHJlc3VsdCA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBpdCB3YXMgcmVzb2x2ZWQgYmVmb3JlIHByb21pc2UxXG4gICAgLy8gd2FzIHJlc29sdmVkLlxuICB9KTtcbiAgYGBgXG5cbiAgYFByb21pc2UucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdFxuICBzZXR0bGVkIHByb21pc2UgbWF0dGVycy4gRm9yIGV4YW1wbGUsIGV2ZW4gaWYgb3RoZXIgcHJvbWlzZXMgZ2l2ZW4gdG8gdGhlXG4gIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXNcbiAgYmVjb21lIHJlamVjdGVkIGJlZm9yZSB0aGUgb3RoZXIgcHJvbWlzZXMgYmVjYW1lIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gIHByb21pc2Ugd2lsbCBiZWNvbWUgcmVqZWN0ZWQ6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcigncHJvbWlzZSAyJykpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgcHJvbWlzZSAyIGJlY2FtZSByZWplY3RlZCBiZWZvcmVcbiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZFxuICB9KTtcbiAgYGBgXG5cbiAgQW4gZXhhbXBsZSByZWFsLXdvcmxkIHVzZSBjYXNlIGlzIGltcGxlbWVudGluZyB0aW1lb3V0czpcblxuICBgYGBqYXZhc2NyaXB0XG4gIFByb21pc2UucmFjZShbYWpheCgnZm9vLmpzb24nKSwgdGltZW91dCg1MDAwKV0pXG4gIGBgYFxuXG4gIEBtZXRob2QgcmFjZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmVcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2Ugd2hpY2ggc2V0dGxlcyBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlIGZpcnN0IHBhc3NlZFxuICBwcm9taXNlIHRvIHNldHRsZS5cbiovXG5mdW5jdGlvbiByYWNlKGVudHJpZXMpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAoIWlzQXJyYXkoZW50cmllcykpIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlamVjdGAgcmV0dXJucyBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcGFzc2VkIGByZWFzb25gLlxuICBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBnaXZlbiBgcmVhc29uYC5cbiovXG5mdW5jdGlvbiByZWplY3QocmVhc29uKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICBfcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBuZWVkc1Jlc29sdmVyKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwYXNzIGEgcmVzb2x2ZXIgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZSBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG59XG5cbmZ1bmN0aW9uIG5lZWRzTmV3KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xufVxuXG4vKipcbiAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZSByZWFzb25cbiAgd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgVGVybWlub2xvZ3lcbiAgLS0tLS0tLS0tLS1cblxuICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLlxuICAtIGB0aGVuYWJsZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyBhIGB0aGVuYCBtZXRob2QuXG4gIC0gYHZhbHVlYCBpcyBhbnkgbGVnYWwgSmF2YVNjcmlwdCB2YWx1ZSAoaW5jbHVkaW5nIHVuZGVmaW5lZCwgYSB0aGVuYWJsZSwgb3IgYSBwcm9taXNlKS5cbiAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuXG4gIC0gYHJlYXNvbmAgaXMgYSB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aHkgYSBwcm9taXNlIHdhcyByZWplY3RlZC5cbiAgLSBgc2V0dGxlZGAgdGhlIGZpbmFsIHJlc3Rpbmcgc3RhdGUgb2YgYSBwcm9taXNlLCBmdWxmaWxsZWQgb3IgcmVqZWN0ZWQuXG5cbiAgQSBwcm9taXNlIGNhbiBiZSBpbiBvbmUgb2YgdGhyZWUgc3RhdGVzOiBwZW5kaW5nLCBmdWxmaWxsZWQsIG9yIHJlamVjdGVkLlxuXG4gIFByb21pc2VzIHRoYXQgYXJlIGZ1bGZpbGxlZCBoYXZlIGEgZnVsZmlsbG1lbnQgdmFsdWUgYW5kIGFyZSBpbiB0aGUgZnVsZmlsbGVkXG4gIHN0YXRlLiAgUHJvbWlzZXMgdGhhdCBhcmUgcmVqZWN0ZWQgaGF2ZSBhIHJlamVjdGlvbiByZWFzb24gYW5kIGFyZSBpbiB0aGVcbiAgcmVqZWN0ZWQgc3RhdGUuICBBIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5ldmVyIGEgdGhlbmFibGUuXG5cbiAgUHJvbWlzZXMgY2FuIGFsc28gYmUgc2FpZCB0byAqcmVzb2x2ZSogYSB2YWx1ZS4gIElmIHRoaXMgdmFsdWUgaXMgYWxzbyBhXG4gIHByb21pc2UsIHRoZW4gdGhlIG9yaWdpbmFsIHByb21pc2UncyBzZXR0bGVkIHN0YXRlIHdpbGwgbWF0Y2ggdGhlIHZhbHVlJ3NcbiAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsXG4gIGl0c2VsZiByZWplY3QsIGFuZCBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpbGxcbiAgaXRzZWxmIGZ1bGZpbGwuXG5cblxuICBCYXNpYyBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tXG5cbiAgYGBganNcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAvLyBvbiBzdWNjZXNzXG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG5cbiAgICAvLyBvbiBmYWlsdXJlXG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH0pO1xuXG4gIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgQWR2YW5jZWQgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLS0tLVxuXG4gIFByb21pc2VzIHNoaW5lIHdoZW4gYWJzdHJhY3RpbmcgYXdheSBhc3luY2hyb25vdXMgaW50ZXJhY3Rpb25zIHN1Y2ggYXNcbiAgYFhNTEh0dHBSZXF1ZXN0YHMuXG5cbiAgYGBganNcbiAgZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuRE9ORSkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdnZXRKU09OOiBgJyArIHVybCArICdgIGZhaWxlZCB3aXRoIHN0YXR1czogWycgKyB0aGlzLnN0YXR1cyArICddJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEpTT04oJy9wb3N0cy5qc29uJykudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLlxuXG4gIGBgYGpzXG4gIFByb21pc2UuYWxsKFtcbiAgICBnZXRKU09OKCcvcG9zdHMnKSxcbiAgICBnZXRKU09OKCcvY29tbWVudHMnKVxuICBdKS50aGVuKGZ1bmN0aW9uKHZhbHVlcyl7XG4gICAgdmFsdWVzWzBdIC8vID0+IHBvc3RzSlNPTlxuICAgIHZhbHVlc1sxXSAvLyA9PiBjb21tZW50c0pTT05cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH0pO1xuICBgYGBcblxuICBAY2xhc3MgUHJvbWlzZVxuICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlclxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEBjb25zdHJ1Y3RvclxuKi9cbmZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgdGhpc1tQUk9NSVNFX0lEXSA9IG5leHRJZCgpO1xuICB0aGlzLl9yZXN1bHQgPSB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICBpZiAobm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICB0eXBlb2YgcmVzb2x2ZXIgIT09ICdmdW5jdGlvbicgJiYgbmVlZHNSZXNvbHZlcigpO1xuICAgIHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlID8gaW5pdGlhbGl6ZVByb21pc2UodGhpcywgcmVzb2x2ZXIpIDogbmVlZHNOZXcoKTtcbiAgfVxufVxuXG5Qcm9taXNlLmFsbCA9IGFsbDtcblByb21pc2UucmFjZSA9IHJhY2U7XG5Qcm9taXNlLnJlc29sdmUgPSByZXNvbHZlO1xuUHJvbWlzZS5yZWplY3QgPSByZWplY3Q7XG5Qcm9taXNlLl9zZXRTY2hlZHVsZXIgPSBzZXRTY2hlZHVsZXI7XG5Qcm9taXNlLl9zZXRBc2FwID0gc2V0QXNhcDtcblByb21pc2UuX2FzYXAgPSBhc2FwO1xuXG5Qcm9taXNlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFByb21pc2UsXG5cbiAgLyoqXG4gICAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gICAgd2hpY2ggcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGVcbiAgICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gdXNlciBpcyB1bmF2YWlsYWJsZSwgYW5kIHlvdSBhcmUgZ2l2ZW4gdGhlIHJlYXNvbiB3aHlcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQ2hhaW5pbmdcbiAgICAtLS0tLS0tLVxuICBcbiAgICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICAgIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmaXJzdCBwcm9taXNlJ3MgZnVsZmlsbG1lbnRcbiAgICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgXG4gICAgYGBganNcbiAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgIHJldHVybiB1c2VyLm5hbWU7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuICdkZWZhdWx0IG5hbWUnO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgICAvLyB3aWxsIGJlIGAnZGVmYXVsdCBuYW1lJ2BcbiAgICB9KTtcbiAgXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gICAgfSk7XG4gICAgYGBgXG4gICAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG4gIFxuICAgIGBgYGpzXG4gICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEFzc2ltaWxhdGlvblxuICAgIC0tLS0tLS0tLS0tLVxuICBcbiAgICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZVxuICAgIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICAgIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlXG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZVxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBTaW1wbGUgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCByZXN1bHQ7XG4gIFxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBmaW5kUmVzdWx0KCk7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9XG4gICAgYGBgXG4gIFxuICAgIEVycmJhY2sgRXhhbXBsZVxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIFByb21pc2UgRXhhbXBsZTtcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGZpbmRSZXN1bHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQWR2YW5jZWQgRXhhbXBsZVxuICAgIC0tLS0tLS0tLS0tLS0tXG4gIFxuICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgXG4gICAgYGBgamF2YXNjcmlwdFxuICAgIGxldCBhdXRob3IsIGJvb2tzO1xuICBcbiAgICB0cnkge1xuICAgICAgYXV0aG9yID0gZmluZEF1dGhvcigpO1xuICAgICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgRXJyYmFjayBFeGFtcGxlXG4gIFxuICAgIGBgYGpzXG4gIFxuICAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHtcbiAgXG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuICBcbiAgICB9XG4gIFxuICAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvdW5kQm9va3MoYm9va3MpO1xuICAgICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH1cbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgUHJvbWlzZSBFeGFtcGxlO1xuICBcbiAgICBgYGBqYXZhc2NyaXB0XG4gICAgZmluZEF1dGhvcigpLlxuICAgICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgICAgLy8gZm91bmQgYm9va3NcbiAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbihyZWFzb24pe1xuICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICB9KTtcbiAgICBgYGBcbiAgXG4gICAgQG1ldGhvZCB0aGVuXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25GdWxmaWxsZWRcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG4gIHRoZW46IHRoZW4sXG5cbiAgLyoqXG4gICAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICAgIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG4gIFxuICAgIGBgYGpzXG4gICAgZnVuY3Rpb24gZmluZEF1dGhvcigpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gICAgfVxuICBcbiAgICAvLyBzeW5jaHJvbm91c1xuICAgIHRyeSB7XG4gICAgICBmaW5kQXV0aG9yKCk7XG4gICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgfVxuICBcbiAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gICAgZmluZEF1dGhvcigpWydjYXRjaCddKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGNhdGNoXG4gICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgJ2NhdGNoJzogZnVuY3Rpb24gX2NhdGNoKG9uUmVqZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGlvbik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICAgIHZhciBsb2NhbCA9IHVuZGVmaW5lZDtcblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbCA9IGdsb2JhbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBsb2NhbCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBQID0gbG9jYWwuUHJvbWlzZTtcblxuICAgIGlmIChQKSB7XG4gICAgICAgIHZhciBwcm9taXNlVG9TdHJpbmcgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFAucmVzb2x2ZSgpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gc2lsZW50bHkgaWdub3JlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb21pc2VUb1N0cmluZyA9PT0gJ1tvYmplY3QgUHJvbWlzZV0nICYmICFQLmNhc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvY2FsLlByb21pc2UgPSBQcm9taXNlO1xufVxuXG5wb2x5ZmlsbCgpO1xuLy8gU3RyYW5nZSBjb21wYXQuLlxuUHJvbWlzZS5wb2x5ZmlsbCA9IHBvbHlmaWxsO1xuUHJvbWlzZS5Qcm9taXNlID0gUHJvbWlzZTtcblxucmV0dXJuIFByb21pc2U7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lczYtcHJvbWlzZS5tYXAiLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBwcm9taXNlRXh0ZW5zaW9uc18xID0gcmVxdWlyZShcIi4vLi4vaGVscGVycy9wcm9taXNlRXh0ZW5zaW9uc1wiKTtcclxudmFyIGFjdGl2aXR5TWFuYWdlbWVudEFQSV8xID0gcmVxdWlyZShcIi4vYWN0aXZpdHlNYW5hZ2VtZW50QVBJXCIpO1xyXG52YXIgYWN0aXZpdHlBR01fMSA9IHJlcXVpcmUoXCIuLi9jb3JlL2FjdGl2aXR5QUdNXCIpO1xyXG52YXIgQWN0aXZpdHlBUEkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWN0aXZpdHlBUEkobWFuYWdlciwgbXkpIHtcclxuICAgICAgICB0aGlzLnZlcnNpb24gPSBcIjIuMi40XCI7XHJcbiAgICAgICAgdGhpcy5fX21nciA9IG1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5fbXkgPSBteTtcclxuICAgICAgICB0aGlzLmFsbCA9IG5ldyBhY3Rpdml0eU1hbmFnZW1lbnRBUElfMS5BY3Rpdml0eU1hbmFnZW1lbnRBUEkobWFuYWdlciwgbXkpO1xyXG4gICAgfVxyXG4gICAgQWN0aXZpdHlBUEkucHJvdG90eXBlLnJlYWR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX19tZ3IucmVhZHkoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcyk7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlBUEkucHJvdG90eXBlLCBcIm15XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX215O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5QVBJLnByb3RvdHlwZSwgXCJhd2FyZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9teS53aW5kb3cgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eUFQSS5wcm90b3R5cGUsIFwiaW5BY3Rpdml0eVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF3YXJlICYmIHRoaXMuX215LmFjdGl2aXR5ICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlBUEkucHJvdG90eXBlLCBcImFnbVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5hd2FyZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5BY3Rpdml0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBhY3Rpdml0eUFHTV8xLkFjdGl2aXR5QUdNKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9teS5hY3Rpdml0eS5hZ207XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gQWN0aXZpdHlBUEk7XHJcbn0oKSk7XHJcbmV4cG9ydHMuQWN0aXZpdHlBUEkgPSBBY3Rpdml0eUFQSTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHlBUEkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vLi4vaGVscGVycy91dGlsXCIpO1xyXG52YXIgQWN0aXZpdHlNYW5hZ2VtZW50QVBJID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFjdGl2aXR5TWFuYWdlbWVudEFQSShtYW5hZ2VyLCBteSkge1xyXG4gICAgICAgIHRoaXMuX20gPSBtYW5hZ2VyO1xyXG4gICAgICAgIHRoaXMuX215ID0gbXk7XHJcbiAgICAgICAgdGhpcy5hY3Rpdml0eVR5cGVzID0ge1xyXG4gICAgICAgICAgICBnZXQ6IHRoaXMuX2dldEFjdGl2aXR5VHlwZXNXcmFwcGVyLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHJlZ2lzdGVyOiB0aGlzLl9tLnJlZ2lzdGVyQWN0aXZpdHlUeXBlLmJpbmQodGhpcy5fbSksXHJcbiAgICAgICAgICAgIHVucmVnaXN0ZXI6IHRoaXMuX20udW5yZWdpc3RlckFjdGl2aXR5VHlwZS5iaW5kKHRoaXMuX20pLFxyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IHRoaXMuX20uc3Vic2NyaWJlQWN0aXZpdHlUeXBlRXZlbnRzLmJpbmQodGhpcy5fbSksXHJcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGluaXRpYXRlOiB0aGlzLl9tLmluaXRpYXRlLmJpbmQodGhpcy5fbSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMud2luZG93VHlwZXMgPSB7XHJcbiAgICAgICAgICAgIGdldDogdGhpcy5fZ2V0V2luZG93VHlwZXNXcmFwcGVyLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIHJlZ2lzdGVyRmFjdG9yeTogdGhpcy5fbS5yZWdpc3RlcldpbmRvd0ZhY3RvcnkuYmluZCh0aGlzLl9tKSxcclxuICAgICAgICAgICAgdW5yZWdpc3RlckZhY3Rvcnk6IHRoaXMuX20udW5yZWdpc3RlcldpbmRvd0ZhY3RvcnkuYmluZCh0aGlzLl9tKSxcclxuICAgICAgICAgICAgc3Vic2NyaWJlOiB0aGlzLl9tLnN1YnNjcmliZVdpbmRvd1R5cGVFdmVudHMuYmluZCh0aGlzLl9tKSxcclxuICAgICAgICAgICAgdW5zdWJzY3JpYmU6IHVuZGVmaW5lZFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy53aW5kb3dzID0ge1xyXG4gICAgICAgICAgICBnZXQ6IHRoaXMuX20uZ2V0V2luZG93cy5iaW5kKHRoaXMuX20pLFxyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IHRoaXMuX20uc3Vic2NyaWJlV2luZG93RXZlbnRzLmJpbmQodGhpcy5fbSksXHJcbiAgICAgICAgICAgIGFubm91bmNlOiB0aGlzLl9tLmFubm91bmNlV2luZG93LmJpbmQodGhpcy5fbSksXHJcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGNyZWF0ZTogdGhpcy5fbS5jcmVhdGVXaW5kb3cuYmluZCh0aGlzLl9tKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXMgPSB7XHJcbiAgICAgICAgICAgIGdldDogdGhpcy5fbS5nZXRBY3Rpdml0aWVzLmJpbmQodGhpcy5fbSksXHJcbiAgICAgICAgICAgIHN1YnNjcmliZTogdGhpcy5fbS5zdWJzY3JpYmVBY3Rpdml0eUV2ZW50cy5iaW5kKHRoaXMuX20pLFxyXG4gICAgICAgICAgICB1bnN1YnNjcmliZTogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIEFjdGl2aXR5TWFuYWdlbWVudEFQSS5wcm90b3R5cGUuX2dldEFjdGl2aXR5VHlwZXNXcmFwcGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChuYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbS5nZXRBY3Rpdml0eVR5cGVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tLmdldEFjdGl2aXR5VHlwZShuYW1lKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZW1lbnRBUEkucHJvdG90eXBlLl9nZXRXaW5kb3dUeXBlc1dyYXBwZXIgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tLmdldFdpbmRvd1R5cGVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tLmdldFdpbmRvd1R5cGUobmFtZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFjdGl2aXR5TWFuYWdlbWVudEFQSTtcclxufSgpKTtcclxuZXhwb3J0cy5BY3Rpdml0eU1hbmFnZW1lbnRBUEkgPSBBY3Rpdml0eU1hbmFnZW1lbnRBUEk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5TWFuYWdlbWVudEFQSS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIi4vLi4vaGVscGVycy9sb2dnZXJcIik7XHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vLi4vaGVscGVycy91dGlsXCIpO1xyXG52YXIgQWN0aXZpdHlNeSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eU15KG1hbmFnZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX215QWN0aXZpdHlKb2luZWRDYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLl9teUFjdGl2aXR5UmVtb3ZlZENhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX215Q29udGV4dFVwZGF0ZUNhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2xvZ2dlciA9IGxvZ2dlcl8xLkxvZ2dlci5HZXQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5fbSA9IG1hbmFnZXI7XHJcbiAgICAgICAgbWFuYWdlci5yZWFkeSgpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChhbSkge1xyXG4gICAgICAgICAgICBhbS5zdWJzY3JpYmVBY3Rpdml0eUNvbnRleHRDaGFuZ2VkKF90aGlzLl9zdWJzY3JpYmVNeUNvbnRleHRDaGFuZ2VkLmJpbmQoX3RoaXMpKTtcclxuICAgICAgICAgICAgYW0uc3Vic2NyaWJlV2luZG93RXZlbnRzKF90aGlzLl9zdWJzY3JpYmVNeVdpbmRvd0V2ZW50LmJpbmQoX3RoaXMpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eU15LnByb3RvdHlwZSwgXCJ3aW5kb3dcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0aGlzLl93KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFubm91bmNlZFdpbmRvd3MgPSB0aGlzLl9tLmFubm91bmNlZFdpbmRvd3M7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5ub3VuY2VkV2luZG93cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdyA9IGFubm91bmNlZFdpbmRvd3NbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3c7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlNeS5wcm90b3R5cGUsIFwiYWN0aXZpdHlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbXlXaW4gPSB0aGlzLndpbmRvdztcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwobXlXaW4pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBteVdpbi5hY3Rpdml0eTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLmNyZWF0ZVdpbmRvdyA9IGZ1bmN0aW9uICh3aW5kb3dUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX20uY3JlYXRlV2luZG93KHRoaXMuYWN0aXZpdHksIHdpbmRvd1R5cGUpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLmNyZWF0ZVN0YWNrZWRXaW5kb3dzID0gZnVuY3Rpb24gKHdpbmRvd1R5cGVzLCB0aW1lb3V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX20uY3JlYXRlU3RhY2tlZFdpbmRvd3ModGhpcy5hY3Rpdml0eSwgd2luZG93VHlwZXMsIHRpbWVvdXQpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eU15LnByb3RvdHlwZSwgXCJjb250ZXh0XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFjdGl2aXR5ID0gdGhpcy5hY3Rpdml0eTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQoYWN0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5LmNvbnRleHQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBY3Rpdml0eU15LnByb3RvdHlwZS5vbkFjdGl2aXR5Sm9pbmVkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5fbXlBY3Rpdml0eUpvaW5lZENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICB2YXIgbXlXaW4gPSB0aGlzLndpbmRvdztcclxuICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwobXlXaW4pICYmICF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKG15V2luLmFjdGl2aXR5KSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhteVdpbi5hY3Rpdml0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLm9uQWN0aXZpdHlMZWZ0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5fbXlBY3Rpdml0eVJlbW92ZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNeS5wcm90b3R5cGUub25Db250ZXh0Q2hhbmdlZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX215Q29udGV4dFVwZGF0ZUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICB2YXIgbXlXaW4gPSB0aGlzLndpbmRvdztcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbChteVdpbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWN0aXZpdHkgPSBteVdpbi5hY3Rpdml0eTtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbChhY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjayhhY3Rpdml0eS5jb250ZXh0LCBhY3Rpdml0eS5jb250ZXh0LCBbXSwgYWN0aXZpdHkpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLl9zdWJzY3JpYmVNeUNvbnRleHRDaGFuZ2VkID0gZnVuY3Rpb24gKGFjdGl2aXR5LCBjb250ZXh0LCBkZWx0YSwgcmVtb3ZlZCkge1xyXG4gICAgICAgIHZhciBteVdpbiA9IHRoaXMud2luZG93O1xyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKG15V2luKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBteUFjdGl2aXR5ID0gbXlXaW4uYWN0aXZpdHk7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwobXlBY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWN0aXZpdHkuaWQgIT09IG15QWN0aXZpdHkuaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9ub3RpZnlNeUNvbnRleHRDaGFuZ2VkKGFjdGl2aXR5LCBjb250ZXh0LCBkZWx0YSwgcmVtb3ZlZCk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNeS5wcm90b3R5cGUuX3N1YnNjcmliZU15V2luZG93RXZlbnQgPSBmdW5jdGlvbiAoYWN0aXZpdHksIHdpbmRvdywgZXZlbnQpIHtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0aGlzLndpbmRvdykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy53aW5kb3cuaWQgIT09IHdpbmRvdy5pZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChldmVudCA9PT0gXCJqb2luZWRcIikge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3RpZnlPbkpvaW5lZChhY3Rpdml0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3RpZnlNeVdpbmRvd0V2ZW50KGFjdGl2aXR5LCB0aGlzLl9teUFjdGl2aXR5UmVtb3ZlZENhbGxiYWNrcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLl9ub3RpZnlNeVdpbmRvd0V2ZW50ID0gZnVuY3Rpb24gKGFjdGl2aXR5LCBjYWxsYmFja1N0b3JlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGNhbGxiYWNrU3RvcmUubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gY2FsbGJhY2tTdG9yZVtpbmRleF07XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50KGFjdGl2aXR5LCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci53YXJuKCdlcnJvciBpbiB1c2VyIGNhbGxiYWNrICcgKyBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU15LnByb3RvdHlwZS5fbm90aWZ5TXlDb250ZXh0Q2hhbmdlZCA9IGZ1bmN0aW9uIChhY3Rpdml0eSwgY29udGV4dCwgZGVsdGEsIHJlbW92ZWQpIHtcclxuICAgICAgICBkZWx0YSA9IGRlbHRhIHx8IHt9O1xyXG4gICAgICAgIHJlbW92ZWQgPSByZW1vdmVkIHx8IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9teUNvbnRleHRVcGRhdGVDYWxsYmFja3MubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5fbXlDb250ZXh0VXBkYXRlQ2FsbGJhY2tzW2luZGV4XTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQoY29udGV4dCwgZGVsdGEsIHJlbW92ZWQsIGFjdGl2aXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLndhcm4oJ2Vycm9yIGluIHVzZXIgY2FsbGJhY2sgJyArIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLl9ub3RpZnlPbkpvaW5lZCA9IGZ1bmN0aW9uIChhY3Rpdml0eSkge1xyXG4gICAgICAgIHRoaXMuX25vdGlmeU15V2luZG93RXZlbnQoYWN0aXZpdHksIHRoaXMuX215QWN0aXZpdHlKb2luZWRDYWxsYmFja3MpO1xyXG4gICAgICAgIHRoaXMuX25vdGlmeU15Q29udGV4dENoYW5nZWQoYWN0aXZpdHksIGFjdGl2aXR5LmNvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBY3Rpdml0eU15O1xyXG59KCkpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXT0gQWN0aXZpdHlNeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHlNeUFQSS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIEFjdGl2aXR5Q29uZmlnID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFjdGl2aXR5Q29uZmlnKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEFjdGl2aXR5Q29uZmlnO1xyXG59KCkpO1xyXG5leHBvcnRzLkFjdGl2aXR5Q29uZmlnID0gQWN0aXZpdHlDb25maWc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5Q29uZmlnLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5yZXF1aXJlKFwiZXM2LXByb21pc2VcIik7XHJcbnZhciBoY0JyaWRnZV8xID0gcmVxdWlyZShcIi4vYnJpZGdlcy9oY0JyaWRnZVwiKTtcclxudmFyIGFjdGl2aXR5TWFuYWdlcl8xID0gcmVxdWlyZShcIi4vY29yZS9hY3Rpdml0eU1hbmFnZXJcIik7XHJcbnZhciBhY3Rpdml0eU15QVBJXzEgPSByZXF1aXJlKFwiLi9BUEkvYWN0aXZpdHlNeUFQSVwiKTtcclxudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIi4vaGVscGVycy9sb2dnZXJcIik7XHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vaGVscGVycy91dGlsXCIpO1xyXG52YXIgYWN0aXZpdHlDb25maWdfMSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5Q29uZmlnXCIpO1xyXG52YXIgYWN0aXZpdHlBUElfMSA9IHJlcXVpcmUoXCIuL0FQSS9hY3Rpdml0eUFQSVwiKTtcclxudmFyIGFjdGl2aXR5QUdNXzEgPSByZXF1aXJlKFwiLi9jb3JlL2FjdGl2aXR5QUdNXCIpO1xyXG52YXIgYWN0aXZpdHkgPSBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICBjb25maWcgPSBjb25maWcgfHwgbmV3IGFjdGl2aXR5Q29uZmlnXzEuQWN0aXZpdHlDb25maWc7XHJcbiAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWQoY29uZmlnLmxvZ0xldmVsKSkge1xyXG4gICAgICAgIGxvZ2dlcl8xLkxvZ2dlci5MZXZlbCA9IGNvbmZpZy5sb2dMZXZlbDtcclxuICAgIH1cclxuICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbChjb25maWcubG9nZ2VyKSkge1xyXG4gICAgICAgIGxvZ2dlcl8xLkxvZ2dlci5HbHVlTG9nZ2VyID0gY29uZmlnLmxvZ2dlcjtcclxuICAgIH1cclxuICAgIHZhciBicmlkZ2U7XHJcbiAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWQod2luZG93Lmh0bWxDb250YWluZXIpKSB7XHJcbiAgICAgICAgYnJpZGdlID0gbmV3IGhjQnJpZGdlXzFbJ2RlZmF1bHQnXSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWN0aXZpdHkgbm90IHN1cHBvcnRlZCBpbiBpbiBicm93c2VyXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFicmlkZ2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGJyaWRnZSB0byBuYXRpdmUgYWN0aXZpdHkgaXMgbmVlZGVkIHRvIGNyZWF0ZSBhY3Rpdml0eSBsaWIuXCIpO1xyXG4gICAgfVxyXG4gICAgYWN0aXZpdHlBR01fMS5BY3Rpdml0eUFHTS5BR00gPSBjb25maWcuYWdtO1xyXG4gICAgdmFyIGFjdGl2aXR5TWFuYWdlciA9IG5ldyBhY3Rpdml0eU1hbmFnZXJfMVsnZGVmYXVsdCddKGJyaWRnZSwgIWNvbmZpZy5kaXNhYmxlQXV0b0Fubm91bmNlKTtcclxuICAgIHZhciBteSA9IG5ldyBhY3Rpdml0eU15QVBJXzFbJ2RlZmF1bHQnXShhY3Rpdml0eU1hbmFnZXIpO1xyXG4gICAgcmV0dXJuIG5ldyBhY3Rpdml0eUFQSV8xLkFjdGl2aXR5QVBJKGFjdGl2aXR5TWFuYWdlciwgbXkpO1xyXG59O1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFjdGl2aXR5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY3Rpdml0eU1vZHVsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIGVudGl0eUV2ZW50XzEgPSByZXF1aXJlKFwiLi4vY29udHJhY3RzL2VudGl0eUV2ZW50XCIpO1xyXG52YXIgYWN0aXZpdHlTdGF0dXNfMSA9IHJlcXVpcmUoXCIuLi9jb250cmFjdHMvYWN0aXZpdHlTdGF0dXNcIik7XHJcbnZhciBhY3Rpdml0eVR5cGVfMSA9IHJlcXVpcmUoXCIuLi9lbnRpdGllcy9hY3Rpdml0eVR5cGVcIik7XHJcbnZhciB3aW5kb3dUeXBlXzEgPSByZXF1aXJlKFwiLi4vZW50aXRpZXMvd2luZG93VHlwZVwiKTtcclxudmFyIGFjdGl2aXR5XzEgPSByZXF1aXJlKFwiLi4vZW50aXRpZXMvYWN0aXZpdHlcIik7XHJcbnZhciBhY3Rpdml0eVdpbmRvd18xID0gcmVxdWlyZShcIi4uL2VudGl0aWVzL2FjdGl2aXR5V2luZG93XCIpO1xyXG52YXIgcHJveHlXaW5kb3dGYWN0b3J5XzEgPSByZXF1aXJlKFwiLi4vY29yZS9wcm94eVdpbmRvd0ZhY3RvcnlcIik7XHJcbnZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2xvZ2dlclwiKTtcclxudmFyIGVudGl0eUV2ZW50XzIgPSByZXF1aXJlKFwiLi4vY29udHJhY3RzL2VudGl0eUV2ZW50XCIpO1xyXG52YXIgcmVhZHlNYXJrZXJfMSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3JlYWR5TWFya2VyXCIpO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBlbnRpdHlFdmVudF8zID0gcmVxdWlyZShcIi4uL2NvbnRyYWN0cy9lbnRpdHlFdmVudFwiKTtcclxudmFyIEhDQnJpZGdlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEhDQnJpZGdlKGFnbSkge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXR5VHlwZUVudGl0eU5hbWUgPSBcImFjdGl2aXR5VHlwZVwiO1xyXG4gICAgICAgIHRoaXMuX3dpbmRvd1R5cGVFbnRpdHlOYW1lID0gXCJ3aW5kb3dUeXBlXCI7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZpdHlFbnRpdHlOYW1lID0gXCJhY3Rpdml0eVwiO1xyXG4gICAgICAgIHRoaXMuX3dpbmRvd0VudGl0eU5hbWUgPSBcImFjdGl2aXR5V2luZG93XCI7XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyXzEuTG9nZ2VyLkdldCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9sYXN0U2VxID0gMDtcclxuICAgICAgICB0aGlzLl9ldmVudFF1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5fYWN0aXZpdHlUeXBlQ2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5fd2luZG93VHlwZUNhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXR5Q2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5fd2luZG93Q2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5fYWdtID0gYWdtO1xyXG4gICAgfVxyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9yZWFkeU1hcmtlciA9IG5ldyByZWFkeU1hcmtlcl8xLlJlYWR5TWFya2VyKFwiSEMgQnJpZGdlXCIsIDEpO1xyXG4gICAgICAgIHRoaXMuX2h0bWxDb250YWluZXIgPSB3aW5kb3cuaHRtbENvbnRhaW5lci5hY3Rpdml0eUZhY2FkZTtcclxuICAgICAgICB0aGlzLl9odG1sQ29udGFpbmVyLmluaXQodGhpcy5fYWdtID8gdGhpcy5fYWdtLmluc3RhbmNlIDogdW5kZWZpbmVkLCB0aGlzLl9oY0V2ZW50SGFuZGxlci5iaW5kKHRoaXMpLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9yZWFkeU1hcmtlci5zaWduYWwoXCJJbml0IGRvbmUgZnJvbSBIQ1wiKTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3JlYWR5TWFya2VyLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUucmVhZHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVhZHlNYXJrZXIuc2V0Q2FsbGJhY2soZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9sb2dnZXIuZXJyb3IoXCJFcnJvciBpbml0aWFsaXppbmcgSEMgYnJpZGdlIC0gXCIgKyBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChfdGhpcy5fcmVhZHlNYXJrZXIuZ2V0RXJyb3IoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5faGNFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnRKc29uKSB7XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyLnRyYWNlKGV2ZW50SnNvbik7XHJcbiAgICAgICAgdmFyIGV2ZW50ID0gSlNPTi5wYXJzZShldmVudEpzb24pO1xyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3NFdmVudEJ5U2VxKGV2ZW50KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuX3Byb2Nlc3NFdmVudEJ5U2VxID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHNlcSA9IGV2ZW50LnNlcXVlbmNlO1xyXG4gICAgICAgIGlmIChzZXEgPT09IHRoaXMuX2xhc3RTZXEgKyAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NFdmVudChldmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RTZXErKztcclxuICAgICAgICAgICAgdmFyIG5leHRFdmVudCA9IHRoaXMuX2V2ZW50UXVldWVbc2VxICsgMV07XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZChuZXh0RXZlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJyZXBsYXlpbmcgbWVzc2FnZSBudW1iZXIgXCIgKyBzZXEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc0V2ZW50QnlTZXEobmV4dEV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudFF1ZXVlW3NlcSArIDFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudFF1ZXVlW3NlcV0gPSBldmVudDtcclxuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFwiR290IG91dCBvZiBvcmRlciBldmVudCB3aXRoIG51bWJlciBcIiArIHNlcSArIFwiLiBXaWxsIHdhaXQgZm9yIHByZXZpb3VzIGV2ZW50KHMpIGJlZm9yZSByZXBsYXlpbmcuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuX3Byb2Nlc3NFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBlbnRpdHlUeXBlID0gZXZlbnQuZW50aXR5VHlwZTtcclxuICAgICAgICB2YXIgZXZlbnRDb250ZXh0ID0gdGhpcy5fY29udmVydENvbnRleHQoZXZlbnQuY29udGV4dCk7XHJcbiAgICAgICAgdmFyIGVudGl0eTtcclxuICAgICAgICBzd2l0Y2ggKGVudGl0eVR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSB0aGlzLl9hY3Rpdml0eVR5cGVFbnRpdHlOYW1lOlxyXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gSENCcmlkZ2UuX2hjVG9Kc0FjdGl2aXR5VHlwZShldmVudC5lbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHVibGlzaEFjdGl2aXR5VHlwZVN0YXR1c0NoYW5nZShlbnRpdHksIGV2ZW50Q29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSB0aGlzLl93aW5kb3dUeXBlRW50aXR5TmFtZTpcclxuICAgICAgICAgICAgICAgIGVudGl0eSA9IHRoaXMuX2hjVG9Kc1dpbmRvd1R5cGUoZXZlbnQuZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3B1Ymxpc2hXaW5kb3dUeXBlU3RhdHVzQ2hhbmdlKGVudGl0eSwgZXZlbnRDb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMuX2FjdGl2aXR5RW50aXR5TmFtZTpcclxuICAgICAgICAgICAgICAgIGVudGl0eSA9IHRoaXMuX2hjVG9Kc0FjdGl2aXR5KGV2ZW50LmVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wdWJsaXNoQWN0aXZpdHlTdGF0dXNDaGFuZ2UoZW50aXR5LCBldmVudENvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgdGhpcy5fd2luZG93RW50aXR5TmFtZTpcclxuICAgICAgICAgICAgICAgIGVudGl0eSA9IEhDQnJpZGdlLl9oY1RvSnNXaW5kb3coZXZlbnQuZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3B1Ymxpc2hBY3Rpdml0eVdpbmRvd0V2ZW50KGVudGl0eSwgZXZlbnRDb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuX2NvbnZlcnRDb250ZXh0ID0gZnVuY3Rpb24gKGhjQ29udGV4dCkge1xyXG4gICAgICAgIGlmIChoY0NvbnRleHQudHlwZSA9PT0gZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudFR5cGUuU3RhdHVzQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHZhciBvbGRTdGF0dXMgPSBuZXcgYWN0aXZpdHlTdGF0dXNfMS5BY3Rpdml0eVN0YXR1cyhoY0NvbnRleHQub2xkU3RhdHVzLnN0YXRlLCBoY0NvbnRleHQub2xkU3RhdHVzLnN0YXR1c01lc3NhZ2UsIGhjQ29udGV4dC5vbGRTdGF0dXMuc3RhdHVzVGltZSk7XHJcbiAgICAgICAgICAgIHZhciBuZXdTdGF0dXMgPSBuZXcgYWN0aXZpdHlTdGF0dXNfMS5BY3Rpdml0eVN0YXR1cyhoY0NvbnRleHQubmV3U3RhdHVzLnN0YXRlLCBoY0NvbnRleHQubmV3U3RhdHVzLnN0YXR1c01lc3NhZ2UsIGhjQ29udGV4dC5uZXdTdGF0dXMuc3RhdHVzVGltZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgZW50aXR5RXZlbnRfMS5FbnRpdHlTdGF0dXNDaGFuZ2VFdmVudENvbnRleHQobmV3U3RhdHVzLCBvbGRTdGF0dXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoY0NvbnRleHQudHlwZSA9PT0gZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudFR5cGUuQWN0aXZpdHlXaW5kb3dFdmVudCkge1xyXG4gICAgICAgICAgICB2YXIgYWN0ID0gdGhpcy5faGNUb0pzQWN0aXZpdHkoaGNDb250ZXh0LmFjdGl2aXR5KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBlbnRpdHlFdmVudF8xLkVudGl0eUFjdGl2aXR5V2luZG93RXZlbnRDb250ZXh0KGFjdCwgaGNDb250ZXh0LmV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaGNDb250ZXh0LnR5cGUgPT09IGVudGl0eUV2ZW50XzEuRW50aXR5RXZlbnRUeXBlLkFjdGl2aXR5Q29udGV4dENoYW5nZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGVudGl0eUV2ZW50XzMuQWN0aXZpdHlDb250ZXh0Q2hhbmdlZENvbnRleHQoaGNDb250ZXh0Lm5ld0NvbnRleHQsIGhjQ29udGV4dC51cGRhdGVkLCBoY0NvbnRleHQucmVtb3ZlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudENvbnRleHQoaGNDb250ZXh0LnR5cGUpO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLl9oY1RvSnNXaW5kb3cgPSBmdW5jdGlvbiAoaGNXaW5kb3cpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGFjdGl2aXR5V2luZG93XzFbJ2RlZmF1bHQnXShoY1dpbmRvdy5pZCwgaGNXaW5kb3cubmFtZSwgaGNXaW5kb3cudHlwZSwgaGNXaW5kb3cuYWN0aXZpdHlJZCwgaGNXaW5kb3cuaW5zdGFuY2UsIGhjV2luZG93LmlzSW5kZXBlbmRlbnQpO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5faGNUb0pzQWN0aXZpdHkgPSBmdW5jdGlvbiAoaGNBY3QpIHtcclxuICAgICAgICB2YXIgd2luZG93ID0gaGNBY3Qub3duZXIgPyBIQ0JyaWRnZS5faGNUb0pzV2luZG93KGhjQWN0Lm93bmVyKSA6IG51bGw7XHJcbiAgICAgICAgdmFyIHdpbmRvd0lkID0gd2luZG93ID8gd2luZG93LmlkIDogbnVsbDtcclxuICAgICAgICB2YXIgc3RhdHVzID0gbmV3IGFjdGl2aXR5U3RhdHVzXzEuQWN0aXZpdHlTdGF0dXMoaGNBY3Quc3RhdHVzLnN0YXRlLCBoY0FjdC5zdGF0dXMuc3RhdHVzTWVzc2FnZSwgaGNBY3Quc3RhdHVzLnN0YXR1c1RpbWUpO1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gSlNPTi5wYXJzZShoY0FjdC5jb250ZXh0KTtcclxuICAgICAgICByZXR1cm4gbmV3IGFjdGl2aXR5XzFbJ2RlZmF1bHQnXShoY0FjdC5pZCwgaGNBY3QudHlwZS5uYW1lLCBzdGF0dXMsIGNvbnRleHQsIHdpbmRvd0lkKTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5faGNUb0pzQWN0aXZpdHlUeXBlID0gZnVuY3Rpb24gKGhjQWN0VHlwZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgYWN0aXZpdHlUeXBlXzFbJ2RlZmF1bHQnXShoY0FjdFR5cGUubmFtZSwgaGNBY3RUeXBlLm93bmVyV2luZG93VHlwZSwgaGNBY3RUeXBlLmhlbHBlcldpbmRvd1R5cGVzLCBoY0FjdFR5cGUuZGVzY3JpcHRpb24pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5faGNUb0pzV2luZG93VHlwZSA9IGZ1bmN0aW9uIChoY1dpblR5cGUpIHtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChoY1dpblR5cGUuZmFjdG9yaWVzKSkge1xyXG4gICAgICAgICAgICBoY1dpblR5cGUuZmFjdG9yaWVzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBmYWN0b3JpZXMgPSBoY1dpblR5cGUuZmFjdG9yaWVzLm1hcChmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgICByZXR1cm4gSENCcmlkZ2UuX2hjVG9Kc1dpbmRvd1R5cGVGYWN0b3J5KGYpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgd2luZG93VHlwZV8xWydkZWZhdWx0J10oaGNXaW5UeXBlLm5hbWUsIGZhY3Rvcmllcyk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UuX2hjVG9Kc1dpbmRvd1R5cGVGYWN0b3J5ID0gZnVuY3Rpb24gKGhjV2luVHlwZUZhY3RvcnkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IHByb3h5V2luZG93RmFjdG9yeV8xLlByb3h5V2luZG93RmFjdG9yeShoY1dpblR5cGVGYWN0b3J5LmRlc2NyaXB0aW9uKTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5fZ2V0VVJMUGFyYW1ldGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KChuZXcgUmVnRXhwKCdbP3wmXScgKyBuYW1lICsgJz0nICsgJyhbXiY7XSs/KSgmfCN8O3wkKScpLmV4ZWMobG9jYXRpb24uc2VhcmNoKSB8fCBbLCBcIlwiXSlbMV0ucmVwbGFjZSgvXFwrL2csICclMjAnKSkgfHwgbnVsbDtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuZ2V0QWN0aXZpdHlUeXBlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLmdldEFjdGl2aXR5VHlwZXMoZnVuY3Rpb24gKGluZm9zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5mb3MubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBpbmZvc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0FjdGl2aXR5VHlwZSA9IEhDQnJpZGdlLl9oY1RvSnNBY3Rpdml0eVR5cGUoaW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3QWN0aXZpdHlUeXBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUucmVnaXN0ZXJBY3Rpdml0eVR5cGUgPSBmdW5jdGlvbiAoYWN0aXZpdHlUeXBlTmFtZSwgb3duZXJXaW5kb3csIGhlbHBlcldpbmRvd3MsIGxheW91dENvbmZpZywgZGVzY3JpcHRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChoZWxwZXJXaW5kb3dzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGhlbHBlcldpbmRvd3MgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogYWN0aXZpdHlUeXBlTmFtZSxcclxuICAgICAgICAgICAgICAgIG93bmVyV2luZG93VHlwZTogb3duZXJXaW5kb3csXHJcbiAgICAgICAgICAgICAgICBoZWxwZXJXaW5kb3dUeXBlczogaGVscGVyV2luZG93cyxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgIGxheW91dENvbmZpZzogSlNPTi5zdHJpbmdpZnkobGF5b3V0Q29uZmlnKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5yZWdpc3RlckFjdGl2aXR5VHlwZShKU09OLnN0cmluZ2lmeShjb25maWcpLCBmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0FjdGl2aXR5VHlwZSA9IEhDQnJpZGdlLl9oY1RvSnNBY3Rpdml0eVR5cGUoaW5mbyk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ld0FjdGl2aXR5VHlwZSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLnVucmVnaXN0ZXJBY3Rpdml0eVR5cGUgPSBmdW5jdGlvbiAoYWN0aXZpdHlUeXBlTmFtZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIudW5yZWdpc3RlckFjdGl2aXR5VHlwZShhY3Rpdml0eVR5cGVOYW1lLCBmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuZ2V0V2luZG93VHlwZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5nZXRXaW5kb3dUeXBlcyhmdW5jdGlvbiAoaW5mb3MpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmZvcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5mbyA9IGluZm9zW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3V2luZG93VHlwZSA9IF90aGlzLl9oY1RvSnNXaW5kb3dUeXBlKGluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld1dpbmRvd1R5cGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5yZWdpc3RlcldpbmRvd0ZhY3RvcnkgPSBmdW5jdGlvbiAod2luZG93VHlwZU5hbWUsIGZhY3RvcnkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHdpbmRvd1R5cGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwid2luZG93VHlwZU5hbWUgc2hvdWxkIGJlIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLnJlZ2lzdGVyV2luZG93RmFjdG9yeSh3aW5kb3dUeXBlTmFtZSwgZmFjdG9yeS5jcmVhdGUuYmluZChmYWN0b3J5KSwgZnVuY3Rpb24gKGluZm8pIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmluaXRpYXRlQWN0aXZpdHkgPSBmdW5jdGlvbiAoYWN0aXZpdHlUeXBlLCBjb250ZXh0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwoYWN0aXZpdHlUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwid2luZG93VHlwZU5hbWUgc2hvdWxkIGJlIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKGNvbnRleHQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIuaW5pdGlhdGUoYWN0aXZpdHlUeXBlLCBKU09OLnN0cmluZ2lmeShjb250ZXh0KSwgZnVuY3Rpb24gKGFjdGl2aXR5SWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYWN0aXZpdHlJZCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmdldEFubm91bmNlbWVudEluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGhjID0gd2luZG93Lmh0bWxDb250YWluZXI7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBoYy5nZXRDb250ZXh0KCk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHsgYWN0aXZpdHlXaW5kb3dJZDogXCJcIiwgYWN0aXZpdHlXaW5kb3dUeXBlOiBcIlwiLCBhY3Rpdml0eVdpbmRvd0luZGVwZW5kZW50OiBmYWxzZSwgYWN0aXZpdHlXaW5kb3dOYW1lOiBcIlwiIH07XHJcbiAgICAgICAgcmVzdWx0LmFjdGl2aXR5V2luZG93VHlwZSA9IGNvbnRleHQuYWN0aXZpdHlXaW5kb3dUeXBlO1xyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKHJlc3VsdC5hY3Rpdml0eVdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hY3Rpdml0eVdpbmRvd1R5cGUgPSBIQ0JyaWRnZS5fZ2V0VVJMUGFyYW1ldGVyKFwiYWN0aXZpdHlXaW5kb3dUeXBlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQuYWN0aXZpdHlXaW5kb3dJZCA9IGNvbnRleHQuYWN0aXZpdHlXaW5kb3dJZDtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChyZXN1bHQuYWN0aXZpdHlXaW5kb3dJZCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmFjdGl2aXR5V2luZG93SWQgPSBIQ0JyaWRnZS5fZ2V0VVJMUGFyYW1ldGVyKFwiYWN0aXZpdHlXaW5kb3dJZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0LmFjdGl2aXR5V2luZG93SW5kZXBlbmRlbnQgPSBjb250ZXh0LmFjdGl2aXR5V2luZG93SW5kZXBlbmRlbnQ7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQocmVzdWx0LmFjdGl2aXR5V2luZG93SW5kZXBlbmRlbnQpKSB7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdC5hY3Rpdml0eVdpbmRvd05hbWUgPSBjb250ZXh0LmFjdGl2aXR5V2luZG93TmFtZTtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChyZXN1bHQuYWN0aXZpdHlXaW5kb3dOYW1lKSkge1xyXG4gICAgICAgICAgICByZXN1bHQuYWN0aXZpdHlXaW5kb3dOYW1lID0gSENCcmlkZ2UuX2dldFVSTFBhcmFtZXRlcihcImFjdGl2aXR5V2luZG93TmFtZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuYW5ub3VuY2VXaW5kb3cgPSBmdW5jdGlvbiAod2luZG93VHlwZSwgYWN0aXZpdHlXaW5kb3dJZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQod2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG5vdCBkZXRlcm1pbmUgd2luZG93IHR5cGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKHdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbiBub3QgZGV0ZXJtaW5lIHdpbmRvdyBhY3Rpdml0eVdpbmRvd0lkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9odG1sQ29udGFpbmVyLmFubm91bmNlV2luZG93KHdpbmRvd1R5cGUsIGFjdGl2aXR5V2luZG93SWQsIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLmVycm9yKFwiRXJyb3IgYW5ub3VuY2luZyBhY3Rpdml0eSB3aW5kb3cgd2l0aCBpZCAnXCIgKyBhY3Rpdml0eVdpbmRvd0lkICsgXCInLiBcIiArIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuZ2V0QWN0aXZpdGllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9sb2dnZXIudHJhY2UoXCJFeGVjdXRpbmcgZ2V0QWN0aXZpdGllcygpXCIpO1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5nZXRBY3Rpdml0aWVzKGZ1bmN0aW9uIChhY3Rpdml0aWVzU3RyKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLnRyYWNlKFwiR290IGdldEFjdGl2aXRpZXMoKSA6XCIgKyBhY3Rpdml0aWVzU3RyKTtcclxuICAgICAgICAgICAgICAgIHZhciBhY3Rpdml0aWVzID0gSlNPTi5wYXJzZShhY3Rpdml0aWVzU3RyKTtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhY3Rpdml0aWVzLm1hcChmdW5jdGlvbiAoYWN0KSB7IHJldHVybiBfdGhpcy5faGNUb0pzQWN0aXZpdHkoYWN0KTsgfSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci50cmFjZShcIkVycm9yIGluIGdldEFjdGl2aXRpZXMoKSA6XCIgKyBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUudXBkYXRlQWN0aXZpdHlDb250ZXh0ID0gZnVuY3Rpb24gKGFjdGl2aXR5LCBjb250ZXh0LCBmdWxsUmVwbGFjZSwgcmVtb3ZlZEtleXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKHJlbW92ZWRLZXlzKSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZEtleXMgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIGZ1bGxSZXBsYWNlOiBmdWxsUmVwbGFjZSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZWRLZXlzOiByZW1vdmVkS2V5c1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5zZXRBY3Rpdml0eUNvbnRleHQoYWN0aXZpdHkuaWQsIEpTT04uc3RyaW5naWZ5KGNvbnRleHQpLCBKU09OLnN0cmluZ2lmeShvcHRpb25zKSwgZnVuY3Rpb24gKG5ld0NvbnRleHRTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDb250ZXh0ID0gSlNPTi5wYXJzZShuZXdDb250ZXh0U3RyaW5nKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3Q29udGV4dCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gcmVqZWN0KGVycm9yKTsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmdldEFjdGl2aXR5V2luZG93cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLmdldFdpbmRvd3MoZnVuY3Rpb24gKHdpbmRvd3MpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB3aW5kb3dzLm1hcChmdW5jdGlvbiAod2luZCkgeyByZXR1cm4gSENCcmlkZ2UuX2hjVG9Kc1dpbmRvdyh3aW5kKTsgfSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLnN0b3BBY3Rpdml0eSA9IGZ1bmN0aW9uIChhY3Rpdml0eSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIuc3RvcEFjdGl2aXR5KGFjdGl2aXR5LmlkLCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLnVucmVnaXN0ZXJXaW5kb3dGYWN0b3J5ID0gZnVuY3Rpb24gKHdpbmRvd1R5cGVOYW1lKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5yZWdpc3RlcldpbmRvd0ZhY3Rvcnkod2luZG93VHlwZU5hbWUsIGZ1bmN0aW9uIChpbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5jcmVhdGVXaW5kb3cgPSBmdW5jdGlvbiAoaWQsIHdpbmRvd0RlZmluaXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLmNyZWF0ZVdpbmRvdyhpZCwgSlNPTi5zdHJpbmdpZnkod2luZG93RGVmaW5pdGlvbiksIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpZCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmNyZWF0ZVN0YWNrZWRXaW5kb3dzID0gZnVuY3Rpb24gKGlkLCB3aW5kb3dEZWZpbml0aW9ucywgdGltZW91dCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIuY3JlYXRlU3RhY2tlZFdpbmRvd3MoaWQsIEpTT04uc3RyaW5naWZ5KHdpbmRvd0RlZmluaXRpb25zKSwgdGltZW91dCwgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGlkKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUub25BY3Rpdml0eVR5cGVTdGF0dXNDaGFuZ2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eVR5cGVDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLm9uV2luZG93VHlwZVN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX3dpbmRvd1R5cGVDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLm9uQWN0aXZpdHlTdGF0dXNDaGFuZ2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUub25BY3Rpdml0eVdpbmRvd0NoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX3dpbmRvd0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuZ2V0V2luZG93Qm91bmRzID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5nZXRXaW5kb3dCb3VuZHMoaWQsIGZ1bmN0aW9uIChib3VuZHMpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYm91bmRzKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5zZXRXaW5kb3dCb3VuZHMgPSBmdW5jdGlvbiAoaWQsIGJvdW5kcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIuc2V0V2luZG93Qm91bmRzKGlkLCBKU09OLnN0cmluZ2lmeShib3VuZHMpLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUucmVnaXN0ZXJXaW5kb3cgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgaW5kZXBlbmRlbnQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLnJlZ2lzdGVyV2luZG93KHR5cGUsIG5hbWUsIGluZGVwZW5kZW50LCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoaWQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5jbG9zZVdpbmRvdyA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIuY2xvc2VXaW5kb3coaWQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5hY3RpdmF0ZVdpbmRvdyA9IGZ1bmN0aW9uIChpZCwgZm9jdXMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLmFjdGl2YXRlV2luZG93KGlkLCBmb2N1cywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLl9wdWJsaXNoU3RhdHVzQ2hhbmdlID0gZnVuY3Rpb24gKGVudGl0eSwgY29udGV4dCwgY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eUV2ZW50ID0gbmV3IGVudGl0eUV2ZW50XzIuRW50aXR5RXZlbnQoZW50aXR5LCBjb250ZXh0KTtcclxuICAgICAgICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soZW50aXR5RXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5fcHVibGlzaEFjdGl2aXR5VHlwZVN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uIChhdCwgY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuX3B1Ymxpc2hTdGF0dXNDaGFuZ2UoYXQsIGNvbnRleHQsIHRoaXMuX2FjdGl2aXR5VHlwZUNhbGxiYWNrcyk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLl9wdWJsaXNoV2luZG93VHlwZVN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uICh3dCwgY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuX3B1Ymxpc2hTdGF0dXNDaGFuZ2Uod3QsIGNvbnRleHQsIHRoaXMuX3dpbmRvd1R5cGVDYWxsYmFja3MpO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5fcHVibGlzaEFjdGl2aXR5U3RhdHVzQ2hhbmdlID0gZnVuY3Rpb24gKGFjdCwgY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuX3B1Ymxpc2hTdGF0dXNDaGFuZ2UoYWN0LCBjb250ZXh0LCB0aGlzLl9hY3Rpdml0eUNhbGxiYWNrcyk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLl9wdWJsaXNoQWN0aXZpdHlXaW5kb3dFdmVudCA9IGZ1bmN0aW9uICh3LCBjb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5fcHVibGlzaFN0YXR1c0NoYW5nZSh3LCBjb250ZXh0LCB0aGlzLl93aW5kb3dDYWxsYmFja3MpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIQ0JyaWRnZTtcclxufSgpKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzWydkZWZhdWx0J109IEhDQnJpZGdlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oY0JyaWRnZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIEFjdGl2aXR5U3RhdHVzID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFjdGl2aXR5U3RhdHVzKHN0YXRlLCBtZXNzYWdlLCB0aW1lKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgdGhpcy50aW1lID0gdGltZTtcclxuICAgIH1cclxuICAgIEFjdGl2aXR5U3RhdHVzLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVN0YXR1cy5wcm90b3R5cGUuZ2V0TWVzc2FnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5U3RhdHVzLnByb3RvdHlwZS5nZXRUaW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpbWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFjdGl2aXR5U3RhdHVzO1xyXG59KCkpO1xyXG5leHBvcnRzLkFjdGl2aXR5U3RhdHVzID0gQWN0aXZpdHlTdGF0dXM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5U3RhdHVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgRW50aXR5RXZlbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRW50aXR5RXZlbnQoZW50aXRpeSwgY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuZW50aXR5ID0gZW50aXRpeTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEVudGl0eUV2ZW50O1xyXG59KCkpO1xyXG5leHBvcnRzLkVudGl0eUV2ZW50ID0gRW50aXR5RXZlbnQ7XHJcbnZhciBFbnRpdHlFdmVudENvbnRleHQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRW50aXR5RXZlbnRDb250ZXh0KGV2ZW50VHlwZSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IGV2ZW50VHlwZTtcclxuICAgIH1cclxuICAgIHJldHVybiBFbnRpdHlFdmVudENvbnRleHQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuRW50aXR5RXZlbnRDb250ZXh0ID0gRW50aXR5RXZlbnRDb250ZXh0O1xyXG52YXIgRW50aXR5U3RhdHVzQ2hhbmdlRXZlbnRDb250ZXh0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFbnRpdHlTdGF0dXNDaGFuZ2VFdmVudENvbnRleHQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBFbnRpdHlTdGF0dXNDaGFuZ2VFdmVudENvbnRleHQobmV3U3RhdHVzLCBvbGRTdGF0dXMpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBFbnRpdHlFdmVudFR5cGUuU3RhdHVzQ2hhbmdlKTtcclxuICAgICAgICB0aGlzLm5ld1N0YXR1cyA9IG5ld1N0YXR1cztcclxuICAgICAgICB0aGlzLm9sZFN0YXR1cyA9IG9sZFN0YXR1cztcclxuICAgIH1cclxuICAgIHJldHVybiBFbnRpdHlTdGF0dXNDaGFuZ2VFdmVudENvbnRleHQ7XHJcbn0oRW50aXR5RXZlbnRDb250ZXh0KSk7XHJcbmV4cG9ydHMuRW50aXR5U3RhdHVzQ2hhbmdlRXZlbnRDb250ZXh0ID0gRW50aXR5U3RhdHVzQ2hhbmdlRXZlbnRDb250ZXh0O1xyXG52YXIgRW50aXR5QWN0aXZpdHlXaW5kb3dFdmVudENvbnRleHQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEVudGl0eUFjdGl2aXR5V2luZG93RXZlbnRDb250ZXh0LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRW50aXR5QWN0aXZpdHlXaW5kb3dFdmVudENvbnRleHQoYWN0aXZpdHksIGV2ZW50KSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgRW50aXR5RXZlbnRUeXBlLkFjdGl2aXR5V2luZG93RXZlbnQpO1xyXG4gICAgICAgIHRoaXMuYWN0aXZpdHkgPSBhY3Rpdml0eTtcclxuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRW50aXR5QWN0aXZpdHlXaW5kb3dFdmVudENvbnRleHQ7XHJcbn0oRW50aXR5RXZlbnRDb250ZXh0KSk7XHJcbmV4cG9ydHMuRW50aXR5QWN0aXZpdHlXaW5kb3dFdmVudENvbnRleHQgPSBFbnRpdHlBY3Rpdml0eVdpbmRvd0V2ZW50Q29udGV4dDtcclxudmFyIEFjdGl2aXR5Q29udGV4dENoYW5nZWRDb250ZXh0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBY3Rpdml0eUNvbnRleHRDaGFuZ2VkQ29udGV4dCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEFjdGl2aXR5Q29udGV4dENoYW5nZWRDb250ZXh0KGNvbnRleHQsIHVwZGF0ZWQsIHJlbW92ZWQpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBFbnRpdHlFdmVudFR5cGUuQWN0aXZpdHlDb250ZXh0Q2hhbmdlKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZWQgPSB1cGRhdGVkO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gSlNPTi5wYXJzZShjb250ZXh0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBBY3Rpdml0eUNvbnRleHRDaGFuZ2VkQ29udGV4dDtcclxufShFbnRpdHlFdmVudENvbnRleHQpKTtcclxuZXhwb3J0cy5BY3Rpdml0eUNvbnRleHRDaGFuZ2VkQ29udGV4dCA9IEFjdGl2aXR5Q29udGV4dENoYW5nZWRDb250ZXh0O1xyXG52YXIgRW50aXR5RXZlbnRUeXBlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVudGl0eUV2ZW50VHlwZSgpIHtcclxuICAgIH1cclxuICAgIEVudGl0eUV2ZW50VHlwZS5BZGRlZCA9IFwiYWRkZWRcIjtcclxuICAgIEVudGl0eUV2ZW50VHlwZS5SZW1vdmVkID0gXCJyZW1vdmVkXCI7XHJcbiAgICBFbnRpdHlFdmVudFR5cGUuVXBkYXRlZCA9IFwidXBkYXRlZFwiO1xyXG4gICAgRW50aXR5RXZlbnRUeXBlLkZhY3RvcnlSZWdpc3RlcmVkID0gXCJmYWN0b3J5UmVnaXN0ZXJlZFwiO1xyXG4gICAgRW50aXR5RXZlbnRUeXBlLkZhY3RvcnlVbnJlZ2lzdGVyZWQgPSBcImZhY3RvcnlVbnJlZ2lzdGVyZWRcIjtcclxuICAgIEVudGl0eUV2ZW50VHlwZS5TdGF0dXNDaGFuZ2UgPSBcInN0YXR1c0NoYW5nZVwiO1xyXG4gICAgRW50aXR5RXZlbnRUeXBlLkFjdGl2aXR5Q29udGV4dENoYW5nZSA9IFwiYWN0aXZpdHlDb250ZXh0VXBkYXRlXCI7XHJcbiAgICBFbnRpdHlFdmVudFR5cGUuQWN0aXZpdHlXaW5kb3dFdmVudCA9IFwiYWN0aXZpdHlXaW5kb3dFdmVudFwiO1xyXG4gICAgcmV0dXJuIEVudGl0eUV2ZW50VHlwZTtcclxufSgpKTtcclxuZXhwb3J0cy5FbnRpdHlFdmVudFR5cGUgPSBFbnRpdHlFdmVudFR5cGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudGl0eUV2ZW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBBY3Rpdml0eUFHTSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eUFHTShhY3Rpdml0eSkge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXR5ID0gYWN0aXZpdHk7XHJcbiAgICB9XHJcbiAgICBBY3Rpdml0eUFHTS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2Vuc3VyZUhhc0FnbSgpO1xyXG4gICAgICAgIEFjdGl2aXR5QUdNLkFHTS5yZWdpc3RlcihkZWZpbml0aW9uLCBoYW5kbGVyKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eUFHTS5wcm90b3R5cGUuc2VydmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9lbnN1cmVIYXNBZ20oKTtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0aGlzLl9hY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZpdHkud2luZG93cy5tYXAoZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHcuaW5zdGFuY2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLm1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZW5zdXJlSGFzQWdtKCk7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwodGhpcy5fYWN0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLl9hY3Rpdml0eS53aW5kb3dzO1xyXG4gICAgICAgIHZhciBtZXRob2ROYW1lcyA9IFtdO1xyXG4gICAgICAgIHZhciBtZXRob2RzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHdpbmRvd3MubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IHdpbmRvd3NbaW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgd2luZG93TWV0aG9kcyA9IHRoaXMubWV0aG9kc0ZvcldpbmRvdyh3aW5kb3dfMSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIG1ldGhvZEluZGV4ID0gMDsgbWV0aG9kSW5kZXggPCB3aW5kb3dNZXRob2RzLmxlbmd0aDsgbWV0aG9kSW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRXaW5kb3dNZXRob2QgPSB3aW5kb3dNZXRob2RzW21ldGhvZEluZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChtZXRob2ROYW1lcy5pbmRleE9mKGN1cnJlbnRXaW5kb3dNZXRob2QubmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kTmFtZXMucHVzaChjdXJyZW50V2luZG93TWV0aG9kLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZHMucHVzaChjdXJyZW50V2luZG93TWV0aG9kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWV0aG9kcztcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eUFHTS5wcm90b3R5cGUubWV0aG9kc0ZvcldpbmRvdyA9IGZ1bmN0aW9uICh3aW5kb3cpIHtcclxuICAgICAgICB0aGlzLl9lbnN1cmVIYXNBZ20oKTtcclxuICAgICAgICBpZiAoIXdpbmRvdy5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBY3Rpdml0eUFHTS5BR00ubWV0aG9kc0Zvckluc3RhbmNlKHdpbmRvdy5pbnN0YW5jZSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBhcmcsIHRhcmdldCwgb3B0aW9ucywgc3VjY2VzcywgZXJyb3IpIHtcclxuICAgICAgICB0aGlzLl9lbnN1cmVIYXNBZ20oKTtcclxuICAgICAgICB2YXIgYWN0aXZpdHlTZXJ2ZXJzID0gdGhpcy5zZXJ2ZXJzKCk7XHJcbiAgICAgICAgdmFyIHNlcnZlcnNUb0ludm9rZUFnYWluc3QgPSBbXTtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IFwiYWN0aXZpdHkuYWxsXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1dGlsLmlzU3RyaW5nKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gXCJhY3Rpdml0eS5hbGxcIikge1xyXG4gICAgICAgICAgICAgICAgc2VydmVyc1RvSW52b2tlQWdhaW5zdCA9IGFjdGl2aXR5U2VydmVycztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQgPT09IFwiYWN0aXZpdHkuYmVzdFwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG90ZW50aWFsVGFyZ2V0cyA9IGFjdGl2aXR5U2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKHNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2RzID0gQWN0aXZpdHlBR00uQUdNLm1ldGhvZHNGb3JJbnN0YW5jZShzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2RzLmZpbHRlcihmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5uYW1lID09PSBtZXRob2ROYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3RlbnRpYWxUYXJnZXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9JbnZva2VBZ2FpbnN0ID0gW3BvdGVudGlhbFRhcmdldHNbMF1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldCA9PT0gXCJhbGxcIiB8fCB0YXJnZXQgPT09IFwiYmVzdFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQWN0aXZpdHlBR00uQUdNLmludm9rZShtZXRob2ROYW1lLCBhcmcsIHRhcmdldCwgb3B0aW9ucywgc3VjY2VzcywgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbnZva2UgdGFyZ2V0IFwiICsgdGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh1dGlsLmlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RFbGVtID0gdGFyZ2V0WzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzQWdtSW5zdGFuY2UoZmlyc3RFbGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlcnNUb0ludm9rZUFnYWluc3QgPSB0YXJnZXQubWFwKGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gaW5zdGFuY2U7IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5faXNBY3Rpdml0eVdpbmRvdyhmaXJzdEVsZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyc1RvSW52b2tlQWdhaW5zdCA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHdpbikgeyByZXR1cm4gd2luLmluc3RhbmNlOyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdGFyZ2V0IG9iamVjdFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzQWdtSW5zdGFuY2UodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgc2VydmVyc1RvSW52b2tlQWdhaW5zdCA9IFt0YXJnZXRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2lzQWN0aXZpdHlXaW5kb3codGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgc2VydmVyc1RvSW52b2tlQWdhaW5zdCA9IFt0YXJnZXQuaW5zdGFuY2VdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0YXJnZXQgb2JqZWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBY3Rpdml0eUFHTS5BR00uaW52b2tlKG1ldGhvZE5hbWUsIGFyZywgc2VydmVyc1RvSW52b2tlQWdhaW5zdCwgb3B0aW9ucywgc3VjY2VzcywgZXJyb3IpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5QUdNLnByb3RvdHlwZS51bnJlZ2lzdGVyID0gZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcclxuICAgICAgICB0aGlzLl9lbnN1cmVIYXNBZ20oKTtcclxuICAgICAgICByZXR1cm4gQWN0aXZpdHlBR00uQUdNLnVucmVnaXN0ZXIoZGVmaW5pdGlvbik7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLmNyZWF0ZVN0cmVhbSA9IGZ1bmN0aW9uIChtZXRob2REZWZpbml0aW9uLCBzdWJzY3JpYmVyQWRkZWRIYW5kbGVyLCBzdWJzY3JpYmVyUmVtb3ZlZEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZW5zdXJlSGFzQWdtKCk7XHJcbiAgICAgICAgQWN0aXZpdHlBR00uQUdNLmNyZWF0ZVN0cmVhbShtZXRob2REZWZpbml0aW9uLCBzdWJzY3JpYmVyQWRkZWRIYW5kbGVyLCBzdWJzY3JpYmVyUmVtb3ZlZEZ1bmN0aW9uKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eUFHTS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG1ldGhvZERlZmluaXRpb24sIHBhcmFtZXRlcnMsIHRhcmdldCkge1xyXG4gICAgICAgIHRoaXMuX2Vuc3VyZUhhc0FnbSgpO1xyXG4gICAgICAgIHZhciBzZXJ2ZXJzID0gdGhpcy5zZXJ2ZXJzKCk7XHJcbiAgICAgICAgcmV0dXJuIEFjdGl2aXR5QUdNLkFHTS5zdWJzY3JpYmUobWV0aG9kRGVmaW5pdGlvbiwgcGFyYW1ldGVycywgc2VydmVycyk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLl9lbnN1cmVIYXNBZ20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwoQWN0aXZpdHlBR00uQUdNKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBZ20gc2hvdWxkIGJlIGNvbmZpZ3VyZWQgdG8gYmUgdXNlZCBpbiBhY3Rpdml0eVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLl9pc0FnbUluc3RhbmNlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHJldHVybiBvYmouYXBwbGljYXRpb24gIT0gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5QUdNLnByb3RvdHlwZS5faXNBY3Rpdml0eVdpbmRvdyA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqLmluc3RhbmNlICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFjdGl2aXR5QUdNO1xyXG59KCkpO1xyXG5leHBvcnRzLkFjdGl2aXR5QUdNID0gQWN0aXZpdHlBR007XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5QUdNLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgZW50aXR5RXZlbnRfMSA9IHJlcXVpcmUoXCIuLi9jb250cmFjdHMvZW50aXR5RXZlbnRcIik7XHJcbnZhciBhY3Rpdml0eVR5cGVfMSA9IHJlcXVpcmUoXCIuLi9lbnRpdGllcy9hY3Rpdml0eVR5cGVcIik7XHJcbnZhciBwcm9taXNlRXh0ZW5zaW9uc18xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvcHJvbWlzZUV4dGVuc2lvbnNcIik7XHJcbnZhciByZWFkeU1hcmtlcl8xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvcmVhZHlNYXJrZXJcIik7XHJcbnZhciBlbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvZW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb25cIik7XHJcbnZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2xvZ2dlclwiKTtcclxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vaGVscGVycy91dGlsXCIpO1xyXG52YXIgbG9jYWxXaW5kb3dGYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9sb2NhbFdpbmRvd0ZhY3RvcnlcIik7XHJcbnZhciBBY3Rpdml0eU1hbmFnZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWN0aXZpdHlNYW5hZ2VyKGJyaWRnZSwgYXV0b0Fubm91bmNlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9sb2dnZXIgPSBsb2dnZXJfMS5Mb2dnZXIuR2V0KHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2Fubm91bmNlZFdpbmRvd3MgPSBbXTtcclxuICAgICAgICB0aGlzLl9icmlkZ2UgPSBicmlkZ2U7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZpdHlUeXBlcyA9IG5ldyBlbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbl8xLkVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uKGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fZ3JhYkVudGl0eShlKTsgfSk7XHJcbiAgICAgICAgdGhpcy5fd2luZG93VHlwZXMgPSBuZXcgZW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb25fMS5FbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbihmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX2dyYWJFbnRpdHkoZSk7IH0pO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXRpZXMgPSBuZXcgZW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb25fMS5FbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbihmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX2dyYWJFbnRpdHkoZSk7IH0pO1xyXG4gICAgICAgIHRoaXMuX3dpbmRvd3MgPSBuZXcgZW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb25fMS5FbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbihmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX2dyYWJFbnRpdHkoZSk7IH0pO1xyXG4gICAgICAgIHRoaXMuX2RhdGFSZWFkeU1hcmtlciA9IG5ldyByZWFkeU1hcmtlcl8xLlJlYWR5TWFya2VyKFwiQWN0aXZpdHkgTWFuYWdlciBEYXRhXCIsIFtcIkdldEFjdGl2aXR5VHlwZXNcIiwgXCJHZXRXaW5kb3dUeXBlc1wiLCBcIkdldEFjdGl2aXRpZXNcIiwgXCJHZXRXaW5kb3dzXCJdLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKGF1dG9Bbm5vdW5jZSkge1xyXG4gICAgICAgICAgICB2YXIgYW5ub3VuY2VNYWtlciA9IG5ldyByZWFkeU1hcmtlcl8xLlJlYWR5TWFya2VyKFwiQWN0aXZpdHkgTWFuYWdlciBBbm5vdW5jZVwiLCBbXCJBbm5vdW5jZW1lbnRcIl0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVhZHlNYXJrZXIgPSBhbm5vdW5jZU1ha2VyO1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhUmVhZHlNYXJrZXIuc2V0Q2FsbGJhY2soZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZWFkeU1hcmtlci5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5kZWJ1ZyhcIkF1dG8gYW5ub3VuY2luZyB3aW5kb3dcIik7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hbm5vdW5jZVdpbmRvdygpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYW5ub3VuY2VkV2luZG93cy5wdXNoKHcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZWFkeU1hcmtlci5zaWduYWwoXCJTdWNjZXNzZnVsbHkgYW5ub3VuY2VkIHdpbmRvdyB3aXRoIGlkICdcIiArIHcuaWQgKyBcIidcIik7XHJcbiAgICAgICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5kZWJ1ZyhcIldpbGwgbm90IGFubm91bmNlIHdpbmRvdyAtIFwiICsgZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVhZHlNYXJrZXIuc2lnbmFsKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9yZWFkeU1hcmtlciA9IHRoaXMuX2RhdGFSZWFkeU1hcmtlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYnJpZGdlLmluaXQoKTtcclxuICAgICAgICB0aGlzLl9icmlkZ2VcclxuICAgICAgICAgICAgLnJlYWR5KClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGF3KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmVGb3JEYXRhKCk7XHJcbiAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLCBcImFubm91bmNlZFdpbmRvd3NcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5ub3VuY2VkV2luZG93cztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGFsbG93ZWRcIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnJlYWR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3JlYWR5TWFya2VyLnNldENhbGxiYWNrKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoX3RoaXMuX3JlYWR5TWFya2VyLmdldEVycm9yKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmdldEFjdGl2aXR5VHlwZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2aXR5VHlwZXMuZ2V0KCk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5nZXRBY3Rpdml0eVR5cGUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3Rpdml0eVR5cGVzLmdldEJ5TmFtZShuYW1lKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnJlZ2lzdGVyQWN0aXZpdHlUeXBlID0gZnVuY3Rpb24gKGFjdGl2aXR5VHlwZU5hbWUsIG93bmVyV2luZG93VHlwZSwgaGVscGVyV2luZG93VHlwZXMsIGxheW91dENvbmZpZywgZGVzY3JpcHRpb24sIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwoYWN0aXZpdHlUeXBlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcImFjdGl2aXR5VHlwZU5hbWUgYXJndW1lbnQgY2FuIG5vdCBiZSB1bmRlZmluZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzU3RyaW5nKGFjdGl2aXR5VHlwZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJhY3Rpdml0eVR5cGVOYW1lIHNob3VsZCBiZSBzdHJpbmdcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGFjdFR5cGUgPSBfdGhpcy5nZXRBY3Rpdml0eVR5cGUoYWN0aXZpdHlUeXBlTmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbChhY3RUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiQWN0aXZpdHkgdHlwZSAnXCIgKyBhY3Rpdml0eVR5cGVOYW1lICsgXCInIGFscmVhZHkgZXhpc3RzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvd25lckRlZmluaXRpb247XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKG93bmVyV2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIk93bmVyIHdpbmRvdyB0eXBlIGNhbiBub3QgYmUgdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzU3RyaW5nKG93bmVyV2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIG93bmVyRGVmaW5pdGlvbiA9IHsgdHlwZTogb3duZXJXaW5kb3dUeXBlLCBuYW1lOiBcIlwiLCBpc0luZGVwZW5kZW50OiBmYWxzZSwgYXJndW1lbnRzOiB7fSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3duZXJEZWZpbml0aW9uID0gb3duZXJXaW5kb3dUeXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBoZWxwZXJEZWZpbml0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWQoaGVscGVyV2luZG93VHlwZXMpICYmIHV0aWwuaXNBcnJheShoZWxwZXJXaW5kb3dUeXBlcykpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4IGluIGhlbHBlcldpbmRvd1R5cGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBoZWxwZXJXaW5kb3dUeXBlc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNTdHJpbmcoaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmluaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSW5kZXBlbmRlbnQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlVG86IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZURpcmVjdGlvbjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd1N0eWxlQXR0cmlidXRlczoge31cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyRGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlckRlZmluaXRpb25zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9icmlkZ2VcclxuICAgICAgICAgICAgICAgIC5yZWdpc3RlckFjdGl2aXR5VHlwZShhY3Rpdml0eVR5cGVOYW1lLCBvd25lckRlZmluaXRpb24sIGhlbHBlckRlZmluaXRpb25zLCBsYXlvdXRDb25maWcsIGRlc2NyaXB0aW9uKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGFjdGl2aXR5VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2dyYWJFbnRpdHkoYWN0aXZpdHlUeXBlKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYWN0aXZpdHlUeXBlKTtcclxuICAgICAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnVucmVnaXN0ZXJBY3Rpdml0eVR5cGUgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgYWN0VHlwZSA9IF90aGlzLmdldEFjdGl2aXR5VHlwZSh0eXBlKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQoYWN0VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIkFjdGl2aXR5IHR5cGUgJ1wiICsgdHlwZSArIFwiJyBkb2VzIG5vdCBleGlzdHNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9icmlkZ2UudW5yZWdpc3RlckFjdGl2aXR5VHlwZSh0eXBlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmluaXRpYXRlID0gZnVuY3Rpb24gKGFjdGl2aXR5VHlwZSwgY29udGV4dCwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgYWN0VHlwZSA9IF90aGlzLmdldEFjdGl2aXR5VHlwZShhY3Rpdml0eVR5cGUpO1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChhY3RUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiQWN0aXZpdHkgdHlwZSAnXCIgKyBhY3Rpdml0eVR5cGUgKyBcIicgZG9lcyBub3QgZXhpc3RzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9icmlkZ2VcclxuICAgICAgICAgICAgICAgIC5pbml0aWF0ZUFjdGl2aXR5KGFjdGl2aXR5VHlwZSwgY29udGV4dClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChhY3RJZCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2FjdGl2aXRpZXNcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0T3JXYWl0KGFjdElkKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChhY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFjdCk7XHJcbiAgICAgICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSk7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnN1YnNjcmliZUFjdGl2aXR5VHlwZUV2ZW50cyA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZpdHlUeXBlcy5zdWJzY3JpYmUoZnVuY3Rpb24gKGF0LCBjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIoYXQsIGNvbnRleHQudHlwZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5nZXRXaW5kb3dUeXBlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2luZG93VHlwZXMuZ2V0KCk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5nZXRXaW5kb3dUeXBlID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2luZG93VHlwZXMuZ2V0QnlOYW1lKG5hbWUpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUucmVnaXN0ZXJXaW5kb3dGYWN0b3J5ID0gZnVuY3Rpb24gKHdpbmRvd1R5cGUsIGZhY3RvcnlNZXRob2QsIGRlc2NyaXB0aW9uLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJubyB3aW5kb3dUeXBlIHNwZWNpZmllZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc09iamVjdCh3aW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93VHlwZSA9IHdpbmRvd1R5cGUuZ2V0TmFtZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCF1dGlsLmlzU3RyaW5nKHdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJ3aW5kb3dUeXBlIHNob3VsZCBiZSBzdHJpbmcgb3Igb2JqZWN0IHRoYXQgaGFzIGdldE5hbWUgbWV0aG9kXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBmYWN0b3J5ID0gbmV3IGxvY2FsV2luZG93RmFjdG9yeV8xLkxvY2FsV2luZG93RmFjdG9yeShmYWN0b3J5TWV0aG9kLCBkZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIF90aGlzLl9icmlkZ2VcclxuICAgICAgICAgICAgICAgIC5yZWdpc3RlcldpbmRvd0ZhY3Rvcnkod2luZG93VHlwZSwgZmFjdG9yeSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHYpO1xyXG4gICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VFeHRlbnNpb25zXzEubm9kZWlmeShwcm9taXNlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS51bnJlZ2lzdGVyV2luZG93RmFjdG9yeSA9IGZ1bmN0aW9uICh3aW5kb3dUeXBlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJubyB3aW5kb3dUeXBlIHNwZWNpZmllZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNTdHJpbmcod2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIndpbmRvd1R5cGUgc2hvdWxkIGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9icmlkZ2VcclxuICAgICAgICAgICAgICAgIC51bnJlZ2lzdGVyV2luZG93RmFjdG9yeSh3aW5kb3dUeXBlKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodik7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmdldEFjdGl2aXRpZXMgPSBmdW5jdGlvbiAoYWN0aXZpdHlUeXBlKSB7XHJcbiAgICAgICAgdmFyIGFjdCA9IHRoaXMuX2FjdGl2aXRpZXMuZ2V0KCk7XHJcbiAgICAgICAgaWYgKCFhY3Rpdml0eVR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHR5cGVzID0gYWN0aXZpdHlUeXBlO1xyXG4gICAgICAgIGlmICh1dGlsLmlzU3RyaW5nKGFjdGl2aXR5VHlwZSkpIHtcclxuICAgICAgICAgICAgdHlwZXMgPSBbYWN0aXZpdHlUeXBlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYWN0aXZpdHlUeXBlIGluc3RhbmNlb2YgYWN0aXZpdHlUeXBlXzFbJ2RlZmF1bHQnXSkge1xyXG4gICAgICAgICAgICB0eXBlcyA9IFthY3Rpdml0eVR5cGUubmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFjdGl2aXR5VHlwZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlucHV0IGFyZ3VtZW50ICdhY3Rpdml0eVR5cGUnID0gXCIgKyBhY3Rpdml0eVR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWN0LmZpbHRlcihmdW5jdGlvbiAoYWN0KSB7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gYWN0LnR5cGU7XHJcbiAgICAgICAgICAgIHJldHVybiB1dGlsLnNvbWUodHlwZXMsIGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZS5pZCA9PSB0LmlkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmdldEFjdGl2aXR5QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3Rpdml0aWVzLmdldEJ5TmFtZShpZCk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5hbm5vdW5jZVdpbmRvdyA9IGZ1bmN0aW9uIChhY3Rpdml0eVdpbmRvd0lkLCB3aW5kb3dUeXBlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdmFyIGFubm91bmNlbWVudEluZm8gPSBfdGhpcy5fYnJpZGdlLmdldEFubm91bmNlbWVudEluZm8oKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQoYWN0aXZpdHlXaW5kb3dJZCkpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2aXR5V2luZG93SWQgPSBhbm5vdW5jZW1lbnRJbmZvLmFjdGl2aXR5V2luZG93SWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQod2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvd1R5cGUgPSBhbm5vdW5jZW1lbnRJbmZvLmFjdGl2aXR5V2luZG93VHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh3aW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCBhbm5vdW5jZSAtIHVua25vd24gd2luZG93VHlwZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbChhY3Rpdml0eVdpbmRvd0lkKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5kZWJ1ZyhcIlJlZ2lzdGVyaW5nIHdpbmRvdyB3aXRoIHR5cGU6J1wiICsgd2luZG93VHlwZSArIFwiJywgbmFtZTonXCIgKyBhbm5vdW5jZW1lbnRJbmZvLmFjdGl2aXR5V2luZG93TmFtZSArIFwiJywgaW5kLjonXCIgKyBhbm5vdW5jZW1lbnRJbmZvLmFjdGl2aXR5V2luZG93SW5kZXBlbmRlbnQgKyBcIidcIik7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fYnJpZGdlLnJlZ2lzdGVyV2luZG93KHdpbmRvd1R5cGUsIGFubm91bmNlbWVudEluZm8uYWN0aXZpdHlXaW5kb3dOYW1lLCBhbm5vdW5jZW1lbnRJbmZvLmFjdGl2aXR5V2luZG93SW5kZXBlbmRlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oX3RoaXMuX3dpbmRvd3MuZ2V0T3JXYWl0LmJpbmQoX3RoaXMuX3dpbmRvd3MpKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh3KTtcclxuICAgICAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9sb2dnZXIuZGVidWcoXCJBbm5vdW5jaW5nIHdpbmRvdyB3aXRoIGlkICdcIiArIGFjdGl2aXR5V2luZG93SWQgKyBcIicgYW5kIHR5cGUgJ1wiICsgd2luZG93VHlwZSArIFwiJ1wiKTtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50V2luZG93ID0gX3RoaXMuX3dpbmRvd3MuZ2V0QnlOYW1lKGFjdGl2aXR5V2luZG93SWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKGN1cnJlbnRXaW5kb3cpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5kZWJ1ZyhcIldpbmRvdyB3aXRoIGlkICdcIiArIGFjdGl2aXR5V2luZG93SWQgKyBcIicgYWxyZWFkeSBhbm5vdW5jZWQgLSByZXVzaW5nIHRoZSB3aW5kb3dcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjdXJyZW50V2luZG93KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgd2luZG93RXZlbnRIYW5kbGVyID0gZnVuY3Rpb24gKGEsIHcsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZpdHlXaW5kb3dJZCA9PT0gdy5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA9PT0gXCJqb2luZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2aXR5ID0gdy5hY3Rpdml0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKGFjdGl2aXR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIlVOREVGSU5FRCBBQ1RJVklUWVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9sb2dnZXIudHJhY2UoXCJHb3Qgam9pbmVkIGV2ZW50IGZvciBpZCAnXCIgKyBhY3Rpdml0eVdpbmRvd0lkICsgXCInXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnVuc3Vic2NyaWJlV2luZG93RXZlbnRzKHdpbmRvd0V2ZW50SGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlV2luZG93RXZlbnRzKHdpbmRvd0V2ZW50SGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLnRyYWNlKFwiV2FpdGluZyBmb3Igam9pbmVkIGV2ZW50IGZvciBpZCAnXCIgKyBhY3Rpdml0eVdpbmRvd0lkICsgXCInXCIpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2JyaWRnZS5hbm5vdW5jZVdpbmRvdyh3aW5kb3dUeXBlLCBhY3Rpdml0eVdpbmRvd0lkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuc3Vic2NyaWJlV2luZG93VHlwZUV2ZW50cyA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5fd2luZG93VHlwZXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh3dCwgY29udGV4dCkge1xyXG4gICAgICAgICAgICBoYW5kbGVyKHd0LCBjb250ZXh0LnR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuc3Vic2NyaWJlQWN0aXZpdHlFdmVudHMgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXRpZXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChhY3QsIGNvbnRleHQpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQudHlwZSA9PT0gZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudFR5cGUuU3RhdHVzQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcCA9IGNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGFjdCwgcC5uZXdTdGF0dXMsIHAub2xkU3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuc3Vic2NyaWJlV2luZG93RXZlbnRzID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLl93aW5kb3dzLnN1YnNjcmliZShmdW5jdGlvbiAod2luZG93LCBjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LnR5cGUgPT09IGVudGl0eUV2ZW50XzEuRW50aXR5RXZlbnRUeXBlLkFjdGl2aXR5V2luZG93RXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwID0gY29udGV4dDtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIod2luZG93LmFjdGl2aXR5LCB3aW5kb3csIHAuZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS51bnN1YnNjcmliZVdpbmRvd0V2ZW50cyA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVXaW5kb3cgPSBmdW5jdGlvbiAoYWN0aXZpdHksIHdpbmRvd1R5cGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwoYWN0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJhY3Rpdml0eSBpcyB1bmRlZmluZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwod2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIndpbmRvd1R5cGUgaXMgdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB3aW5kb3dEZWZpbml0aW9uO1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1N0cmluZyh3aW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93RGVmaW5pdGlvbiA9IHsgdHlwZTogd2luZG93VHlwZSwgbmFtZTogXCJcIiwgaXNJbmRlcGVuZGVudDogZmFsc2UsIGFyZ3VtZW50czoge30gfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvd0RlZmluaXRpb24gPSB3aW5kb3dUeXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZVRvV2luZG93O1xyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwod2luZG93RGVmaW5pdGlvbi5yZWxhdGl2ZVRvKSkge1xyXG4gICAgICAgICAgICAgICAgcmVsYXRpdmVUb1dpbmRvdyA9IHdpbmRvd0RlZmluaXRpb24ucmVsYXRpdmVUbztcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzU3RyaW5nKHJlbGF0aXZlVG9XaW5kb3cpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdpbmRvd3MgPSBfdGhpcy5nZXRXaW5kb3dzKHsgdHlwZTogcmVsYXRpdmVUb1dpbmRvdyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwod2luZG93cykgJiYgd2luZG93cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0RlZmluaXRpb24ucmVsYXRpdmVUbyA9IHdpbmRvd3NbMF0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwocmVsYXRpdmVUb1dpbmRvdy50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dzID0gX3RoaXMuZ2V0V2luZG93cyh7IHR5cGU6IHJlbGF0aXZlVG9XaW5kb3cudHlwZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwod2luZG93cykgJiYgd2luZG93cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0RlZmluaXRpb24ucmVsYXRpdmVUbyA9IHdpbmRvd3NbMF0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwocmVsYXRpdmVUb1dpbmRvdy53aW5kb3dJZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dEZWZpbml0aW9uLnJlbGF0aXZlVG8gPSByZWxhdGl2ZVRvV2luZG93LndpbmRvd0lkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9icmlkZ2UuY3JlYXRlV2luZG93KGFjdGl2aXR5LmlkLCB3aW5kb3dEZWZpbml0aW9uKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHdpZCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5kZWJ1ZyhcIldpbmRvdyBjcmVhdGVkLCB3YWl0aW5nIGZvciB3aW5kb3cgZW50aXR5IHdpdGggaWQgXCIgKyB3aWQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAod2luZG93LCBjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pZCA9PT0gd2lkICYmIHdpbmRvdy5hY3Rpdml0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJHb3QgZW50aXR5IHdpbmRvdyB3aXRoIGlkIFwiICsgd2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh3aW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93aW5kb3dzLnVuc3Vic2NyaWJlKGhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0uYmluZChfdGhpcyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fd2luZG93cy5zdWJzY3JpYmUoaGFuZGxlcik7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmNyZWF0ZVN0YWNrZWRXaW5kb3dzID0gZnVuY3Rpb24gKGFjdGl2aXR5LCByZWxhdGl2ZVdpbmRvd1R5cGVzLCB0aW1lb3V0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKGFjdGl2aXR5KSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiYWN0aXZpdHkgaXMgdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHJlbGF0aXZlV2luZG93VHlwZXMpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJyZWxhdGl2ZVdpbmRvd1R5cGVzIGlzIHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVsYXRpdmVXaW5kb3dUeXBlcykpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcInJlbGF0aXZlV2luZG93VHlwZXMgaGFzIHRvIGJlIGFycmF5XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHRpbWVvdXQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gMjAwMDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlV2luZG93cyA9IFtdO1xyXG4gICAgICAgICAgICByZWxhdGl2ZVdpbmRvd1R5cGVzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB3aW5kb3dEZWZpbml0aW9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNTdHJpbmcoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dEZWZpbml0aW9uID0geyB0eXBlOiBlbGVtZW50LCBuYW1lOiBcIlwiLCBpc0luZGVwZW5kZW50OiBmYWxzZSwgYXJndW1lbnRzOiB7fSB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93RGVmaW5pdGlvbiA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVsYXRpdmVUb1dpbmRvdztcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh3aW5kb3dEZWZpbml0aW9uLnJlbGF0aXZlVG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVUb1dpbmRvdyA9IHdpbmRvd0RlZmluaXRpb24ucmVsYXRpdmVUbztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwocmVsYXRpdmVUb1dpbmRvdy50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dEZWZpbml0aW9uLnJlbGF0aXZlVG8gPSByZWxhdGl2ZVRvV2luZG93LnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHJlbGF0aXZlVG9XaW5kb3cud2luZG93SWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dzID0gX3RoaXMuZ2V0V2luZG93cyh7IGlkOiByZWxhdGl2ZVRvV2luZG93LndpbmRvd0lkIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwod2luZG93cykgJiYgd2luZG93cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dEZWZpbml0aW9uLnJlbGF0aXZlVG8gPSB3aW5kb3dzWzBdLnR5cGUubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0RlZmluaXRpb24udXNlRXhpc3RpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVsYXRpdmVXaW5kb3dzLnB1c2god2luZG93RGVmaW5pdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlLmNyZWF0ZVN0YWNrZWRXaW5kb3dzKGFjdGl2aXR5LmlkLCByZWxhdGl2ZVdpbmRvd3MsIHRpbWVvdXQpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAod2lkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZpdHlXaW5kb3dzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgYWxyZWFkeUNyZWF0ZWQgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKHdpbmRvdywgY29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aWQuaW5kZXhPZih3aW5kb3cuaWQpID49IDAgJiYgYWxyZWFkeUNyZWF0ZWQuaW5kZXhPZih3aW5kb3cuaWQpIDwgMCAmJiB3aW5kb3cuYWN0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFwiR290IGVudGl0eSB3aW5kb3cgd2l0aCBpZCBcIiArIHdpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5V2luZG93cy5wdXNoKHdpbmRvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHlDcmVhdGVkLnB1c2god2luZG93LmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5V2luZG93cy5sZW5ndGggPT0gd2lkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhY3Rpdml0eVdpbmRvd3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2luZG93cy51bnN1YnNjcmliZShoYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0uYmluZChfdGhpcyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fd2luZG93cy5zdWJzY3JpYmUoaGFuZGxlcik7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmpvaW5XaW5kb3dUb0FjdGl2aXR5ID0gZnVuY3Rpb24gKGFjdGl2aXR5LCB3aW5kb3csIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmxlYXZlV2luZG93RnJvbUFjdGl2aXR5ID0gZnVuY3Rpb24gKGFjdGl2aXR5LCB3aW5kb3csIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnNldEFjdGl2aXR5Q29udGV4dCA9IGZ1bmN0aW9uIChhY3Rpdml0eSwgY29udGV4dCwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbChhY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcImFjdGl2aXR5IGNhbiBub3QgYmUgbnVsbFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlXHJcbiAgICAgICAgICAgICAgICAudXBkYXRlQWN0aXZpdHlDb250ZXh0KGFjdGl2aXR5LCBjb250ZXh0LCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShvYmopO1xyXG4gICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VFeHRlbnNpb25zXzEubm9kZWlmeShwcm9taXNlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVBY3Rpdml0eUNvbnRleHQgPSBmdW5jdGlvbiAoYWN0aXZpdHksIGNvbnRleHQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwoYWN0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJhY3Rpdml0eSBjYW4gbm90IGJlIG51bGxcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlbW92ZWRLZXlzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGNvbnRleHRba2V5XSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWRLZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlXHJcbiAgICAgICAgICAgICAgICAudXBkYXRlQWN0aXZpdHlDb250ZXh0KGFjdGl2aXR5LCBjb250ZXh0LCBmYWxzZSwgcmVtb3ZlZEtleXMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnN1YnNjcmliZUFjdGl2aXR5Q29udGV4dENoYW5nZWQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXRpZXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChhY3QsIGNvbnRleHQpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQudHlwZSA9PT0gZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudFR5cGUuQWN0aXZpdHlDb250ZXh0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlQ29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGFjdCwgdXBkYXRlQ29udGV4dC5jb250ZXh0LCB1cGRhdGVDb250ZXh0LnVwZGF0ZWQsIHVwZGF0ZUNvbnRleHQucmVtb3ZlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnN0b3BBY3Rpdml0eSA9IGZ1bmN0aW9uIChhY3Rpdml0eSwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX2JyaWRnZS5zdG9wQWN0aXZpdHkoYWN0aXZpdHkpO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlRXh0ZW5zaW9uc18xLm5vZGVpZnkocHJvbWlzZSwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuZ2V0V2luZG93cyA9IGZ1bmN0aW9uIChmaWx0ZXIpIHtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChmaWx0ZXIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93aW5kb3dzLmdldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWQoZmlsdGVyLmlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3RoaXMuX3dpbmRvd3MuZ2V0QnlOYW1lKGZpbHRlci5pZCldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWxsV2luZG93cyA9IHRoaXMuX3dpbmRvd3MuZ2V0KCk7XHJcbiAgICAgICAgcmV0dXJuIGFsbFdpbmRvd3MuZmlsdGVyKGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZChmaWx0ZXIudHlwZSkgJiYgdy50eXBlLmlkICE9PSBmaWx0ZXIudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZChmaWx0ZXIubmFtZSkgJiYgdy5uYW1lICE9PSBmaWx0ZXIubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZChmaWx0ZXIuYWN0aXZpdHlJZCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHcuYWN0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHcuYWN0aXZpdHkuaWQgIT09IGZpbHRlci5hY3Rpdml0eUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuX2dyYWJFbnRpdHkgPSBmdW5jdGlvbiAoZW50aXR5KSB7XHJcbiAgICAgICAgZW50aXR5Lm1hbmFnZXIgPSB0aGlzO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuX3N1YnNjcmliZUZvckRhdGEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJTdGFydCBnZXR0aW5nIGluaXRpYWwgZGF0YS4uLlwiKTtcclxuICAgICAgICB0aGlzLl9icmlkZ2Uub25BY3Rpdml0eVR5cGVTdGF0dXNDaGFuZ2UoZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9hY3Rpdml0eVR5cGVzLnByb2Nlc3MoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2JyaWRnZS5nZXRBY3Rpdml0eVR5cGVzKClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGF0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9hY3Rpdml0eVR5cGVzLmFkZChhdCk7XHJcbiAgICAgICAgICAgIF90aGlzLl9kYXRhUmVhZHlNYXJrZXIuc2lnbmFsKFwiR290IGFjdCB0eXBlc1wiKTtcclxuICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIF90aGlzLl9kYXRhUmVhZHlNYXJrZXIuZXJyb3IoXCJDYW4gbm90IGluaXRpYWxpemUgQWN0aXZpdHlNYW5hZ2VyIC0gZXJyb3IgZ2V0dGluZyBhY3Rpdml0eSB0eXBlcyAtXCIgKyBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYnJpZGdlLm9uV2luZG93VHlwZVN0YXR1c0NoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3dpbmRvd1R5cGVzLnByb2Nlc3MoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2JyaWRnZS5nZXRXaW5kb3dUeXBlcygpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh3dCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fd2luZG93VHlwZXMuYWRkKHd0KTtcclxuICAgICAgICAgICAgX3RoaXMuX2RhdGFSZWFkeU1hcmtlci5zaWduYWwoXCJHb3Qgd2luZG93IHR5cGVzXCIpO1xyXG4gICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgX3RoaXMuX2RhdGFSZWFkeU1hcmtlci5lcnJvcihcIkNhbiBub3QgaW5pdGlhbGl6ZSBBY3Rpdml0eU1hbmFnZXIgLSBlcnJvciBnZXR0aW5nIHdpbmRvdyB0eXBlcyAgXCIgKyBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYnJpZGdlLm9uQWN0aXZpdHlTdGF0dXNDaGFuZ2UoZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9hY3Rpdml0aWVzLnByb2Nlc3MoZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2JyaWRnZS5nZXRBY3Rpdml0aWVzKClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGFjKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9hY3Rpdml0aWVzLmFkZChhYyk7XHJcbiAgICAgICAgICAgIF90aGlzLl9kYXRhUmVhZHlNYXJrZXIuc2lnbmFsKFwiR290IGFjdGl2aXRpZXNcIik7XHJcbiAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9sb2dnZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGF0YVJlYWR5TWFya2VyLmVycm9yKFwiQ2FuIG5vdCBpbml0aWFsaXplIEFjdGl2aXR5TWFuYWdlciAtIGVycm9yIGdldHRpbmcgYWN0aXZpdHkgaW5zdGFuY2VzIC1cIiArIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9icmlkZ2Uub25BY3Rpdml0eVdpbmRvd0NoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3dpbmRvd3MucHJvY2VzcyhldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYnJpZGdlLmdldEFjdGl2aXR5V2luZG93cygpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChhdykge1xyXG4gICAgICAgICAgICBfdGhpcy5fd2luZG93cy5hZGQoYXcpO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGF0YVJlYWR5TWFya2VyLnNpZ25hbChcIkdvdCB3aW5kb3dzXCIpO1xyXG4gICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgX3RoaXMuX2RhdGFSZWFkeU1hcmtlci5lcnJvcihcIkNhbiBub3QgaW5pdGlhbGl6ZSBBY3Rpdml0eU1hbmFnZXIgLSBlcnJvciBnZXR0aW5nIGFjdGl2aXR5IHdpbmRvd3MgLVwiICsgZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuZ2V0V2luZG93Qm91bmRzID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JyaWRnZS5nZXRXaW5kb3dCb3VuZHMoaWQpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuc2V0V2luZG93Qm91bmRzID0gZnVuY3Rpb24gKGlkLCBib3VuZHMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2JyaWRnZS5zZXRXaW5kb3dCb3VuZHMoaWQsIGJvdW5kcylcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUoKTsgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlRXh0ZW5zaW9uc18xLm5vZGVpZnkocHJvbWlzZSwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuY2xvc2VXaW5kb3cgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnJpZGdlLmNsb3NlV2luZG93KGlkKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmFjdGl2YXRlV2luZG93ID0gZnVuY3Rpb24gKGlkLCBmb2N1cykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9icmlkZ2UuYWN0aXZhdGVXaW5kb3coaWQsIGZvY3VzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQWN0aXZpdHlNYW5hZ2VyO1xyXG59KCkpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXT0gQWN0aXZpdHlNYW5hZ2VyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY3Rpdml0eU1hbmFnZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBMb2NhbFdpbmRvd0ZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9jYWxXaW5kb3dGYWN0b3J5KGNyZWF0ZUZ1bmN0aW9uLCBkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2NyZWF0ZUZ1bmN0aW9uID0gY3JlYXRlRnVuY3Rpb247XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgIH1cclxuICAgIExvY2FsV2luZG93RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGFjdGl2aXR5V2luZG93SWQsIGNvbnRleHQsIGxheW91dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVGdW5jdGlvbihhY3Rpdml0eVdpbmRvd0lkLCBjb250ZXh0LCBsYXlvdXQpO1xyXG4gICAgfTtcclxuICAgIExvY2FsV2luZG93RmFjdG9yeS5wcm90b3R5cGUuZGVzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2NyaXB0aW9uO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMb2NhbFdpbmRvd0ZhY3Rvcnk7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTG9jYWxXaW5kb3dGYWN0b3J5ID0gTG9jYWxXaW5kb3dGYWN0b3J5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbFdpbmRvd0ZhY3RvcnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBQcm94eVdpbmRvd0ZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJveHlXaW5kb3dGYWN0b3J5KGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgIH1cclxuICAgIFByb3h5V2luZG93RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGFjdGl2aXR5V2luZG93SWQsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIFByb3h5V2luZG93RmFjdG9yeS5wcm90b3R5cGUuZGVzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2NyaXB0aW9uO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcm94eVdpbmRvd0ZhY3Rvcnk7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUHJveHlXaW5kb3dGYWN0b3J5ID0gUHJveHlXaW5kb3dGYWN0b3J5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm94eVdpbmRvd0ZhY3RvcnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBhY3Rpdml0eUVudGl0eV8xID0gcmVxdWlyZShcIi4vYWN0aXZpdHlFbnRpdHlcIik7XHJcbnZhciBhY3Rpdml0eUFHTV8xID0gcmVxdWlyZShcIi4uL2NvcmUvYWN0aXZpdHlBR01cIik7XHJcbnZhciBBY3Rpdml0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWN0aXZpdHksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eShpZCwgYWN0VHlwZSwgc3RhdHVzLCBjb250ZXh0LCBvd25lcklkKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgaWQpO1xyXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5fYWN0VHlwZSA9IGFjdFR5cGU7XHJcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuX293bmVySWQgPSBvd25lcklkO1xyXG4gICAgICAgIHRoaXMuX2FnbSA9IG5ldyBhY3Rpdml0eUFHTV8xLkFjdGl2aXR5QUdNKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5LnByb3RvdHlwZSwgXCJ0eXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFuYWdlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5nZXRBY3Rpdml0eVR5cGUodGhpcy5fYWN0VHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eS5wcm90b3R5cGUsIFwiY29udGV4dFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5LnByb3RvdHlwZSwgXCJzdGF0dXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5LnByb3RvdHlwZSwgXCJvd25lclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fb3duZXJJZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5nZXRXaW5kb3dzKHsgaWQ6IHRoaXMuX293bmVySWQgfSlbMF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHkucHJvdG90eXBlLCBcIndpbmRvd3NcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmdldFdpbmRvd3MoeyBhY3Rpdml0eUlkOiB0aGlzLl9pZCB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eS5wcm90b3R5cGUsIFwiYWdtXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FnbTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEFjdGl2aXR5LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gKHdpbmRvdywgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmpvaW5XaW5kb3dUb0FjdGl2aXR5KHRoaXMsIHdpbmRvdywgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5LnByb3RvdHlwZS5jcmVhdGVXaW5kb3cgPSBmdW5jdGlvbiAod2luZG93VHlwZSwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmNyZWF0ZVdpbmRvdyh0aGlzLCB3aW5kb3dUeXBlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLmNyZWF0ZVN0YWNrZWRXaW5kb3dzID0gZnVuY3Rpb24gKHdpbmRvd1R5cGVzLCB0aW1lb3V0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIuY3JlYXRlU3RhY2tlZFdpbmRvd3ModGhpcywgd2luZG93VHlwZXMsIHRpbWVvdXQsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbiAod2luZG93LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIubGVhdmVXaW5kb3dGcm9tQWN0aXZpdHkodGhpcywgd2luZG93LCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLmdldFdpbmRvd3NCeVR5cGUgPSBmdW5jdGlvbiAod2luZG93VHlwZSkge1xyXG4gICAgICAgIHZhciBmaWx0ZXIgPSB7IGFjdGl2aXR5SWQ6IHRoaXMuX2lkLCB0eXBlOiB3aW5kb3dUeXBlIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5nZXRXaW5kb3dzKGZpbHRlcik7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLnNldENvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLnNldEFjdGl2aXR5Q29udGV4dCh0aGlzLCBjb250ZXh0LCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLnVwZGF0ZUFjdGl2aXR5Q29udGV4dCh0aGlzLCBjb250ZXh0LCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLm9uU3RhdHVzQ2hhbmdlID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubWFuYWdlci5zdWJzY3JpYmVBY3Rpdml0eUV2ZW50cyhmdW5jdGlvbiAoYSwgbnMsIG9zKSB7XHJcbiAgICAgICAgICAgIGlmIChhLmlkID09PSBfdGhpcy5pZCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcihhLCBucywgb3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLm9uV2luZG93RXZlbnQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyLnN1YnNjcmliZVdpbmRvd0V2ZW50cyhmdW5jdGlvbiAoYSwgdywgZSkge1xyXG4gICAgICAgICAgICBpZiAoYS5pZCA9PT0gX3RoaXMuaWQpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIoYSwgdywgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUub25Db250ZXh0Q2hhbmdlZCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm1hbmFnZXIuc3Vic2NyaWJlQWN0aXZpdHlDb250ZXh0Q2hhbmdlZChmdW5jdGlvbiAoYWN0LCBjb250ZXh0LCBkZWx0YSwgcmVtb3ZlZCkge1xyXG4gICAgICAgICAgICBpZiAoYWN0LmlkID09PSBfdGhpcy5pZCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcihjb250ZXh0LCBkZWx0YSwgcmVtb3ZlZCwgYWN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIodGhpcy5jb250ZXh0LCB0aGlzLmNvbnRleHQsIFtdLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubWFuYWdlci5zdG9wQWN0aXZpdHkodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLnVwZGF0ZUNvcmUgPSBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcclxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZUNvcmUuY2FsbCh0aGlzLCBhY3Rpdml0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0VHlwZSA9IGFjdGl2aXR5Ll9hY3RUeXBlO1xyXG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBhY3Rpdml0eS5fY29udGV4dDtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBhY3Rpdml0eS5fc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuX293bmVySWQgPSBhY3Rpdml0eS5fb3duZXJJZDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQWN0aXZpdHk7XHJcbn0oYWN0aXZpdHlFbnRpdHlfMVsnZGVmYXVsdCddKSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0c1snZGVmYXVsdCddPSBBY3Rpdml0eTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aXZpdHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBBY3Rpdml0eUVudGl0eSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eUVudGl0eShpZCkge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eUVudGl0eS5wcm90b3R5cGUsIFwiaWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBY3Rpdml0eUVudGl0eS5wcm90b3R5cGUub25VcGRhdGVkID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGhhbmRsZXIpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5RW50aXR5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAob3RoZXIuX2lkICE9IHRoaXMuX2lkKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQ2FuIG5vdCB1cGRhdGUgZnJvbSBlbnRpdHkgd2l0aCBkaWZmZXJlbnQgaWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZUNvcmUob3RoZXIpO1xyXG4gICAgICAgIHRoaXMubm90aWZ5KCk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlFbnRpdHkucHJvdG90eXBlLnVwZGF0ZUNvcmUgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eUVudGl0eS5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmxpc3RlbmVycy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNbaW5kZXhdO1xyXG4gICAgICAgICAgICBsaXN0ZW5lcih0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFjdGl2aXR5RW50aXR5O1xyXG59KCkpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXT0gQWN0aXZpdHlFbnRpdHk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5RW50aXR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgYWN0aXZpdHlFbnRpdHlfMSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5RW50aXR5XCIpO1xyXG52YXIgQWN0aXZpdHlUeXBlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBY3Rpdml0eVR5cGUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eVR5cGUobmFtZSwgb3duZXJXaW5kb3csIGhlbHBlcldpbmRvd3MsIGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbmFtZSk7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLl9vd25lcldpbmRvdyA9IG93bmVyV2luZG93O1xyXG4gICAgICAgIHRoaXMuX2hlbHBlcldpbmRvd3MgPSBoZWxwZXJXaW5kb3dzIHx8IFtdO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5VHlwZS5wcm90b3R5cGUsIFwibmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5VHlwZS5wcm90b3R5cGUsIFwiZGVzY3JpcHRpb25cIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlUeXBlLnByb3RvdHlwZSwgXCJoZWxwZXJXaW5kb3dzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlbHBlcldpbmRvd3M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlUeXBlLnByb3RvdHlwZSwgXCJvd25lcldpbmRvd1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vd25lcldpbmRvdztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEFjdGl2aXR5VHlwZS5wcm90b3R5cGUuc3Vic2NyaWJlQWN0aXZpdHlTdGF0dXNDaGFuZ2UgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlUeXBlLnByb3RvdHlwZS5pbml0aWF0ZSA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIuaW5pdGlhdGUodGhpcy5fbmFtZSwgY29udGV4dCwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5VHlwZS5wcm90b3R5cGUudXBkYXRlQ29yZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51cGRhdGVDb3JlLmNhbGwodGhpcywgdHlwZSk7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSB0eXBlLl9kZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLl9vd25lcldpbmRvdyA9IHR5cGUuX293bmVyV2luZG93O1xyXG4gICAgICAgIHRoaXMuX2hlbHBlcldpbmRvd3MgPSB0eXBlLl9oZWxwZXJXaW5kb3dzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBY3Rpdml0eVR5cGU7XHJcbn0oYWN0aXZpdHlFbnRpdHlfMVsnZGVmYXVsdCddKSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0c1snZGVmYXVsdCddPSBBY3Rpdml0eVR5cGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5VHlwZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFjdGl2aXR5RW50aXR5XzEgPSByZXF1aXJlKFwiLi9hY3Rpdml0eUVudGl0eVwiKTtcclxudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvbG9nZ2VyXCIpO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBBY3Rpdml0eVdpbmRvdyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWN0aXZpdHlXaW5kb3csIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eVdpbmRvdyhpZCwgbmFtZSwgdHlwZSwgYWN0aXZpdHlJZCwgaW5zdGFuY2UsIGlzSW5kZXBlbmRlbnQpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBpZCk7XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyXzEuTG9nZ2VyLkdldCh0aGlzKTtcclxuICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eUlkID0gYWN0aXZpdHlJZDtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMuX2lzSW5kZXBlbmRlbnQgPSBpc0luZGVwZW5kZW50O1xyXG4gICAgfVxyXG4gICAgQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLmdldEJvdW5kcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmdldFdpbmRvd0JvdW5kcyh0aGlzLmlkKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUsIFwiaXNJbmRlcGVuZGVudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0luZGVwZW5kZW50O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5V2luZG93LnByb3RvdHlwZSwgXCJ0eXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFuYWdlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5nZXRXaW5kb3dUeXBlKHRoaXMuX3R5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLCBcImFjdGl2aXR5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQodGhpcy5fYWN0aXZpdHlJZCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5nZXRBY3Rpdml0eUJ5SWQodGhpcy5fYWN0aXZpdHlJZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLCBcImlzT3duZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYWN0ID0gdGhpcy5hY3Rpdml0eTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQoYWN0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhY3Qub3duZXIuaWQgPT09IHRoaXMuaWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuc2V0VmlzaWJsZSA9IGZ1bmN0aW9uIChpc1Zpc2libGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoZm9jdXMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmFjdGl2YXRlV2luZG93KHRoaXMuaWQsIGZvY3VzKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuc2V0VGl0bGUgPSBmdW5jdGlvbiAodGl0bGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuc2V0Qm91bmRzID0gZnVuY3Rpb24gKGJvdW5kcywgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLnNldFdpbmRvd0JvdW5kcyh0aGlzLmlkLCBib3VuZHMsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5jbG9zZVdpbmRvdyh0aGlzLmlkKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLCBcImluc3RhbmNlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLm9uQWN0aXZpdHlKb2luZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpYmVGb3JBY3Rpdml0eVdpbmRvd0V2ZW50KFwiam9pbmVkXCIsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUub25BY3Rpdml0eVJlbW92ZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpYmVGb3JBY3Rpdml0eVdpbmRvd0V2ZW50KFwicmVtb3ZlZFwiLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLnVwZGF0ZUNvcmUgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eUlkID0gb3RoZXIuX2FjdGl2aXR5SWQ7XHJcbiAgICAgICAgdGhpcy5faXNJbmRlcGVuZGVudCA9IG90aGVyLl9pc0luZGVwZW5kZW50O1xyXG4gICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbChvdGhlci5faW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gb3RoZXIuX2luc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuX3N1YnNjcmliZUZvckFjdGl2aXR5V2luZG93RXZlbnQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyLnN1YnNjcmliZVdpbmRvd0V2ZW50cyhmdW5jdGlvbiAoYWN0aXZpdHksIHdpbmRvdywgZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKHdpbmRvdy5pZCAhPT0gX3RoaXMuaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09IGV2ZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soYWN0aXZpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFjdGl2aXR5V2luZG93O1xyXG59KGFjdGl2aXR5RW50aXR5XzFbJ2RlZmF1bHQnXSkpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXT0gQWN0aXZpdHlXaW5kb3c7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5V2luZG93LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgYWN0aXZpdHlFbnRpdHlfMSA9IHJlcXVpcmUoXCIuL2FjdGl2aXR5RW50aXR5XCIpO1xyXG52YXIgV2luZG93VHlwZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoV2luZG93VHlwZSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFdpbmRvd1R5cGUobmFtZSwgZmFjdG9yaWVzKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbmFtZSk7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5fZmFjdG9yaWVzID0gZmFjdG9yaWVzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdpbmRvd1R5cGUucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXaW5kb3dUeXBlLnByb3RvdHlwZSwgXCJmYWN0b3JpZXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmFjdG9yaWVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdpbmRvd1R5cGUucHJvdG90eXBlLCBcIndpbmRvd3NcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmdldFdpbmRvd3MoeyB0eXBlOiB0aGlzLl9uYW1lIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgV2luZG93VHlwZS5wcm90b3R5cGUucmVnaXN0ZXJGYWN0b3J5ID0gZnVuY3Rpb24gKGZhY3RvcnksIGZhY3RvcnlNZXRob2QsIGRlc2NyaXB0aW9uLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIucmVnaXN0ZXJXaW5kb3dGYWN0b3J5KHRoaXMsIGZhY3RvcnlNZXRob2QsIGRlc2NyaXB0aW9uKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gV2luZG93VHlwZTtcclxufShhY3Rpdml0eUVudGl0eV8xWydkZWZhdWx0J10pKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzWydkZWZhdWx0J109IFdpbmRvd1R5cGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1R5cGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBlbnRpdHlFdmVudF8xID0gcmVxdWlyZShcIi4uL2NvbnRyYWN0cy9lbnRpdHlFdmVudFwiKTtcclxudmFyIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uKHByb2Nlc3NOZXcpIHtcclxuICAgICAgICB0aGlzLl9pdGVtcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3NOZXcgPSBwcm9jZXNzTmV3O1xyXG4gICAgfVxyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmFkZE9uZSA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5hZGQoW2l0ZW1dKTtcclxuICAgIH07XHJcbiAgICBFbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGl0ZW1zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGl0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKG5ldyBlbnRpdHlFdmVudF8xLkVudGl0eUV2ZW50KGVsZW1lbnQsIG5ldyBlbnRpdHlFdmVudF8xLkVudGl0eUV2ZW50Q29udGV4dChlbnRpdHlFdmVudF8xLkVudGl0eUV2ZW50VHlwZS5BZGRlZCkpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgY29udGV4dCA9IGV2ZW50LmNvbnRleHQ7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBjb250ZXh0LnR5cGU7XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IGV2ZW50LmVudGl0eTtcclxuICAgICAgICB2YXIgaW50ZXJuYWxFbnRpdHkgPSB0aGlzLl91cGRhdGVJbnRlcm5hbENvbGxlY3Rpb25zKGVudGl0eSwgdHlwZSk7XHJcbiAgICAgICAgdGhpcy5fbm90aWZ5TGlzdGVuZXJzKGludGVybmFsRW50aXR5LCBjb250ZXh0KTtcclxuICAgIH07XHJcbiAgICBFbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5faXRlbXMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2l0ZW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5faXRlbXNba2V5XTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldEJ5TmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuX2l0ZW1zKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtc1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldE9yV2FpdCA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eUFkZGVkSGFuZGxlciA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRpdHkuaWQgIT09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy51bnN1YnNjcmliZShlbnRpdHlBZGRlZEhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZW50aXR5QWRkZWRIYW5kbGVyKTtcclxuICAgICAgICAgICAgdmFyIHdpbmRvdyA9IF90aGlzLmdldEJ5TmFtZShuYW1lKTtcclxuICAgICAgICAgICAgaWYgKHdpbmRvdykge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh3aW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuX2l0ZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5faXRlbXNba2V5XTtcclxuICAgICAgICAgICAgaGFuZGxlcihlbGVtZW50LCBuZXcgZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudENvbnRleHQoZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudFR5cGUuQWRkZWQudG9TdHJpbmcoKSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xyXG4gICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLl9ub3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoZW50aXR5LCBjb250ZXh0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2xpc3RlbmVycy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gdGhpcy5fbGlzdGVuZXJzW2luZGV4XTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyKGVudGl0eSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbi5wcm90b3R5cGUuX3VwZGF0ZUludGVybmFsQ29sbGVjdGlvbnMgPSBmdW5jdGlvbiAoZW50aXR5LCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IGVudGl0eUV2ZW50XzEuRW50aXR5RXZlbnRUeXBlLlJlbW92ZWQpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2l0ZW1zW2VudGl0eS5pZF07XHJcbiAgICAgICAgICAgIHJldHVybiBlbnRpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gZW50aXR5LmlkO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2l0ZW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NOZXcoZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zW2VudGl0eS5pZF0gPSBlbnRpdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtc1tlbnRpdHkuaWRdLnVwZGF0ZShlbnRpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtc1tlbnRpdHkuaWRdO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbjtcclxufSgpKTtcclxuZXhwb3J0cy5FbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbiA9IEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG52YXIgTG9nTGV2ZWwgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9nTGV2ZWwoKSB7XHJcbiAgICB9XHJcbiAgICBMb2dMZXZlbC5UcmFjZSA9IFwidHJhY2VcIjtcclxuICAgIExvZ0xldmVsLkRlYnVnID0gXCJkZWJ1Z1wiO1xyXG4gICAgTG9nTGV2ZWwuSW5mbyA9IFwiaW5mb1wiO1xyXG4gICAgTG9nTGV2ZWwuV2FybiA9IFwid2FyblwiO1xyXG4gICAgTG9nTGV2ZWwuRXJyb3IgPSBcImVycm9yXCI7XHJcbiAgICByZXR1cm4gTG9nTGV2ZWw7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTG9nTGV2ZWwgPSBMb2dMZXZlbDtcclxudmFyIExvZ2dlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMb2dnZXIobmFtZSkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbChMb2dnZXIuR2x1ZUxvZ2dlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ2x1ZUxvZ2dlciA9IExvZ2dlci5HbHVlTG9nZ2VyLnN1YkxvZ2dlcihuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBMb2dnZXIuR2V0TmFtZWQgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTG9nZ2VyKG5hbWUpO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5HZXQgPSBmdW5jdGlvbiAob3duZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExvZ2dlcihMb2dnZXIuR2V0VHlwZU5hbWUob3duZXIpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLnRyYWNlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwodGhpcy5fZ2x1ZUxvZ2dlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ2x1ZUxvZ2dlci50cmFjZShtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLlRyYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8odGhpcy5fZ2V0TWVzc2FnZShtZXNzYWdlLCBMb2dMZXZlbC5UcmFjZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0aGlzLl9nbHVlTG9nZ2VyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nbHVlTG9nZ2VyLmRlYnVnKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKExvZ2dlci5MZXZlbCA9PT0gTG9nTGV2ZWwuRGVidWcgfHxcclxuICAgICAgICAgICAgICAgIExvZ2dlci5MZXZlbCA9PT0gTG9nTGV2ZWwuVHJhY2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyh0aGlzLl9nZXRNZXNzYWdlKG1lc3NhZ2UsIExvZ0xldmVsLkRlYnVnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwodGhpcy5fZ2x1ZUxvZ2dlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ2x1ZUxvZ2dlci5pbmZvKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKExvZ2dlci5MZXZlbCA9PT0gTG9nTGV2ZWwuRGVidWcgfHxcclxuICAgICAgICAgICAgICAgIExvZ2dlci5MZXZlbCA9PT0gTG9nTGV2ZWwuVHJhY2UgfHxcclxuICAgICAgICAgICAgICAgIExvZ2dlci5MZXZlbCA9PT0gTG9nTGV2ZWwuSW5mbykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKHRoaXMuX2dldE1lc3NhZ2UobWVzc2FnZSwgTG9nTGV2ZWwuSW5mbykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHRoaXMuX2dsdWVMb2dnZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsdWVMb2dnZXIud2FybihtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLkRlYnVnIHx8XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLlRyYWNlIHx8XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLkluZm8gfHxcclxuICAgICAgICAgICAgICAgIExvZ2dlci5MZXZlbCA9PT0gTG9nTGV2ZWwuV2Fybikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKHRoaXMuX2dldE1lc3NhZ2UobWVzc2FnZSwgTG9nTGV2ZWwuSW5mbykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0aGlzLl9nbHVlTG9nZ2VyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nbHVlTG9nZ2VyLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcih0aGlzLl9nZXRNZXNzYWdlKG1lc3NhZ2UsIExvZ0xldmVsLkVycm9yKSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUudHJhY2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5fZ2V0TWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBsZXZlbCkge1xyXG4gICAgICAgIHJldHVybiBcIltcIiArIGxldmVsICsgXCJdIFwiICsgdGhpcy5fbmFtZSArIFwiIC0gXCIgKyBtZXNzYWdlO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5HZXRUeXBlTmFtZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcclxuICAgICAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvbiAoLnsxLH0pXFwoLztcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IChmdW5jTmFtZVJlZ2V4KS5leGVjKG9iamVjdC5jb25zdHJ1Y3Rvci50b1N0cmluZygpKTtcclxuICAgICAgICByZXR1cm4gKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSA/IHJlc3VsdHNbMV0gOiBcIlwiO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5MZXZlbCA9IExvZ0xldmVsLkluZm87XHJcbiAgICByZXR1cm4gTG9nZ2VyO1xyXG59KCkpO1xyXG5leHBvcnRzLkxvZ2dlciA9IExvZ2dlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBuZXh0VGljayA9IGZ1bmN0aW9uIChjYikgeyBzZXRUaW1lb3V0KGNiLCAwKTsgfTtcclxuZnVuY3Rpb24gbm9kZWlmeShwcm9taXNlLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKCF1dGlsLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICB9XHJcbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcclxuICAgICAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3ApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMubm9kZWlmeSA9IG5vZGVpZnk7XHJcbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZUV4dGVuc2lvbnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuL2xvZ2dlclwiKTtcclxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vaGVscGVycy91dGlsXCIpO1xyXG52YXIgUmVhZHlNYXJrZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVhZHlNYXJrZXIobmFtZSwgc2lnbmFsc1RvV2FpdCkge1xyXG4gICAgICAgIHRoaXMuX2xvZ2dlciA9IGxvZ2dlcl8xLkxvZ2dlci5HZXROYW1lZChcIlJlYWR5TWFya2VyIFtcIiArIG5hbWUgKyBcIl1cIik7XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFwiSW5pdGlhbGl6aW5nIHJlYWR5IG1hcmtlciBmb3IgJ1wiICsgbmFtZSArIFwiJyB3aXRoIFwiICsgc2lnbmFsc1RvV2FpdCArIFwiIHNpZ25hbHMgdG8gd2FpdFwiKTtcclxuICAgICAgICBpZiAoc2lnbmFsc1RvV2FpdCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc2lnbmFsIG51bWJlci4gU2hvdWxkIGJlID4gMFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc2lnbmFscyA9IHNpZ25hbHNUb1dhaXQ7XHJcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcbiAgICBSZWFkeU1hcmtlci5wcm90b3R5cGUuc2V0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAodGhpcy5pc1NldCgpKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc0Vycm9yKCkpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5fZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBSZWFkeU1hcmtlci5wcm90b3R5cGUuc2lnbmFsID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJTaWduYWxlZCAtIFwiICsgbWVzc2FnZSArIFwiIC0gc2lnbmFscyBsZWZ0IFwiICsgKHRoaXMuX3NpZ25hbHMgLSAxKSk7XHJcbiAgICAgICAgdGhpcy5fc2lnbmFscy0tO1xyXG4gICAgICAgIGlmICh0aGlzLl9zaWduYWxzIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiByZWFkeSBtYXJrZXIgJ1wiICsgdGhpcy5fbmFtZSArIFwiIC0gc2lnbmFscyBhcmUgXCIgKyB0aGlzLl9zaWduYWxzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTZXQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWFkeU1hcmtlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvckNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlYWR5TWFya2VyLnByb3RvdHlwZS5pc1NldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0Vycm9yKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmFscyA9PT0gMDtcclxuICAgIH07XHJcbiAgICBSZWFkeU1hcmtlci5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gIXV0aWwuaXNVbmRlZmluZWQodGhpcy5fZXJyb3IpO1xyXG4gICAgfTtcclxuICAgIFJlYWR5TWFya2VyLnByb3RvdHlwZS5nZXRFcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3I7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlYWR5TWFya2VyO1xyXG59KCkpO1xyXG5leHBvcnRzLlJlYWR5TWFya2VyID0gUmVhZHlNYXJrZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWR5TWFya2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcclxufVxyXG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XHJcbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xyXG59XHJcbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcclxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xyXG59XHJcbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcclxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XHJcbn1cclxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcclxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XHJcbn1cclxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xyXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbChhcmcpIHtcclxuICAgIHJldHVybiAhYXJnIHx8IHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xyXG59XHJcbmV4cG9ydHMuaXNVbmRlZmluZWRPck51bGwgPSBpc1VuZGVmaW5lZE9yTnVsbDtcclxuZnVuY3Rpb24gaXNFbXB0eShhcmcpIHtcclxuICAgIGZvciAodmFyIHByb3AgaW4gYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZy5oYXNPd25Qcm9wZXJ0eShwcm9wKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcclxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcclxuICAgIHJldHVybiAhIShhcmcgJiYgYXJnLmNvbnN0cnVjdG9yICYmIGFyZy5jYWxsICYmIGFyZy5hcHBseSk7XHJcbn1cclxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcclxuO1xyXG5mdW5jdGlvbiBzb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcclxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhcnJheS5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnRzLnNvbWUgPSBzb21lO1xyXG5mdW5jdGlvbiBmaXJzdChhcnJheSwgcHJlZGljYXRlKSB7XHJcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXkubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXlbaW5kZXhdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn1cclxuZXhwb3J0cy5maXJzdCA9IGZpcnN0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsIi8qKlxuICogVGhpcyBtb2R1bGUgaGFuZGxlcyBBR00gbWV0aG9kIGludm9jYXRpb25zIC0gdmFsaWRhdGluZyBpbnB1dHMgYW5kIGRlbGVnYXRpbmcgdG8gcHJvdG9jb2xcbiAqL1xudmFyIHJhbmRvbSA9IHJlcXVpcmUoJy4vaGVscGVycy9yYW5kb20nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocHJvdG9jb2wpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKiogU3RvcmUgcGVuZGluZyBjYWxsYmFjayAqKi9cbiAgICB2YXIgcGVuZGluZ0NhbGxiYWNrcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBhbiBBR00gbWV0aG9kIHRvIGEgc2luZ2xlIEFHTSBzZXJ2ZXIsIGdpdmVuIHZhbGlkIGlucHV0LlxuICAgICAqIEBwYXJhbSBtZXRob2RcbiAgICAgKiBAcGFyYW0gYXJndW1lbnRzT2JqXG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSBzdHVmZlxuICAgICAqIEBwYXJhbSBzdWNjZXNzXG4gICAgICogQHBhcmFtIGVycm9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJndW1lbnRzT2JqLCB0YXJnZXQsIHN0dWZmLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBpbnZvY2F0aW9uIElELCBmb3IgdGhpcyBpbnZvY2F0aW9uXG4gICAgICAgIHZhciBpbnZvY2F0aW9uSWQgPSByYW5kb20oKTtcblxuICAgICAgICAvLyBSZWdpc3RlciB0aGUgdXNlcidzIGNhbGxiYWNrc1xuICAgICAgICByZWdpc3Rlckludm9jYXRpb24oaW52b2NhdGlvbklkLCB7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIGNhbGxlZFdpdGg6IGFyZ3VtZW50c09ialxuICAgICAgICB9LCBzdWNjZXNzLCBlcnJvciwgc3R1ZmYubWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXQpO1xuXG4gICAgICAgIHByb3RvY29sLmludm9rZShpbnZvY2F0aW9uSWQsIG1ldGhvZCwgYXJndW1lbnRzT2JqLCB0YXJnZXQsIHN0dWZmKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBpbnZvY2F0aW9uIHNvIHdlIGNhbiBmaW5kIGl0IGxhdGVyIHdoZW4gaW52b2NhdGlvbiByZXN1bHQgaXMgcmVjZWl2ZWRcbiAgICAgKiBAcGFyYW0gaW52b2NhdGlvbklkXG4gICAgICogQHBhcmFtIHJlc3BvbnNlXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NcbiAgICAgKiBAcGFyYW0gZXJyb3JcbiAgICAgKiBAcGFyYW0gdGltZW91dFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVySW52b2NhdGlvbihpbnZvY2F0aW9uSWQsIHJlc3BvbnNlLCBzdWNjZXNzLCBlcnJvciwgdGltZW91dCkge1xuICAgICAgICAvLyBBZGRzIHRoZSBjYWxsYmFja3NcbiAgICAgICAgcGVuZGluZ0NhbGxiYWNrc1tpbnZvY2F0aW9uSWRdID0geyByZXNwb25zZTogcmVzcG9uc2UsIHN1Y2Nlc3M6IHN1Y2Nlc3MsIGVycm9yOiBlcnJvciB9O1xuICAgICAgICAvLyBTY2hlZHVsZXMgdG8gdGhyb3cgYSB0aW1lb3V0IGlmIG5vYm9keSBhbnN3ZXJzXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHBlbmRpbmdDYWxsYmFja3NbaW52b2NhdGlvbklkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogcmVzcG9uc2UubWV0aG9kLFxuICAgICAgICAgICAgICAgIGNhbGxlZF93aXRoOiByZXNwb25zZS5jYWxsZWRXaXRoLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdUaW1lb3V0IHJlYWNoZWQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nQ2FsbGJhY2tzW2ludm9jYXRpb25JZF07XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgaW52b2NhdGlvbiByZXN1bHQgcmVjZWl2ZWQgZnJvbSBwcm90b2NsXG4gICAgICogQHBhcmFtIGludm9jYXRpb25JZFxuICAgICAqIEBwYXJhbSBleGVjdXRlZEJ5XG4gICAgICogQHBhcmFtIHN0YXR1c1xuICAgICAqIEBwYXJhbSByZXN1bHRcbiAgICAgKiBAcGFyYW0gcmVzdWx0TWVzc2FnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb2Nlc3NJbnZvY2F0aW9uUmVzdWx0KGludm9jYXRpb25JZCwgZXhlY3V0ZWRCeSwgc3RhdHVzLCByZXN1bHQsIHJlc3VsdE1lc3NhZ2UpIHtcbiAgICAgICAgLy8gRmluZHMgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrXG4gICAgICAgIHZhciBjYWxsYmFjayA9IHBlbmRpbmdDYWxsYmFja3NbaW52b2NhdGlvbklkXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgc2VydmVyIHJldHVybmVkIHN1Y2Nlc3MsIGV4ZWN1dGUgdGhlIHN1Y2Nlc3MgY2FsbGJhY2tcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMCAmJiB0eXBlb2YgY2FsbGJhY2suc3VjY2VzcyA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBzdWNjZXNzIGNhbGxiYWNrXG4gICAgICAgICAgICBjYWxsYmFjay5zdWNjZXNzKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGNhbGxiYWNrLnJlc3BvbnNlLm1ldGhvZC5pbmZvLFxuICAgICAgICAgICAgICAgIGNhbGxlZF93aXRoOiBjYWxsYmFjay5yZXNwb25zZS5jYWxsZWRXaXRoLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGVkX2J5OiBleGVjdXRlZEJ5LFxuICAgICAgICAgICAgICAgIHJldHVybmVkOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0TWVzc2FnZVxuICAgICAgICAgICAgICAgIC8vIGxvZ19kZXRhaWxzOiBtZXNzYWdlLlJlc3VsdExvZ0RldGFpbHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gRWxzZSwgcmV0dXJuIGFuIGVycm9yXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrLmVycm9yKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGNhbGxiYWNrLnJlc3BvbnNlLm1ldGhvZC5pbmZvLFxuICAgICAgICAgICAgICAgIGNhbGxlZF93aXRoOiBjYWxsYmFjay5yZXNwb25zZS5jYWxsZWRXaXRoLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGVkX2J5OiBleGVjdXRlZEJ5LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdE1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgLy8gbG9nX2RldGFpbHM6IG1lc3NhZ2UuUmVzdWx0TG9nRGV0YWlscyxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmluYWxseSwgcmVtb3ZlIHRoZSBjYWxsYmFja3NcbiAgICAgICAgZGVsZXRlIHBlbmRpbmdDYWxsYmFja3NbaW52b2NhdGlvbklkXTtcbiAgICB9XG5cbiAgICAvLyBzdWJzY3JpYmUgZm9yIGludm9jYXRpb24gcmVzdWx0c1xuICAgIHByb3RvY29sLm9uSW52b2NhdGlvblJlc3VsdChwcm9jZXNzSW52b2NhdGlvblJlc3VsdCk7XG5cbiAgICByZXR1cm4geyBpbnZva2U6IGludm9rZSB9O1xufTtcbiIsIi8qXG4gVGhlIEFHTSBDbGllbnQgYW5hbHlzZXMgc2VydmVyIHByZXNlbmNlcywgY29sbGVjdHMgaW5mb3JtYXRpb24gYWJvdXQgdGhlaXIgbWV0aG9kcyBhbmQgYWxsb3dzIHVzZXJzIHRvIGludm9rZSB0aGVzZSBtZXRob2RzLlxuICovXG5cbnZhciBQcm9taXNlID0gcmVxdWlyZSgnZXM2LXByb21pc2UnKS5Qcm9taXNlO1xudmFyIENsaWVudEludm9jYXRpb25zU3RhdGUgPSByZXF1aXJlKCcuL2FnbS1jbGllbnQtaW52b2tlJyk7XG52YXIgcHJvbWlzaWZ5ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3Byb21pc2lmeScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwcm90b2NvbCwgcmVwbywgaW5zdGFuY2UsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBJbnN0YW50aWF0ZSB0aGUgbW9kdWxlIHRoYXQgaGFuZGxlcyBtZXRob2QgZXhlY3V0aW9uIGFuZCByZXNwb25zZXNcbiAgICB2YXIgY2xpZW50SW52b2NhdGlvbnMgPSBuZXcgQ2xpZW50SW52b2NhdGlvbnNTdGF0ZShwcm90b2NvbCk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBtZXRob2RzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIGZpbHRlci4gSWYgbm8gZmlsdGVyIHNwZWNpZmllZCByZXR1cm5zIGFsbCBtZXRob2RzLlxuICAgICAqIEBwYXJhbSAgICBtZXRob2RGaWx0ZXIgT3B0aW9uYWwgb2JqZWN0IC0gcGFydGlhbCBtZXRob2QgZGVmaW5pdGlvblxuICAgICAqIEByZXR1cm4gQW4gYXJyYXkgb2Yge3NlcnZlcjp7fSwgbWV0aG9kczpbXX0gb2JqZWN0cyAtIG1ldGhvZHMgZm9yIGVhY2ggc2VydmVyIHRoYXQgbWF0Y2ggdGhlIGZpbHRlclxuICAgICAqICovXG4gICAgZnVuY3Rpb24gZ2V0TWV0aG9kcyhtZXRob2RGaWx0ZXIpIHtcbiAgICAgICAgaWYgKG1ldGhvZEZpbHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwby5nZXRNZXRob2RzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2RGaWx0ZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBtZXRob2RGaWx0ZXIgPSB7IG5hbWU6IG1ldGhvZEZpbHRlciB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXBvLmdldE1ldGhvZHMoKS5maWx0ZXIoZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZE1hdGNoKG1ldGhvZEZpbHRlciwgbWV0aG9kLmluZm8pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYWxsIHNlcnZlcnMgdGhhdCBzdXBwb3J0IGFueSBvZiBzZXZlcmFsIG1ldGhvZHMsIGxpc3RlZCBhcyBhbiBhcnJheVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1ldGhvZHNGb3JJbnN0YW5jZShpbnN0YW5jZUZpbHRlcikge1xuICAgICAgICB2YXIgYWxsU2VydmVycyA9IHJlcG8uZ2V0U2VydmVycygpO1xuXG4gICAgICAgIHZhciBtYXRjaGluZ1NlcnZlcnMgPSBhbGxTZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAoc2VydmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VNYXRjaChpbnN0YW5jZUZpbHRlciwgc2VydmVyLmluZm8pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hpbmdTZXJ2ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdE1ldGhvZHNPYmplY3QgPSB7fTtcblxuICAgICAgICBpZiAobWF0Y2hpbmdTZXJ2ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmVzdWx0TWV0aG9kc09iamVjdCA9IG1hdGNoaW5nU2VydmVyc1swXS5tZXRob2RzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gd2UgaGF2ZSBtb3JlIHRoYW4gb25lIHNlcnZlciBtYXRjaGluZywgam9pbiBhbGwgbWV0aG9kc1xuICAgICAgICAgICAgbWF0Y2hpbmdTZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKHNlcnZlcikge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHNlcnZlci5tZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2RLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IHNlcnZlci5tZXRob2RzW21ldGhvZEtleV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdE1ldGhvZHNPYmplY3RbbWV0aG9kLmlkXSA9IG1ldGhvZC5nZXRJbmZvRm9yVXNlcigpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgb2JqZWN0IHRvIGFycmF5XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhyZXN1bHRNZXRob2RzT2JqZWN0KVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE1ldGhvZHNPYmplY3Rba2V5XVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFsbCBnZXRTZXJ2ZXJzIHRoYXQgc3VwcG9ydCBhIGdpdmVuIG1ldGhvZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFNlcnZlcnMobWV0aG9kRmlsdGVyKSB7XG4gICAgICAgIHZhciBzZXJ2ZXJzID0gcmVwby5nZXRTZXJ2ZXJzKCk7XG5cbiAgICAgICAgLy8gTm8gbWV0aG9kIC0gZ2V0IGFsbCBnZXRTZXJ2ZXJzXG4gICAgICAgIGlmIChtZXRob2RGaWx0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlcnZlcnMubWFwKGZ1bmN0aW9uIChzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzZXJ2ZXI6IHNlcnZlciB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm9uLWV4aXN0aW5nIG1ldGhvZCAtIHJldHVybiBhbiBlbXB0eSBhcnJheVxuICAgICAgICB2YXIgbWV0aG9kcyA9IGdldE1ldGhvZHMobWV0aG9kRmlsdGVyKTtcbiAgICAgICAgaWYgKG1ldGhvZHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlcnZlcnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyZW50KSB7XG5cbiAgICAgICAgICAgIHZhciBtZXRob2RzID0gcmVwby5nZXRTZXJ2ZXJNZXRob2RzQnlJZChjdXJyZW50LmlkKTtcblxuICAgICAgICAgICAgdmFyIG1hdGNoaW5nTWV0aG9kcyA9IG1ldGhvZHMuZmlsdGVyKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kTWF0Y2gobWV0aG9kRmlsdGVyLCBtZXRob2QuaW5mbyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG1hdGNoaW5nTWV0aG9kcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcHJldi5wdXNoKHsgc2VydmVyOiBjdXJyZW50LCBtZXRob2RzOiBtYXRjaGluZ01ldGhvZHMgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBzZXJ2ZXItbWV0aG9kcyBwYWlycyBmb3IgYWxsIHNlcnZlcnMgdGhhdCBtYXRjaCB0aGUgdGFyZ2V0IGFuZCBoYXZlIGF0IGxlYXNlIG9uZSBtZXRob2QgbWF0aGluZyB0aGUgbWV0aG9kIGZpbHRlclxuICAgICAqIEBwYXJhbSBtZXRob2RGaWx0ZXJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0U2VydmVyTWV0aG9kc0J5RmlsdGVyQW5kVGFyZ2V0KG1ldGhvZEZpbHRlciwgdGFyZ2V0KSB7XG4gICAgICAgIC8vIGdldCBhbGwgc2VydmVycyB0aGF0IGhhdmUgbWV0aG9kKHMpIG1hdGNoaW5nIHRoZSBmaWx0ZXJcbiAgICAgICAgdmFyIHNlcnZlcnNNZXRob2RNYXAgPSBnZXRTZXJ2ZXJzKG1ldGhvZEZpbHRlcik7XG4gICAgICAgIC8vIGZpbHRlciB0aGUgc2VydmVyLW1ldGhvZCBtYXAgYnkgdGFyZ2V0XG4gICAgICAgIHJldHVybiBmaWx0ZXJCeVRhcmdldCh0YXJnZXQsIHNlcnZlcnNNZXRob2RNYXApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYW4gQUdNIG1ldGhvZFxuICAgICAqIEBwYXJhbSBtZXRob2RGaWx0ZXJcbiAgICAgKiBAcGFyYW0gYXJndW1lbnRPYmpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAgICogQHBhcmFtIGFkZGl0aW9uYWxPcHRpb25zXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NcbiAgICAgKiBAcGFyYW0gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKiovXG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZEZpbHRlciwgYXJndW1lbnRPYmosIHRhcmdldCwgYWRkaXRpb25hbE9wdGlvbnMsIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1Y2Nlc3NQcm94eSwgZXJyb3JQcm94eTtcblxuICAgICAgICAgICAgc3VjY2Vzc1Byb3h5ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAvLyB2YXIgcGFyc2VkID0gSlNPTi5wYXJzZShhcmdzKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVycm9yUHJveHkgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgIC8vIHZhciBwYXJzZWQgPSBKU09OLnBhcnNlKGFyZ3MpO1xuICAgICAgICAgICAgICAgIHJlamVjdChhcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBBZGQgZGVmYXVsdCBwYXJhbXNcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRPYmopIHtcbiAgICAgICAgICAgICAgICBhcmd1bWVudE9iaiA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSAnYmVzdCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiYgdGFyZ2V0ICE9PSAnYWxsJyAmJiB0YXJnZXQgIT09ICdiZXN0Jykge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7IG1lc3NhZ2U6ICdcIicgKyB0YXJnZXQgKyAnXCIgaXMgbm90IGEgdmFsaWQgdGFyZ2V0LiBWYWxpZCB0YXJnZXRzIGFyZSBcImFsbFwiIGFuZCBcImJlc3RcIi4nIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhZGRpdGlvbmFsT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxPcHRpb25zID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhZGRpdGlvbmFsT3B0aW9ucy5tZXRob2RfcmVzcG9uc2VfdGltZW91dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbE9wdGlvbnMubWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXQgPSBjb25maWd1cmF0aW9uLm1ldGhvZF9yZXNwb25zZV90aW1lb3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFkZGl0aW9uYWxPcHRpb25zLndhaXRfZm9yX21ldGhvZF90aW1lb3V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBhZGRpdGlvbmFsT3B0aW9ucy53YWl0X2Zvcl9tZXRob2RfdGltZW91dCA9IGNvbmZpZ3VyYXRpb24ud2FpdF9mb3JfbWV0aG9kX3RpbWVvdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBhcmd1bWVudHMgYXJlIGFuIG9iamVjdFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudE9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoeyBtZXNzYWdlOiAnVGhlIG1ldGhvZCBhcmd1bWVudHMgbXVzdCBiZSBhbiBvYmplY3QuJyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXRob2RGaWx0ZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kRmlsdGVyID0geyBuYW1lOiBtZXRob2RGaWx0ZXIgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNlcnZlcnNNZXRob2RNYXAgPSBnZXRTZXJ2ZXJNZXRob2RzQnlGaWx0ZXJBbmRUYXJnZXQobWV0aG9kRmlsdGVyLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBpZiAoc2VydmVyc01ldGhvZE1hcC5sZW5ndGggPT09IDApIHtcblxuICAgICAgICAgICAgICAgIGludm9rZVVuZXhpc3RpbmcobWV0aG9kRmlsdGVyLCBhcmd1bWVudE9iaiwgdGFyZ2V0LCBhZGRpdGlvbmFsT3B0aW9ucywgc3VjY2Vzc1Byb3h5LCBlcnJvclByb3h5KTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXJ2ZXJzTWV0aG9kTWFwLmxlbmd0aCA9PT0gMSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZlck1ldGhvZFBhaXIgPSBzZXJ2ZXJzTWV0aG9kTWFwWzBdO1xuICAgICAgICAgICAgICAgIGNsaWVudEludm9jYXRpb25zLmludm9rZShzZXJ2ZXJNZXRob2RQYWlyLm1ldGhvZHNbMF0sIGFyZ3VtZW50T2JqLCBzZXJ2ZXJNZXRob2RQYWlyLnNlcnZlciwgYWRkaXRpb25hbE9wdGlvbnMsIHN1Y2Nlc3NQcm94eSwgZXJyb3JQcm94eSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBpbnZva2VPbkFsbChzZXJ2ZXJzTWV0aG9kTWFwLCBhcmd1bWVudE9iaiwgYWRkaXRpb25hbE9wdGlvbnMsIHN1Y2Nlc3NQcm94eSwgZXJyb3JQcm94eSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2lmeShwcm9taXNlLCBzdWNjZXNzLCBlcnJvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG8gaW52b2tlIGEgbWV0aG9kIHdoaWNoIGRvZXMgbm90IGV4aXN0XG4gICAgICogQHBhcmFtIG1ldGhvZEZpbHRlclxuICAgICAqIEBwYXJhbSBhcmd1bWVudE9ialxuICAgICAqIEBwYXJhbSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gYWRkaXRpb25hbE9wdGlvbnNcbiAgICAgKiBAcGFyYW0gc3VjY2Vzc1xuICAgICAqIEBwYXJhbSBlcnJvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGludm9rZVVuZXhpc3RpbmcobWV0aG9kRmlsdGVyLCBhcmd1bWVudE9iaiwgdGFyZ2V0LCBhZGRpdGlvbmFsT3B0aW9ucywgc3VjY2VzcywgZXJyb3IpIHtcblxuICAgICAgICBpZiAoYWRkaXRpb25hbE9wdGlvbnMud2FpdF9mb3JfbWV0aG9kX3RpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICAgIGNhbGxFcnJvcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IGFsbCBzZXJ2ZXJzIHRoYXQgaGF2ZSBtZXRob2QocykgbWF0Y2hpbmcgdGhlIGZpbHRlclxuICAgICAgICAgICAgICAgIHZhciBzZXJ2ZXJzTWV0aG9kTWFwID0gZ2V0U2VydmVyTWV0aG9kc0J5RmlsdGVyQW5kVGFyZ2V0KG1ldGhvZEZpbHRlciwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoc2VydmVyc01ldGhvZE1hcC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGludm9rZShtZXRob2RGaWx0ZXIsIGFyZ3VtZW50T2JqLCB0YXJnZXQsIGFkZGl0aW9uYWxPcHRpb25zLCBzdWNjZXNzLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbEVycm9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgYWRkaXRpb25hbE9wdGlvbnMud2FpdF9mb3JfbWV0aG9kX3RpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2FsbEVycm9yKCkge1xuICAgICAgICAgICAgZXJyb3Ioe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kRmlsdGVyLFxuICAgICAgICAgICAgICAgIGNhbGxlZF93aXRoOiBhcmd1bWVudE9iaixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnQ2FuIG5vdCBmaW5kIGEgbWV0aG9kIG1hdGNoaW5nIFwiJyArIEpTT04uc3RyaW5naWZ5KG1ldGhvZEZpbHRlcikgKyAnXCIgd2l0aCBzZXJ2ZXIgZmlsdGVyIFwiJyArIEpTT04uc3RyaW5naWZ5KHRhcmdldCkgKyAnXCInXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxzIGEgbWV0aG9kIGZvciBhbGwgc2VydmVycyBhbmQgdW5pZmllcyB0aGUgcmVzdWx0cyB0aGV5IHJldHVybiBpbnRvIG9uZTpcbiAgICAgKiBAcGFyYW0gc2VydmVyTWV0aG9kc01hcFxuICAgICAqIEBwYXJhbSBhcmd1bWVudE9ialxuICAgICAqIEBwYXJhbSBhZGRpdGlvbmFsT3B0aW9uc1xuICAgICAqIEBwYXJhbSBzdWNjZXNzXG4gICAgICogQHBhcmFtIGVycm9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW52b2tlT25BbGwoc2VydmVyTWV0aG9kc01hcCwgYXJndW1lbnRPYmosIGFkZGl0aW9uYWxPcHRpb25zLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAvLyBIZXJlIHdlIHdpbGwgc3RvcmUgdGhlIHJlc3VsdHMgdGhhdCB0aGUgZ2V0U2VydmVycyByZXR1cm5cbiAgICAgICAgdmFyIHN1Y2Nlc3NlcyA9IFtdO1xuICAgICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICAgIC8vIFRoZXNlIGFyZSB0aGUgY2FsbGJhY2tzXG4gICAgICAgIHZhciBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBzdWNjZXNzZXMucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHN1Y2Nlc3NlcywgZXJyb3JzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGVycm9yQ2FsbGJhY2sgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHN1Y2Nlc3NlcywgZXJyb3JzKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ2FsbCB0aGUgbWV0aG9kIGZvciBhbGwgdGFyZ2V0c1xuICAgICAgICBzZXJ2ZXJNZXRob2RzTWFwLmZvckVhY2goZnVuY3Rpb24gKHNlcnZlck1ldGhvZHNQYWlyKSB7XG4gICAgICAgICAgICBjbGllbnRJbnZvY2F0aW9ucy5pbnZva2Uoc2VydmVyTWV0aG9kc1BhaXIubWV0aG9kc1swXSxcbiAgICAgICAgICAgICAgICBhcmd1bWVudE9iaixcbiAgICAgICAgICAgICAgICBzZXJ2ZXJNZXRob2RzUGFpci5zZXJ2ZXIsXG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDYWxscyB0aGUgbWFpbiBzdWNjZXNzIGFuZCBlcnJvciBjYWxsYmFja3Mgd2l0aCB0aGUgYWdncmVnYXRlZCByZXN1bHRzXG4gICAgICAgIGZ1bmN0aW9uIHNlbmRSZXNwb25zZSgpIHtcbiAgICAgICAgICAgIC8vIHdhaXQgdGlsbCBldmVyeWJvZHkgaXMgZmluaXNoZWRcbiAgICAgICAgICAgIGlmIChzdWNjZXNzZXMubGVuZ3RoICsgZXJyb3JzLmxlbmd0aCA8IHNlcnZlck1ldGhvZHNNYXAubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgXCJzdWNjZXNzXCIgY2FsbGJhY2tcbiAgICAgICAgICAgIGlmIChzdWNjZXNzZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN1Y2Nlc3Nlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwgc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBvYmoubWV0aG9kID0gc3VjY2Vzcy5tZXRob2Q7XG4gICAgICAgICAgICAgICAgICAgIG9iai5jYWxsZWRfd2l0aCA9IHN1Y2Nlc3MuY2FsbGVkX3dpdGg7XG4gICAgICAgICAgICAgICAgICAgIG9iai5yZXR1cm5lZCA9IHN1Y2Nlc3MucmV0dXJuZWQ7XG4gICAgICAgICAgICAgICAgICAgIG9iai5hbGxfcmV0dXJuX3ZhbHVlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVkX2J5OiBzdWNjZXNzLmV4ZWN1dGVkX2J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQ6IHN1Y2Nlc3MucmV0dXJuZWRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5leGVjdXRlZF9ieSA9IHN1Y2Nlc3MuZXhlY3V0ZWRfYnk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICAgICAgfSwgeyBhbGxfcmV0dXJuX3ZhbHVlczogW10gfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBnZXQgZXJyb3JzIGZyb20gb25lIG9mIHRoZSBnZXRTZXJ2ZXJzIGFkZCB0aGVtIHRvIHRoZSBzdWNjZXNzIG9iamVjdCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQuXG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFsbF9lcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFsbF9lcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhlY3V0ZWRfYnkgOiBvYmouZXhlY3V0ZWRfYnksIC8vIHdlIGRvbid0IGdldCBleGVjdXRlZF9ieSBvYmplY3QgZnJvbSB0aGUgZXJyb3IgY2xpZW50SW52b2NhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBvYmoubWV0aG9kLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogb2JqLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdWNjZXNzKHJlc3VsdCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkgeyAvLyBFeGVjdXRlIHRoZSBcImVycm9yXCIgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBlcnJvcihlcnJvcnMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXRob2QgPSBlcnJvci5tZXRob2Q7XG4gICAgICAgICAgICAgICAgICAgIG9iai5jYWxsZWRfd2l0aCA9IGVycm9yLmNhbGxlZF93aXRoO1xuICAgICAgICAgICAgICAgICAgICBvYmoubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgIG9iai5hbGxfZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZWRfYnk6IGVycm9yLmV4ZWN1dGVkX2J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gb2JqLmV4ZWN1dGVkX2J5ID0gc3VjY2Vzcy5leGVjdXRlZF9ieTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICB9LCB7IGFsbF9lcnJvcnM6IFtdIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgYW4gYXJyYXkgb2Ygc2VydmVycyBhbmQgcmV0dXJucyB0aGUgb25lcyB3aGljaCBtYXRjaCB0aGUgdGFyZ2V0IGNyaXRlcmlhXG4gICAgICogQHBhcmFtIHRhcmdldFxuICAgICAqIEBwYXJhbSBzZXJ2ZXJNZXRob2RNYXBcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKiAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlckJ5VGFyZ2V0KHRhcmdldCwgc2VydmVyTWV0aG9kTWFwKSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIHNwZWNpZmllZCB0YXJnZXQgYXMgc3RyaW5nOlxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gc2VydmVyTWV0aG9kTWFwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdiZXN0Jykge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IHNlcnZlck1ldGhvZE1hcFswXSAhPT0gdW5kZWZpbmVkID8gW3NlcnZlck1ldGhvZE1hcFswXV0gOiBbXTsgIC8vIElmIHRoZSB1c2VyIHNwZWNpZmllZCB0aGUgdGFyZ2V0IGFzIHNlcnZlciBmaWx0ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gW3RhcmdldF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXRyaWV2ZSBhbGwgZ2V0U2VydmVycyB0aGF0IG1hdGNoIHRoZSBmaWx0ZXJzXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVzLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgbWF0Y2hlcyBmb3IgZWFjaCBmaWx0ZXJcbiAgICAgICAgICAgICAgICB2YXIgbXlNYXRjaGVzID0gc2VydmVyTWV0aG9kTWFwLmZpbHRlcihmdW5jdGlvbiAoc2VydmVyTWV0aG9kUGFpcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VNYXRjaChmaWx0ZXIsIHNlcnZlck1ldGhvZFBhaXIuc2VydmVyLmluZm8pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzLmNvbmNhdChteU1hdGNoZXMpO1xuICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWF0Y2hlcyBhIHNlcnZlciBkZWZpbml0aW9uIGFnYWluc3QgYSBzZXJ2ZXIgZmlsdGVyXG4gICAgICogQHBhcmFtIGluc3RhbmNlRmlsdGVyXG4gICAgICogQHBhcmFtIGluc3RhbmNlRGVmaW5pdGlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc3RhbmNlTWF0Y2goaW5zdGFuY2VGaWx0ZXIsIGluc3RhbmNlRGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gY29udGFpbnNQcm9wcyhpbnN0YW5jZUZpbHRlciwgaW5zdGFuY2VEZWZpbml0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIGEgbWV0aG9kIGRlZmluaXRpb24gYWdhaW5zdCBhIG1ldGhvZCBmaWx0ZXJcbiAgICAgKiBAcGFyYW0gbWV0aG9kRmlsdGVyXG4gICAgICogQHBhcmFtIG1ldGhvZERlZmluaXRpb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXRob2RNYXRjaChtZXRob2RGaWx0ZXIsIG1ldGhvZERlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zUHJvcHMobWV0aG9kRmlsdGVyLCBtZXRob2REZWZpbml0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYWxsIHByb3BlcnRpZXMgb2YgZmlsdGVyIG1hdGNoIHByb3BlcnRpZXMgaW4gb2JqZWN0XG4gICAgICogQHBhcmFtIGZpbHRlclxuICAgICAqIEBwYXJhbSBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb250YWluc1Byb3BzKGZpbHRlciwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWx0ZXIpLnJlZHVjZShmdW5jdGlvbiAobWF0Y2gsIHByb3ApIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSB1bmRlZmluZWQgcHJvcGVydGllc1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXJbcHJvcF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmaWx0ZXJbcHJvcF0uY29uc3RydWN0b3IgPT09IFJlZ0V4cCkge1xuICAgICAgICAgICAgICAgIGlmICghZmlsdGVyW3Byb3BdLnRlc3Qob2JqZWN0W3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKFN0cmluZyhmaWx0ZXJbcHJvcF0pLnRvTG93ZXJDYXNlKCkgIT09IFN0cmluZyhvYmplY3RbcHJvcF0pLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdG8gYW4gQUdNIHN0cmVhbWluZyBtZXRob2RcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NDYWxsYmFja1xuICAgICAqIEBwYXJhbSBlcnJvckNhbGxiYWNrXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlKG5hbWUsIG9wdGlvbnMsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAvLyBvcHRpb25zIGNhbiBoYXZlIGFyZ3VtZW50czp7fSwgdGFyZ2V0OiAnYmVzdCcvJ2FsbCcve3NlcnZlcl9pbnN0YW5jZX0sIHdhaXRUaW1lb3V0TXM6MzAwMFxuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGxQcm90b2NvbFN1YnNjcmliZSh0YXJnZXRTZXJ2ZXJzLCBzdHJlYW0sIG9wdGlvbnMsIHN1Y2Nlc3NQcm94eSwgZXJyb3JQcm94eSkge1xuICAgICAgICAgICAgaWYgKGdsb2JhbC5jb25zb2xlICE9PSB1bmRlZmluZWQgJiYgY29uZmlndXJhdGlvbi5kZWJ1ZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCc+Pj4gU3Vic2NyaWJpbmcgdG8gXCInICsgbmFtZSArICdcIiBvbiAnICsgdGFyZ2V0U2VydmVycy5sZW5ndGggKyAnIHNlcnZlcnMnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJvdG9jb2wuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgIHN0cmVhbSxcbiAgICAgICAgICAgICAgICBvcHRpb25zLmFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICB0YXJnZXRTZXJ2ZXJzLFxuICAgICAgICAgICAgICAgIHsgbWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXQ6IG9wdGlvbnMud2FpdFRpbWVvdXRNcyB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3NQcm94eSxcbiAgICAgICAgICAgICAgICBlcnJvclByb3h5XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgIHZhciBzdWNjZXNzUHJveHkgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGVycm9yUHJveHkgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgIHJlamVjdChhcmdzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gb3B0aW9ucy50YXJnZXQ7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSAnYmVzdCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiYgdGFyZ2V0ICE9PSAnYWxsJyAmJiB0YXJnZXQgIT09ICdiZXN0Jykge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7IG1lc3NhZ2U6ICdcIicgKyB0YXJnZXQgKyAnXCIgaXMgbm90IGEgdmFsaWQgdGFyZ2V0LiBWYWxpZCB0YXJnZXRzIGFyZSBcImFsbFwiLCBcImJlc3RcIiwgb3IgYW4gaW5zdGFuY2UuJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53YWl0VGltZW91dE1zICE9PSAnbnVtYmVyJyB8fCBvcHRpb25zLndhaXRUaW1lb3V0TXMgIT09IG9wdGlvbnMud2FpdFRpbWVvdXRNcyAvKiBOYU4gKi8pIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLndhaXRUaW1lb3V0TXMgPSBjb25maWd1cmF0aW9uLndhaXRfZm9yX21ldGhvZF90aW1lb3V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkb24ndCBjaGVjayBpZiB0aGUgbWV0aG9kIGlzIHN0cmVhbWluZyBvciBub3QsIHN1YnNjcmliaW5nIHRvIG5vbi1zdHJlYW1pbmcgbWV0aG9kIGhhcyB0byBpbnZva2UgaXRcbiAgICAgICAgICAgIHZhciBjdXJyZW50U2VydmVycyA9IGdldFNlcnZlck1ldGhvZHNCeUZpbHRlckFuZFRhcmdldCh7IG5hbWU6IG5hbWUgfSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRTZXJ2ZXJzLmxlbmd0aCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJy4uLm5vIHNlcnZlcnMnKS8vdGVzdFxuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXRlU2VydmVycyA9IGdldFNlcnZlck1ldGhvZHNCeUZpbHRlckFuZFRhcmdldCh7IG5hbWU6IG5hbWUgfSwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogY2hhbmdlIHRvIHVzZSB0aGUgbWV0aG9kQWRkZWQgaGFuZGxlclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBzZXQgYWdtLm1ldGhvZEFkZGVkIGFuZCBpZih3YWl0VGltZW91dD49MCl7c2V0VGltZW91dH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyZWFtSW5mbyA9IGxhdGVTZXJ2ZXJzLmxlbmd0aCA+IDAgPyBsYXRlU2VydmVyc1swXS5tZXRob2RzWzBdIDogeyBuYW1lOiBuYW1lIH07XG4gICAgICAgICAgICAgICAgICAgIGNhbGxQcm90b2NvbFN1YnNjcmliZShsYXRlU2VydmVycywgc3RyZWFtSW5mbywgb3B0aW9ucywgc3VjY2Vzc1Byb3h5LCBlcnJvclByb3h5KVxuXG4gICAgICAgICAgICAgICAgfSwgb3B0aW9ucy53YWl0VGltZW91dE1zKVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxQcm90b2NvbFN1YnNjcmliZShjdXJyZW50U2VydmVycywgY3VycmVudFNlcnZlcnNbMF0ubWV0aG9kc1swXSwgb3B0aW9ucywgc3VjY2Vzc1Byb3h5LCBlcnJvclByb3h5KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5KHByb21pc2UsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgICAgIGludm9rZTogaW52b2tlLFxuICAgICAgICBzZXJ2ZXJzOiBmdW5jdGlvbiAobWV0aG9kRmlsdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0U2VydmVycyhtZXRob2RGaWx0ZXIpLm1hcChmdW5jdGlvbiAoc2VydmVyTWV0aG9kTWFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlck1ldGhvZE1hcC5zZXJ2ZXIuZ2V0SW5mb0ZvclVzZXIoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6IGZ1bmN0aW9uIChtZXRob2RGaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRNZXRob2RzKG1ldGhvZEZpbHRlcikubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0uZ2V0SW5mb0ZvclVzZXIoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kc0Zvckluc3RhbmNlOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRNZXRob2RzRm9ySW5zdGFuY2UoaW5zdGFuY2UpLm1hcChmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtLmdldEluZm9Gb3JVc2VyKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZEFkZGVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcG8ub25NZXRob2RBZGRlZChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobWV0aG9kLmdldEluZm9Gb3JVc2VyKCkpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBtZXRob2RSZW1vdmVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcG8ub25NZXRob2RSZW1vdmVkKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtZXRob2QuZ2V0SW5mb0ZvclVzZXIoKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZlckFkZGVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcG8ub25TZXJ2ZXJBZGRlZChmdW5jdGlvbiAoc2VydmVyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soc2VydmVyLmdldEluZm9Gb3JVc2VyKCkpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBzZXJ2ZXJSZW1vdmVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcG8ub25TZXJ2ZXJSZW1vdmVkKGZ1bmN0aW9uIChzZXJ2ZXIsIHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHNlcnZlci5nZXRJbmZvRm9yVXNlcigpLCByZWFzb24pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBzZXJ2ZXJNZXRob2RBZGRlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXBvLm9uU2VydmVyTWV0aG9kQWRkZWQoZnVuY3Rpb24gKHNlcnZlciwgbWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soeyBzZXJ2ZXI6IHNlcnZlci5nZXRJbmZvRm9yVXNlcigpLCBtZXRob2Q6IG1ldGhvZC5nZXRJbmZvRm9yVXNlcigpIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBzZXJ2ZXJNZXRob2RSZW1vdmVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcG8ub25TZXJ2ZXJNZXRob2RSZW1vdmVkKGZ1bmN0aW9uIChzZXJ2ZXIsIG1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHsgc2VydmVyOiBzZXJ2ZXIuZ2V0SW5mb0ZvclVzZXIoKSwgbWV0aG9kOiBtZXRob2QuZ2V0SW5mb0ZvclVzZXIoKSB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH07XG59O1xuIiwiLypcbiBUaGUgQUdNIGluc3RhbmNlIGNvbGxlY3RzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtYWNoaW5lIHdlIGFyZSBpbixcbiBhbmQgaW50ZXJhY3RzIHdpdGggdGhlIC5ORVQgZ2F0ZXdheSBpbiBvdGhlciB3YXlzLFxuIHRvIGRlbGl2ZXIgZnVsbCBBR00gY29tcGF0aWJpbGl0eSB0byBBR00uSlMuXG5cbiBUbyBkbyBzbywgaXQgcmVsaWVzIG9uIHRoZSBkZWZhdWx0IEFHTSBjbGllbnQuXG4gKi9cblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50IHx8IGdsb2JhbC5wcm9jZXNzO1xudmFyIHJhbmRvbSA9IHJlcXVpcmUoJy4vaGVscGVycy9yYW5kb20nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlclN1Ym1pdHRlZFByb3BlcnRpZXMpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaW5zdGFuY2UgPSB7fTtcbiAgICAvLyBHZW5lcmF0ZSBkZWZhdWx0IGluc3RhbmNlIHByb3BlcnRpZXNcbiAgICBpbnN0YW5jZS5BcHBsaWNhdGlvbk5hbWUgPSBkb2N1bWVudC50aXRsZSArIHJhbmRvbSgpO1xuICAgIGluc3RhbmNlLlByb2Nlc3NJZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMDAwKTsgLy8gUElEIHNob3VsZCBiZSBpbnRlZ2VyIGZvciBwcm90b2NvbFZlcnNpb24gMVxuICAgIGluc3RhbmNlLlByb2Nlc3NTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIC8vIEFwcGx5IHVzZXItc3VibWl0dGVkIGluc3RhbmNlIHByb3BlcnRpZXNcbiAgICBpZiAodHlwZW9mIHVzZXJTdWJtaXR0ZWRQcm9wZXJ0aWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAodXNlclN1Ym1pdHRlZFByb3BlcnRpZXMuYXBwbGljYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5zdGFuY2UuQXBwbGljYXRpb25OYW1lID0gdXNlclN1Ym1pdHRlZFByb3BlcnRpZXMuYXBwbGljYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuTWFjaGluZU5hbWUgPSB1c2VyU3VibWl0dGVkUHJvcGVydGllcy5tYWNoaW5lO1xuICAgICAgICBpbnN0YW5jZS5Vc2VyTmFtZSA9IHVzZXJTdWJtaXR0ZWRQcm9wZXJ0aWVzLnVzZXI7XG4gICAgICAgIGluc3RhbmNlLkVudmlyb25tZW50ID0gdXNlclN1Ym1pdHRlZFByb3BlcnRpZXMuZW52aXJvbm1lbnQ7XG4gICAgICAgIGluc3RhbmNlLlJlZ2lvbiA9IHVzZXJTdWJtaXR0ZWRQcm9wZXJ0aWVzLnJlZ2lvbjtcbiAgICAgICAgaW5zdGFuY2UuU3RhdGUgPSAxO1xuICAgIH1cbiAgICB2YXIgaWRlbnRpdHlVcGRhdGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVJZGVudGl0eShuZXdJbnN0YW5jZSkge1xuICAgICAgICBpZiAoaWRlbnRpdHlVcGRhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3RhbmNlLk1hY2hpbmVOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLk1hY2hpbmVOYW1lID0gbmV3SW5zdGFuY2UuTWFjaGluZU5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3RhbmNlLlVzZXJOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLlVzZXJOYW1lID0gbmV3SW5zdGFuY2UuVXNlck5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3RhbmNlLkVudmlyb25tZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLkVudmlyb25tZW50ID0gbmV3SW5zdGFuY2UuRW52aXJvbm1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3RhbmNlLlJlZ2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5SZWdpb24gPSBuZXdJbnN0YW5jZS5SZWdpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3RhbmNlLlN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLlN0YXRlID0gbmV3SW5zdGFuY2UuU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdsb2JhbC5jb25zb2xlICE9PSB1bmRlZmluZWQgJiYgZ2xvYmFsLmNvbnNvbGUudGFibGUgIT09IHVuZGVmaW5lZCAmJiBhZ20uZGVidWcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBpbnN0YW5jZSB3aXRoIGluZm8gZnJvbSBHYXRld2F5LicpO1xuICAgICAgICB9XG4gICAgICAgIGlkZW50aXR5VXBkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgbWV0aG9kIGZvciBhY2Nlc3NpbmcgYSBwcm9wZXJ0eVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUdldHRlcihwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2VbcHJvcGVydHldO1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgYWxsIGluc3RhbmNlIHByb3BlcnRpZXNcbiAgICBmdW5jdGlvbiBpbmZvKCkge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgX3VwZGF0ZUlkZW50aXR5OiB1cGRhdGVJZGVudGl0eSxcbiAgICAgICAgaW5mbzogaW5mbyxcbiAgICAgICAgZ2V0IGFwcGxpY2F0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUdldHRlcignQXBwbGljYXRpb25OYW1lJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBwaWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlR2V0dGVyKCdQcm9jZXNzSWQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHVzZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlR2V0dGVyKCdVc2VyTmFtZScpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgbWFjaGluZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVHZXR0ZXIoJ01hY2hpbmVOYW1lJyk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbiIsInZhciBQcm9taXNlID0gcmVxdWlyZSgnZXM2LXByb21pc2UnKS5Qcm9taXNlO1xudmFyIHByb21pc2lmeSA9IHJlcXVpcmUoJy4vaGVscGVycy9wcm9taXNpZnknKTtcbnZhciBwanNvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gZGF0ZSBwYXJzaW5nXG4gICAgdmFyIGZhY2FkZSA9IGdsb2JhbC5odG1sQ29udGFpbmVyLmpzQWdtRmFjYWRlO1xuICAgIHZhciBkYXRlVGltZUlkZW50aWZpZXIgPSBmYWNhZGUuanNvblZhbHVlRGF0ZVByZWZpeDtcbiAgICB2YXIgbGVuT2ZJZGVudGlmaWVyID0gZGF0ZVRpbWVJZGVudGlmaWVyLmxlbmd0aDtcblxuICAgIGZ1bmN0aW9uIHN0cmluZ1RvT2JqZWN0KHBhcmFtLCBzdHJpbmdQcm9wTmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICAgICAgb2JqW3N0cmluZ1Byb3BOYW1lXSA9IHBhcmFtO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZGF0ZXMgcHJvcGVybHlcbiAgICBmdW5jdGlvbiBhZ21QYXJzZShzdHIpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBwcmUtc2VlZCAtIHRoaXMgc2hvdWxkIGJlIGEgYml0IGZhc3RlciB0aGFuIGluZGV4T2ZcbiAgICAgICAgICAgIGlmICh2WzBdICE9PSBkYXRlVGltZUlkZW50aWZpZXJbMF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHYuaW5kZXhPZihkYXRlVGltZUlkZW50aWZpZXIpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB1bml4VGltZXN0YW1wTXMgPSB2LnN1YnN0cihsZW5PZklkZW50aWZpZXIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHBhcnNlRmxvYXQodW5peFRpbWVzdGFtcE1zKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgdGFyZ2V0IGFyZ3VtZW50IHRvIG9iamVjdCByZWFkeSB0byBiZSBwYXNzZWQgdG8gQWdtIGZhY2FkZVxuICAgICAqIEBwYXJhbSB0YXJnZXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXJnZXRBcmdUb09iamVjdCh0YXJnZXQpIHtcblxuICAgICAgICB0YXJnZXQgPSB0YXJnZXQgfHwgJ2Jlc3QnO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHRhcmdldCAhPT0gJ2FsbCcgJiYgdGFyZ2V0ICE9PSAnYmVzdCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHRhcmdldCArICdcIiBpcyBub3QgYSB2YWxpZCB0YXJnZXQuIFZhbGlkIHRhcmdldHMgYXJlIFwiYWxsXCIgYW5kIFwiYmVzdFwiLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgdGFyZ2V0OiB0YXJnZXQgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gW3RhcmdldF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udmVydEluc3RhbmNlVG9SZWdleChlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4geyBzZXJ2ZXJGaWx0ZXI6IHRhcmdldCB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udmVydEluc3RhbmNlVG9SZWdleChpbnN0YW5jZSkge1xuICAgICAgICB2YXIgaW5zdGFuY2VDb252ZXJ0ZWQgPSB7fTtcblxuICAgICAgICBPYmplY3Qua2V5cyhpbnN0YW5jZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gaW5zdGFuY2Vba2V5XTtcbiAgICAgICAgICAgIGluc3RhbmNlQ29udmVydGVkW2tleV0gPSBwcm9wVmFsdWU7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vIGRvIGV4YWN0IG1hdGNoaW5nIGlmIHVzZXIgcGFzc2VkIGEgc3RyaW5nXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VDb252ZXJ0ZWRba2V5XSA9ICdeJyArIGluc3RhbmNlW2tleV0gKyAnJCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluc3RhbmNlW2tleV0uY29uc3RydWN0b3IgPT09IFJlZ0V4cCkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlQ29udmVydGVkW2tleV0gPSBpbnN0YW5jZVtrZXldLnNvdXJjZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VDb252ZXJ0ZWRba2V5XSA9IGluc3RhbmNlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2VDb252ZXJ0ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7XG5cbiAgICAgICAgICAgIHZlcnNpb246IHBqc29uLnZlcnNpb24sXG5cbiAgICAgICAgICAgIC8vIFJlZ2lzdGVycyBhIEphdmFTY3JpcHQgZnVuY3Rpb24gYXMgYW4gQUdNIG1ldGhvZCwgdGh1cyBtYWtpbmcgaXQgYXZhaWxhYmxlIG90aGVyIEFHTSBpbnN0YW5jZXMgb24gdGhlIHNhbWUgdHJhbnNwb3J0LlxuICAgICAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIChtZXRob2RJbmZvLCBjYWxsYmFjaykge1xuXG4gICAgICAgICAgICAgICAgdmFyIHB2ID0gdGhpcy5hZ21GYWNhZGUucHJvdG9jb2xWZXJzaW9uO1xuXG4gICAgICAgICAgICAgICAgaWYgKHB2ICYmIHB2ID49IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIG5ld2VyIEhDIHVzZSB0aGUgdmVyc2lvbiB3aGVyZSB3ZSBkb24ndCBwYXNzIGFyZ3VtZW50cyBhcyBKU09OIChiZWNhdXNlIG9mIGRpZmZlcmVudCBpc3N1ZXMpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLnJlZ2lzdGVyKEpTT04uc3RyaW5naWZ5KHN0cmluZ1RvT2JqZWN0KG1ldGhvZEluZm8sICduYW1lJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnVlKTsgLy8gcmV0dXJuIGFzIG9iamVjdHNcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFnbUZhY2FkZS5yZWdpc3RlcihKU09OLnN0cmluZ2lmeShzdHJpbmdUb09iamVjdChtZXRob2RJbmZvLCAnbmFtZScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soSlNPTi5wYXJzZShhcmcpLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVnaXN0ZXJBc3luYzogZnVuY3Rpb24gKG1ldGhvZEluZm8sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFnbUZhY2FkZS5yZWdpc3RlckFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IHN1cHBvcnRlZCBpbiB0aGF0IHZlcnNpb24gb2YgSHRtbENvbnRhaW5lcicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLnJlZ2lzdGVyQXN5bmMoc3RyaW5nVG9PYmplY3QobWV0aG9kSW5mbywgJ25hbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGFyZ3MsIGluc3RhbmNlLCB0cmFja2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBleGVjdXRlIHRoZSB1c2VyIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdWNjZXNzQXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja2VyLnN1Y2Nlc3Moc3VjY2Vzc0FyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrZXIuZXJyb3IoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdW5yZWdpc3RlcjogZnVuY3Rpb24gKG1ldGhvZEZpbHRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLnVucmVnaXN0ZXIoSlNPTi5zdHJpbmdpZnkoc3RyaW5nVG9PYmplY3QobWV0aG9kRmlsdGVyLCAnbmFtZScpKSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBJbnZva2VzIGFuIEFHTSBtZXRob2QgYXN5bmNocm9ub3VzbHkuXG4gICAgICAgICAgICBpbnZva2U6IGZ1bmN0aW9uIChtZXRob2RGaWx0ZXIsIGFyZ3MsIHRhcmdldCwgb3B0aW9ucywgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzID0ge307XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3MgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoeyBtZXNzYWdlOiAnVGhlIG1ldGhvZCBhcmd1bWVudHMgbXVzdCBiZSBhbiBvYmplY3QuJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldEFyZ1RvT2JqZWN0KHRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWdtRmFjYWRlLmludm9rZTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludm9rZSB2ZXIyIC0gZG8gbm90IHN0cmluZ2lmeSBhcmd1bWVudHMgYW5kIHJlc3VsdCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLmludm9rZTIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoc3RyaW5nVG9PYmplY3QobWV0aG9kRmlsdGVyLCAnbmFtZScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRhcmdldCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhcmdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VjY2Vzc1Byb3h5LCBlcnJvclByb3h5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzUHJveHkgPSBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBKU09OLnBhcnNlKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocGFyc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvclByb3h5ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gSlNPTi5wYXJzZShhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocGFyc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFnbUZhY2FkZS5pbnZva2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoc3RyaW5nVG9PYmplY3QobWV0aG9kRmlsdGVyLCAnbmFtZScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShhcmdzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh0YXJnZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NQcm94eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvclByb3h5XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2lmeShwcm9taXNlLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy8gUmVnaXN0ZXJzIGEgaGFuZGxlciB3aGljaCBub3RpZmllcyB5b3Ugd2hlbiBhIG5ldyBBR00gbWV0aG9kIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgICAgIG1ldGhvZEFkZGVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFnbUZhY2FkZS5tZXRob2RBZGRlZChjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBSZWdpc3RlcnMgYSBoYW5kbGVyIHdoaWNoIG5vdGlmaWVzIHlvdSB3aGVuIGFuIEFHTSBtZXRob2Qgc3RvcHMgYmVpbmcgYXZhaWxhYmxlLlxuICAgICAgICAgICAgbWV0aG9kUmVtb3ZlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUubWV0aG9kUmVtb3ZlZChjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZXJ2ZXJBZGRlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUuc2VydmVyQWRkZWQoY2FsbGJhY2spO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VydmVyUmVtb3ZlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUuc2VydmVyUmVtb3ZlZChjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZXJ2ZXJNZXRob2RBZGRlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUuc2VydmVyTWV0aG9kQWRkZWQoY2FsbGJhY2spO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VydmVyTWV0aG9kUmVtb3ZlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUuc2VydmVyTWV0aG9kUmVtb3ZlZChjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBSZXRyaWV2ZXMgYSBsaXN0IG9mIEFHTSBzZXJ2ZXJzIChpbnN0YW5jZXMpIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgbWV0aG9kLlxuICAgICAgICAgICAgc2VydmVyczogZnVuY3Rpb24gKG1ldGhvZEZpbHRlcikge1xuICAgICAgICAgICAgICAgIHZhciBqc29uUmVzdWx0ID0gdGhpcy5hZ21GYWNhZGUuc2VydmVycyhKU09OLnN0cmluZ2lmeShtZXRob2RGaWx0ZXIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWdtUGFyc2UoanNvblJlc3VsdCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBSZXRyaWV2ZXMgYSBsaXN0IG9mIG1ldGhvZHMgdGhhdCBtYXRjaGVzIGEgZ2l2ZW4gZmlsdGVyLiBZb3UgY2FuIHVzZSB0aGlzIHRvIGNoZWNrIGlmIGEgZ2l2ZW4gbWV0aG9kIGV4aXN0cy5cbiAgICAgICAgICAgIG1ldGhvZHM6IGZ1bmN0aW9uIChtZXRob2RGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIganNvblJlc3VsdCA9IHRoaXMuYWdtRmFjYWRlLm1ldGhvZHMoSlNPTi5zdHJpbmdpZnkobWV0aG9kRmlsdGVyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFnbVBhcnNlKGpzb25SZXN1bHQpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbWV0aG9kc0Zvckluc3RhbmNlOiBmdW5jdGlvbiAoaW5zdGFuY2VGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIganNvblJlc3VsdCA9IHRoaXMuYWdtRmFjYWRlLm1ldGhvZHNGb3JJbnN0YW5jZShKU09OLnN0cmluZ2lmeShpbnN0YW5jZUZpbHRlcikpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhZ21QYXJzZShqc29uUmVzdWx0KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIHN0cmVhbWluZyBzdXBwb3J0XG4gICAgICAgICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuYXJncyA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYXJndW1lbnRzIHx8IHt9KTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy50YXJnZXQgPSB0YXJnZXRBcmdUb09iamVjdChvcHRpb25zLnRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUuc3Vic2NyaWJlMihuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyksXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdHJlYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNpZnkocHJvbWlzZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGNyZWF0ZVN0cmVhbTogZnVuY3Rpb24gKHN0cmVhbURlZiwgY2FsbGJhY2tzLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHJlYW1EZWYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1EZWYgPSB7IG5hbWU6IHN0cmVhbURlZiB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUuY3JlYXRlU3RyZWFtMihcbiAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHN0cmVhbURlZiksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gd3JhcCB0byB0cmFuc2Zvcm0gcGFyYW1zXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3Vic2NyaXB0aW9uUmVxdWVzdEhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gd3JhcCB0byB0cmFuc2Zvcm0gcGFyYW1zXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3Vic2NyaXB0aW9uQWRkZWRIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyAtIHdyYXAgdG8gdHJhbnNmb3JtIHBhcmFtc1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnN1YnNjcmlwdGlvblJlbW92ZWRIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2VzcyBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdHJlYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNpZnkocHJvbWlzZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBhZGQgbWV0cmljc1xuICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZ3VyYXRpb24ubWV0cmljcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25maWd1cmF0aW9uLm1ldHJpY3MubWV0cmljc0lkZW50aXR5ID0gY29uZmlndXJhdGlvbi5tZXRyaWNzLmlkZW50aXR5O1xuXG5cbiAgICAgICAgICAgIC8vIHF1aWNrIGFuZCBkaXJ0eSAtIHdlIG5lZWQgdG8gc3RyaW5naWZ5IHRoZSBjb25maWd1cmF0aW9uIHNvIHdlIG5lZWQgdG8gcmVwbGFjZSB0aGUgbWV0cmljcyBvYmplY3QgKHdoaWNoIGhhcyBjaXJjdWxhciByZWZlcmVuY2VzKVxuICAgICAgICAgICAgLy8gd2l0aCBhbiBvYmplY3QgdGhhdCBob2xkcyBvbmx5IHRoZSBwcm9wZXJ0aWVzIG5lZWRlZFxuICAgICAgICAgICAgdmFyIG1ldHJpY3NDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgbWV0cmljc0lkZW50aXR5OiBjb25maWd1cmF0aW9uLm1ldHJpY3MubWV0cmljc0lkZW50aXR5LFxuICAgICAgICAgICAgICAgIHBhdGg6IGNvbmZpZ3VyYXRpb24ubWV0cmljcy5wYXRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5tZXRyaWNzID0gbWV0cmljc0NvbmZpZztcbiAgICAgICAgfVxuICAgICAgICAvLyByZW1vdmUgdGhlIGxvZ2dlciAtIHdlIGRvbid0IG5lZWQgaXQgaW4gSEMgYW5kIGhhcyBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICAgIGRlbGV0ZSBjb25maWd1cmF0aW9uLmxvZ2dlcjtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IEFHTSBmYcOnYWRlIGZvciB0aGlzIGluc3RhbmNlXG4gICAgICAgIHJlc3VsdC5pbnN0YW5jZSA9IGZhY2FkZS5pbml0KEpTT04uc3RyaW5naWZ5KGNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgcmVzdWx0LmFnbUZhY2FkZSA9IGZhY2FkZTtcblxuICAgICAgICAvLyBkZXByZWNhdGVkIEFQSVxuICAgICAgICByZXN1bHQuY3JlYXRlX3N0cmVhbSA9IHJlc3VsdC5jcmVhdGVTdHJlYW07XG4gICAgICAgIHJlc3VsdC5tZXRob2RzX2Zvcl9pbnN0YW5jZSA9IHJlc3VsdC5tZXRob2RzRm9ySW5zdGFuY2U7XG4gICAgICAgIHJlc3VsdC5tZXRob2RfYWRkZWQgPSByZXN1bHQubWV0aG9kQWRkZWQ7XG4gICAgICAgIHJlc3VsdC5tZXRob2RfcmVtb3ZlZCA9IHJlc3VsdC5tZXRob2RSZW1vdmVkO1xuICAgICAgICByZXN1bHQuc2VydmVyX2FkZGVkID0gcmVzdWx0LnNlcnZlckFkZGVkO1xuICAgICAgICByZXN1bHQuc2VydmVyX3JlbW92ZWQgPSByZXN1bHQuc2VydmVyUmVtb3ZlZDtcbiAgICAgICAgcmVzdWx0LnNlcnZlcl9tZXRob2RfYWRkZWQgPSByZXN1bHQuc2VydmVyTWV0aG9kQWRkZWQ7XG4gICAgICAgIHJlc3VsdC5zZXJ2ZXJfbWV0aG9kX3JlbW92ZWQgPSByZXN1bHQuc2VydmVyTWV0aG9kUmVtb3ZlZDtcblxuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgfSk7XG59O1xuIiwiLypcbiAqIFJlcG9zaXRvcnkgaG9sZGluZyBzZXJ2ZXJzIGFuZCBtZXRob2RzIHZpc2libGUgYnkgdGhpcyBwZWVyIGluY2x1ZGluZyB0aG9zZSBjcmVhdGVkIGJ5IHRoZSBwZWVyIGl0c2VsZi5cbiAqL1xuXG52YXIgQ2FsbGJhY2tzID0gcmVxdWlyZSgnY2FsbGJhY2stcmVnaXN0cnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gZWFjaCBzZXJ2ZXIgaGFzIGZvcm1hdCB7aWQ6JycsIGluZm86e30sIG1ldGhvZHM6e319XG4gICAgLy8gd2hlcmUgbWV0aG9kcyBoYXMgZm9ybWF0IHtpZDonJywgaW5mbzp7fX1cbiAgICB2YXIgc2VydmVycyA9IHt9O1xuXG4gICAgLy8gb2JqZWN0IGtleWVkIGJ5IG1ldGhvZCBpZCAtIHZhbHVlIGlzIG51bWJlciBvZiBzZXJ2ZXJzIHRoYXQgb2ZmZXIgdGhhdCBtZXRob2RcbiAgICB2YXIgbWV0aG9kc0NvdW50ID0ge307XG5cbiAgICAvLyBzdG9yZSBmb3IgY2FsbGJhY2tzXG4gICAgdmFyIGNhbGxiYWNrcyA9IG5ldyBDYWxsYmFja3MoKTtcblxuICAgIC8vIGFkZCBhIG5ldyBzZXJ2ZXIgdG8gaW50ZXJuYWwgY29sbGVjdGlvblxuICAgIGZ1bmN0aW9uIGFkZFNlcnZlcihpbmZvLCBzZXJ2ZXJJZCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IHNlcnZlcnNbc2VydmVySWRdO1xuICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuaWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VydmVyRW50cnkgPSB7IGlkOiBzZXJ2ZXJJZCwgaW5mbzogaW5mbywgbWV0aG9kczoge30gfTtcbiAgICAgICAgc2VydmVyRW50cnkuZ2V0SW5mb0ZvclVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVXNlclNlcnZlckluZm8oc2VydmVyRW50cnkuaW5mbyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VydmVyc1tzZXJ2ZXJJZF0gPSBzZXJ2ZXJFbnRyeTtcbiAgICAgICAgY2FsbGJhY2tzLmV4ZWN1dGUoJ29uU2VydmVyQWRkZWQnLCBzZXJ2ZXJFbnRyeSk7XG4gICAgICAgIHJldHVybiBzZXJ2ZXJJZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVTZXJ2ZXJCeUlkKGlkLCByZWFzb24pIHtcbiAgICAgICAgdmFyIHNlcnZlciA9IHNlcnZlcnNbaWRdO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHNlcnZlci5tZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2RJZCkge1xuICAgICAgICAgICAgcmVtb3ZlU2VydmVyTWV0aG9kKGlkLCBtZXRob2RJZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlbGV0ZSBzZXJ2ZXJzW2lkXTtcbiAgICAgICAgY2FsbGJhY2tzLmV4ZWN1dGUoJ29uU2VydmVyUmVtb3ZlZCcsIHNlcnZlciwgcmVhc29uKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTZXJ2ZXJNZXRob2Qoc2VydmVySWQsIG1ldGhvZCkge1xuICAgICAgICB2YXIgc2VydmVyID0gc2VydmVyc1tzZXJ2ZXJJZF07XG4gICAgICAgIGlmICghc2VydmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlcnZlciBkb2VzIG5vdCBleGlzdHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtZXRob2RJZCA9IGNyZWF0ZU1ldGhvZElkKG1ldGhvZCk7XG5cbiAgICAgICAgLy8gc2VydmVyIGFscmVhZHkgaGFzIHRoYXQgbWV0aG9kXG4gICAgICAgIGlmIChzZXJ2ZXIubWV0aG9kc1ttZXRob2RJZF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtZXRob2RFbnRpdHkgPSB7IGlkOiBtZXRob2RJZCwgaW5mbzogbWV0aG9kIH07XG4gICAgICAgIG1ldGhvZEVudGl0eS5nZXRJbmZvRm9yVXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVVc2VyTWV0aG9kSW5mbyhtZXRob2RFbnRpdHkuaW5mbyk7XG4gICAgICAgIH07XG4gICAgICAgIHNlcnZlci5tZXRob2RzW21ldGhvZElkXSA9IG1ldGhvZEVudGl0eTtcblxuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgcmVmIGFuZCBub3RpZnkgbGlzdGVuZXJzXG4gICAgICAgIGlmICghbWV0aG9kc0NvdW50W21ldGhvZElkXSkge1xuICAgICAgICAgICAgbWV0aG9kc0NvdW50W21ldGhvZElkXSA9IDA7XG4gICAgICAgICAgICBjYWxsYmFja3MuZXhlY3V0ZSgnb25NZXRob2RBZGRlZCcsIG1ldGhvZEVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgbWV0aG9kc0NvdW50W21ldGhvZElkXSA9IG1ldGhvZHNDb3VudFttZXRob2RJZF0gKyAxO1xuICAgICAgICBjYWxsYmFja3MuZXhlY3V0ZSgnb25TZXJ2ZXJNZXRob2RBZGRlZCcsIHNlcnZlciwgbWV0aG9kRW50aXR5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVNZXRob2RJZChtZXRob2RJbmZvKSB7XG4gICAgICAgIC8vIFNldHRpbmcgcHJvcGVydGllcyB0byBkZWZhdWx0czpcbiAgICAgICAgdmFyIGFjY2VwdHMgPSBtZXRob2RJbmZvLmFjY2VwdHMgIT09IHVuZGVmaW5lZCA/IG1ldGhvZEluZm8uYWNjZXB0cyA6ICcnO1xuICAgICAgICB2YXIgcmV0dXJucyA9IG1ldGhvZEluZm8ucmV0dXJucyAhPT0gdW5kZWZpbmVkID8gbWV0aG9kSW5mby5yZXR1cm5zIDogJyc7XG4gICAgICAgIHZhciB2ZXJzaW9uID0gbWV0aG9kSW5mby52ZXJzaW9uICE9PSB1bmRlZmluZWQgPyBtZXRob2RJbmZvLnZlcnNpb24gOiAwO1xuICAgICAgICByZXR1cm4gKG1ldGhvZEluZm8ubmFtZSArIGFjY2VwdHMgKyByZXR1cm5zICsgdmVyc2lvbikudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVTZXJ2ZXJNZXRob2Qoc2VydmVySWQsIG1ldGhvZElkKSB7XG4gICAgICAgIHZhciBzZXJ2ZXIgPSBzZXJ2ZXJzW3NlcnZlcklkXTtcbiAgICAgICAgaWYgKCFzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2VydmVyIGRvZXMgbm90IGV4aXN0cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1ldGhvZCA9IHNlcnZlci5tZXRob2RzW21ldGhvZElkXTtcbiAgICAgICAgZGVsZXRlIHNlcnZlci5tZXRob2RzW21ldGhvZElkXTtcblxuICAgICAgICAvLyB1cGRhdGUgcmVmIGNvdW50aW5nXG4gICAgICAgIG1ldGhvZHNDb3VudFttZXRob2RJZF0gPSBtZXRob2RzQ291bnRbbWV0aG9kSWRdIC0gMTtcbiAgICAgICAgaWYgKG1ldGhvZHNDb3VudFttZXRob2RJZF0gPT09IDApIHtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5leGVjdXRlKCdvbk1ldGhvZFJlbW92ZWQnLCBtZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2tzLmV4ZWN1dGUoJ29uU2VydmVyTWV0aG9kUmVtb3ZlZCcsIHNlcnZlciwgbWV0aG9kKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNZXRob2RzKCkge1xuXG4gICAgICAgIHZhciBhbGxNZXRob2RzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHNlcnZlcnMpLmZvckVhY2goZnVuY3Rpb24gKHNlcnZlcklkKSB7XG4gICAgICAgICAgICB2YXIgc2VydmVyID0gc2VydmVyc1tzZXJ2ZXJJZF07XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzZXJ2ZXIubWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kSWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gc2VydmVyLm1ldGhvZHNbbWV0aG9kSWRdO1xuICAgICAgICAgICAgICAgIGFsbE1ldGhvZHNbbWV0aG9kLmlkXSA9IG1ldGhvZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBtZXRob2RzQXNBcnJheSA9IE9iamVjdC5rZXlzKGFsbE1ldGhvZHMpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbGxNZXRob2RzW2lkXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1ldGhvZHNBc0FycmF5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlcnZlcnMoKSB7XG4gICAgICAgIHZhciBhbGxTZXJ2ZXJzID0gW107XG4gICAgICAgIE9iamVjdC5rZXlzKHNlcnZlcnMpLmZvckVhY2goZnVuY3Rpb24gKHNlcnZlcklkKSB7XG4gICAgICAgICAgICB2YXIgc2VydmVyID0gc2VydmVyc1tzZXJ2ZXJJZF07XG4gICAgICAgICAgICBhbGxTZXJ2ZXJzLnB1c2goc2VydmVyKVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYWxsU2VydmVycztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXJ2ZXJNZXRob2RCeUlkKHNlcnZlcklkKSB7XG4gICAgICAgIHZhciBzZXJ2ZXIgPSBzZXJ2ZXJzW3NlcnZlcklkXTtcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoc2VydmVyLm1ldGhvZHMpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXJ2ZXIubWV0aG9kc1tpZF07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uU2VydmVyQWRkZWQoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2tzLmFkZCgnb25TZXJ2ZXJBZGRlZCcsIGNhbGxiYWNrKTtcblxuICAgICAgICAvLyByZXBsYXkgYWxsIHNlcnZlcnNcbiAgICAgICAgZ2V0U2VydmVycygpLmZvckVhY2goZnVuY3Rpb24gKHNlcnZlcikge1xuICAgICAgICAgICAgY2FsbGJhY2soc2VydmVyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25NZXRob2RBZGRlZChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFja3MuYWRkKCdvbk1ldGhvZEFkZGVkJywgY2FsbGJhY2spO1xuXG4gICAgICAgIC8vIHJlcGx5IGFsbCBleGlzdGluZyBtZXRob2RzXG4gICAgICAgIGdldE1ldGhvZHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG1ldGhvZCk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TZXJ2ZXJNZXRob2RBZGRlZChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFja3MuYWRkKCdvblNlcnZlck1ldGhvZEFkZGVkJywgY2FsbGJhY2spO1xuICAgICAgICAvLyBUT0RPIC0gdGhlIG9sZCB2ZXJzaW9uIGRvZXMgbm90IGRvIHRoaXMgLSBjb25maXJtIHdoYXQgaXMgY29ycmVjdFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlcnZlckJ5SWQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHNlcnZlcnNbaWRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgaW50ZXJuYWwgc2VydmVyIG9iamVjdCB0byB1c2VyIG9iamVjdFxuICAgICAqIEBwYXJhbSBzZXJ2ZXJcbiAgICAgKiBAcmV0dXJucyB7e21hY2hpbmU6ICosIHBpZDogKiwgc3RhcnRlZDogKiwgdXNlcjogKiwgYXBwbGljYXRpb246ICosIGVudmlyb25tZW50OiAqLCByZWdpb246ICosIHNlcnZpY2VfbmFtZTogKiwgc3RhdGU6ICp9fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVVzZXJTZXJ2ZXJJbmZvKHNlcnZlckluZm8pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hY2hpbmU6IHNlcnZlckluZm8ubWFjaGluZSxcbiAgICAgICAgICAgIHBpZDogc2VydmVySW5mby5waWQsXG4gICAgICAgICAgICB1c2VyOiBzZXJ2ZXJJbmZvLnVzZXIsXG4gICAgICAgICAgICBhcHBsaWNhdGlvbjogc2VydmVySW5mby5hcHBsaWNhdGlvbixcbiAgICAgICAgICAgIGVudmlyb25tZW50OiBzZXJ2ZXJJbmZvLmVudmlyb25tZW50LFxuICAgICAgICAgICAgcmVnaW9uOiBzZXJ2ZXJJbmZvLnJlZ2lvbixcbiAgICAgICAgICAgIGluc3RhbmNlOiBzZXJ2ZXJJbmZvLmluc3RhbmNlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBpbnRlcm5hbCBtZXRob2Qgb2JqZWN0IHRvIHVzZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIG1ldGhvZFxuICAgICAqIEByZXR1cm5zIHt7bmFtZTogKiwgYWNjZXB0czogKiwgcmV0dXJuczogKiwgZGVzY3JpcHRpb246ICosIGRpc3BsYXlfbmFtZTogKiwgdmVyc2lvbjogKiwgb2JqZWN0X3R5cGVzOiAoKnxBcnJheSl9fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVVzZXJNZXRob2RJbmZvKG1ldGhvZEluZm8pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IG1ldGhvZEluZm8ubmFtZSxcbiAgICAgICAgICAgIGFjY2VwdHM6IG1ldGhvZEluZm8uYWNjZXB0cyxcbiAgICAgICAgICAgIHJldHVybnM6IG1ldGhvZEluZm8ucmV0dXJucyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtZXRob2RJbmZvLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgZGlzcGxheU5hbWUgOiBtZXRob2RJbmZvLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgdmVyc2lvbjogbWV0aG9kSW5mby52ZXJzaW9uLFxuICAgICAgICAgICAgb2JqZWN0VHlwZXM6IG1ldGhvZEluZm8ub2JqZWN0VHlwZXMsXG4gICAgICAgICAgICBzdXBwb3J0c1N0cmVhbWluZzogbWV0aG9kSW5mby5zdXBwb3J0c1N0cmVhbWluZ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldFNlcnZlckJ5SWQ6IGdldFNlcnZlckJ5SWQsXG4gICAgICAgIGdldFNlcnZlcnM6IGdldFNlcnZlcnMsXG4gICAgICAgIGdldE1ldGhvZHM6IGdldE1ldGhvZHMsXG4gICAgICAgIGdldFNlcnZlck1ldGhvZHNCeUlkOiBnZXRTZXJ2ZXJNZXRob2RCeUlkLFxuICAgICAgICBnZXRNZXRob2RJZDogY3JlYXRlTWV0aG9kSWQsXG4gICAgICAgIGFkZFNlcnZlcjogYWRkU2VydmVyLFxuICAgICAgICBhZGRTZXJ2ZXJNZXRob2Q6IGFkZFNlcnZlck1ldGhvZCxcbiAgICAgICAgcmVtb3ZlU2VydmVyQnlJZDogcmVtb3ZlU2VydmVyQnlJZCxcbiAgICAgICAgcmVtb3ZlU2VydmVyTWV0aG9kOiByZW1vdmVTZXJ2ZXJNZXRob2QsXG5cbiAgICAgICAgb25TZXJ2ZXJBZGRlZDogb25TZXJ2ZXJBZGRlZCxcbiAgICAgICAgb25TZXJ2ZXJSZW1vdmVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5hZGQoJ29uU2VydmVyUmVtb3ZlZCcsIGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25NZXRob2RBZGRlZDogb25NZXRob2RBZGRlZCxcbiAgICAgICAgb25NZXRob2RSZW1vdmVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5hZGQoJ29uTWV0aG9kUmVtb3ZlZCcsIGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25TZXJ2ZXJNZXRob2RBZGRlZDogb25TZXJ2ZXJNZXRob2RBZGRlZCxcbiAgICAgICAgb25TZXJ2ZXJNZXRob2RSZW1vdmVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5hZGQoJ29uU2VydmVyTWV0aG9kUmVtb3ZlZCcsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iLCIvKlxuIFRoZSBzdHJlYW1pbmcgbW9kdWxlIGRlZmluZXMgdGhlIHVzZXIgb2JqZWN0cyByZWxldmFudCB0byB0aGUgc3RyZWFtaW5nIGFwaSwgYW5kXG4gYXR0YWNoZXMgdG8gcmVsZXZhbnQgZXZlbnRzIGV4cG9zZWQgYnkgdGhlIHByb3RvY29sLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHByb3RvY29sLCB1bnJlZ2lzdGVyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gc3RyZWFtRnJvbnRPYmoocmVwb01ldGhvZCkge1xuICAgICAgICB2YXIgZGVmID0gcmVwb01ldGhvZC5kZWZpbml0aW9uO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBicmFuY2hlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBiTGlzdCA9IHByb3RvY29sLmdldEJyYW5jaExpc3QocmVwb01ldGhvZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJMaXN0Lm1hcChmdW5jdGlvbiAoYnJhbmNoS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBicmFuY2hGcm9udE9iaihyZXBvTWV0aG9kLCBicmFuY2hLZXkpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBwcm90b2NvbC5jbG9zZUFsbFN1YnNjcmlwdGlvbnMocmVwb01ldGhvZCk7XG4gICAgICAgICAgICAgICAgdW5yZWdpc3RlcihyZXBvTWV0aG9kLmRlZmluaXRpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICBhY2NlcHRzOiBkZWYuYWNjZXB0cyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVmLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBkZWYuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgbmFtZTogZGVmLm5hbWUsXG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZXM6IGRlZi5vYmplY3RUeXBlcyxcbiAgICAgICAgICAgICAgICByZXR1cm5zOiBkZWYucmV0dXJucyxcbiAgICAgICAgICAgICAgICBzdXBwb3J0c1N0cmVhbWluZzogZGVmLnN1cHBvcnRzU3RyZWFtaW5nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogZGVmLm5hbWUsXG4gICAgICAgICAgICBwdXNoOiBmdW5jdGlvbiAoZGF0YSwgYnJhbmNoZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJyYW5jaGVzICE9PSAnc3RyaW5nJyAmJiAhQXJyYXkuaXNBcnJheShicmFuY2hlcykgJiYgYnJhbmNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYnJhbmNoZXMgc2hvdWxkIGJlIHN0cmluZyBvciBzdHJpbmcgYXJyYXknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVE9ETyB2YWxpZGF0ZSBpZiBpcyBwbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudHMuIERhdGEgbXVzdCBiZSBhbiBvYmplY3QuJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvdG9jb2wucHVzaERhdGEocmVwb01ldGhvZCwgZGF0YSwgYnJhbmNoZXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJMaXN0ID0gcHJvdG9jb2wuZ2V0U3Vic2NyaXB0aW9uTGlzdChyZXBvTWV0aG9kKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViTGlzdC5tYXAoZnVuY3Rpb24gKHN1Yikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uRnJvbnRPYmoocmVwb01ldGhvZCwgc3ViKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3Vic2NyaXB0aW9uRnJvbnRPYmoocmVwb01ldGhvZCwgc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhcmd1bWVudHM6IHN1YnNjcmlwdGlvbi5hcmd1bWVudHMgfHwge30sXG4gICAgICAgICAgICBicmFuY2hLZXk6IHN1YnNjcmlwdGlvbi5icmFuY2hLZXksXG4gICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHByb3RvY29sLmNsb3NlU2luZ2xlU3Vic2NyaXB0aW9uKHJlcG9NZXRob2QsIHN1YnNjcmlwdGlvbilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnN0YW5jZTogc3Vic2NyaXB0aW9uLmluc3RhbmNlLFxuICAgICAgICAgICAgcHVzaDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBwcm90b2NvbC5wdXNoRGF0YVRvU2luZ2xlKHJlcG9NZXRob2QsIHN1YnNjcmlwdGlvbiwgZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RyZWFtOiByZXBvTWV0aG9kLmRlZmluaXRpb25cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBicmFuY2hGcm9udE9iaihyZXBvTWV0aG9kLCBicmFuY2hLZXkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleTogYnJhbmNoS2V5LFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJMaXN0ID0gcHJvdG9jb2wuZ2V0U3Vic2NyaXB0aW9uTGlzdChyZXBvTWV0aG9kLCBicmFuY2hLZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJMaXN0Lm1hcChmdW5jdGlvbiAoc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25Gcm9udE9iaihyZXBvTWV0aG9kLCBzdWIpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBwcm90b2NvbC5jbG9zZUFsbFN1YnNjcmlwdGlvbnMocmVwb01ldGhvZCwgYnJhbmNoS2V5KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdXNoOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHByb3RvY29sLnB1c2hUb0JyYW5jaChyZXBvTWV0aG9kLCBkYXRhLCBicmFuY2hLZXkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqIEF0dGFjaCB0byBzdHJlYW0gJ2V2ZW50cycgKi9cbiAgICBwcm90b2NvbC5vblN1YlJlcXVlc3QoZnVuY3Rpb24gKHJlcXVlc3RDb250ZXh0LCByZXBvTWV0aG9kKSB7XG5cbiAgICAgICAgaWYgKCEoXG4gICAgICAgICAgICByZXBvTWV0aG9kICYmXG4gICAgICAgICAgICByZXBvTWV0aG9kLnN0cmVhbUNhbGxiYWNrcyAmJlxuICAgICAgICAgICAgdHlwZW9mIHJlcG9NZXRob2Quc3RyZWFtQ2FsbGJhY2tzLnN1YnNjcmlwdGlvblJlcXVlc3RIYW5kbGVyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcG9NZXRob2Quc3RyZWFtQ2FsbGJhY2tzLnN1YnNjcmlwdGlvblJlcXVlc3RIYW5kbGVyKHtcbiAgICAgICAgICAgIGFjY2VwdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHByb3RvY29sLmFjY2VwdFJlcXVlc3RPbkJyYW5jaChyZXF1ZXN0Q29udGV4dCwgcmVwb01ldGhvZCwgJycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFjY2VwdE9uQnJhbmNoOiBmdW5jdGlvbiAoYnJhbmNoKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9jb2wuYWNjZXB0UmVxdWVzdE9uQnJhbmNoKHJlcXVlc3RDb250ZXh0LCByZXBvTWV0aG9kLCBicmFuY2gpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJndW1lbnRzOiByZXF1ZXN0Q29udGV4dC5hcmd1bWVudHMsXG4gICAgICAgICAgICBpbnN0YW5jZTogcmVxdWVzdENvbnRleHQuaW5zdGFuY2UsXG4gICAgICAgICAgICByZWplY3Q6IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBwcm90b2NvbC5yZWplY3RSZXF1ZXN0KHJlcXVlc3RDb250ZXh0LCByZXBvTWV0aG9kLCByZWFzb24pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcHJvdG9jb2wub25TdWJBZGRlZChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uLCByZXBvTWV0aG9kKSB7XG5cbiAgICAgICAgaWYgKCEoXG4gICAgICAgICAgICByZXBvTWV0aG9kICYmXG4gICAgICAgICAgICByZXBvTWV0aG9kLnN0cmVhbUNhbGxiYWNrcyAmJlxuICAgICAgICAgICAgdHlwZW9mIHJlcG9NZXRob2Quc3RyZWFtQ2FsbGJhY2tzLnN1YnNjcmlwdGlvbkFkZGVkSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXBvTWV0aG9kLnN0cmVhbUNhbGxiYWNrcy5zdWJzY3JpcHRpb25BZGRlZEhhbmRsZXIoc3Vic2NyaXB0aW9uRnJvbnRPYmoocmVwb01ldGhvZCwgc3Vic2NyaXB0aW9uKSlcblxuICAgIH0pO1xuXG4gICAgcHJvdG9jb2wub25TdWJSZW1vdmVkKGZ1bmN0aW9uIChzdWJzY3JpYmVyLCByZXBvTWV0aG9kKSB7XG5cbiAgICAgICAgaWYgKCEoXG4gICAgICAgICAgICByZXBvTWV0aG9kICYmXG4gICAgICAgICAgICByZXBvTWV0aG9kLnN0cmVhbUNhbGxiYWNrcyAmJlxuICAgICAgICAgICAgdHlwZW9mIHJlcG9NZXRob2Quc3RyZWFtQ2FsbGJhY2tzLnN1YnNjcmlwdGlvblJlbW92ZWRIYW5kbGVyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcG9NZXRob2Quc3RyZWFtQ2FsbGJhY2tzLnN1YnNjcmlwdGlvblJlbW92ZWRIYW5kbGVyKHN1YnNjcmliZXIpXG5cbiAgICB9KTtcblxuICAgIHJldHVybiB7IHN0cmVhbUZyb250T2JqOiBzdHJlYW1Gcm9udE9iaiB9O1xufTtcbiIsIi8qXG4gKiBBIHN0b3JlIGZvciBob2xkaW5nIG1ldGhvZCBiYWNrLW9iamVjdHMgcmVnaXN0ZXJlZCBieSB0aGlzIGluc3RhbmNlJ3Mgc2VydmVyXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBuZXh0SWQgPSAwO1xuICAgIHZhciBfbWV0aG9kcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gYWRkKG1ldGhvZCkge1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2QuX3JlcG9JZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBtZXRob2QuX3JlcG9JZCA9IG5leHRJZDtcbiAgICAgICAgbmV4dElkICs9IDE7XG5cbiAgICAgICAgX21ldGhvZHMucHVzaChtZXRob2QpO1xuXG4gICAgICAgIHJldHVybiBtZXRob2Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlKHJlcG9JZCkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcG9JZCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKCdFeHBlY3RpbmcgYSBudW1iZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9tZXRob2RzID0gX21ldGhvZHMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5fcmVwb0lkICE9PSByZXBvSWQ7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpZCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKCdFeHBlY3RpbmcgYSBudW1iZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfbWV0aG9kcy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIHJldHVybiBtLl9yZXBvSWQgPT09IGlkXG4gICAgICAgIH0pWzBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldExpc3QoKSB7XG4gICAgICAgIHJldHVybiBfbWV0aG9kcy5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiBfbWV0aG9kcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkOiBhZGQsXG4gICAgICAgIHJlbW92ZTogcmVtb3ZlLFxuICAgICAgICBnZXRCeUlkOiBnZXRCeUlkLFxuICAgICAgICBnZXRMaXN0OiBnZXRMaXN0LFxuICAgICAgICBsZW5ndGg6IGxlbmd0aFxuICAgIH07XG59O1xuIiwiLypcbiBUaGUgQUdNIFNlcnZlciBhbGxvd3MgdXNlcnMgcmVnaXN0ZXIgQUdNIG1ldGhvZHMuXG4gSXQgZXhwb3NlcyB0aGVzZSBtZXRob2RzIHRvIEFHTSBjbGllbnRzICh1c2luZyBwcmVzZW5jZSBtZXNzYWdlcykgYW5kIGxpc3RlbnMgZm9yIHRoZWlyIGludm9jYXRpb25cbiAqL1xuXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2VzNi1wcm9taXNlJykuUHJvbWlzZTtcbnZhciBQcm9taXNpZnkgPSByZXF1aXJlKCcuL2hlbHBlcnMvcHJvbWlzaWZ5Jyk7XG52YXIgU3RyZWFtaW5nID0gcmVxdWlyZSgnLi9hZ20tc2VydmVyLXN0cmVhbWluZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwcm90b2NvbCwgdmF1bHQsIGluc3RhbmNlLCBjb25maWd1cmF0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gU2F2ZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBtZXRyaWMgZnVuY3Rpb24gaWYgaXQgZXhpc3RzXG4gICAgdmFyIG1ldHJpYyA9IChjb25maWd1cmF0aW9uLm1ldHJpY3MgIT09IHVuZGVmaW5lZCkgPyBjb25maWd1cmF0aW9uLm1ldHJpY3MubnVtYmVyTWV0cmljLmJpbmQoY29uZmlndXJhdGlvbi5tZXRyaWNzKSA6IGZ1bmN0aW9uICgpIHtcbiAgICB9O1xuXG4gICAgLy8gQW4gYXJyYXkgb2YgdGhlIHNlcnZlcidzIG1ldGhvZHNcbiAgICB2YXIgc3RyZWFtaW5nID0gbmV3IFN0cmVhbWluZyhwcm90b2NvbCwgdW5yZWdpc3Rlcik7XG5cbiAgICBwcm90b2NvbC5vbkludm9rZWQob25NZXRob2RJbnZva2VkKTtcblxuICAgIHZhciBpbnZvY2F0aW9ucyA9IDA7XG5cbiAgICBmdW5jdGlvbiBvbk1ldGhvZEludm9rZWQobWV0aG9kVG9FeGVjdXRlLCBpbnZvY2F0aW9uSWQsIGludm9jYXRpb25BcmdzKSB7XG4gICAgICAgIG1ldHJpYygnSW52b2NhdGlvbnMgY291bnQnLCBpbnZvY2F0aW9ucysrKTtcblxuICAgICAgICBpZiAoIW1ldGhvZFRvRXhlY3V0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXhlY3V0ZSBpdCBhbmQgc2F2ZSB0aGUgcmVzdWx0XG4gICAgICAgIG1ldGhvZFRvRXhlY3V0ZS50aGVGdW5jdGlvbihpbnZvY2F0aW9uQXJncywgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIGVycm9yIGNhc2VcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVyci5tZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSBlcnIubWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlcnIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyciA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIEFHTSBsaWJyYXJ5IG9ubHkgdHJhbnNmZXJzIG9iamVjdHMuIElmIHRoZSByZXN1bHQgaXMgbm90IGFuIG9iamVjdCwgcHV0IGl0IGluIG9uZVxuICAgICAgICAgICAgaWYgKCFyZXN1bHQgfHwgdHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcgfHwgcmVzdWx0LmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHsgX3Jlc3VsdDogcmVzdWx0IH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByb3RvY29sLm1ldGhvZEludm9jYXRpb25SZXN1bHQobWV0aG9kVG9FeGVjdXRlLCBpbnZvY2F0aW9uSWQsIGVyciwgcmVzdWx0KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyByZWdpc3RlcnMgYSBuZXcgYWdtIG1ldGhvZFxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKG1ldGhvZERlZmluaXRpb24sIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgcmVnaXN0ZXJDb3JlKG1ldGhvZERlZmluaXRpb24sIGZ1bmN0aW9uIChjb250ZXh0LCByZXN1bHRDYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gZ2V0IHRoZSByZXN1bHQgYXMgZGlyZWN0IGludm9jYXRpb24gb2YgdGhlIGNhbGxiYWNrIGFuZCByZXR1cm4gaXQgdXNpbmcgcmVzdWx0Q2FsbGJhY2tcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKGNvbnRleHQuYXJncywgY29udGV4dC5pbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0Q2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayhlLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gcmVnaXN0ZXJzIGEgbmV3IGFzeW5jIGFnbSBtZXRob2QgKHRoZSByZXN1bHQgY2FuIGJlIHJldHVybmVkIGluIGFzeW5jIHdheSlcbiAgICBmdW5jdGlvbiByZWdpc3RlckFzeW5jKG1ldGhvZERlZmluaXRpb24sIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgcmVnaXN0ZXJDb3JlKG1ldGhvZERlZmluaXRpb24sIGZ1bmN0aW9uIChjb250ZXh0LCByZXN1bHRDYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gaW52b2tlIHRoZSBjYWxsYmFjayBwYXNzaW5nIHN1Y2Nlc3MgYW5kIGVycm9yIGNhbGxiYWNrc1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjb250ZXh0LmFyZ3MsIGNvbnRleHQuaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgIC8vIHN1Y2Nlc3MgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyb3IgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrKGUsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRDYWxsYmFjayhlLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmVnaXN0ZXJzIGEgbmV3IHN0cmVhbWluZyBhZ20gbWV0aG9kXG4gICAgZnVuY3Rpb24gY3JlYXRlU3RyZWFtKHN0cmVhbURlZiwgY2FsbGJhY2tzLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgLy8gaW4gY2FsbGJhY2tzIHdlIGhhdmUgc3Vic2NyaXB0aW9uUmVxdWVzdEhhbmRsZXIsIHN1YnNjcmlwdGlvbkFkZGVkSGFuZGxlciwgc3Vic2NyaXB0aW9uUmVtb3ZlZEhhbmRsZXJcblxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtRGVmID09PSAnc3RyaW5nJykge1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbURlZiA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdJbnZhbGlkIHN0cmVhbSBuYW1lLicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmVhbURlZiA9IHsgbmFtZTogc3RyZWFtRGVmIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0cmVhbURlZi5zdXBwb3J0c1N0cmVhbWluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIFVzZXItc3VwcGxpZWQgc3Vic2NyaXB0aW9uIGNhbGxiYWNrc1xuICAgICAgICAgICAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3MgPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFja3Muc3Vic2NyaXB0aW9uUmVxdWVzdEhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3Vic2NyaXB0aW9uUmVxdWVzdEhhbmRsZXIgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmFjY2VwdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlcG9NZXRob2QgPSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiB1bmRlZmluZWQsIC8vIHRvIGJlIGluaXRpYWxpemVkIGJ5IHByb3RvY29sXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbjogc3RyZWFtRGVmLCAvLyBzdG9yZSB1bi1mb3JtYXR0ZWQgZGVmaW5pdGlvbiBmb3IgY2hlY2t1cHMgaW4gdW4tcmVnaXN0ZXIgbWV0aG9kXG4gICAgICAgICAgICAgICAgc3RyZWFtQ2FsbGJhY2tzOiBjYWxsYmFja3NcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIEFkZCB0aGUgbWV0aG9kXG4gICAgICAgICAgICB2YXVsdC5hZGQocmVwb01ldGhvZCk7XG5cbiAgICAgICAgICAgIHByb3RvY29sLmNyZWF0ZVN0cmVhbShyZXBvTWV0aG9kLCBzdHJlYW1EZWYsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcHJvdG9jb2xTdWNjZXNzKCkge1xuICAgICAgICAgICAgICAgICAgICBtZXRyaWMoJ1JlZ2lzdGVyZWQgbWV0aG9kcycsIHZhdWx0Lmxlbmd0aCgpKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyZWFtRnJvYmplY3QgPSBzdHJlYW1pbmcuc3RyZWFtRnJvbnRPYmoocmVwb01ldGhvZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdHJlYW1Gcm9iamVjdCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcm90b2NvbEZhaWwoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhdWx0LnJlbW92ZShyZXBvTWV0aG9kLl9yZXBvSWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2lmeShwcm9taXNlLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8vIENvcmUgbWV0aG9kIGZvciByZWdpc3RlcmluZyBhZ20gbWV0aG9kXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJDb3JlKG1ldGhvZERlZmluaXRpb24sIHRoZUZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgZGVmaW5pdGlvblxuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZERlZmluaXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBtZXRob2REZWZpbml0aW9uID0geyBuYW1lOiBtZXRob2REZWZpbml0aW9uIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlIG1ldGhvZCAoKVxuICAgICAgICB2YXIgcmVwb01ldGhvZCA9IHZhdWx0LmFkZCh7XG4gICAgICAgICAgICBkZWZpbml0aW9uOiBtZXRob2REZWZpbml0aW9uLCAvLyBzdG9yZSB1bi1mb3JtYXR0ZWQgZGVmaW5pdGlvbiBmb3IgY2hlY2t1cHMgaW4gdW4tcmVnaXN0ZXIgbWV0aG9kXG4gICAgICAgICAgICB0aGVGdW5jdGlvbjogdGhlRnVuY3Rpb25cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcHJvdG9jb2wucmVnaXN0ZXIocmVwb01ldGhvZCxcbiAgICAgICAgICAgIGZ1bmN0aW9uIHByb3RvY29sU3VjY2VzcygpIHtcbiAgICAgICAgICAgICAgICBtZXRyaWMoJ1JlZ2lzdGVyZWQgbWV0aG9kcycsIHZhdWx0Lmxlbmd0aCgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiBwcm90b2NvbEZhaWwoKSB7XG4gICAgICAgICAgICAgICAgdmF1bHQucmVtb3ZlKHJlcG9NZXRob2QuX3JlcG9JZCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0cyB0aGUgbWV0aG9kIGRlZmluaXRpb24gZnJvbSBjYW1lbCBjYXNlIHRvIHNuYWtlIGNhc2VcbiAgICBmdW5jdGlvbiBjb250YWluc1Byb3BzKGZpbHRlciwgb2JqZWN0KSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHRydWU7XG4gICAgICAgIE9iamVjdC5rZXlzKGZpbHRlcikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgaWYgKGZpbHRlcltwcm9wXSAhPT0gb2JqZWN0W3Byb3BdKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG5cblxuICAgIC8vIFRPRE8gYWRkIHN1Y2Nlc3MvZmFpbCBoZXJlIGFuZCBhdCBndzErMiBpbXBsZW1lbnRhdGlvbnM/XG4gICAgLy8gVW5yZWdpc3RlcnMgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgQUdNIG1ldGhvZFxuICAgIGZ1bmN0aW9uIHVucmVnaXN0ZXIobWV0aG9kRmlsdGVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kRmlsdGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbWV0aG9kRmlsdGVyID0geyBuYW1lOiBtZXRob2RGaWx0ZXIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtZXRob2RzVG9CZVJlbW92ZWQgPSB2YXVsdC5nZXRMaXN0KCkuZmlsdGVyKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250YWluc1Byb3BzKG1ldGhvZEZpbHRlciwgbWV0aG9kLmRlZmluaXRpb24pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyB1cGRhdGUgcmVwb3NpdG9yeVxuICAgICAgICBtZXRob2RzVG9CZVJlbW92ZWQuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgICAgICB2YXVsdC5yZW1vdmUobWV0aG9kLl9yZXBvSWQpO1xuICAgICAgICAgICAgcHJvdG9jb2wudW5yZWdpc3RlcihtZXRob2QpO1xuICAgICAgICB9KTtcblxuICAgICAgICBtZXRyaWMoJ1JlZ2lzdGVyZWQgbWV0aG9kcycsIHZhdWx0Lmxlbmd0aCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyByZWdpc3RlcjogcmVnaXN0ZXIsIHJlZ2lzdGVyQXN5bmM6IHJlZ2lzdGVyQXN5bmMsIHVucmVnaXN0ZXI6IHVucmVnaXN0ZXIsIGNyZWF0ZVN0cmVhbTogY3JlYXRlU3RyZWFtIH07XG59O1xuIiwidmFyIGNvbm5lY3Rpb24gPSByZXF1aXJlKCd0aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uJyk7XG52YXIgaW5zdGFuY2UgPSByZXF1aXJlKCcuL2FnbS1pbnN0YW5jZScpO1xudmFyIG5hdGl2ZUFnbSA9IHJlcXVpcmUoJy4vYWdtLW5hdGl2ZScpO1xudmFyIGRlcHJlY2F0ZSA9IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJyk7XG52YXIgcGpzb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcbnZhciBjbGllbnQgPSByZXF1aXJlKCcuL2FnbS1jbGllbnQnKTtcbnZhciBzZXJ2ZXIgPSByZXF1aXJlKCcuL2FnbS1zZXJ2ZXInKTtcbnZhciBnVzFQcm90b2NvbCA9IHJlcXVpcmUoJy4vcHJvdG9jb2xzL2d3MS9wcm90b2NvbCcpO1xudmFyIGdXM1Byb3RvY29sID0gcmVxdWlyZSgnLi9wcm90b2NvbHMvZ3czL3Byb3RvY29sJyk7XG52YXIgcmVwb3NpdG9yeSA9IHJlcXVpcmUoJy4vYWdtLXJlcG9zaXRvcnknKTtcbnZhciB2YXVsdCA9IHJlcXVpcmUoJy4vYWdtLXNlcnZlci12YXVsdCcpO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG5cbi8vIEFkZCBhIGdsb2JhbCBmdW5jdGlvbiB0aGF0IG1ha2VzIGFuIEFHTSBpbnN0YW5jZVxuYWdtID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLy8gV2Ugd2lsbCBzdG9yZSB0aGUgbGlicmFyeSBoZXJlXG4gICAgdmFyIGFnbSA9IHt9O1xuICAgIGFnbS52ZXJzaW9uID0gcGpzb24udmVyc2lvbjtcblxuXG4gICAgLy8gSW5pdCBjb25maWd1cmF0aW9uXG4gICAgaWYgKHR5cGVvZiBjb25maWd1cmF0aW9uICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25maWd1cmF0aW9uID0ge307XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgY29uZmlndXJhdGlvblxuXG4gICAgLy8gSW5pdCBjaGlsZCBjb25maWd1cmF0aW9uIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHBhc3NlZCBieSB1c2VyXG4gICAgdmFyIGNoaWxkQ29uZmlndXJhdGlvbnMgPSBbJ2Nvbm5lY3Rpb24nLCAnY2xpZW50JywgJ3NlcnZlciddO1xuICAgIGNoaWxkQ29uZmlndXJhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoY29uZikge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZ3VyYXRpb25bY29uZl0gIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25maWd1cmF0aW9uW2NvbmZdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IGRlYnVnIGlmIGdsb2JhbCBkZWJ1ZyBpcyBub3Qgc2V0OlxuICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5kZWJ1Zykge1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbltjb25mXS5kZWJ1ZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlndXJhdGlvbi5jbGllbnQucmVtb3ZlX3NlcnZlcl9vbl9uX21pc3NpbmdfaGVhcnRiZWF0cyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlndXJhdGlvbi5jbGllbnQucmVtb3ZlX3NlcnZlcl9vbl9uX21pc3NpbmdfaGVhcnRiZWF0cyA9IDM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29uZmlndXJhdGlvbi5jbGllbnQubWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24uY2xpZW50Lm1ldGhvZF9yZXNwb25zZV90aW1lb3V0ID0gMzAwMDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb25maWd1cmF0aW9uLmNsaWVudC53YWl0X2Zvcl9tZXRob2RfdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlndXJhdGlvbi5jbGllbnQud2FpdF9mb3JfbWV0aG9kX3RpbWVvdXQgPSAzMDAwO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29uZmlndXJhdGlvbi5zZXJ2ZXIuaGVhcnRiZWF0X2ludGVydmFsICE9PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWd1cmF0aW9uLnNlcnZlci5oZWFydGJlYXRfaW50ZXJ2YWwgPSA1MDAwO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbmZpZ3VyYXRpb24uc2VydmVyLnByZXNlbmNlX2ludGVydmFsICE9PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWd1cmF0aW9uLnNlcnZlci5wcmVzZW5jZV9pbnRlcnZhbCA9IDEwMDAwO1xuICAgIH1cblxuICAgIC8vIERldGVybWluZSBpZiB3ZSBhcmUgZ2l2ZW4gYSBjb25uZWN0aW9uIG9iamVjdC4gSWYgbm90LCBjcmVhdGUgaXQgb3Vyc2VsdmVzOlxuICAgIHZhciBjID0gY29uZmlndXJhdGlvbi5jb25uZWN0aW9uO1xuICAgIGFnbS5jb25uZWN0aW9uID0gKHR5cGVvZiBjID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYy5zZW5kID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBjLm9uID09PSAnZnVuY3Rpb24nKSA/IGMgOiBjb25uZWN0aW9uKGNvbmZpZ3VyYXRpb24uY29ubmVjdGlvbik7XG5cbiAgICAvLyBDcmVhdGUgYSBjb25uZWN0aW9uIHByb3h5IHdoaWNoIHNldHMgdGhlIHByb2R1Y3QgbmFtZSBhdXRvbWF0aWNhbGx5XG4gICAgdmFyIHByb2R1Y3ROYW1lID0gJ2FnbSc7XG4gICAgdmFyIGFnbUVuYWJsZWRDb25uZWN0aW9uID0ge1xuICAgICAgICBzZW5kOiBmdW5jdGlvbiAodHlwZSwgbWVzc2FnZSkge1xuICAgICAgICAgICAgYWdtLmNvbm5lY3Rpb24uc2VuZChwcm9kdWN0TmFtZSwgdHlwZSwgbWVzc2FnZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uOiBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgYWdtLmNvbm5lY3Rpb24ub24ocHJvZHVjdE5hbWUsIHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICB9LFxuICAgICAgICBjb25uZWN0ZWQ6IGFnbS5jb25uZWN0aW9uLmNvbm5lY3RlZCxcbiAgICAgICAgLy8gVE9ETyAtIHN0b3Agd3JhcHBpbmcgY29ubmVjdGlvbiAsIGp1c3QgZXh0ZW5kIGl0IHdpdGggc2VuZEFHTSwgb25BR01cbiAgICAgICAgZ2V0UGVlcklkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBhZ20uY29ubmVjdGlvbi5wZWVySWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIHJvb3Qgc3lzdGVtIG9iamVjdCB0aGF0IHdlIGFyZSBnaXZlblxuICAgIHZhciBtZXRyaWNzUm9vdCA9IGNvbmZpZ3VyYXRpb24ubWV0cmljcztcbiAgICAvLyBDcmVhdGUgc3Vic3lzdGVtcyBmb3Igb3VyIG1vZHVsZXMgYW5kIHNhdmUgdGhlbSBpbiB0aGVpciBjb25maWd1cmF0aW9uLlxuICAgIGlmIChtZXRyaWNzUm9vdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24uY2xpZW50Lm1ldHJpY3MgPSBtZXRyaWNzUm9vdC5zdWJTeXN0ZW0oJ0NsaWVudCcpO1xuICAgICAgICBjb25maWd1cmF0aW9uLnNlcnZlci5tZXRyaWNzID0gbWV0cmljc1Jvb3Quc3ViU3lzdGVtKCdTZXJ2ZXInKTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIG91ciBtb2R1bGVzXG4gICAgYWdtLmluc3RhbmNlID0gaW5zdGFuY2UoY29uZmlndXJhdGlvbi5pbnN0YW5jZSk7XG4gICAgdmFyIGNsaWVudFJlcG9zaXRvcnkgPSByZXBvc2l0b3J5KCk7XG4gICAgdmFyIHNlcnZlclJlcG9zaXRvcnkgPSB2YXVsdCgpO1xuICAgIHZhciBwcm90b2NvbFByb21pc2U7XG4gICAgdmFyIHByb3RvY29sVmVyc2lvbiA9IGMucHJvdG9jb2xWZXJzaW9uO1xuICAgIGlmIChwcm90b2NvbFZlcnNpb24gPT09IDMpIHtcbiAgICAgICAgcHJvdG9jb2xQcm9taXNlID0gZ1czUHJvdG9jb2woYWdtLmluc3RhbmNlLCBhZ21FbmFibGVkQ29ubmVjdGlvbiwgY2xpZW50UmVwb3NpdG9yeSwgc2VydmVyUmVwb3NpdG9yeSwgY29uZmlndXJhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJvdG9jb2xQcm9taXNlID0gZ1cxUHJvdG9jb2woYWdtLmluc3RhbmNlLCBhZ21FbmFibGVkQ29ubmVjdGlvbiwgY2xpZW50UmVwb3NpdG9yeSwgc2VydmVyUmVwb3NpdG9yeSwgY29uZmlndXJhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAvLyB3YWl0IGZvciBwcm90b2NvbCB0byByZXNvbHZlXG4gICAgICAgIHByb3RvY29sUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwcm90b2NvbCkge1xuICAgICAgICAgICAgYWdtLmNsaWVudCA9IGNsaWVudChwcm90b2NvbCwgY2xpZW50UmVwb3NpdG9yeSwgYWdtLmluc3RhbmNlLCBjb25maWd1cmF0aW9uLmNsaWVudCk7XG4gICAgICAgICAgICBhZ20uc2VydmVyID0gc2VydmVyKHByb3RvY29sLCBzZXJ2ZXJSZXBvc2l0b3J5LCBhZ20uaW5zdGFuY2UsIGNvbmZpZ3VyYXRpb24uc2VydmVyKTtcblxuICAgICAgICAgICAgLy8gQWRkIG1ldGhvZCBhbGlhc2VzXG4gICAgICAgICAgICBhZ20uaW52b2tlID0gYWdtLmNsaWVudC5pbnZva2U7XG4gICAgICAgICAgICBhZ20ucmVnaXN0ZXIgPSBhZ20uc2VydmVyLnJlZ2lzdGVyO1xuICAgICAgICAgICAgYWdtLnJlZ2lzdGVyQXN5bmMgPSBhZ20uc2VydmVyLnJlZ2lzdGVyQXN5bmM7XG4gICAgICAgICAgICBhZ20udW5yZWdpc3RlciA9IGFnbS5zZXJ2ZXIudW5yZWdpc3RlcjtcbiAgICAgICAgICAgIGFnbS5jcmVhdGVTdHJlYW0gPSBhZ20uc2VydmVyLmNyZWF0ZVN0cmVhbTtcbiAgICAgICAgICAgIGFnbS5zdWJzY3JpYmUgPSBhZ20uY2xpZW50LnN1YnNjcmliZTtcbiAgICAgICAgICAgIGFnbS5zZXJ2ZXJzID0gYWdtLmNsaWVudC5zZXJ2ZXJzO1xuICAgICAgICAgICAgYWdtLm1ldGhvZHMgPSBhZ20uY2xpZW50Lm1ldGhvZHM7XG5cbiAgICAgICAgICAgIGFnbS5tZXRob2RzRm9ySW5zdGFuY2UgPSBhZ20uY2xpZW50Lm1ldGhvZHNGb3JJbnN0YW5jZTtcbiAgICAgICAgICAgIGFnbS5tZXRob2QgPSBhZ20uY2xpZW50Lm1ldGhvZDtcbiAgICAgICAgICAgIGFnbS5tZXRob2RBZGRlZCA9IGFnbS5jbGllbnQubWV0aG9kQWRkZWQ7XG4gICAgICAgICAgICBhZ20ubWV0aG9kUmVtb3ZlZCA9IGFnbS5jbGllbnQubWV0aG9kUmVtb3ZlZDtcblxuICAgICAgICAgICAgYWdtLnNlcnZlck1ldGhvZEFkZGVkID0gYWdtLmNsaWVudC5zZXJ2ZXJNZXRob2RBZGRlZDtcbiAgICAgICAgICAgIGFnbS5zZXJ2ZXJNZXRob2RSZW1vdmVkID0gYWdtLmNsaWVudC5zZXJ2ZXJNZXRob2RSZW1vdmVkO1xuXG4gICAgICAgICAgICBhZ20uc2VydmVyQWRkZWQgPSBhZ20uY2xpZW50LnNlcnZlckFkZGVkO1xuICAgICAgICAgICAgYWdtLnNlcnZlclJlbW92ZWQgPSBhZ20uY2xpZW50LnNlcnZlclJlbW92ZWQ7XG5cbiAgICAgICAgICAgIC8vIGRlcHJlY2F0ZWQgQVBJXG4gICAgICAgICAgICBhZ20ubWV0aG9kc19mb3JfaW5zdGFuY2UgPSBkZXByZWNhdGUoYWdtLmNsaWVudC5tZXRob2RzRm9ySW5zdGFuY2UsICdnbHVlLmFnbS5jbGllbnQubWV0aG9kc19mb3JfaW5zdGFuY2UoKSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBnbHVlLmFnbS5jbGllbnQubWV0aG9kc0Zvckluc3RhbmNlKCkgaW5zdGVhZCcpO1xuICAgICAgICAgICAgYWdtLm1ldGhvZF9hZGRlZCA9IGRlcHJlY2F0ZShhZ20uY2xpZW50Lm1ldGhvZEFkZGVkLCAnZ2x1ZS5hZ20ubWV0aG9kX2FkZGVkKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgZ2x1ZS5hZ20ubWV0aG9kQWRkZWQoKSBpbnN0ZWFkJyk7XG4gICAgICAgICAgICBhZ20ubWV0aG9kX3JlbW92ZWQgPSBkZXByZWNhdGUoYWdtLmNsaWVudC5tZXRob2RSZW1vdmVkLCAnZ2x1ZS5hZ20ubWV0aG9kX3JlbW92ZWQoKSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBnbHVlLmFnbS5tZXRob2RSZW1vdmVkKCkgaW5zdGVhZCcpO1xuICAgICAgICAgICAgYWdtLnNlcnZlcl9tZXRob2RfYWRkZWQgPSBkZXByZWNhdGUoYWdtLmNsaWVudC5zZXJ2ZXJNZXRob2RBZGRlZCwgJ2dsdWUuYWdtLnNlcnZlcl9tZXRob2RfYWRkZWQoKSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBnbHVlLmFnbS5zZXJ2ZXJNZXRob2RBZGRlZCgpIGluc3RlYWQnKTtcbiAgICAgICAgICAgIGFnbS5zZXJ2ZXJfbWV0aG9kX3JlbW92ZWQgPSBkZXByZWNhdGUoYWdtLmNsaWVudC5zZXJ2ZXJNZXRob2RSZW1vdmVkLCAnZ2x1ZS5hZ20uc2VydmVyX21ldGhvZF9yZW1vdmVkKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgZ2x1ZS5hZ20uc2VydmVyTWV0aG9kUmVtb3ZlZCgpIGluc3RlYWQnKTtcbiAgICAgICAgICAgIGFnbS5zZXJ2ZXJfYWRkZWQgPSBkZXByZWNhdGUoYWdtLmNsaWVudC5zZXJ2ZXJBZGRlZCwgJ2dsdWUuYWdtLnNlcnZlcl9hZGRlZCgpIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIGdsdWUuYWdtLnNlcnZlckFkZGVkKCkgaW5zdGVhZCcpO1xuICAgICAgICAgICAgYWdtLnNlcnZlcl9yZW1vdmVkID0gZGVwcmVjYXRlKGFnbS5jbGllbnQuc2VydmVyUmVtb3ZlZCwgJ2dsdWUuYWdtLnNlcnZlcl9yZW1vdmVkKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgZ2x1ZS5hZ20uc2VydmVyUmVtb3ZlZCgpIGluc3RlYWQnKTtcblxuICAgICAgICAgICAgcmVzb2x2ZShhZ20pO1xuXG4gICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxufTtcbmFnbSA9IGdsb2JhbC5odG1sQ29udGFpbmVyICE9PSB1bmRlZmluZWQgPyBuYXRpdmVBZ20gOiBhZ207XG5cbi8vIEV4cG9ydCBmb3IgYnJvd3NlcnNcbmlmIChnbG9iYWwudGljazQyID09PSB1bmRlZmluZWQpIHtcbiAgICBnbG9iYWwudGljazQyID0ge307XG59XG5nbG9iYWwudGljazQyLmFnbSA9IGFnbTtcblxubW9kdWxlLmV4cG9ydHMgPSBhZ207XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBzdWNjZXNzQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVycm9yQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzdWNjZXNzQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3VjY2Vzc0NhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGdsb2JhbC5jb25zb2xlICE9PSB1bmRlZmluZWQgJiYgYWdtLmRlYnVnID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3MhJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXJyb3JDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlcnJvckNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGdsb2JhbC5jb25zb2xlICE9PSB1bmRlZmluZWQgJiYgYWdtLmRlYnVnID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FuIGVycm9yIG9jY3VycmVkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByb21pc2UudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xufVxuIiwidmFyIGN1aWQgPSByZXF1aXJlKCdjdWlkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gY3VpZCgpO1xufTtcbiIsInZhciByYW5kb20gPSByZXF1aXJlKCcuLy4uLy4uL2hlbHBlcnMvcmFuZG9tJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uLCBpbnN0YW5jZSwgc2VuZFJlcXVlc3QsIG5leHRSZXNwb25zZVN1YmplY3QpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgU1RBVFVTX0FXQUlUSU5HX0FDQ0VQVCA9ICdhd2FpdGluZ0FjY2VwdCc7IC8vIG5vdCBldmVuIG9uZSBzZXJ2ZXIgaGFzIGFjY2VwdGVkIHlldFxuICAgIHZhciBTVEFUVVNfU1VCU0NSSUJFRCA9ICdzdWJzY3JpYmVkJzsgLy8gYXQgbGVhc3Qgb25lIHNlcnZlciBoYXMgcmVzcG9uZGVkIGFzICdBY2NlcHRpbmcnXG4gICAgdmFyIEVSUl9NU0dfU1VCX0ZBSUxFRCA9ICdTdWJzY3JpcHRpb24gZmFpbGVkLic7XG4gICAgdmFyIEVSUl9NU0dfU1VCX1JFSkVDVEVEID0gJ1N1YnNjcmlwdGlvbiByZWplY3RlZC4nO1xuICAgIHZhciBPTl9DTE9TRV9NU0dfU0VSVkVSX0lOSVQgPSAnU2VydmVySW5pdGlhdGVkJztcbiAgICB2YXIgT05fQ0xPU0VfTVNHX0NMSUVOVF9JTklUID0gJ0NsaWVudEluaXRpYXRlZCc7XG5cbiAgICB2YXIgc3Vic2NyaXB0aW9uc0xpc3QgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShzdHJlYW1pbmdNZXRob2QsIGFyZ3VtZW50T2JqLCB0YXJnZXRTZXJ2ZXJzLCBzdHVmZiwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgaWYgKHRhcmdldFNlcnZlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlcnJvcihFUlJfTVNHX1NVQl9GQUlMRUQgKyAnIE5vIGF2YWlsYWJsZSBzZXJ2ZXJzIG1hdGNoZWQgdGhlIHRhcmdldCBwYXJhbXMuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIHNhbWUgSWQgd2lsbCBiZSBwYXNzZWQgdG8gYWxsIHRoZSBzZXJ2ZXJzIChhcyAnSW52b2NhdGlvbklkJylcbiAgICAgICAgLy8gc28gdGhleSBjYW4gcmVzcG9uZCBiYWNrIHdpdGggaXQgZHVyaW5nIHRoZSBpbml0aWFsIGhhbmRzaGFrZVxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uSWQgPSAnc3Vic2NyaXB0aW9uSWRfJyArIHJhbmRvbSgpO1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIHRoZSB1c2VyJ3MgY2FsbGJhY2tzXG4gICAgICAgIHZhciBwZW5kaW5nU3ViID0gcmVnaXN0ZXJTdWJzY3JpcHRpb24oXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25JZCxcbiAgICAgICAgICAgIHN0cmVhbWluZ01ldGhvZCxcbiAgICAgICAgICAgIGFyZ3VtZW50T2JqLFxuICAgICAgICAgICAgc3VjY2VzcyxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgc3R1ZmYubWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXRcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodHlwZW9mIHBlbmRpbmdTdWIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBlcnJvcihFUlJfTVNHX1NVQl9GQUlMRUQgKyAnIFVuYWJsZSB0byByZWdpc3RlciB0aGUgdXNlciBjYWxsYmFja3MuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZW5kIGEgc3Vic2NyaXB0aW9uIHJlcXVlc3QgdG8gZWFjaCBzZXJ2ZXJcbiAgICAgICAgdGFyZ2V0U2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcblxuICAgICAgICAgICAgLy8gR2V0IGEgcmVzcG9uc2Ugc3ViamVjdCBmb3IgdGhpcyBpbnZvY2F0aW9uXG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VTdWJqZWN0ID0gbmV4dFJlc3BvbnNlU3ViamVjdCgpO1xuXG4gICAgICAgICAgICAvLyBBZGQgc2VydmVyIHRvIHRoZSBsaXN0IG9mIG9uZXMgdGhlIGNsaWVudCBpcyBleHBlY3RpbmcgYSByZXNwb25zZSBmcm9tXG4gICAgICAgICAgICBwZW5kaW5nU3ViLnRyYWNrZWRTZXJ2ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlcnZlcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHN0cmVhbUlkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgc3RyZWFtU3ViamVjdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHByaXZhdGU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWV0aG9kUmVxdWVzdFN1YmplY3Q6IHN0cmVhbWluZ01ldGhvZC5pbmZvLnJlcXVlc3RTdWJqZWN0LFxuICAgICAgICAgICAgICAgIG1ldGhvZFJlc3BvbnNlU3ViamVjdDogcmVzcG9uc2VTdWJqZWN0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQ29uc3RydWN0IGEgbWVzc2FnZVxuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgRXZlbnRTdHJlYW1BY3Rpb246IDEsIC8vIFwiU3Vic2NyaWJlXCIgPSBjbGllbnQgd2lzaGVzIHRvIHN1YnNjcmliZVxuICAgICAgICAgICAgICAgIE1ldGhvZFJlcXVlc3RTdWJqZWN0OiBzdHJlYW1pbmdNZXRob2QuaW5mby5yZXF1ZXN0U3ViamVjdCxcbiAgICAgICAgICAgICAgICBNZXRob2RSZXNwb25zZVN1YmplY3Q6IHJlc3BvbnNlU3ViamVjdCxcbiAgICAgICAgICAgICAgICBDbGllbnQ6IGluc3RhbmNlLmluZm8oKSxcbiAgICAgICAgICAgICAgICBDb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgIEFyZ3VtZW50c0pzb246IGFyZ3VtZW50T2JqLFxuICAgICAgICAgICAgICAgICAgICBJbnZvY2F0aW9uSWQ6IHN1YnNjcmlwdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICBPYmplY3RUeXBlOiBzdHVmZi5vYmplY3RfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgRGlzcGxheUNvbnRleHQ6IHN0dWZmLmRpc3BsYXlfY29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgTWV0aG9kTmFtZTogc3RyZWFtaW5nTWV0aG9kLmluZm8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgRXhlY3V0aW9uU2VydmVyOiB0YXJnZXQuc2VydmVyLFxuICAgICAgICAgICAgICAgICAgICBUaW1lb3V0OiBzdHVmZi5tZXRob2RfcmVzcG9uc2VfdGltZW91dFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIFNlbmQgaXRcbiAgICAgICAgICAgIHNlbmRSZXF1ZXN0KG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICBpZiAoZ2xvYmFsLmNvbnNvbGUgIT09IHVuZGVmaW5lZCAmJiBjb25maWd1cmF0aW9uLmRlYnVnID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnJWM+Pj4gc2VuZGluZyBNZXRob2RJbnZvY2F0aW9uUmVxdWVzdE1lc3NhZ2UnLCAnYmFja2dyb3VuZC1jb2xvcjpoc2xhKDE5OCwgNTElLCA3OSUsIDAuNSknKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCclYycgKyBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgJ2JhY2tncm91bmQtY29sb3I6aHNsYSgxOTgsIDUxJSwgNzklLCAwLjUpJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbklkLCBtZXRob2QsIGFyZ3MsIHN1Y2Nlc3MsIGVycm9yLCB0aW1lb3V0KSB7XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uc0xpc3Rbc3Vic2NyaXB0aW9uSWRdID0ge1xuICAgICAgICAgICAgc3RhdHVzOiBTVEFUVVNfQVdBSVRJTkdfQUNDRVBULFxuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgICAgICAgICBzdWNjZXNzOiBzdWNjZXNzLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgdHJhY2tlZFNlcnZlcnM6IFtdLFxuICAgICAgICAgICAgaGFuZGxlcnM6IHtcbiAgICAgICAgICAgICAgICBvbkRhdGE6IFtdLFxuICAgICAgICAgICAgICAgIG9uQ2xvc2VkOiBbXVxuICAgICAgICAgICAgICAgIC8vIG9uRmFpbGVkOiBbXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHF1ZXVlZDoge1xuICAgICAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgICAgIGNsb3NlcnM6IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGltZW91dElkOiB1bmRlZmluZWRcbiAgICAgICAgfTtcblxuXG4gICAgICAgIHN1YnNjcmlwdGlvbnNMaXN0W3N1YnNjcmlwdGlvbklkXS50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25zTGlzdFtzdWJzY3JpcHRpb25JZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gbm8gc3VjaCBzdWJzY3JpcHRpb25cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbnNMaXN0W3N1YnNjcmlwdGlvbklkXTtcblxuXG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnN0YXR1cyA9PT0gU1RBVFVTX0FXQUlUSU5HX0FDQ0VQVCkge1xuICAgICAgICAgICAgICAgIGVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxlZF93aXRoOiBhcmdzLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBFUlJfTVNHX1NVQl9GQUlMRUQgKyAnIFN1YnNjcmlwdGlvbiBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAnICsgdGltZW91dCArICdtcy4nXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBOb25lIG9mIHRoZSB0YXJnZXQgc2VydmVycyBoYXMgYW5zd2VyZWQgdGhlIHN1YnNjcmlwdGlvbiBhdHRlbXB0XG4gICAgICAgICAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNMaXN0W3N1YnNjcmlwdGlvbklkXTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJzY3JpcHRpb24uc3RhdHVzID09PSBTVEFUVVNfU1VCU0NSSUJFRCAmJlxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi50cmFja2VkU2VydmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdGhlIHRyYWNrZWRTZXJ2ZXJzLCByZW1vdmluZyB0aG9zZSB3aXRob3V0IHZhbGlkIHN0cmVhbUlkXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnRyYWNrZWRTZXJ2ZXJzID0gc3Vic2NyaXB0aW9uLnRyYWNrZWRTZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAoc2VydmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHNlcnZlci5zdHJlYW1JZCA9PT0gJ3N0cmluZycgJiYgc2VydmVyLnN0cmVhbUlkICE9PSAnJylcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi50aW1lb3V0SWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnRyYWNrZWRTZXJ2ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIHRoaXMgbWlnaHQgYmUgZGVhZC1jb2RlLCB3aGVyZSBpcyBjbG9zZXJzLnB1c2g/XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBubyBvcGVuIHN0cmVhbXMsIHNvbWUgc2VydmVycyBhY2NlcHRlZCB0aGVuIGNsb3NlZCB2ZXJ5IHF1aWNrbHlcbiAgICAgICAgICAgICAgICAgICAgLy9cdCh0aGF0J3Mgd2h5IHRoZSBzdGF0dXMgY2hhbmdlZCBidXQgdGhlcmUncyBubyBnb29kIHNlcnZlciB3aXRoIGEgU3RyZWFtSWQpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCB0aGUgb25DbG9zZWQgaGFuZGxlcnNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsb3NlcnNDb3VudCA9IHN1YnNjcmlwdGlvbi5xdWV1ZWQuY2xvc2Vycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjbG9zaW5nU2VydmVyID0gKGNsb3NlcnNDb3VudCA+IDApID8gc3Vic2NyaXB0aW9uLnF1ZXVlZC5jbG9zZXJzW2Nsb3NlcnNDb3VudCAtIDFdIDogbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uaGFuZGxlcnMub25DbG9zZWQuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IE9OX0NMT1NFX01TR19TRVJWRVJfSU5JVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFyZ3VtZW50czogc3Vic2NyaXB0aW9uLmFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyOiBjbG9zaW5nU2VydmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW06IHN1YnNjcmlwdGlvbi5tZXRob2RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc0xpc3Rbc3Vic2NyaXB0aW9uSWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGltZW91dCk7XG5cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbnNMaXN0W3N1YnNjcmlwdGlvbklkXVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQdWJsaXNoZXJNc2cobXNnKSB7XG4gICAgICAgIGlmICghKG1zZyAmJiBtc2cuRXZlbnRTdHJlYW1BY3Rpb24gJiYgbXNnLkV2ZW50U3RyZWFtQWN0aW9uICE9PSAwKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1zZy5FdmVudFN0cmVhbUFjdGlvbiA9PT0gMikge1xuXG4gICAgICAgICAgICBzZXJ2ZXJJc0tpY2tpbmdBU3Vic2NyaWJlcihtc2cpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAobXNnLkV2ZW50U3RyZWFtQWN0aW9uID09PSAzKSB7XG5cbiAgICAgICAgICAgIHNlcnZlckFja25vd2xlZGdlc0dvb2RTdWJzY3JpcHRpb24obXNnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKG1zZy5FdmVudFN0cmVhbUFjdGlvbiA9PT0gNSkge1xuXG4gICAgICAgICAgICBzZXJ2ZXJIYXNQdXNoZWRTb21lRGF0YUludG9UaGVTdHJlYW0obXNnKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqIG1zZyAnUmVzcG9uc2UnIEFjdGlvbnMgKi9cbiAgICAvLyBhY3Rpb24gMlxuICAgIGZ1bmN0aW9uIHNlcnZlcklzS2lja2luZ0FTdWJzY3JpYmVyKG1zZykge1xuICAgICAgICAvLyBOb3RlOiB0aGlzIG1pZ2h0IGJlIGVpdGhlciB0aGUgc2VydmVyIHJlamVjdGluZyBhIHN1YnNjcmlwdGlvbiByZXF1ZXN0IE9SIGNsb3NpbmcgYW4gZXhpc3Rpbmcgc3Vic2NyaXB0aW9uXG5cbiAgICAgICAgLy8gR2V0IEFMTCBzdWJzY3JpcHRpb25zXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3Vic2NyaXB0aW9uc0xpc3QpO1xuXG4gICAgICAgIC8vIElmIGl0IGlzIGEgcmVqZWN0aW9uIHRoZXJlIG1heSBiZSBhbiBJbnZvY2F0aW9uSWQsIGl0IGNhbiBuYXJyb3cgdGhlIHNlYXJjaFxuICAgICAgICBpZiAodHlwZW9mIG1zZy5JbnZvY2F0aW9uSWQgPT09ICdzdHJpbmcnICYmIG1zZy5JbnZvY2F0aW9uSWQgIT09ICcnKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gayA9PT0gbXNnLkludm9jYXRpb25JZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVsZXRpb25zTGlzdCA9IFtdO1xuXG4gICAgICAgIC8vIEZpbmQgdGhlIGtpY2tpbmcvcmVqZWN0aW5nIHNlcnZlciBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHN1YnNjcmlwdGlvbi50cmFja2VkU2VydmVyc1tdXG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbnNMaXN0W2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zTGlzdFtrZXldLnRyYWNrZWRTZXJ2ZXJzID0gc3Vic2NyaXB0aW9uc0xpc3Rba2V5XS50cmFja2VkU2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKHNlcnZlcikge1xuICAgICAgICAgICAgICAgIHZhciBpc1JlamVjdGluZyA9IChcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyLm1ldGhvZFJlcXVlc3RTdWJqZWN0ID09PSBtc2cuTWV0aG9kUmVxdWVzdFN1YmplY3QgJiYgc2VydmVyLm1ldGhvZFJlc3BvbnNlU3ViamVjdCA9PT0gbXNnLk1ldGhvZFJlc3BvbnNlU3ViamVjdFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB2YXIgaXNLaWNraW5nID0gKFxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXIuc3RyZWFtSWQgPT09IG1zZy5TdHJlYW1JZCAmJlxuICAgICAgICAgICAgICAgICAgICAoc2VydmVyLnN0cmVhbVN1YmplY3RzLmdsb2JhbCA9PT0gbXNnLkV2ZW50U3RyZWFtU3ViamVjdCB8fCBzZXJ2ZXIuc3RyZWFtU3ViamVjdHMucHJpdmF0ZSA9PT0gbXNnLkV2ZW50U3RyZWFtU3ViamVjdClcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgdmFyIGlzUmVqZWN0aW5nT3JLaWNraW5nID0gaXNSZWplY3RpbmcgfHwgaXNLaWNraW5nO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICFpc1JlamVjdGluZ09yS2lja2luZztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uc0xpc3Rba2V5XS50cmFja2VkU2VydmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBkZWxldGlvbnNMaXN0LnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2FsbCBvbkNsb3NlZCBPUiBlcnJvcigpXG4gICAgICAgIC8vIGFuZCByZW1vdmUgdGhlIHN1YnNjcmlwdGlvblxuICAgICAgICBkZWxldGlvbnNMaXN0LmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb25zTGlzdFtrZXldICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNMaXN0W2tleV0uc3RhdHVzID09PSBTVEFUVVNfQVdBSVRJTkdfQUNDRVBUICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHN1YnNjcmlwdGlvbnNMaXN0W2tleV0udGltZW91dElkID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVhc29uID0gKHR5cGVvZiBtc2cuUmVzdWx0TWVzc2FnZSA9PT0gJ3N0cmluZycgJiYgbXNnLlJlc3VsdE1lc3NhZ2UgIT09ICcnKVxuICAgICAgICAgICAgICAgICAgICA/ICcgUHVibGlzaGVyIHNhaWQgXCInICsgbXNnLlJlc3VsdE1lc3NhZ2UgKyAnXCIuJ1xuICAgICAgICAgICAgICAgICAgICA6ICcgTm8gcmVhc29uIGdpdmVuLic7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2FsbEFyZ3MgPSB0eXBlb2Ygc3Vic2NyaXB0aW9uc0xpc3Rba2V5XS5hcmd1bWVudHMgPT09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkoc3Vic2NyaXB0aW9uc0xpc3Rba2V5XS5hcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgICAgIDogJ3t9JztcblxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNMaXN0W2tleV0uZXJyb3IoRVJSX01TR19TVUJfUkVKRUNURUQgKyByZWFzb24gKyAnIENhbGxlZCB3aXRoOicgKyBjYWxsQXJncyk7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHN1YnNjcmlwdGlvbnNMaXN0W2tleV0udGltZW91dElkKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIC8vIFRoZSB0aW1lb3V0IG1heSBvciBtYXkgbm90IGhhdmUgZXhwaXJlZCB5ZXQsXG4gICAgICAgICAgICAgICAgLy8gYnV0IHRoZSBzdGF0dXMgaXMgJ3N1YnNjcmliZWQnIGFuZCB0cmFja2VkU2VydmVycyBpcyBub3cgZW1wdHlcblxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNMaXN0W2tleV0uaGFuZGxlcnMub25DbG9zZWQuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogT05fQ0xPU0VfTVNHX1NFUlZFUl9JTklULFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFyZ3VtZW50czogc3Vic2NyaXB0aW9uc0xpc3Rba2V5XS5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXI6IGhlbHBlcnMuY29udmVydEluZm9Ub0luc3RhbmNlKG1zZy5TZXJ2ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBzdWJzY3JpcHRpb25zTGlzdFtrZXldLm1ldGhvZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc0xpc3Rba2V5XTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBhY3Rpb24gM1xuICAgIGZ1bmN0aW9uIHNlcnZlckFja25vd2xlZGdlc0dvb2RTdWJzY3JpcHRpb24obXNnKSB7XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbklkID0gbXNnLkludm9jYXRpb25JZDtcblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uc0xpc3Rbc3Vic2NyaXB0aW9uSWRdO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9uICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjY2VwdGluZ1NlcnZlciA9IHN1YnNjcmlwdGlvbi50cmFja2VkU2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKHNlcnZlcikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBzZXJ2ZXIubWV0aG9kUmVxdWVzdFN1YmplY3QgPT09IG1zZy5NZXRob2RSZXF1ZXN0U3ViamVjdCAmJlxuICAgICAgICAgICAgICAgIHNlcnZlci5tZXRob2RSZXNwb25zZVN1YmplY3QgPT09IG1zZy5NZXRob2RSZXNwb25zZVN1YmplY3RcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlbMF07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhY2NlcHRpbmdTZXJ2ZXIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNGaXJzdFJlc3BvbnNlID0gKHN1YnNjcmlwdGlvbi5zdGF0dXMgPT09IFNUQVRVU19BV0FJVElOR19BQ0NFUFQpO1xuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5zdGF0dXMgPSBTVEFUVVNfU1VCU0NSSUJFRDtcblxuICAgICAgICB2YXIgcHJpdmF0ZVN0cmVhbVN1YmplY3QgPSBnZW5lcmF0ZVByaXZhdGVTdHJlYW1TdWJqZWN0KHN1YnNjcmlwdGlvbi5tZXRob2QubmFtZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhY2NlcHRpbmdTZXJ2ZXIuc3RyZWFtSWQgPT09ICdzdHJpbmcnICYmIGFjY2VwdGluZ1NlcnZlci5zdHJlYW1JZCAhPT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gYWxyZWFkeSBhY2NlcHRlZCBwcmV2aW91c2x5XG4gICAgICAgIH1cblxuICAgICAgICBhY2NlcHRpbmdTZXJ2ZXIuc2VydmVyID0gaGVscGVycy5jb252ZXJ0SW5mb1RvSW5zdGFuY2UobXNnLlNlcnZlcik7XG4gICAgICAgIGFjY2VwdGluZ1NlcnZlci5zdHJlYW1JZCA9IG1zZy5TdHJlYW1JZDtcbiAgICAgICAgYWNjZXB0aW5nU2VydmVyLnN0cmVhbVN1YmplY3RzLmdsb2JhbCA9IG1zZy5FdmVudFN0cmVhbVN1YmplY3Q7XG4gICAgICAgIGFjY2VwdGluZ1NlcnZlci5zdHJlYW1TdWJqZWN0cy5wcml2YXRlID0gcHJpdmF0ZVN0cmVhbVN1YmplY3Q7XG4gICAgICAgIC8vIGFjY2VwdGluZ1NlcnZlci5tZXRob2RSZXNwb25zZVN1YmplY3Qgc3RheXMgdGhlIHNhbWVcblxuICAgICAgICB2YXIgY29uZmlybWF0b3J5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgIEV2ZW50U3RyZWFtQWN0aW9uOiAzLCAvLyBcIlN1YnNjcmliZWRcIiA9IGNsaWVudCBjb25maXJtcyBpbnRlbnRpb24gdG8gc3Vic2NyaWJlXG4gICAgICAgICAgICBFdmVudFN0cmVhbVN1YmplY3Q6IHByaXZhdGVTdHJlYW1TdWJqZWN0LFxuICAgICAgICAgICAgU3RyZWFtSWQ6IG1zZy5TdHJlYW1JZCxcbiAgICAgICAgICAgIE1ldGhvZFJlcXVlc3RTdWJqZWN0OiBtc2cuTWV0aG9kUmVxdWVzdFN1YmplY3QsXG4gICAgICAgICAgICBNZXRob2RSZXNwb25zZVN1YmplY3Q6IGFjY2VwdGluZ1NlcnZlci5tZXRob2RSZXNwb25zZVN1YmplY3QsXG4gICAgICAgICAgICBDbGllbnQ6IGluc3RhbmNlLmluZm8oKSxcbiAgICAgICAgICAgIENvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICBBcmd1bWVudHNKc29uOiBzdWJzY3JpcHRpb24uYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIE1ldGhvZE5hbWU6IHN1YnNjcmlwdGlvbi5tZXRob2QubmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbmRSZXF1ZXN0KGNvbmZpcm1hdG9yeVJlcXVlc3QpO1xuXG4gICAgICAgIGlmIChpc0ZpcnN0UmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vIFBhc3MgaW4gdGhlIHN1YnNjcmlwdGlvbiBvYmplY3RcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5zdWNjZXNzKHtcbiAgICAgICAgICAgICAgICBvbkRhdGE6IGZ1bmN0aW9uIChkYXRhQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBkYXRhIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi4nKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5vbkRhdGEucHVzaChkYXRhQ2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZXJzLm9uRGF0YS5sZW5ndGggPT09IDEgJiYgdGhpcy5xdWV1ZWQuZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlZC5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGFJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNhbGxiYWNrKGRhdGFJdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0uYmluZChzdWJzY3JpcHRpb24pLFxuICAgICAgICAgICAgICAgIG9uQ2xvc2VkOiBmdW5jdGlvbiAoY2xvc2VkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjbG9zZWRDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi4nKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMub25DbG9zZWQucHVzaChjbG9zZWRDYWxsYmFjaylcbiAgICAgICAgICAgICAgICB9LmJpbmQoc3Vic2NyaXB0aW9uKSxcbiAgICAgICAgICAgICAgICBvbkZhaWxlZDogZnVuY3Rpb24gKCkgeyAvKiBXaWxsIG5vdCBiZSBpbXBsZW1lbnRlZCBmb3IgYnJvd3Nlci4gKi9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsb3NlOiBjbG9zZVN1YnNjcmlwdGlvbi5iaW5kKHN1YnNjcmlwdGlvbiwgc3Vic2NyaXB0aW9uSWQpLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RBcmd1bWVudHM6IHN1YnNjcmlwdGlvbi5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc2VydmVySW5zdGFuY2U6IGhlbHBlcnMuY29udmVydEluZm9Ub0luc3RhbmNlKG1zZy5TZXJ2ZXIpLFxuICAgICAgICAgICAgICAgIHN0cmVhbTogc3Vic2NyaXB0aW9uLm1ldGhvZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhY3Rpb24gNVxuICAgIGZ1bmN0aW9uIHNlcnZlckhhc1B1c2hlZFNvbWVEYXRhSW50b1RoZVN0cmVhbShtc2cpIHtcblxuICAgICAgICAvLyBGaW5kIHRoZSBzdWJzY3JpcHRpb24gb2YgaW50ZXJlc3QgYnkgdHJhd2xpbmcgdGhlIGRpY3Rpb25hcnlcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHN1YnNjcmlwdGlvbnNMaXN0KSB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uc0xpc3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiB0eXBlb2Ygc3Vic2NyaXB0aW9uc0xpc3Rba2V5XSA9PT0gJ29iamVjdCcpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpc1ByaXZhdGVEYXRhO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRyYWNrZWRTZXJ2ZXJzRm91bmQgPSBzdWJzY3JpcHRpb25zTGlzdFtrZXldLnRyYWNrZWRTZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAobHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGxzLnN0cmVhbUlkID09PSBtc2cuU3RyZWFtSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChscy5zdHJlYW1TdWJqZWN0cy5nbG9iYWwgPT09IG1zZy5FdmVudFN0cmVhbVN1YmplY3QgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxzLnN0cmVhbVN1YmplY3RzLnByaXZhdGUgPT09IG1zZy5FdmVudFN0cmVhbVN1YmplY3QpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHJhY2tlZFNlcnZlcnNGb3VuZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaXNQcml2YXRlRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYWNrZWRTZXJ2ZXJzRm91bmRbMF0uc3RyZWFtU3ViamVjdHMuZ2xvYmFsID09PSBtc2cuRXZlbnRTdHJlYW1TdWJqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlzUHJpdmF0ZURhdGEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYWNrZWRTZXJ2ZXJzRm91bmRbMF0uc3RyZWFtU3ViamVjdHMucHJpdmF0ZSA9PT0gbXNnLkV2ZW50U3RyZWFtU3ViamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpc1ByaXZhdGVEYXRhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNQcml2YXRlRGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgYXJyaXZlZERhdGEgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWNlaXZlZFN0cmVhbURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBtc2cuUmVzdWx0Q29udGV4dEpzb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXI6IGhlbHBlcnMuY29udmVydEluZm9Ub0luc3RhbmNlKG1zZy5TZXJ2ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFyZ3VtZW50czogc3Vic2NyaXB0aW9uc0xpc3Rba2V5XS5hcmd1bWVudHMgfHwge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtc2cuUmVzdWx0TWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaXZhdGU6IGlzUHJpdmF0ZURhdGFcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgb25EYXRhSGFuZGxlcnMgPSBzdWJzY3JpcHRpb25zTGlzdFtrZXldLmhhbmRsZXJzLm9uRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXVlZERhdGEgPSBzdWJzY3JpcHRpb25zTGlzdFtrZXldLnF1ZXVlZC5kYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9uRGF0YUhhbmRsZXJzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uRGF0YUhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRhdGFIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZWNlaXZlZFN0cmVhbURhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZWREYXRhLnB1c2gocmVjZWl2ZWRTdHJlYW1EYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9Ly8gZW5kIGZvci1pblxuICAgIH1cblxuICAgIC8qKiAoc3Vic2NyaXB0aW9uKSBNZXRob2RzICovXG4gICAgZnVuY3Rpb24gY2xvc2VTdWJzY3JpcHRpb24oc3ViSWQpIHtcblxuICAgICAgICB2YXIgcmVzcG9uc2VTdWJqZWN0ID0gbmV4dFJlc3BvbnNlU3ViamVjdCgpO1xuXG4gICAgICAgIHRoaXMudHJhY2tlZFNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAoc2VydmVyKSB7XG4gICAgICAgICAgICBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgRXZlbnRTdHJlYW1BY3Rpb246IDIsXG4gICAgICAgICAgICAgICAgQ2xpZW50OiBpbnN0YW5jZS5pbmZvKCksXG4gICAgICAgICAgICAgICAgTWV0aG9kUmVxdWVzdFN1YmplY3Q6IHNlcnZlci5tZXRob2RSZXF1ZXN0U3ViamVjdCxcbiAgICAgICAgICAgICAgICBNZXRob2RSZXNwb25zZVN1YmplY3Q6IHJlc3BvbnNlU3ViamVjdCxcbiAgICAgICAgICAgICAgICBTdHJlYW1JZDogc2VydmVyLnN0cmVhbUlkLFxuICAgICAgICAgICAgICAgIEV2ZW50U3RyZWFtU3ViamVjdDogc2VydmVyLnN0cmVhbVN1YmplY3RzLnByaXZhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgc3ViID0gdGhpcztcblxuICAgICAgICAvLyBDYWxsIHRoZSBvbkNsb3NlZCBoYW5kbGVyc1xuICAgICAgICB0aGlzLmhhbmRsZXJzLm9uQ2xvc2VkLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBPTl9DTE9TRV9NU0dfQ0xJRU5UX0lOSVQsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBcmd1bWVudHM6IHN1Yi5hcmd1bWVudHMgfHwge30sXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlcjogc3ViLnRyYWNrZWRTZXJ2ZXJzW3N1Yi50cmFja2VkU2VydmVycy5sZW5ndGggLSAxXS5zZXJ2ZXIsIC8vIHRoZSBsYXN0IG9uZSBvZiBtdWx0aS1zZXJ2ZXIgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbTogc3ViLm1ldGhvZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zTGlzdFtzdWJJZF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVQcml2YXRlU3RyZWFtU3ViamVjdChtZXRob2ROYW1lKSB7XG5cbiAgICAgICAgdmFyIGFwcEluZm8gPSBpbnN0YW5jZS5pbmZvKCk7XG5cbiAgICAgICAgdmFyIHByaXZhdGVTdHJlYW1TdWJqZWN0ID0gJ0VTU3ByaXYtanNiXycgK1xuICAgICAgICAgICAgYXBwSW5mby5BcHBsaWNhdGlvbk5hbWUgK1xuICAgICAgICAgICAgJ19vbl8nICtcbiAgICAgICAgICAgIG1ldGhvZE5hbWUgK1xuICAgICAgICAgICAgJ18nICtcbiAgICAgICAgICAgIHJhbmRvbSgpO1xuXG4gICAgICAgIHJldHVybiBwcml2YXRlU3RyZWFtU3ViamVjdDtcbiAgICB9XG5cbiAgICByZXR1cm4geyAvLyBhbiBpbnN0YW5jZSBvZiB0aGUgc3RyZWFtaW5nIG1vZHVsZVxuICAgICAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICAgICAgcHJvY2Vzc1B1Ymxpc2hlck1zZzogcHJvY2Vzc1B1Ymxpc2hlck1zZ1xuICAgIH07XG59O1xuIiwidmFyIHJhbmRvbSA9IHJlcXVpcmUoJy4vLi4vLi4vaGVscGVycy9yYW5kb20nKTtcbnZhciBjYWxsYmFja1JlZ2lzdHJ5ID0gcmVxdWlyZSgnY2FsbGJhY2stcmVnaXN0cnknKTtcbnZhciBTdHJlYW1pbmcgPSByZXF1aXJlKCcuL2NsaWVudC1zdHJlYW1pbmcnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbm5lY3Rpb24sIGluc3RhbmNlLCBjb25maWd1cmF0aW9uLCByZXBvc2l0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciB0aW1lcnMgPSB7fTtcbiAgICB2YXIgcmVzcENvdW50ZXIgPSAwO1xuICAgIHZhciBjYWxsYmFja3MgPSBjYWxsYmFja1JlZ2lzdHJ5KCk7XG5cbiAgICB2YXIgc3RyZWFtaW5nID0gbmV3IFN0cmVhbWluZyhcbiAgICAgICAgY29uZmlndXJhdGlvbixcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoJ01ldGhvZEludm9jYXRpb25SZXF1ZXN0TWVzc2FnZScsIG0pXG4gICAgICAgIH0sXG4gICAgICAgIG5leHRSZXNwb25zZVN1YmplY3RcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbmV4dFJlc3BvbnNlU3ViamVjdCgpIHtcbiAgICAgICAgcmV0dXJuICdyZXNwXycgKyAocmVzcENvdW50ZXIrKykgKyAnXycgKyByYW5kb20oKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTZXJ2ZXJJbmZvKGluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYWNoaW5lOiBpbnN0YW5jZS5NYWNoaW5lTmFtZSxcbiAgICAgICAgICAgIHBpZDogaW5zdGFuY2UuUHJvY2Vzc0lkLFxuICAgICAgICAgICAgc3RhcnRlZDogaW5zdGFuY2UuUHJvY2Vzc1N0YXJ0VGltZSxcbiAgICAgICAgICAgIHVzZXI6IGluc3RhbmNlLlVzZXJOYW1lLFxuICAgICAgICAgICAgYXBwbGljYXRpb246IGluc3RhbmNlLkFwcGxpY2F0aW9uTmFtZSxcbiAgICAgICAgICAgIGVudmlyb25tZW50OiBpbnN0YW5jZS5FbnZpcm9ubWVudCxcbiAgICAgICAgICAgIHJlZ2lvbjogaW5zdGFuY2UuUmVnaW9uLFxuICAgICAgICAgICAgc2VydmljZV9uYW1lOiBpbnN0YW5jZS5TZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgIG1ldHJpY3NfcmVwb3NpdG9yeV9pZDogaW5zdGFuY2UuTWV0cmljc1JlcG9zaXRvcnlJZCxcbiAgICAgICAgICAgIHN0YXRlOiBpbnN0YW5jZS5TdGF0ZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZChtZXRob2RJbmZvKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBtZXRob2RJbmZvLk1ldGhvZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IG1ldGhvZC5OYW1lLFxuICAgICAgICAgICAgYWNjZXB0czogbWV0aG9kLklucHV0U2lnbmF0dXJlLFxuICAgICAgICAgICAgcmV0dXJuczogbWV0aG9kLlJlc3VsdFNpZ25hdHVyZSxcbiAgICAgICAgICAgIHJlcXVlc3RTdWJqZWN0OiBtZXRob2RJbmZvLk1ldGhvZFJlcXVlc3RTdWJqZWN0LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IG1ldGhvZC5EZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBtZXRob2QuRGlzcGxheU5hbWUsXG4gICAgICAgICAgICB2ZXJzaW9uOiBtZXRob2QuVmVyc2lvbixcbiAgICAgICAgICAgIG9iamVjdFR5cGVzOiBtZXRob2QuT2JqZWN0VHlwZVJlc3RyaWN0aW9ucyxcbiAgICAgICAgICAgIHN1cHBvcnRzU3RyZWFtaW5nOiBoZWxwZXJzLmlzU3RyZWFtaW5nRmxhZ1NldChtZXRob2QuRmxhZ3MpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGVzIGEgdW5pcXVlIElEIGZvciBhIHNlcnZlclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNlcnZlcklkKHNlcnZlckluZm8pIHtcbiAgICAgICAgaWYgKHNlcnZlckluZm8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbc2VydmVySW5mby5hcHBsaWNhdGlvbixcbiAgICAgICAgICAgIHNlcnZlckluZm8udXNlcixcbiAgICAgICAgICAgIHNlcnZlckluZm8ubWFjaGluZSxcbiAgICAgICAgICAgIHNlcnZlckluZm8uc3RhcnRlZCxcbiAgICAgICAgICAgIHNlcnZlckluZm8ucGlkXS5qb2luKCcvJykudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU2VydmVyUHJlc2VuY2UocHJlc2VuY2UsIGlzUHJlc2VuY2UpIHtcblxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBwcmVzZW5jZS5JbnN0YW5jZTtcbiAgICAgICAgdmFyIHNlcnZlckluZm8gPSBjcmVhdGVTZXJ2ZXJJbmZvKGluc3RhbmNlKTtcbiAgICAgICAgdmFyIHNlcnZlcklkID0gY3JlYXRlU2VydmVySWQoc2VydmVySW5mbyk7XG5cbiAgICAgICAgaWYgKGlzUHJlc2VuY2UpIHtcbiAgICAgICAgICAgIC8vIHRlc3RcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZGVidWcobmV3IERhdGUoKSwgJyAgaGVhcmQgcHJlc2VuY2UnKTtcbiAgICAgICAgICAgIC8vIGlmIChpbnN0YW5jZS5BcHBsaWNhdGlvbk5hbWUgPT09ICdEdW1teSBzZXJ2ZXInKSB7XG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5kZWJ1ZyhuZXcgRGF0ZSgpLCAnICBnb3QgRHVtbXkgc2VydmVyIHByZXNlbmNlJywgcHJlc2VuY2UpO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICBzZXJ2ZXJJZCA9IHJlcG9zaXRvcnkuYWRkU2VydmVyKHNlcnZlckluZm8sIHNlcnZlcklkKTtcblxuICAgICAgICAgICAgaWYgKHByZXNlbmNlLlB1Ymxpc2hpbmdJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlVGltZW91dChzZXJ2ZXJJZCwgcHJlc2VuY2UuUHVibGlzaGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmFsbHksIHVwZGF0ZSB0aGUgbWV0aG9kc1xuICAgICAgICBpZiAocHJlc2VuY2UuTWV0aG9kRGVmaW5pdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdXBkYXRlU2VydmVyTWV0aG9kcyhzZXJ2ZXJJZCwgcHJlc2VuY2UuTWV0aG9kRGVmaW5pdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBzZXRzIGEgdGltZW91dCB3aGljaCByZW1vdmVzIHRoZSBzZXJ2ZXIgdW5sZXNzIC0gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiBiZWZvcmUgdGhlIHRpbWVvdXQgaXMgb3ZlclxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlVGltZW91dChzZXJ2ZXJJZCwgZHVyYXRpb24pIHtcblxuICAgICAgICBpZiAoZHVyYXRpb24gPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RvcCB0aGUgcHJldmlvdXMgdGltZW91dFxuICAgICAgICB2YXIgdGltZXIgPSB0aW1lcnNbc2VydmVySWRdO1xuICAgICAgICBpZiAodGltZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBhIG5ldyBvbmVcbiAgICAgICAgdGltZXJzW3NlcnZlcklkXSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVwb3NpdG9yeS5yZW1vdmVTZXJ2ZXJCeUlkKHNlcnZlcklkKTtcbiAgICAgICAgfSwgZHVyYXRpb24gKiAoY29uZmlndXJhdGlvbi5jbGllbnQucmVtb3ZlX3NlcnZlcl9vbl9uX21pc3NpbmdfaGVhcnRiZWF0cyArIDEpKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGVzIHRoZSBtZXRob2RzIG9mIGEgc2VydmVyXG4gICAgZnVuY3Rpb24gdXBkYXRlU2VydmVyTWV0aG9kcyhzZXJ2ZXJJZCwgbmV3TWV0aG9kcykge1xuXG4gICAgICAgIC8vIEdldCBhbiBhcnJheSBvZiB0aGUgbWV0aG9kcyB0aGUgc2VydmVyIGhhZCBiZWZvcmUgd2Ugc3RhcnRlZCB0aGlzXG4gICAgICAgIHZhciBvbGRNZXRob2RzID0gcmVwb3NpdG9yeS5nZXRTZXJ2ZXJNZXRob2RzQnlJZChzZXJ2ZXJJZCk7XG5cbiAgICAgICAgLy8gR2V0IGFuIGFycmF5IG9mIHRoZSBtZXRob2RzIHRoYXQgdGhlIHNlcnZlciBoYXMgbm93XG4gICAgICAgIG5ld01ldGhvZHMgPSBuZXdNZXRob2RzLm1hcChjcmVhdGVNZXRob2QpLnJlZHVjZShmdW5jdGlvbiAob2JqLCBtZXRob2QpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2RJZCA9IHJlcG9zaXRvcnkuZ2V0TWV0aG9kSWQobWV0aG9kKTtcbiAgICAgICAgICAgIG9ialttZXRob2RJZF0gPSBtZXRob2Q7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9LCB7fSk7XG5cbiAgICAgICAgLy8gRm9yIGVhY2ggb2YgdGhlIG9sZCBtZXRob2RzXG4gICAgICAgIE9iamVjdC5rZXlzKG9sZE1ldGhvZHMpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZElkKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gb2xkTWV0aG9kc1ttZXRob2RJZF07XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBpdCBpcyBzdGlsbCB0aGVyZVxuICAgICAgICAgICAgaWYgKG5ld01ldGhvZHNbbWV0aG9kLmlkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQgaXNuJ3QsIHJlbW92ZSBpdFxuICAgICAgICAgICAgICAgIHJlcG9zaXRvcnkucmVtb3ZlU2VydmVyTWV0aG9kKHNlcnZlcklkLCBtZXRob2QuaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBpdCBpcyB0aGVyZSBpbiBib3RoIHRoZSBvbGQgYXJyYXkgYW5kIHRoZSBuZXcgb25lLCB3ZSBkb24ndCBuZWVkIHRvIGFkZCBpdCBhZ2FpblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBuZXdNZXRob2RzW21ldGhvZC5pZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBOb3cgYWRkIHRoZSBuZXcgbWV0aG9kc1xuICAgICAgICBPYmplY3Qua2V5cyhuZXdNZXRob2RzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBuZXdNZXRob2RzW2tleV07XG4gICAgICAgICAgICByZXBvc2l0b3J5LmFkZFNlcnZlck1ldGhvZChzZXJ2ZXJJZCwgbWV0aG9kKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52b2tlKGlkLCBtZXRob2QsIGFyZ3MsIHRhcmdldCwgc3R1ZmYpIHtcblxuICAgICAgICB2YXIgbWV0aG9kSW5mbyA9IG1ldGhvZC5pbmZvO1xuICAgICAgICAvLyBDb25zdHJ1Y3QgYSBtZXNzYWdlXG4gICAgICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgICAgICAgTWV0aG9kUmVxdWVzdFN1YmplY3Q6IG1ldGhvZEluZm8ucmVxdWVzdFN1YmplY3QsXG4gICAgICAgICAgICBNZXRob2RSZXNwb25zZVN1YmplY3Q6IG5leHRSZXNwb25zZVN1YmplY3QoKSxcbiAgICAgICAgICAgIENsaWVudDogaW5zdGFuY2UuaW5mbygpLFxuICAgICAgICAgICAgQ29udGV4dDoge1xuICAgICAgICAgICAgICAgIEFyZ3VtZW50c0pzb246IGFyZ3MsXG4gICAgICAgICAgICAgICAgSW52b2NhdGlvbklkOiBpZCxcbiAgICAgICAgICAgICAgICBPYmplY3RUeXBlOiBzdHVmZi5vYmplY3RfdHlwZSxcbiAgICAgICAgICAgICAgICBEaXNwbGF5Q29udGV4dDogc3R1ZmYuZGlzcGxheV9jb250ZXh0LFxuICAgICAgICAgICAgICAgIE1ldGhvZE5hbWU6IG1ldGhvZEluZm8ubmFtZSxcbiAgICAgICAgICAgICAgICBFeGVjdXRpb25TZXJ2ZXI6IHRhcmdldC5pbmZvLFxuICAgICAgICAgICAgICAgIFRpbWVvdXQ6IHN0dWZmLm1ldGhvZF9yZXNwb25zZV90aW1lb3V0XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29ubmVjdGlvbi5zZW5kKCdNZXRob2RJbnZvY2F0aW9uUmVxdWVzdE1lc3NhZ2UnLCBtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVJbnZva2VSZXN1bHRNZXNzYWdlKG1lc3NhZ2UpIHtcblxuICAgICAgICAvLyBEZWxlZ2F0ZSBzdHJlYW1pbmctcmVsYXRlZCBtZXNzYWdlcyB0byBzdHJlYW1pbmdcbiAgICAgICAgaWYgKG1lc3NhZ2UgJiYgbWVzc2FnZS5FdmVudFN0cmVhbUFjdGlvbiAmJiBtZXNzYWdlLkV2ZW50U3RyZWFtQWN0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICBzdHJlYW1pbmcucHJvY2Vzc1B1Ymxpc2hlck1zZyhtZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXJ2ZXIgPSBtZXNzYWdlLlNlcnZlciA/IGNyZWF0ZVNlcnZlckluZm8obWVzc2FnZS5TZXJ2ZXIpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIHBhcnNlIHRoZSByZXN1bHRcbiAgICAgICAgdmFyIHJlc3VsdCA9IG1lc3NhZ2UuUmVzdWx0Q29udGV4dEpzb247XG4gICAgICAgIC8vIElmIHRoZSByZXN1bHQgaXMgYW4gZW1wdHkgb2JqZWN0LCB0aGVyZSBpcyBubyByZXN1bHRcbiAgICAgICAgaWYgKHJlc3VsdCAmJiBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2tzLmV4ZWN1dGUoJ29uUmVzdWx0JywgbWVzc2FnZS5JbnZvY2F0aW9uSWQsIHNlcnZlciwgbWVzc2FnZS5TdGF0dXMsIHJlc3VsdCwgbWVzc2FnZS5SZXN1bHRNZXNzYWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkludm9jYXRpb25SZXN1bHQoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2tzLmFkZCgnb25SZXN1bHQnLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdGVuRm9yRXZlbnRzKCkge1xuICAgICAgICBjb25uZWN0aW9uLm9uKCdTZXJ2ZXJQcmVzZW5jZU1lc3NhZ2UnLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgICAgICBwcm9jZXNzU2VydmVyUHJlc2VuY2UobXNnLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbm5lY3Rpb24ub24oJ1NlcnZlckhlYXJ0YmVhdE1lc3NhZ2UnLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgICAgICBwcm9jZXNzU2VydmVyUHJlc2VuY2UobXNnLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25uZWN0aW9uLm9uKCdNZXRob2RJbnZvY2F0aW9uUmVzdWx0TWVzc2FnZScsIGhhbmRsZUludm9rZVJlc3VsdE1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGxpc3RlbkZvckV2ZW50cygpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW52b2tlOiBpbnZva2UsXG4gICAgICAgIG9uSW52b2NhdGlvblJlc3VsdDogb25JbnZvY2F0aW9uUmVzdWx0LFxuICAgICAgICBzdWJzY3JpYmU6IHN0cmVhbWluZy5zdWJzY3JpYmVcbiAgICB9XG59O1xuIiwiLypcbiogSGVscGVyIGZ1bmN0aW9ucyB1c2VkIG9ubHkgaW4gdGhpcyBwcm90b2NvbC5cbiogKi9cblxuZnVuY3Rpb24gY29udmVydEluZm9Ub0luc3RhbmNlKGluZm8pIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBpZiAodHlwZW9mIGluZm8gIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGluZm8gPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhcHBsaWNhdGlvbjogaW5mby5BcHBsaWNhdGlvbk5hbWUsXG4gICAgICAgIGVudmlyb25tZW50OiBpbmZvLkVudmlyb25tZW50LFxuICAgICAgICBtYWNoaW5lOiBpbmZvLk1hY2hpbmVOYW1lLFxuICAgICAgICBwaWQ6IGluZm8uUHJvY2Vzc0lkLFxuICAgICAgICByZWdpb246IGluZm8uUmVnaW9uLFxuICAgICAgICBzZXJ2aWNlOiBpbmZvLlNlcnZpY2VOYW1lLFxuICAgICAgICB1c2VyOiBpbmZvLlVzZXJOYW1lLFxuICAgICAgICBzdGFydGVkOiBpbmZvLlByb2Nlc3NTdGFydFRpbWVcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzU3RyZWFtaW5nRmxhZ1NldChmbGFncykge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGlmICh0eXBlb2YgZmxhZ3MgIT09ICdudW1iZXInIHx8IGlzTmFOKGZsYWdzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gY2hlY2tpbmcgdGhlIGxhcmdlc3QgQml0IHVzaW5nIGJpdHdpc2Ugb3BzXG4gICAgdmFyIG1hc2sgPSAzMjtcbiAgICB2YXIgcmVzdWx0ID0gZmxhZ3MgJiBtYXNrO1xuXG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gbWFzaztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAge1xuICAgIGlzU3RyZWFtaW5nRmxhZ1NldDogaXNTdHJlYW1pbmdGbGFnU2V0LFxuICAgIGNvbnZlcnRJbmZvVG9JbnN0YW5jZTogY29udmVydEluZm9Ub0luc3RhbmNlXG59O1xuIiwidmFyIFNlcnZlclByb3RvY29sID0gcmVxdWlyZSgnLi9zZXJ2ZXIuanMnKTtcbnZhciBDbGllbnRQcm90b2NvbCA9IHJlcXVpcmUoJy4vY2xpZW50LmpzJyk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2VzNi1wcm9taXNlJykuUHJvbWlzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGNvbm5lY3Rpb24sIHJlcG9zaXRvcnksIHZhdWx0LCBjb25maWd1cmF0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGNvbm5lY3Rpb24ub24oJ0luc3RhbmNlJywgaW5zdGFuY2UuX3VwZGF0ZUlkZW50aXR5KTtcblxuICAgIHZhciBzZXJ2ZXJQcm90b2NvbCA9IG5ldyBTZXJ2ZXJQcm90b2NvbChjb25uZWN0aW9uLCBpbnN0YW5jZSwgY29uZmlndXJhdGlvbiwgdmF1bHQpO1xuICAgIHZhciBjbGllbnRQcm90b2NvbCA9IG5ldyBDbGllbnRQcm90b2NvbChjb25uZWN0aW9uLCBpbnN0YW5jZSwgY29uZmlndXJhdGlvbiwgcmVwb3NpdG9yeSk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblxuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgIC8vIG1ldGhvZC1yZWxhdGVkXG4gICAgICAgICAgICBpbnZva2U6IGNsaWVudFByb3RvY29sLmludm9rZSxcbiAgICAgICAgICAgIG9uSW52b2NhdGlvblJlc3VsdDogY2xpZW50UHJvdG9jb2wub25JbnZvY2F0aW9uUmVzdWx0LFxuICAgICAgICAgICAgcmVnaXN0ZXI6IHNlcnZlclByb3RvY29sLnJlZ2lzdGVyLFxuICAgICAgICAgICAgdW5yZWdpc3Rlcjogc2VydmVyUHJvdG9jb2wudW5yZWdpc3RlcixcbiAgICAgICAgICAgIG9uSW52b2tlZDogc2VydmVyUHJvdG9jb2wub25JbnZva2VkLFxuICAgICAgICAgICAgbWV0aG9kSW52b2NhdGlvblJlc3VsdDogc2VydmVyUHJvdG9jb2wubWV0aG9kSW52b2NhdGlvblJlc3VsdCxcblxuICAgICAgICAgICAgLy8gc3RyZWFtLXJlbGF0ZWRcbiAgICAgICAgICAgIHN1YnNjcmliZTogY2xpZW50UHJvdG9jb2wuc3Vic2NyaWJlLFxuICAgICAgICAgICAgY3JlYXRlU3RyZWFtOiBzZXJ2ZXJQcm90b2NvbC5jcmVhdGVTdHJlYW0sXG4gICAgICAgICAgICBnZXRCcmFuY2hMaXN0OiBzZXJ2ZXJQcm90b2NvbC5nZXRCcmFuY2hMaXN0LFxuICAgICAgICAgICAgZ2V0U3Vic2NyaXB0aW9uTGlzdDogc2VydmVyUHJvdG9jb2wuZ2V0U3Vic2NyaXB0aW9uTGlzdCxcbiAgICAgICAgICAgIGNsb3NlQWxsU3Vic2NyaXB0aW9uczogc2VydmVyUHJvdG9jb2wuY2xvc2VBbGxTdWJzY3JpcHRpb25zLFxuICAgICAgICAgICAgY2xvc2VTaW5nbGVTdWJzY3JpcHRpb246IHNlcnZlclByb3RvY29sLmNsb3NlU2luZ2xlU3Vic2NyaXB0aW9uLFxuICAgICAgICAgICAgcHVzaERhdGE6IHNlcnZlclByb3RvY29sLnB1c2hEYXRhLFxuICAgICAgICAgICAgcHVzaERhdGFUb1NpbmdsZTogc2VydmVyUHJvdG9jb2wucHVzaERhdGFUb1NpbmdsZSxcbiAgICAgICAgICAgIG9uU3ViUmVxdWVzdDogc2VydmVyUHJvdG9jb2wub25TdWJSZXF1ZXN0LFxuICAgICAgICAgICAgYWNjZXB0UmVxdWVzdE9uQnJhbmNoOiBzZXJ2ZXJQcm90b2NvbC5hY2NlcHRSZXF1ZXN0T25CcmFuY2gsXG4gICAgICAgICAgICByZWplY3RSZXF1ZXN0OiBzZXJ2ZXJQcm90b2NvbC5yZWplY3RSZXF1ZXN0LFxuICAgICAgICAgICAgb25TdWJBZGRlZDogc2VydmVyUHJvdG9jb2wub25TdWJBZGRlZCxcbiAgICAgICAgICAgIG9uU3ViUmVtb3ZlZDogc2VydmVyUHJvdG9jb2wub25TdWJSZW1vdmVkXG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbiIsInZhciByYW5kb20gPSByZXF1aXJlKCcuLy4uLy4uL2hlbHBlcnMvcmFuZG9tJyk7XG4vLyBUT0RPIHVzZSBDYWxsYmFja3MgPSByZXF1aXJlKH4pXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBpbnN0YW5jZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvLyBUT0RPIGV4dHJhY3QgdGhlc2UgaW50byBDYWxsYmFja3NcbiAgICB2YXIgcmVxdWVzdEhhbmRsZXIgPSBudWxsO1xuICAgIHZhciBzdWJBZGRlZEhhbmRsZXIgPSBudWxsO1xuICAgIHZhciBzdWJSZW1vdmVkSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBzZW5kUmVzdWx0KG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1lc3NhZ2UuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UuU3RhdHVzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgbWVzc2FnZS5TdGF0dXMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29ubmVjdGlvbi5zZW5kKCdNZXRob2RJbnZvY2F0aW9uUmVzdWx0TWVzc2FnZScsIG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU3RyZWFtTXNnRm9yU3RyZWFtaW5nTWV0aG9kKG1zZywgbWV0aG9kKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBtc2cgJiZcbiAgICAgICAgICAgIG1zZy5FdmVudFN0cmVhbUFjdGlvbiAmJlxuICAgICAgICAgICAgbXNnLkV2ZW50U3RyZWFtQWN0aW9uICE9PSAwICYmXG4gICAgICAgICAgICB0eXBlb2YgbWV0aG9kID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgbWV0aG9kLmRlZmluaXRpb24uc3VwcG9ydHNTdHJlYW1pbmcgPT09IHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU3Vic2NyaWJlck1zZyhtc2csIHN0cmVhbWluZ01ldGhvZCkge1xuICAgICAgICBpZiAoIShtc2cgJiYgbXNnLkV2ZW50U3RyZWFtQWN0aW9uICYmIG1zZy5FdmVudFN0cmVhbUFjdGlvbiAhPT0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtc2cuRXZlbnRTdHJlYW1BY3Rpb24gPT09IDEpIHtcbiAgICAgICAgICAgIGNsaWVudFdpc2hlc1RvU3Vic2NyaWJlKG1zZywgc3RyZWFtaW5nTWV0aG9kKTtcblxuICAgICAgICB9IGVsc2UgaWYgKG1zZy5FdmVudFN0cmVhbUFjdGlvbiA9PT0gMikge1xuICAgICAgICAgICAgY2xpZW50V2lzaGVzVG9VbnN1YnNjcmliZShtc2csIHN0cmVhbWluZ01ldGhvZCk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChtc2cuRXZlbnRTdHJlYW1BY3Rpb24gPT09IDMpIHtcbiAgICAgICAgICAgIGNsaWVudEFja25vd2xlZGdlc0l0RGlkU3Vic2NyaWJlKG1zZywgc3RyZWFtaW5nTWV0aG9kKTtcblxuICAgICAgICB9IGVsc2UgaWYgKG1zZy5FdmVudFN0cmVhbUFjdGlvbiA9PT0gNCkge1xuICAgICAgICAgICAgY2xpZW50UGVyU3ViSGVhcnRiZWF0KG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogbXNnICdSZXF1ZXN0JyBBY3Rpb25zICovXG4gICAgLy8gYWN0aW9uIDFcbiAgICBmdW5jdGlvbiBjbGllbnRXaXNoZXNUb1N1YnNjcmliZShtc2csIHN0cmVhbWluZ01ldGhvZCkge1xuXG4gICAgICAgIHZhciByZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgICAgIG1zZzogbXNnLFxuICAgICAgICAgICAgYXJndW1lbnRzOiBtc2cuQ29udGV4dC5Bcmd1bWVudHNKc29uIHx8IHt9LFxuICAgICAgICAgICAgaW5zdGFuY2U6IGhlbHBlcnMuY29udmVydEluZm9Ub0luc3RhbmNlKG1zZy5DbGllbnQpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0SGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXIocmVxdWVzdENvbnRleHQsIHN0cmVhbWluZ01ldGhvZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhY3Rpb24gMlxuICAgIGZ1bmN0aW9uIGNsaWVudFdpc2hlc1RvVW5zdWJzY3JpYmUobXNnLCBzdHJlYW1pbmdNZXRob2QpIHtcblxuICAgICAgICBpZiAoIShcbiAgICAgICAgICAgIHN0cmVhbWluZ01ldGhvZCAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9ucykgJiZcbiAgICAgICAgICAgIHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zLmxlbmd0aCA+IDApXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xvc2VJbmRpdmlkdWFsU3Vic2NyaXB0aW9uKHN0cmVhbWluZ01ldGhvZCwgbXNnLlN0cmVhbUlkLCBtc2cuRXZlbnRTdHJlYW1TdWJqZWN0LCBmYWxzZSlcbiAgICB9XG5cbiAgICAvLyBhY3Rpb24gM1xuICAgIGZ1bmN0aW9uIGNsaWVudEFja25vd2xlZGdlc0l0RGlkU3Vic2NyaWJlKG1zZywgc3RyZWFtaW5nTWV0aG9kKSB7XG4gICAgICAgIC8vIENsaWVudCBpbmRpY2F0ZXMgaXQgaXMgbGlzdGVuaW5nIHRvIGEgc3BlY2lmaWMgU3RyZWFtSWRcblxuICAgICAgICBpZiAodHlwZW9mIG1zZy5TdHJlYW1JZCAhPT0gJ3N0cmluZycgfHwgbXNnLlN0cmVhbUlkID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJyYW5jaEtleSA9IGdldEJyYW5jaEtleShzdHJlYW1pbmdNZXRob2QsIG1zZy5TdHJlYW1JZCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBicmFuY2hLZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3RyZWFtaW5nTWV0aG9kLnN1YnNjcmlwdGlvbnMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgICAgICAgICAgYnJhbmNoS2V5OiBicmFuY2hLZXksXG4gICAgICAgICAgICBpbnN0YW5jZTogaGVscGVycy5jb252ZXJ0SW5mb1RvSW5zdGFuY2UobXNnLkNsaWVudCksXG4gICAgICAgICAgICBhcmd1bWVudHM6IG1zZy5Db250ZXh0LkFyZ3VtZW50c0pzb24sXG4gICAgICAgICAgICBzdHJlYW1JZDogbXNnLlN0cmVhbUlkLFxuICAgICAgICAgICAgcHJpdmF0ZUV2ZW50U3RyZWFtU3ViamVjdDogbXNnLkV2ZW50U3RyZWFtU3ViamVjdCxcbiAgICAgICAgICAgIG1ldGhvZFJlc3BvbnNlU3ViamVjdDogbXNnLk1ldGhvZFJlc3BvbnNlU3ViamVjdFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFN1YnNjcmlwdGlvbiBiYWNrLW9iaiBpcyBzdG9yZWRcbiAgICAgICAgc3RyZWFtaW5nTWV0aG9kLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3ViQWRkZWRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdWJBZGRlZEhhbmRsZXIoc3Vic2NyaXB0aW9uLCBzdHJlYW1pbmdNZXRob2QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWN0aW9uIDRcbiAgICBmdW5jdGlvbiBjbGllbnRQZXJTdWJIZWFydGJlYXQoKSB7XG4gICAgICAgIC8vIEEgY2xpZW50IG1heSBoYXZlIG11bHRpcGxlIHN1YnNjcmlwdGlvbnMsIGVhY2ggb25lIGhhdmluZyBpdHMgb3duIGhlYXJ0YmVhdFxuICAgICAgICAvLyBDdXJyZW50bHkgbm90IGltcGxlbWVudGVkIGJ5IHRoZSBHVyBvciB0aGUgY2xpZW50XG4gICAgfVxuXG5cbiAgICAvKiogKHJlcXVlc3QpIE1ldGhvZHMgKi9cbiAgICBmdW5jdGlvbiBhY2NlcHRSZXF1ZXN0T25CcmFuY2gocmVxdWVzdENvbnRleHQsIHN0cmVhbWluZ01ldGhvZCwgYnJhbmNoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYnJhbmNoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnJhbmNoID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RyZWFtSWQgPSBnZXRTdHJlYW1JZChzdHJlYW1pbmdNZXRob2QsIGJyYW5jaCk7XG5cbiAgICAgICAgdmFyIG1zZyA9IHJlcXVlc3RDb250ZXh0Lm1zZztcblxuICAgICAgICBzZW5kUmVzdWx0KHtcbiAgICAgICAgICAgIEV2ZW50U3RyZWFtQWN0aW9uOiAzLFxuICAgICAgICAgICAgRXZlbnRTdHJlYW1TdWJqZWN0OiBzdHJlYW1pbmdNZXRob2QuZ2xvYmFsRXZlbnRTdHJlYW1TdWJqZWN0LFxuICAgICAgICAgICAgSW52b2NhdGlvbklkOiBtc2cuQ29udGV4dC5JbnZvY2F0aW9uSWQsXG4gICAgICAgICAgICBNZXRob2ROYW1lOiBzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZC5OYW1lLFxuICAgICAgICAgICAgTWV0aG9kUmVxdWVzdFN1YmplY3Q6IHN0cmVhbWluZ01ldGhvZC5tZXRob2QuTWV0aG9kUmVxdWVzdFN1YmplY3QsXG4gICAgICAgICAgICBNZXRob2RSZXNwb25zZVN1YmplY3Q6IG1zZy5NZXRob2RSZXNwb25zZVN1YmplY3QsXG4gICAgICAgICAgICBNZXRob2RWZXJzaW9uOiBzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZC5WZXJzaW9uLFxuICAgICAgICAgICAgUmVzdWx0TWVzc2FnZTogJ0FjY2VwdGVkJyxcbiAgICAgICAgICAgIFNlcnZlcjogaW5zdGFuY2UuaW5mbygpLFxuICAgICAgICAgICAgU3RyZWFtSWQ6IHN0cmVhbUlkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEJyYW5jaEtleShzdHJlYW1pbmdNZXRob2QsIHN0cmVhbUlkKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtSWQgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzdHJlYW1pbmdNZXRob2QgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmVlZGxlID0gc3RyZWFtaW5nTWV0aG9kLmJyYW5jaEtleVRvU3RyZWFtSWRNYXAuZmlsdGVyKGZ1bmN0aW9uIChicmFuY2gpIHtcbiAgICAgICAgICAgIHJldHVybiBicmFuY2guc3RyZWFtSWQgPT09IHN0cmVhbUlkO1xuICAgICAgICB9KVswXTtcblxuICAgICAgICBpZiAodHlwZW9mIG5lZWRsZSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIG5lZWRsZS5rZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVlZGxlLmtleTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdHJlYW1JZChzdHJlYW1pbmdNZXRob2QsIGJyYW5jaEtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGJyYW5jaEtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGJyYW5jaEtleSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5lZWRsZUJyYW5jaCA9IHN0cmVhbWluZ01ldGhvZC5icmFuY2hLZXlUb1N0cmVhbUlkTWFwLmZpbHRlcihmdW5jdGlvbiAoYnJhbmNoKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJhbmNoLmtleSA9PT0gYnJhbmNoS2V5O1xuICAgICAgICB9KVswXTtcblxuICAgICAgICB2YXIgc3RyZWFtSWQgPSAobmVlZGxlQnJhbmNoID8gbmVlZGxlQnJhbmNoLnN0cmVhbUlkIDogdW5kZWZpbmVkKTtcblxuICAgICAgICBpZiAodHlwZW9mICAgIHN0cmVhbUlkICE9PSAnc3RyaW5nJyB8fCBzdHJlYW1JZCA9PT0gJycpIHtcbiAgICAgICAgICAgIHN0cmVhbUlkID0gZ2VuZXJhdGVOZXdTdHJlYW1JZChzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZC5OYW1lKTtcbiAgICAgICAgICAgIHN0cmVhbWluZ01ldGhvZC5icmFuY2hLZXlUb1N0cmVhbUlkTWFwLnB1c2goeyBrZXk6IGJyYW5jaEtleSwgc3RyZWFtSWQ6IHN0cmVhbUlkIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cmVhbUlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTmV3U3RyZWFtSWQoc3RyZWFtaW5nTWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgYXBwSW5mbyA9IGluc3RhbmNlLmluZm8oKTtcblxuICAgICAgICB2YXIgbmV3U3RyZWFtSWQgPSAnc3RyZWFtSWQtanNiX29mXycgK1xuICAgICAgICAgICAgc3RyZWFtaW5nTWV0aG9kTmFtZSArXG4gICAgICAgICAgICAnX19ieV8nICtcbiAgICAgICAgICAgIGFwcEluZm8uQXBwbGljYXRpb25OYW1lICtcbiAgICAgICAgICAgICdfJyArXG4gICAgICAgICAgICByYW5kb20oKTtcblxuICAgICAgICByZXR1cm4gbmV3U3RyZWFtSWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVqZWN0UmVxdWVzdChyZXF1ZXN0Q29udGV4dCwgc3RyZWFtaW5nTWV0aG9kLCByZWFzb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZWFzb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZWFzb24gPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtc2cgPSByZXF1ZXN0Q29udGV4dC5tc2c7XG5cbiAgICAgICAgc2VuZFJlc3VsdCh7XG4gICAgICAgICAgICBFdmVudFN0cmVhbUFjdGlvbjogMixcbiAgICAgICAgICAgIEV2ZW50U3RyZWFtU3ViamVjdDogc3RyZWFtaW5nTWV0aG9kLmdsb2JhbEV2ZW50U3RyZWFtU3ViamVjdCxcbiAgICAgICAgICAgIC8vIEludm9jYXRpb25JZDogbXNnLkNvbnRleHQuSW52b2NhdGlvbklkLFxuICAgICAgICAgICAgTWV0aG9kTmFtZTogc3RyZWFtaW5nTWV0aG9kLm1ldGhvZC5NZXRob2QuTmFtZSxcbiAgICAgICAgICAgIE1ldGhvZFJlcXVlc3RTdWJqZWN0OiBzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZFJlcXVlc3RTdWJqZWN0LFxuICAgICAgICAgICAgTWV0aG9kUmVzcG9uc2VTdWJqZWN0OiBtc2cuTWV0aG9kUmVzcG9uc2VTdWJqZWN0LFxuICAgICAgICAgICAgTWV0aG9kVmVyc2lvbjogc3RyZWFtaW5nTWV0aG9kLm1ldGhvZC5NZXRob2QuVmVyc2lvbixcbiAgICAgICAgICAgIFJlc3VsdE1lc3NhZ2U6IHJlYXNvbixcbiAgICAgICAgICAgIFNlcnZlcjogaW5zdGFuY2UuaW5mbygpLFxuICAgICAgICAgICAgU3RyZWFtSWQ6ICdkZWZhdWx0X3JlamVjdGlvbl9zdHJlYW1JZCdcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqIChzdWJzY3JpcHRpb24pIE1ldGhvZHMgKi9cbiAgICBmdW5jdGlvbiBjbG9zZUluZGl2aWR1YWxTdWJzY3JpcHRpb24oc3RyZWFtaW5nTWV0aG9kLCBzdHJlYW1JZCwgcHJpdmF0ZUV2ZW50U3RyZWFtU3ViamVjdCwgc2VuZEtpY2tNZXNzYWdlKSB7XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zLmZpbHRlcihmdW5jdGlvbiAoc3ViSXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBzdWJJdGVtLnByaXZhdGVFdmVudFN0cmVhbVN1YmplY3QgPT09IHByaXZhdGVFdmVudFN0cmVhbVN1YmplY3QgJiZcbiAgICAgICAgICAgICAgICBzdWJJdGVtLnN0cmVhbUlkID09PSBzdHJlYW1JZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSlbMF07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb24gIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIHVucmVjb2duaXNlZCBzdWJzY3JpcHRpb25cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbml0aWFsTGVuZ3RoID0gc3RyZWFtaW5nTWV0aG9kLnN1YnNjcmlwdGlvbnMubGVuZ3RoO1xuXG4gICAgICAgIHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zID0gc3RyZWFtaW5nTWV0aG9kLnN1YnNjcmlwdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChzdWJJdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gIShcbiAgICAgICAgICAgICAgICBzdWJJdGVtLnByaXZhdGVFdmVudFN0cmVhbVN1YmplY3QgPT09IHN1YnNjcmlwdGlvbi5wcml2YXRlRXZlbnRTdHJlYW1TdWJqZWN0ICYmXG4gICAgICAgICAgICAgICAgc3ViSXRlbS5zdHJlYW1JZCA9PT0gc3Vic2NyaXB0aW9uLnN0cmVhbUlkXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZmlsdGVyZWRMZW5ndGggPSBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGZpbHRlcmVkTGVuZ3RoICE9PSAoaW5pdGlhbExlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIHRoZSBzdWJzY3JpcHRpb24gd2Fzbid0IHJlbW92ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZW5kS2lja01lc3NhZ2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNlbmRSZXN1bHQoe1xuICAgICAgICAgICAgICAgIEV2ZW50U3RyZWFtQWN0aW9uOiAyLFxuICAgICAgICAgICAgICAgIEV2ZW50U3RyZWFtU3ViamVjdDogcHJpdmF0ZUV2ZW50U3RyZWFtU3ViamVjdCxcbiAgICAgICAgICAgICAgICBNZXRob2ROYW1lOiBzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZC5OYW1lLFxuICAgICAgICAgICAgICAgIE1ldGhvZFJlcXVlc3RTdWJqZWN0OiBzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZFJlcXVlc3RTdWJqZWN0LFxuICAgICAgICAgICAgICAgIE1ldGhvZFJlc3BvbnNlU3ViamVjdDogc3Vic2NyaXB0aW9uLm1ldGhvZFJlc3BvbnNlU3ViamVjdCxcbiAgICAgICAgICAgICAgICBNZXRob2RWZXJzaW9uOiBzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZC5WZXJzaW9uLFxuICAgICAgICAgICAgICAgIFJlc3BvbnNlQ29udGV4dEpzb246IHt9LFxuICAgICAgICAgICAgICAgIFNlcnZlcjogaW5zdGFuY2UuaW5mbygpLFxuICAgICAgICAgICAgICAgIFN0cmVhbUlkOiBzdWJzY3JpcHRpb24uc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgU3RhdHVzOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygc3ViUmVtb3ZlZEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gc3Vic2NyaXB0aW9uLmluc3RhbmNlO1xuICAgICAgICAgICAgc3ViUmVtb3ZlZEhhbmRsZXIoc3Vic2NyaWJlciwgc3RyZWFtaW5nTWV0aG9kKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2VNdWx0aXBsZVN1YnNjcmlwdGlvbnMoc3RyZWFtaW5nTWV0aG9kLCBicmFuY2hLZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHJlYW1pbmdNZXRob2QgIT09ICdvYmplY3QnIHx8ICFBcnJheS5pc0FycmF5KHN0cmVhbWluZ01ldGhvZC5icmFuY2hLZXlUb1N0cmVhbUlkTWFwKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0cmVhbUxpc3QgPSBzdHJlYW1pbmdNZXRob2QuYnJhbmNoS2V5VG9TdHJlYW1JZE1hcDtcblxuICAgICAgICBpZiAodHlwZW9mIGJyYW5jaEtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN0cmVhbUxpc3QgPSBzdHJlYW1pbmdNZXRob2QuYnJhbmNoS2V5VG9TdHJlYW1JZE1hcC5maWx0ZXIoZnVuY3Rpb24gKGJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgYnIgPT09ICdvYmplY3QnICYmIGJyLmtleSA9PT0gYnJhbmNoS2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgZ2V0dGluZyB0aGUgdW5pcXVlIGJyYW5jaCBrZXlzIGZyb20gJ2xpdmUgc3Vic2NyaWJlcnMnXG5cbiAgICAgICAgc3RyZWFtTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChicikge1xuICAgICAgICAgICAgdmFyIHN0cmVhbUlkID0gYnIuc3RyZWFtSWQ7XG5cbiAgICAgICAgICAgIHNlbmRSZXN1bHQoe1xuICAgICAgICAgICAgICAgIEV2ZW50U3RyZWFtQWN0aW9uOiAyLFxuICAgICAgICAgICAgICAgIEV2ZW50U3RyZWFtU3ViamVjdDogc3RyZWFtaW5nTWV0aG9kLmdsb2JhbEV2ZW50U3RyZWFtU3ViamVjdCxcbiAgICAgICAgICAgICAgICBNZXRob2ROYW1lOiBzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZC5OYW1lLFxuICAgICAgICAgICAgICAgIE1ldGhvZFJlcXVlc3RTdWJqZWN0OiBzdHJlYW1pbmdNZXRob2QubWV0aG9kLk1ldGhvZFJlcXVlc3RTdWJqZWN0LFxuICAgICAgICAgICAgICAgIFNlcnZlcjogaW5zdGFuY2UuaW5mbygpLFxuICAgICAgICAgICAgICAgIFN0cmVhbUlkOiBzdHJlYW1JZCxcbiAgICAgICAgICAgICAgICBTdGF0dXM6IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZVNpbmdsZVN1YnNjcmlwdGlvbihzdHJlYW1pbmdNZXRob2QsIHN1YnNjcmlwdGlvbikge1xuICAgICAgICBjbG9zZUluZGl2aWR1YWxTdWJzY3JpcHRpb24oXG4gICAgICAgICAgICBzdHJlYW1pbmdNZXRob2QsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24uc3RyZWFtSWQsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24ucHJpdmF0ZUV2ZW50U3RyZWFtU3ViamVjdCxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwdXNoRGF0YVRvU2luZ2xlKHN0cmVhbWluZ01ldGhvZCwgc3Vic2NyaXB0aW9uLCBkYXRhKSB7XG5cbiAgICAgICAgLy8gVE9ETyB2YWxpZGF0ZSBkYXRhIGlzIGEgcGxhaW4gb2JqZWN0XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudHMuIERhdGEgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzZW5kUmVzdWx0KHtcbiAgICAgICAgICAgIEV2ZW50U3RyZWFtQWN0aW9uOiA1LFxuICAgICAgICAgICAgRXZlbnRTdHJlYW1TdWJqZWN0OiBzdWJzY3JpcHRpb24ucHJpdmF0ZUV2ZW50U3RyZWFtU3ViamVjdCxcbiAgICAgICAgICAgIE1ldGhvZE5hbWU6IHN0cmVhbWluZ01ldGhvZC5tZXRob2QuTWV0aG9kLk5hbWUsXG4gICAgICAgICAgICBNZXRob2RSZXF1ZXN0U3ViamVjdDogc3RyZWFtaW5nTWV0aG9kLm1ldGhvZC5NZXRob2RSZXF1ZXN0U3ViamVjdCxcbiAgICAgICAgICAgIFJlc3VsdENvbnRleHRKc29uOiBkYXRhLFxuICAgICAgICAgICAgU2VydmVyOiBpbnN0YW5jZS5pbmZvKCksXG4gICAgICAgICAgICBTdHJlYW1JZDogc3Vic2NyaXB0aW9uLnN0cmVhbUlkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1c2hUb0JyYW5jaChzdHJlYW1pbmdNZXRob2QsIGRhdGEsIGJyYW5jaGVzKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtaW5nTWV0aG9kICE9PSAnb2JqZWN0JyB8fCAhQXJyYXkuaXNBcnJheShzdHJlYW1pbmdNZXRob2QuYnJhbmNoS2V5VG9TdHJlYW1JZE1hcCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE8gdmFsaWRhdGUgZGF0YSBpcyBhIHBsYWluIG9iamVjdFxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzLiBEYXRhIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBicmFuY2hlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGJyYW5jaGVzID0gW2JyYW5jaGVzXTsgLy8gdXNlciB3YW50cyB0byBwdXNoIHRvIHNpbmdsZSBicmFuY2hcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShicmFuY2hlcykgfHwgYnJhbmNoZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIGJyYW5jaGVzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCB0aGUgU3RyZWFtSWQncyBmcm9tIHRoZSBtZXRob2QncyBicmFuY2ggbWFwXG4gICAgICAgIHZhciBzdHJlYW1JZExpc3QgPSBzdHJlYW1pbmdNZXRob2QuYnJhbmNoS2V5VG9TdHJlYW1JZE1hcFxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBicmFuY2hlcyA9PT0gbnVsbCB8fCAoQm9vbGVhbihicikgJiYgdHlwZW9mIGJyLmtleSA9PT0gJ3N0cmluZycgJiYgYnJhbmNoZXMuaW5kZXhPZihici5rZXkpID49IDApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoYnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnIuc3RyZWFtSWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBzdHJlYW1JZExpc3QuZm9yRWFjaChmdW5jdGlvbiAoc3RyZWFtSWQpIHtcblxuICAgICAgICAgICAgc2VuZFJlc3VsdCh7XG4gICAgICAgICAgICAgICAgRXZlbnRTdHJlYW1BY3Rpb246IDUsXG4gICAgICAgICAgICAgICAgRXZlbnRTdHJlYW1TdWJqZWN0OiBzdHJlYW1pbmdNZXRob2QuZ2xvYmFsRXZlbnRTdHJlYW1TdWJqZWN0LFxuICAgICAgICAgICAgICAgIE1ldGhvZE5hbWU6IHN0cmVhbWluZ01ldGhvZC5tZXRob2QuTWV0aG9kLk5hbWUsXG4gICAgICAgICAgICAgICAgTWV0aG9kUmVxdWVzdFN1YmplY3Q6IHN0cmVhbWluZ01ldGhvZC5tZXRob2QuTWV0aG9kUmVxdWVzdFN1YmplY3QsXG4gICAgICAgICAgICAgICAgUmVzdWx0Q29udGV4dEpzb246IGRhdGEsXG4gICAgICAgICAgICAgICAgU2VydmVyOiBpbnN0YW5jZS5pbmZvKCksXG4gICAgICAgICAgICAgICAgU3RyZWFtSWQ6IHN0cmVhbUlkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdWJzY3JpcHRpb25MaXN0KHN0cmVhbWluZ01ldGhvZCwgYnJhbmNoS2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtaW5nTWV0aG9kICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICAgICAgICBpZiAodHlwZW9mIGJyYW5jaEtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMgPSBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9ucztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMgPSBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHN1Yikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWIuYnJhbmNoS2V5ID09PSBicmFuY2hLZXk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEJyYW5jaExpc3Qoc3RyZWFtaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtaW5nTWV0aG9kICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldFVuaXF1ZUJyYW5jaE5hbWVzKHN0cmVhbWluZ01ldGhvZCk7XG5cbiAgICAgICAgLy8gVE9ETyB0aGUgYWdtLWFwaSBwYXNzZXMgZWFjaCBzdWIgdG8gcHJvdG9jb2wgbWV0aG9kcyBmb3IgY3JlYXRpbmcgdGhlIHN1YiBmcm9udCBvYmpcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBuYW1lcyBvZiBicmFuY2hlcyBmb3Igd2hpY2ggdGhlcmUgYXJlIGxpdmUgc3Vic2NyaXB0aW9uc1xuICAgIGZ1bmN0aW9uIGdldFVuaXF1ZUJyYW5jaE5hbWVzKHN0cmVhbWluZ01ldGhvZCkge1xuICAgICAgICB2YXIga2V5c1dpdGhEdXBsaWNhdGVzID0gc3RyZWFtaW5nTWV0aG9kLnN1YnNjcmlwdGlvbnMubWFwKGZ1bmN0aW9uIChzdWIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdWIgPT09ICdvYmplY3QnICYmIHR5cGVvZiBzdWIuYnJhbmNoS2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN1Yi5icmFuY2hLZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgc2VlbiA9IFtdO1xuXG4gICAgICAgIHZhciBicmFuY2hBcnJheSA9IGtleXNXaXRoRHVwbGljYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGJLZXkpIHtcbiAgICAgICAgICAgIGlmIChiS2V5ID09PSBudWxsIHx8IHNlZW4uaW5kZXhPZihiS2V5KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Vlbi5wdXNoKGJLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBicmFuY2hBcnJheTtcbiAgICB9XG5cbiAgICAvKiogc2V0dGluZyB1c2VyLXByb3ZpZGVkIGhhbmRsZXJzICovIC8vIFRPRE8gcmVwbGFjZSBpbm5lcmRzIHdpdGggY2FsbGJhY2suanNcbiAgICBmdW5jdGlvbiBhZGRSZXF1ZXN0SGFuZGxlcihoYW5kbGVyRnVuYykge1xuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0SGFuZGxlciA9IGhhbmRsZXJGdW5jO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YkFkZGVkSGFuZGxlcihoYW5kbGVyRnVuYykge1xuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzdWJBZGRlZEhhbmRsZXIgPSBoYW5kbGVyRnVuYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJSZW1vdmVkSGFuZGxlcihoYW5kbGVyRnVuYykge1xuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzdWJSZW1vdmVkSGFuZGxlciA9IGhhbmRsZXJGdW5jO1xuICAgIH1cblxuICAgIHJldHVybiB7IC8vIGFuIGluc3RhbmNlIG9mIHRoZSBwdWJsaXNoZXJcbiAgICAgICAgaXNTdHJlYW1Nc2c6IGlzU3RyZWFtTXNnRm9yU3RyZWFtaW5nTWV0aG9kLFxuICAgICAgICBwcm9jZXNzU3Vic2NyaWJlck1zZzogcHJvY2Vzc1N1YnNjcmliZXJNc2csXG4gICAgICAgIHB1c2hEYXRhOiBwdXNoVG9CcmFuY2gsXG4gICAgICAgIHB1c2hEYXRhVG9TaW5nbGU6IHB1c2hEYXRhVG9TaW5nbGUsXG4gICAgICAgIGNsb3NlQWxsU3Vic2NyaXB0aW9uczogY2xvc2VNdWx0aXBsZVN1YnNjcmlwdGlvbnMsXG4gICAgICAgIGNsb3NlU2luZ2xlU3Vic2NyaXB0aW9uOiBjbG9zZVNpbmdsZVN1YnNjcmlwdGlvbixcbiAgICAgICAgZ2V0U3Vic2NyaXB0aW9uTGlzdDogZ2V0U3Vic2NyaXB0aW9uTGlzdCxcbiAgICAgICAgZ2V0QnJhbmNoTGlzdDogZ2V0QnJhbmNoTGlzdCxcbiAgICAgICAgb25TdWJSZXF1ZXN0OiBhZGRSZXF1ZXN0SGFuZGxlcixcbiAgICAgICAgYWNjZXB0UmVxdWVzdE9uQnJhbmNoOiBhY2NlcHRSZXF1ZXN0T25CcmFuY2gsXG4gICAgICAgIHJlamVjdFJlcXVlc3Q6IHJlamVjdFJlcXVlc3QsXG4gICAgICAgIG9uU3ViQWRkZWQ6IGFkZFN1YkFkZGVkSGFuZGxlcixcbiAgICAgICAgb25TdWJSZW1vdmVkOiBhZGRTdWJSZW1vdmVkSGFuZGxlcixcbiAgICAgICAgZ2VuZXJhdGVOZXdTdHJlYW1JZDogZ2VuZXJhdGVOZXdTdHJlYW1JZFxuXG4gICAgfTtcbn07XG4iLCJ2YXIgcmFuZG9tID0gcmVxdWlyZSgnLi8uLi8uLi9oZWxwZXJzL3JhbmRvbScpO1xudmFyIGNhbGxiYWNrUmVnaXN0cnkgPSByZXF1aXJlKCdjYWxsYmFjay1yZWdpc3RyeScpO1xudmFyIFN0cmVhbWluZyA9IHJlcXVpcmUoJy4vc2VydmVyLXN0cmVhbWluZycpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29ubmVjdGlvbiwgaW5zdGFuY2UsIGNvbmZpZ3VyYXRpb24sIHZhdWx0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBpbnZvY2F0aW9uTWVzc2FnZXNNYXAgPSB7fTsgIC8vIHtpbnZvY2F0aW9uSWQ6IEludm9jYXRpb25fUmVxdWVzdE1lc3NhZ2V9XG5cbiAgICB2YXIgcmVxQ291bnRlciA9IDA7XG4gICAgdmFyIHByZXNlbmNlVGltZXI7XG4gICAgdmFyIGhlYXJ0YmVhdFRpbWVyO1xuICAgIHZhciBjYWxsYmFja3MgPSBjYWxsYmFja1JlZ2lzdHJ5KCk7XG4gICAgdmFyIHN0cmVhbWluZyA9IG5ldyBTdHJlYW1pbmcoY29ubmVjdGlvbiwgaW5zdGFuY2UpO1xuXG4gICAgY29ubmVjdGlvbi5vbignTWV0aG9kSW52b2NhdGlvblJlcXVlc3RNZXNzYWdlJywgaGFuZGxlTWV0aG9kSW52b2NhdGlvbk1lc3NhZ2UpO1xuXG4gICAgaWYgKGhlYXJ0YmVhdFRpbWVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaGVhcnRiZWF0VGltZXIgPSBzZXRJbnRlcnZhbChzZW5kSGVhcnRiZWF0LCBjb25maWd1cmF0aW9uLnNlcnZlci5oZWFydGJlYXRfaW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5leHRSZXF1ZXN0U3ViamVjdCgpIHtcbiAgICAgICAgcmV0dXJuICdyZXFfJyArIChyZXFDb3VudGVyKyspICsgJ18nICsgcmFuZG9tKCk7XG4gICAgfVxuXG4gICAgLy8gQ29uc3RydWN0cyBhIGhlYXJ0YmVhdCBtZXNzYWdlXG4gICAgZnVuY3Rpb24gY29uc3RydWN0SGVhcnRiZWF0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgUHVibGlzaGluZ0ludGVydmFsOiBjb25maWd1cmF0aW9uLnNlcnZlci5oZWFydGJlYXRfaW50ZXJ2YWwsXG4gICAgICAgICAgICBJbnN0YW5jZTogaW5zdGFuY2UuaW5mbygpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQ29uc3RydWN0cyBhIHByZXNlbmNlIG1lc3NhZ2VcbiAgICBmdW5jdGlvbiBjb25zdHJ1Y3RQcmVzZW5jZSgpIHtcbiAgICAgICAgdmFyIG1ldGhvZHMgPSB2YXVsdC5nZXRMaXN0KCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFB1Ymxpc2hpbmdJbnRlcnZhbDogY29uZmlndXJhdGlvbi5zZXJ2ZXIucHJlc2VuY2VfaW50ZXJ2YWwsXG4gICAgICAgICAgICBJbnN0YW5jZTogaW5zdGFuY2UuaW5mbygpLFxuICAgICAgICAgICAgTWV0aG9kRGVmaW5pdGlvbnM6IG1ldGhvZHMubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG0ubWV0aG9kXG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFNlbmRzIGEgcHJlc2VuY2VcbiAgICBmdW5jdGlvbiBzZW5kUHJlc2VuY2UoKSB7XG4gICAgICAgIGNvbm5lY3Rpb24uc2VuZCgnU2VydmVyUHJlc2VuY2VNZXNzYWdlJywgY29uc3RydWN0UHJlc2VuY2UoKSk7XG4gICAgfVxuXG4gICAgLy8gU2VuZHMgYSBoZWFydGJlYXRcbiAgICBmdW5jdGlvbiBzZW5kSGVhcnRiZWF0KCkge1xuICAgICAgICBjb25uZWN0aW9uLnNlbmQoJ1NlcnZlckhlYXJ0YmVhdE1lc3NhZ2UnLCBjb25zdHJ1Y3RIZWFydGJlYXQoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTmV3TWV0aG9kTWVzc2FnZShtZXRob2RJZGVudGlmaWVyLCBzdWJqZWN0KSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBnaXZlbiBhIHN0cmluZyBpbnN0ZWFkIG9mIGFuIG9iamVjdCwgd2UgcHJlc3VtZSB0aGF0IGlzIHRoZSBtZXRob2QncyBuYW1lOlxuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZElkZW50aWZpZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBtZXRob2RJZGVudGlmaWVyID0geyBuYW1lOiBtZXRob2RJZGVudGlmaWVyIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgZGVmYXVsdCB2YWx1ZXNcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2RJZGVudGlmaWVyLnZlcnNpb24gIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBtZXRob2RJZGVudGlmaWVyLnZlcnNpb24gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udmVydCB0aGUgbWV0aG9kIGRlZmluaXRpb24gdG8gdGhlIGZvcm1hdCB0aGF0IEFHTSByZXF1aXJlc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgTWV0aG9kOiB7XG4gICAgICAgICAgICAgICAgTmFtZTogbWV0aG9kSWRlbnRpZmllci5uYW1lLFxuICAgICAgICAgICAgICAgIElucHV0U2lnbmF0dXJlOiBtZXRob2RJZGVudGlmaWVyLmFjY2VwdHMsXG4gICAgICAgICAgICAgICAgUmVzdWx0U2lnbmF0dXJlOiBtZXRob2RJZGVudGlmaWVyLnJldHVybnMsXG4gICAgICAgICAgICAgICAgRGVzY3JpcHRpb246IG1ldGhvZElkZW50aWZpZXIuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgRGlzcGxheU5hbWU6IG1ldGhvZElkZW50aWZpZXIuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgVmVyc2lvbjogbWV0aG9kSWRlbnRpZmllci52ZXJzaW9uLFxuICAgICAgICAgICAgICAgIE9iamVjdFR5cGVSZXN0cmljdGlvbnM6IG1ldGhvZElkZW50aWZpZXIub2JqZWN0VHlwZXNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBNZXRob2RSZXF1ZXN0U3ViamVjdDogc3ViamVjdFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKHJlcG9NZXRob2QsIHN1Y2Nlc3MpIHtcblxuICAgICAgICAvLyBHZXQgYSByZXF1ZXN0IHN1YmplY3QgZm9yIHRoaXMgbWV0aG9kXG4gICAgICAgIHZhciByZXFTdWJqID0gbmV4dFJlcXVlc3RTdWJqZWN0KCk7XG5cbiAgICAgICAgcmVwb01ldGhvZC5tZXRob2QgPSBjcmVhdGVOZXdNZXRob2RNZXNzYWdlKHJlcG9NZXRob2QuZGVmaW5pdGlvbiwgcmVxU3Viaik7XG5cbiAgICAgICAgYW5ub3VuY2VOZXdNZXRob2QoKTtcblxuICAgICAgICBzdWNjZXNzKCk7XG4gICAgfVxuXG4gICAgLyoqIENyZWF0ZSBhIHN0cmVhbWluZyBtZXRob2QgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVTdHJlYW0ocmVwb01ldGhvZCwgc3RyZWFtRGVmLCBzdWNjZXNzKSB7XG5cbiAgICAgICAgdmFyIHJlcVN1YmogPSBuZXh0UmVxdWVzdFN1YmplY3QoKTtcblxuICAgICAgICB2YXIgc3RyZWFtQ29udmVydGVkID0gY3JlYXRlTmV3TWV0aG9kTWVzc2FnZShzdHJlYW1EZWYsIHJlcVN1YmopO1xuICAgICAgICBzdHJlYW1Db252ZXJ0ZWQuTWV0aG9kLkZsYWdzID0gMzI7IC8vIDEwMDAwMCBiaXRtYXNrIHdpdGggdGhlIGxhcmdlc3QgZmxhZyAoc3RyZWFtaW5nOiB0cnVlKVxuXG4gICAgICAgIC8vIFVzZWQgZm9yIHByZXNlbmNlc1xuICAgICAgICByZXBvTWV0aG9kLm1ldGhvZCA9IHN0cmVhbUNvbnZlcnRlZDtcblxuICAgICAgICAvLyBVdGlsaXR5IHRoaW5ncyBmb3IgdGhpcyBwcm90b2NvbFxuICAgICAgICByZXBvTWV0aG9kLmdsb2JhbEV2ZW50U3RyZWFtU3ViamVjdCA9IHN0cmVhbURlZi5uYW1lICsgJy5qc1N0cmVhbS4nICsgcmFuZG9tKCk7XG4gICAgICAgIHJlcG9NZXRob2Quc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICByZXBvTWV0aG9kLmJyYW5jaEtleVRvU3RyZWFtSWRNYXAgPSBbXTsgLy8gWyB7YnJhbmNoS2V5OiAnJywgc3RyZWFtSWQ6ICdzdHJqX25kczdgOGA2eTIzNzh5Yid9LCB7Li4ufSwgLi4uXVxuXG4gICAgICAgIGFubm91bmNlTmV3TWV0aG9kKCk7XG5cbiAgICAgICAgc3VjY2VzcygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFubm91bmNlTmV3TWV0aG9kKCkge1xuXG4gICAgICAgIC8vIFNlbmQgcHJlc2VuY2Ugc28gdGhlIGNsaWVudHMga25vdyB3ZSBoYXZlIGl0XG4gICAgICAgIHNlbmRQcmVzZW5jZSgpO1xuXG4gICAgICAgIC8vIFN0YXJ0IHNlbmRpbmcgcHJlc2VuY2UgcmVndWxhcmx5IChpZiB3ZSBhcmVuJ3QgYWxyZWFkeSBkb2luZyBpdClcbiAgICAgICAgaWYgKHByZXNlbmNlVGltZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJlc2VuY2VUaW1lciA9IHNldEludGVydmFsKHNlbmRQcmVzZW5jZSwgY29uZmlndXJhdGlvbi5zZXJ2ZXIucHJlc2VuY2VfaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGlzdGVucyBmb3IgbWV0aG9kIGludm9jYXRpb25zXG4gICAgZnVuY3Rpb24gaGFuZGxlTWV0aG9kSW52b2NhdGlvbk1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG1lc3NhZ2UuTWV0aG9kUmVxdWVzdFN1YmplY3Q7XG4gICAgICAgIHZhciBtZXRob2RMaXN0ID0gdmF1bHQuZ2V0TGlzdCgpO1xuXG4gICAgICAgIHZhciBtZXRob2QgPSBtZXRob2RMaXN0LmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIG0ubWV0aG9kLk1ldGhvZFJlcXVlc3RTdWJqZWN0ID09PSBzdWJqZWN0O1xuICAgICAgICB9KVswXTtcblxuICAgICAgICAvLyBTdG9wIGlmIHRoZSBtZXNzYWdlIGlzbid0IGZvciB1c1xuICAgICAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE8gc2VlIGlmIGhhdmUgdG8gbW92ZSB0aGlzIGVhcmxpZXIgLSBpLmUuIGlmIHNvbWUgbWVzc2FnZXMgZnJvbSBDbGllbnQgZG9uJ3QgaGF2ZSBNZXRob2RSZXF1ZXN0U3ViamVjdFxuICAgICAgICAvLyBDaGVjayBpZiBtZXNzYWdlIGlzIHN0cmVhbS1yZWxhdGVkIDogZGVmZXIgdG8gc3RyZWFtaW5nIG1vZHVsZVxuICAgICAgICBpZiAoc3RyZWFtaW5nLmlzU3RyZWFtTXNnKG1lc3NhZ2UsIG1ldGhvZCkpIHtcbiAgICAgICAgICAgIHN0cmVhbWluZy5wcm9jZXNzU3Vic2NyaWJlck1zZyhtZXNzYWdlLCBtZXRob2QpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGludm9jYXRpb25JZCA9IG1lc3NhZ2UuQ29udGV4dC5JbnZvY2F0aW9uSWQ7XG4gICAgICAgIGludm9jYXRpb25NZXNzYWdlc01hcFtpbnZvY2F0aW9uSWRdID0gbWVzc2FnZTtcblxuICAgICAgICB2YXIgaW52b2NhdGlvbkFyZ3MgPSB7XG4gICAgICAgICAgICBhcmdzOiBtZXNzYWdlLkNvbnRleHQuQXJndW1lbnRzSnNvbixcbiAgICAgICAgICAgIGluc3RhbmNlOiBoZWxwZXJzLmNvbnZlcnRJbmZvVG9JbnN0YW5jZShtZXNzYWdlLkNsaWVudClcbiAgICAgICAgfTtcbiAgICAgICAgY2FsbGJhY2tzLmV4ZWN1dGUoJ29uSW52b2tlZCcsIG1ldGhvZCwgaW52b2NhdGlvbklkLCBpbnZvY2F0aW9uQXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25JbnZva2VkKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrcy5hZGQoJ29uSW52b2tlZCcsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXRob2RJbnZvY2F0aW9uUmVzdWx0KGV4ZWN1dGVkTWV0aG9kLCBpbnZvY2F0aW9uSWQsIGVyciwgcmVzdWx0KSB7XG5cbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBpbnZvY2F0aW9uTWVzc2FnZXNNYXBbaW52b2NhdGlvbklkXTtcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEb24ndCBzZW5kIHJlc3VsdCBpZiB0aGUgY2xpZW50IGRvZXMgbm90IHJlcXVpcmUgaXRcbiAgICAgICAgaWYgKG1lc3NhZ2UuTWV0aG9kUmVzcG9uc2VTdWJqZWN0ID09PSAnbnVsbCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleGVjdXRlZE1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0TWVzc2FnZSA9IHtcbiAgICAgICAgICAgIE1ldGhvZFJlcXVlc3RTdWJqZWN0OiBtZXNzYWdlLk1ldGhvZFJlcXVlc3RTdWJqZWN0LFxuICAgICAgICAgICAgTWV0aG9kUmVzcG9uc2VTdWJqZWN0OiBtZXNzYWdlLk1ldGhvZFJlc3BvbnNlU3ViamVjdCxcbiAgICAgICAgICAgIE1ldGhvZE5hbWU6IGV4ZWN1dGVkTWV0aG9kLm1ldGhvZC5NZXRob2QuTmFtZSxcbiAgICAgICAgICAgIEludm9jYXRpb25JZDogaW52b2NhdGlvbklkLFxuICAgICAgICAgICAgUmVzdWx0Q29udGV4dEpzb246IHJlc3VsdCxcbiAgICAgICAgICAgIFNlcnZlcjogaW5zdGFuY2UuaW5mbygpLFxuICAgICAgICAgICAgUmVzdWx0TWVzc2FnZTogZXJyLFxuICAgICAgICAgICAgU3RhdHVzOiBlcnIgPyAxIDogMFxuICAgICAgICB9O1xuICAgICAgICAvLyBTZW5kIHJlc3VsdFxuICAgICAgICBjb25uZWN0aW9uLnNlbmQoJ01ldGhvZEludm9jYXRpb25SZXN1bHRNZXNzYWdlJywgcmVzdWx0TWVzc2FnZSk7XG5cbiAgICAgICAgZGVsZXRlIGludm9jYXRpb25NZXNzYWdlc01hcFtpbnZvY2F0aW9uSWRdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVucmVnaXN0ZXIoKSB7XG4gICAgICAgIHNlbmRQcmVzZW5jZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcbiAgICAgICAgb25JbnZva2VkOiBvbkludm9rZWQsXG4gICAgICAgIG1ldGhvZEludm9jYXRpb25SZXN1bHQ6IG1ldGhvZEludm9jYXRpb25SZXN1bHQsXG4gICAgICAgIHVucmVnaXN0ZXI6IHVucmVnaXN0ZXIsXG5cbiAgICAgICAgLy8gc3RyZWFtLXJlbGF0ZWRcbiAgICAgICAgY3JlYXRlU3RyZWFtOiBjcmVhdGVTdHJlYW0sXG4gICAgICAgIGdldEJyYW5jaExpc3Q6IHN0cmVhbWluZy5nZXRCcmFuY2hMaXN0LFxuICAgICAgICBnZXRTdWJzY3JpcHRpb25MaXN0OiBzdHJlYW1pbmcuZ2V0U3Vic2NyaXB0aW9uTGlzdCxcbiAgICAgICAgY2xvc2VBbGxTdWJzY3JpcHRpb25zOiBzdHJlYW1pbmcuY2xvc2VBbGxTdWJzY3JpcHRpb25zLFxuICAgICAgICBjbG9zZVNpbmdsZVN1YnNjcmlwdGlvbjogc3RyZWFtaW5nLmNsb3NlU2luZ2xlU3Vic2NyaXB0aW9uLFxuICAgICAgICBwdXNoRGF0YVRvU2luZ2xlOiBzdHJlYW1pbmcucHVzaERhdGFUb1NpbmdsZSxcbiAgICAgICAgcHVzaERhdGE6IHN0cmVhbWluZy5wdXNoRGF0YSxcbiAgICAgICAgb25TdWJSZXF1ZXN0OiBzdHJlYW1pbmcub25TdWJSZXF1ZXN0LFxuICAgICAgICBhY2NlcHRSZXF1ZXN0T25CcmFuY2g6IHN0cmVhbWluZy5hY2NlcHRSZXF1ZXN0T25CcmFuY2gsXG4gICAgICAgIHJlamVjdFJlcXVlc3Q6IHN0cmVhbWluZy5yZWplY3RSZXF1ZXN0LFxuICAgICAgICBvblN1YkFkZGVkOiBzdHJlYW1pbmcub25TdWJBZGRlZCxcbiAgICAgICAgb25TdWJSZW1vdmVkOiBzdHJlYW1pbmcub25TdWJSZW1vdmVkXG4gICAgfVxufTtcbiIsIi8qKlxuICogSGFuZGxlcyByZWdpc3RlcmluZyBtZXRob2RzIGFuZCBzZW5kaW5nIGRhdGEgdG8gY2xpZW50c1xuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGNvbm5lY3Rpb24sIHJlcG9zaXRvcnksIHNlc3Npb24sIGxvZ2dlcikge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBjb25uZWN0aW9uLm9uKCdzdWJzY3JpYmVkJywgaGFuZGxlU3Vic2NyaWJlZCk7XG4gICAgY29ubmVjdGlvbi5vbignZXZlbnQnLCBoYW5kbGVFdmVudERhdGEpO1xuICAgIGNvbm5lY3Rpb24ub24oJ3N1YnNjcmlwdGlvbi1jYW5jZWxsZWQnLCBoYW5kbGVTdWJzY3JpcHRpb25DYW5jZWxsZWQpO1xuXG4gICAgdmFyIE1TR19UWVBFX1NVQlNDUklCRSA9ICdzdWJzY3JpYmUnO1xuICAgIHZhciBTVEFUVVNfQVdBSVRJTkdfQUNDRVBUID0gJ2F3YWl0aW5nQWNjZXB0JzsgLy8gbm90IGV2ZW4gb25lIHNlcnZlciBoYXMgYWNjZXB0ZWQgeWV0XG4gICAgdmFyIFNUQVRVU19TVUJTQ1JJQkVEID0gJ3N1YnNjcmliZWQnOyAvLyBhdCBsZWFzdCBvbmUgc2VydmVyIGhhcyByZXNwb25kZWQgYXMgJ0FjY2VwdGluZydcbiAgICB2YXIgRVJSX01TR19TVUJfRkFJTEVEID0gJ1N1YnNjcmlwdGlvbiBmYWlsZWQuJztcbiAgICB2YXIgRVJSX01TR19TVUJfUkVKRUNURUQgPSAnU3Vic2NyaXB0aW9uIHJlamVjdGVkLic7XG4gICAgdmFyIE9OX0NMT1NFX01TR19TRVJWRVJfSU5JVCA9ICdTZXJ2ZXJJbml0aWF0ZWQnO1xuICAgIHZhciBPTl9DTE9TRV9NU0dfQ0xJRU5UX0lOSVQgPSAnQ2xpZW50SW5pdGlhdGVkJztcblxuICAgIHZhciBzdWJzY3JpcHRpb25zTGlzdCA9IHt9O1xuICAgIHZhciBzdWJzY3JpcHRpb25JZFRvTG9jYWxLZXlNYXAgPSB7fTtcbiAgICB2YXIgbmV4dFN1YkxvY2FsS2V5ID0gMDtcblxuICAgIGZ1bmN0aW9uIGdldE5leHRTdWJzY3JpcHRpb25Mb2NhbEtleSgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBuZXh0U3ViTG9jYWxLZXk7XG4gICAgICAgIG5leHRTdWJMb2NhbEtleSArPSAxO1xuXG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShzdHJlYW1pbmdNZXRob2QsIGFyZ3VtZW50T2JqLCB0YXJnZXRTZXJ2ZXJzLCBzdHVmZiwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgaWYgKHRhcmdldFNlcnZlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBlcnJvcihFUlJfTVNHX1NVQl9GQUlMRUQgKyAnIE5vIGF2YWlsYWJsZSBzZXJ2ZXJzIG1hdGNoZWQgdGhlIHRhcmdldCBwYXJhbXMuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsb2dnZXIuZGVidWcoJ3N1YnNjcmliZSB0byB0YXJnZXQgc2VydmVyczogJywgdGFyZ2V0U2VydmVycylcblxuICAgICAgICAvLyBOb3RlOiB1c2VkIHRvIGZpbmQgdGhlIHN1YnNjcmlwdGlvbiBpbiBzdWJMaXN0LiBEbyBub3QgY29uZnVzZSBpdCB3aXRoIHRoZSBndy1nZW5lcmF0ZWQgc3Vic2NyaXB0aW9uX2lkXG4gICAgICAgIHZhciBzdWJMb2NhbEtleSA9IGdldE5leHRTdWJzY3JpcHRpb25Mb2NhbEtleSgpO1xuXG4gICAgICAgIHZhciBwZW5kaW5nU3ViID0gcmVnaXN0ZXJTdWJzY3JpcHRpb24oXG4gICAgICAgICAgICBzdWJMb2NhbEtleSxcbiAgICAgICAgICAgIHN0cmVhbWluZ01ldGhvZCxcbiAgICAgICAgICAgIGFyZ3VtZW50T2JqLFxuICAgICAgICAgICAgc3VjY2VzcyxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgc3R1ZmYubWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXRcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodHlwZW9mIHBlbmRpbmdTdWIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBlcnJvcihFUlJfTVNHX1NVQl9GQUlMRUQgKyAnIFVuYWJsZSB0byByZWdpc3RlciB0aGUgdXNlciBjYWxsYmFja3MuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRTZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0KSB7XG5cbiAgICAgICAgICAgIHZhciBzZXJ2ZXJJZCA9IHRhcmdldC5zZXJ2ZXIuaWQ7XG5cbiAgICAgICAgICAgIHBlbmRpbmdTdWIudHJhY2tlZFNlcnZlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgc2VydmVySWQ6IHNlcnZlcklkLFxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbklkOiB1bmRlZmluZWQgLy8gaXMgYXNzaWduZWQgYnkgZ3czXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIG1zZyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBNU0dfVFlQRV9TVUJTQ1JJQkUsXG4gICAgICAgICAgICAgICAgc2VydmVyX2lkOiBzZXJ2ZXJJZCxcbiAgICAgICAgICAgICAgICBtZXRob2RfaWQ6IHN0cmVhbWluZ01ldGhvZC5pbmZvLmlkLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c19rdjogYXJndW1lbnRPYmpcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VuZChtc2csIHsgc2VydmVySWQ6IHNlcnZlcklkLCBzdWJMb2NhbEtleTogc3ViTG9jYWxLZXkgfSlcbiAgICAgICAgICAgICAgICAudGhlbihoYW5kbGVTdWJzY3JpYmVkKVsnY2F0Y2gnXShoYW5kbGVFcnJvclN1YnNjcmliaW5nKTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdpc3RlclN1YnNjcmlwdGlvbihzdWJMb2NhbEtleSwgbWV0aG9kLCBhcmdzLCBzdWNjZXNzLCBlcnJvciwgdGltZW91dCkge1xuICAgICAgICBzdWJzY3JpcHRpb25zTGlzdFtzdWJMb2NhbEtleV0gPSB7XG4gICAgICAgICAgICBzdGF0dXM6IFNUQVRVU19BV0FJVElOR19BQ0NFUFQsXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIGFyZ3VtZW50czogYXJncyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICB0cmFja2VkU2VydmVyczogW10sXG4gICAgICAgICAgICBoYW5kbGVyczoge1xuICAgICAgICAgICAgICAgIG9uRGF0YTogW10sXG4gICAgICAgICAgICAgICAgb25DbG9zZWQ6IFtdXG4gICAgICAgICAgICAgICAgLy8gb25GYWlsZWQ6IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcXVldWVkOiB7XG4gICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgY2xvc2VyczogW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aW1lb3V0SWQ6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIHN1YnNjcmlwdGlvbnNMaXN0W3N1YkxvY2FsS2V5XS50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25zTGlzdFtzdWJMb2NhbEtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gbm8gc3VjaCBzdWJzY3JpcHRpb25cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBlbmRpbmdTdWIgPSBzdWJzY3JpcHRpb25zTGlzdFtzdWJMb2NhbEtleV07XG5cbiAgICAgICAgICAgIGlmIChwZW5kaW5nU3ViLnN0YXR1cyA9PT0gU1RBVFVTX0FXQUlUSU5HX0FDQ0VQVCkge1xuICAgICAgICAgICAgICAgIGVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxlZF93aXRoOiBhcmdzLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBFUlJfTVNHX1NVQl9GQUlMRUQgKyAnIFN1YnNjcmlwdGlvbiBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAnICsgdGltZW91dCArICdtcy4nXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBOb25lIG9mIHRoZSB0YXJnZXQgc2VydmVycyBoYXMgYW5zd2VyZWQgdGhlIHN1YnNjcmlwdGlvbiBhdHRlbXB0XG4gICAgICAgICAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNMaXN0W3N1YkxvY2FsS2V5XTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChwZW5kaW5nU3ViLnN0YXR1cyA9PT0gU1RBVFVTX1NVQlNDUklCRUQgJiYgcGVuZGluZ1N1Yi50cmFja2VkU2VydmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdGhlIHRyYWNrZWRTZXJ2ZXJzLCByZW1vdmluZyB0aG9zZSB3aXRob3V0IHZhbGlkIHN0cmVhbUlkXG4gICAgICAgICAgICAgICAgcGVuZGluZ1N1Yi50cmFja2VkU2VydmVycyA9IHBlbmRpbmdTdWIudHJhY2tlZFNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uIChzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlb2Ygc2VydmVyLnN0cmVhbUlkICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nU3ViLnRpbWVvdXRJZDtcblxuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nU3ViLnRyYWNrZWRTZXJ2ZXJzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBubyBvcGVuIHN0cmVhbXMsIHNvbWUgc2VydmVycyBhY2NlcHRlZCB0aGVuIGNsb3NlZCB2ZXJ5IHF1aWNrbHlcbiAgICAgICAgICAgICAgICAgICAgLy8gICh0aGF0J3Mgd2h5IHRoZSBzdGF0dXMgY2hhbmdlZCBidXQgdGhlcmUncyBubyBnb29kIHNlcnZlciB3aXRoIGEgU3RyZWFtSWQpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCB0aGUgb25DbG9zZWQgaGFuZGxlcnNcbiAgICAgICAgICAgICAgICAgICAgY2FsbE9uQ2xvc2VkSGFuZGxlcnMocGVuZGluZ1N1Yik7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNMaXN0W3N1YkxvY2FsS2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25zTGlzdFtzdWJMb2NhbEtleV1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFcnJvclN1YnNjcmliaW5nKGVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgLy8gQSB0YXJnZXQgc2VydmVyIGlzIHJlamVjdGluZ1xuICAgICAgICBsb2dnZXIuZGVidWcoJ1N1YnNjcmlwdGlvbiBhdHRlbXB0IGZhaWxlZCcsIGVycm9yUmVzcG9uc2UpO1xuXG4gICAgICAgIHZhciB0YWcgPSBlcnJvclJlc3BvbnNlLl90YWc7XG4gICAgICAgIHZhciBzdWJMb2NhbEtleSA9IHRhZy5zdWJMb2NhbEtleTtcblxuICAgICAgICB2YXIgcGVuZGluZ1N1YiA9IHN1YnNjcmlwdGlvbnNMaXN0W3N1YkxvY2FsS2V5XTtcblxuICAgICAgICBpZiAodHlwZW9mIHBlbmRpbmdTdWIgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwZW5kaW5nU3ViLnRyYWNrZWRTZXJ2ZXJzID0gcGVuZGluZ1N1Yi50cmFja2VkU2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKHNlcnZlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNlcnZlci5zZXJ2ZXJJZCAhPT0gdGFnLnNlcnZlcklkO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocGVuZGluZ1N1Yi50cmFja2VkU2VydmVycy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHBlbmRpbmdTdWIudGltZW91dElkKTtcblxuICAgICAgICAgICAgaWYgKHBlbmRpbmdTdWIuc3RhdHVzID09PSBTVEFUVVNfQVdBSVRJTkdfQUNDRVBUKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVqZWN0IHdpdGggcmVhc29uXG4gICAgICAgICAgICAgICAgdmFyIHJlYXNvbiA9ICh0eXBlb2YgZXJyb3JSZXNwb25zZS5yZWFzb24gPT09ICdzdHJpbmcnICYmIGVycm9yUmVzcG9uc2UucmVhc29uICE9PSAnJylcbiAgICAgICAgICAgICAgICAgICAgPyAnIFB1Ymxpc2hlciBzYWlkIFwiJyArIGVycm9yUmVzcG9uc2UucmVhc29uICsgJ1wiLidcbiAgICAgICAgICAgICAgICAgICAgOiAnIE5vIHJlYXNvbiBnaXZlbi4nO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNhbGxBcmdzID0gdHlwZW9mIHBlbmRpbmdTdWIuYXJndW1lbnRzID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHBlbmRpbmdTdWIuYXJndW1lbnRzKVxuICAgICAgICAgICAgICAgICAgICA6ICd7fSc7XG5cbiAgICAgICAgICAgICAgICBwZW5kaW5nU3ViLmVycm9yKEVSUl9NU0dfU1VCX1JFSkVDVEVEICsgcmVhc29uICsgJyBDYWxsZWQgd2l0aDonICsgY2FsbEFyZ3MpO1xuXG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGVuZGluZ1N1Yi5zdGF0dXMgPT09IFNUQVRVU19TVUJTQ1JJQkVEKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHRpbWVvdXQgbWF5IG9yIG1heSBub3QgaGF2ZSBleHBpcmVkIHlldCxcbiAgICAgICAgICAgICAgICAvLyBidXQgdGhlIHN0YXR1cyBpcyAnc3Vic2NyaWJlZCcgYW5kIHRyYWNrZWRTZXJ2ZXJzIGlzIG5vdyBlbXB0eVxuXG4gICAgICAgICAgICAgICAgY2FsbE9uQ2xvc2VkSGFuZGxlcnMocGVuZGluZ1N1Yik7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNMaXN0W3N1YkxvY2FsS2V5XTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN1YnNjcmliZWQobXNnKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnaGFuZGxlU3Vic2NyaWJlZCcsIG1zZyk7XG5cbiAgICAgICAgdmFyIHN1YkxvY2FsS2V5ID0gbXNnLl90YWcuc3ViTG9jYWxLZXk7XG4gICAgICAgIHZhciBwZW5kaW5nU3ViID0gc3Vic2NyaXB0aW9uc0xpc3Rbc3ViTG9jYWxLZXldO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcGVuZGluZ1N1YiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZXJ2ZXJJZCA9IG1zZy5fdGFnLnNlcnZlcklkO1xuXG4gICAgICAgIC8vIEFkZCBhIHN1YnNjcmlwdGlvbl9pZCB0byB0aGlzIHRyYWNrZWRTZXJ2ZXJcblxuICAgICAgICB2YXIgYWNjZXB0aW5nU2VydmVyID0gcGVuZGluZ1N1Yi50cmFja2VkU2VydmVyc1xuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmVyLnNlcnZlcklkID09PSBzZXJ2ZXJJZDtcbiAgICAgICAgICAgIH0pWzBdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYWNjZXB0aW5nU2VydmVyICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYWNjZXB0aW5nU2VydmVyLnN1YnNjcmlwdGlvbklkID0gbXNnLnN1YnNjcmlwdGlvbl9pZDtcbiAgICAgICAgc3Vic2NyaXB0aW9uSWRUb0xvY2FsS2V5TWFwW21zZy5zdWJzY3JpcHRpb25faWRdID0gc3ViTG9jYWxLZXk7XG5cbiAgICAgICAgdmFyIGlzRmlyc3RSZXNwb25zZSA9IChwZW5kaW5nU3ViLnN0YXR1cyA9PT0gU1RBVFVTX0FXQUlUSU5HX0FDQ0VQVCk7XG5cbiAgICAgICAgcGVuZGluZ1N1Yi5zdGF0dXMgPSBTVEFUVVNfU1VCU0NSSUJFRDtcblxuICAgICAgICBpZiAoaXNGaXJzdFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAvLyBQYXNzIGluIHRoZSBzdWJzY3JpcHRpb24gb2JqZWN0XG4gICAgICAgICAgICBwZW5kaW5nU3ViLnN1Y2Nlc3Moe1xuICAgICAgICAgICAgICAgIG9uRGF0YTogZnVuY3Rpb24gKGRhdGFDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGRhdGEgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLicpXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJzLm9uRGF0YS5wdXNoKGRhdGFDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZXJzLm9uRGF0YS5sZW5ndGggPT09IDEgJiYgdGhpcy5xdWV1ZWQuZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlZC5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGRhdGFJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNhbGxiYWNrKGRhdGFJdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0uYmluZChwZW5kaW5nU3ViKSxcbiAgICAgICAgICAgICAgICBvbkNsb3NlZDogZnVuY3Rpb24gKGNsb3NlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2xvc2VkQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJzLm9uQ2xvc2VkLnB1c2goY2xvc2VkQ2FsbGJhY2spXG4gICAgICAgICAgICAgICAgfS5iaW5kKHBlbmRpbmdTdWIpLFxuICAgICAgICAgICAgICAgIG9uRmFpbGVkOiBmdW5jdGlvbiAoKSB7IC8qIFdpbGwgbm90IGJlIGltcGxlbWVudGVkIGZvciBicm93c2VyLiAqL1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xvc2U6IGNsb3NlU3Vic2NyaXB0aW9uLmJpbmQoc3ViTG9jYWxLZXkpLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RBcmd1bWVudHM6IHBlbmRpbmdTdWIuYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIHNlcnZlckluc3RhbmNlOiByZXBvc2l0b3J5LmdldFNlcnZlckJ5SWQoc2VydmVySWQpLmdldEluZm9Gb3JVc2VyKCksXG4gICAgICAgICAgICAgICAgc3RyZWFtOiBwZW5kaW5nU3ViLm1ldGhvZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFdmVudERhdGEobXNnKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnaGFuZGxlRXZlbnREYXRhJywgbXNnKTtcblxuICAgICAgICB2YXIgc3ViTG9jYWxLZXkgPSBzdWJzY3JpcHRpb25JZFRvTG9jYWxLZXlNYXBbbXNnLnN1YnNjcmlwdGlvbl9pZF07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzdWJMb2NhbEtleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzdWJzY3JpcHRpb25zTGlzdFtzdWJMb2NhbEtleV07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb24gIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhY2tlZFNlcnZlcnNGb3VuZCA9IHN1YnNjcmlwdGlvbi50cmFja2VkU2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKHNlcnZlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNlcnZlci5zdWJzY3JpcHRpb25JZCA9PT0gbXNnLnN1YnNjcmlwdGlvbl9pZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRyYWNrZWRTZXJ2ZXJzRm91bmQubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNQcml2YXRlRGF0YSA9IG1zZy5vb2IgJiYgbXNnLnNuYXBzaG90O1xuXG4gICAgICAgIHZhciBzZW5kaW5nU2VydmVySWQgPSB0cmFja2VkU2VydmVyc0ZvdW5kWzBdLnNlcnZlcklkO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYXJyaXZlZERhdGEgb2JqZWN0LCBuZXcgb2JqZWN0IGZvciBlYWNoIGhhbmRsZXIgY2FsbFxuICAgICAgICBmdW5jdGlvbiByZWNlaXZlZFN0cmVhbURhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGE6IG1zZy5kYXRhLFxuICAgICAgICAgICAgICAgIHNlcnZlcjogcmVwb3NpdG9yeS5nZXRTZXJ2ZXJCeUlkKHNlbmRpbmdTZXJ2ZXJJZCkuZ2V0SW5mb0ZvclVzZXIoKSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0QXJndW1lbnRzOiBzdWJzY3JpcHRpb24uYXJndW1lbnRzIHx8IHt9LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZTogaXNQcml2YXRlRGF0YVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvbkRhdGFIYW5kbGVycyA9IHN1YnNjcmlwdGlvbi5oYW5kbGVycy5vbkRhdGE7XG4gICAgICAgIHZhciBxdWV1ZWREYXRhID0gc3Vic2NyaXB0aW9uLnF1ZXVlZC5kYXRhO1xuXG4gICAgICAgIGlmIChvbkRhdGFIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvbkRhdGFIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVjZWl2ZWRTdHJlYW1EYXRhKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXVlZERhdGEucHVzaChyZWNlaXZlZFN0cmVhbURhdGEoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN1YnNjcmlwdGlvbkNhbmNlbGxlZChtc2cpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdoYW5kbGVTdWJzY3JpcHRpb25DYW5jZWxsZWQnLCBtc2cpO1xuXG4gICAgICAgIHZhciBzdWJMb2NhbEtleSA9IHN1YnNjcmlwdGlvbklkVG9Mb2NhbEtleU1hcFttc2cuc3Vic2NyaXB0aW9uX2lkXTtcblxuICAgICAgICBpZiAodHlwZW9mIHN1YkxvY2FsS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbnNMaXN0W3N1YkxvY2FsS2V5XTtcblxuICAgICAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbHRlciB0cmFja2VkIHNlcnZlcnNcbiAgICAgICAgdmFyIGV4cGVjdGVkTmV3TGVuZ3RoID0gc3Vic2NyaXB0aW9uLnRyYWNrZWRTZXJ2ZXJzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLnRyYWNrZWRTZXJ2ZXJzID0gc3Vic2NyaXB0aW9uLnRyYWNrZWRTZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbihzZXJ2ZXIpIHtcbiAgICAgICAgICAgIGlmIChzZXJ2ZXIuc3Vic2NyaXB0aW9uSWQgPT09IG1zZy5zdWJzY3JpcHRpb25faWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ucXVldWVkLmNsb3NlcnMucHVzaChzZXJ2ZXIuc2VydmVySWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIGEgc2VydmVyIHdhcyBhY3R1YWxseSByZW1vdmVkXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24udHJhY2tlZFNlcnZlcnMubGVuZ3RoICE9PSBleHBlY3RlZE5ld0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyB3YXMgdGhlIGxhc3QgcmVtYWluaW5nIHNlcnZlclxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnRyYWNrZWRTZXJ2ZXJzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoc3Vic2NyaXB0aW9uLnRpbWVvdXRJZCk7XG4gICAgICAgICAgICBjYWxsT25DbG9zZWRIYW5kbGVycyhzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNMaXN0W3N1YkxvY2FsS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25JZFRvTG9jYWxLZXlNYXBbbXNnLnN1YnNjcmlwdGlvbl9pZF1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsT25DbG9zZWRIYW5kbGVycyhzdWJzY3JpcHRpb24sIHJlYXNvbikge1xuXG4gICAgICAgIHZhciBjbG9zZXJzQ291bnQgPSBzdWJzY3JpcHRpb24ucXVldWVkLmNsb3NlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY2xvc2luZ1NlcnZlcklkID0gKGNsb3NlcnNDb3VudCA+IDApID8gc3Vic2NyaXB0aW9uLnF1ZXVlZC5jbG9zZXJzW2Nsb3NlcnNDb3VudCAtIDFdIDogbnVsbDtcblxuICAgICAgICB2YXIgY2xvc2luZ1NlcnZlciA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgY2xvc2luZ1NlcnZlcklkID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY2xvc2luZ1NlcnZlciA9IHJlcG9zaXRvcnkuZ2V0U2VydmVyQnlJZChjbG9zaW5nU2VydmVySWQpLmdldEluZm9Gb3JVc2VyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpcHRpb24uaGFuZGxlcnMub25DbG9zZWQuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiByZWFzb24gfHwgT05fQ0xPU0VfTVNHX1NFUlZFUl9JTklULFxuICAgICAgICAgICAgICAgIHJlcXVlc3RBcmd1bWVudHM6IHN1YnNjcmlwdGlvbi5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc2VydmVyOiBjbG9zaW5nU2VydmVyLFxuICAgICAgICAgICAgICAgIHN0cmVhbTogc3Vic2NyaXB0aW9uLm1ldGhvZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlU3Vic2NyaXB0aW9uKHN1YkxvY2FsS2V5KSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnY2xvc2VTdWJzY3JpcHRpb24nLCBzdWJMb2NhbEtleSk7XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbnNMaXN0W3N1YkxvY2FsS2V5XTtcblxuICAgICAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlbGwgZWFjaCBzZXJ2ZXIgdGhhdCB3ZSdyZSB1bnN1YnNjcmliaW5nXG4gICAgICAgIHN1YnNjcmlwdGlvbi50cmFja2VkU2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChzZXJ2ZXIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VydmVyLnN1YnNjcmlwdGlvbklkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kRmlyZUFuZEZvcmdldCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJyxcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25faWQ6IHNlcnZlci5zdWJzY3JpcHRpb25JZCxcbiAgICAgICAgICAgICAgICByZWFzb25fdXJpOiAnJyxcbiAgICAgICAgICAgICAgICByZWFzb246IE9OX0NMT1NFX01TR19DTElFTlRfSU5JVFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25JZFRvTG9jYWxLZXlNYXBbc2VydmVyLnN1YnNjcmlwdGlvbklkXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLnRyYWNrZWRTZXJ2ZXJzID0gW107XG5cbiAgICAgICAgY2FsbE9uQ2xvc2VkSGFuZGxlcnMoc3Vic2NyaXB0aW9uLCBPTl9DTE9TRV9NU0dfQ0xJRU5UX0lOSVQpO1xuXG4gICAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zTGlzdFtzdWJMb2NhbEtleV07XG5cblxuICAgIH1cblxuICAgIHJldHVybiB7IHN1YnNjcmliZTogc3Vic2NyaWJlIH07XG59O1xuIiwidmFyIGNhbGxiYWNrUmVnaXN0cnkgPSByZXF1aXJlKCdjYWxsYmFjay1yZWdpc3RyeScpO1xudmFyIFN0cmVhbWluZyA9IHJlcXVpcmUoJy4vY2xpZW50LXN0cmVhbWluZycpO1xuXG4vKipcbiAqIEhhbmRsZXMgc2Vzc2lvbiBsaWZldGltZSBhbmQgZXZlbnRzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluc3RhbmNlLCBjb25uZWN0aW9uLCByZXBvc2l0b3J5LCBzZXNzaW9uLCBsb2dnZXIpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgY29ubmVjdGlvbi5vbigncGVlci1hZGRlZCcsIGhhbmRsZVBlZXJBZGRlZCk7XG4gICAgY29ubmVjdGlvbi5vbigncGVlci1yZW1vdmVkJywgaGFuZGxlUGVlclJlbW92ZWQpO1xuICAgIGNvbm5lY3Rpb24ub24oJ21ldGhvZHMtYWRkZWQnLCBoYW5kbGVNZXRob2RzQWRkZWRNZXNzYWdlKTtcbiAgICBjb25uZWN0aW9uLm9uKCdtZXRob2RzLXJlbW92ZWQnLCBoYW5kbGVNZXRob2RzUmVtb3ZlZE1lc3NhZ2UpO1xuXG4gICAgdmFyIGNhbGxiYWNrcyA9IGNhbGxiYWNrUmVnaXN0cnkoKTtcbiAgICB2YXIgc3RyZWFtaW5nID0gbmV3IFN0cmVhbWluZyhpbnN0YW5jZSwgY29ubmVjdGlvbiwgcmVwb3NpdG9yeSwgc2Vzc2lvbiwgbG9nZ2VyKTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZVBlZXJBZGRlZChtc2cpIHtcbiAgICAgICAgdmFyIG5ld1BlZXJJZCA9IG1zZy5uZXdfcGVlcl9pZDtcbiAgICAgICAgdmFyIHJlbW90ZUlkID0gbXNnLmlkZW50aXR5O1xuXG4gICAgICAgIHZhciBzZXJ2ZXJJbmZvID0ge1xuICAgICAgICAgICAgbWFjaGluZTogcmVtb3RlSWQubWFjaGluZSxcbiAgICAgICAgICAgIHBpZDogcmVtb3RlSWQucHJvY2VzcyxcbiAgICAgICAgICAgIGluc3RhbmNlOiByZW1vdGVJZC5pbnN0YW5jZSxcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uOiByZW1vdGVJZC5hcHBsaWNhdGlvbixcbiAgICAgICAgICAgIGVudmlyb25tZW50OiByZW1vdGVJZC5lbnZpcm9ubWVudCxcbiAgICAgICAgICAgIHJlZ2lvbjogcmVtb3RlSWQucmVnaW9uLFxuICAgICAgICAgICAgdXNlcjogcmVtb3RlSWQudXNlclxuICAgICAgICB9O1xuXG4gICAgICAgIHJlcG9zaXRvcnkuYWRkU2VydmVyKHNlcnZlckluZm8sIG5ld1BlZXJJZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlUGVlclJlbW92ZWQobXNnKSB7XG4gICAgICAgIHZhciByZW1vdmVkUGVlcklkID0gbXNnLnJlbW92ZWRfaWQ7XG4gICAgICAgIHZhciByZWFzb24gPSBtc2cucmVhc29uO1xuXG4gICAgICAgIHJlcG9zaXRvcnkucmVtb3ZlU2VydmVyQnlJZChyZW1vdmVkUGVlcklkLCByZWFzb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZU1ldGhvZHNBZGRlZE1lc3NhZ2UobXNnKSB7XG4gICAgICAgIHZhciBzZXJ2ZXJJZCA9IG1zZy5zZXJ2ZXJfaWQ7XG4gICAgICAgIHZhciBtZXRob2RzID0gbXNnLm1ldGhvZHM7XG5cbiAgICAgICAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2RJbmZvID0ge1xuICAgICAgICAgICAgICAgIGlkOiBtZXRob2QuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogbWV0aG9kLm5hbWUsXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IG1ldGhvZC5kaXNwbGF5X25hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG1ldGhvZC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBtZXRob2QudmVyc2lvbixcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlczogbWV0aG9kLm9iamVjdF90eXBlcyxcbiAgICAgICAgICAgICAgICBhY2NlcHRzOiBtZXRob2QuaW5wdXRfc2lnbmF0dXJlLFxuICAgICAgICAgICAgICAgIHJldHVybnM6IG1ldGhvZC5yZXN1bHRfc2lnbmF0dXJlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXBvc2l0b3J5LmFkZFNlcnZlck1ldGhvZChzZXJ2ZXJJZCwgbWV0aG9kSW5mbyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZU1ldGhvZHNSZW1vdmVkTWVzc2FnZShtc2cpIHtcbiAgICAgICAgdmFyIHNlcnZlcklkID0gbXNnLnNlcnZlcl9pZDtcbiAgICAgICAgdmFyIG1ldGhvZElkTGlzdCA9IG1zZy5tZXRob2RzO1xuXG4gICAgICAgIHZhciBzZXJ2ZXIgPSByZXBvc2l0b3J5LmdldFNlcnZlckJ5SWQoc2VydmVySWQpO1xuXG4gICAgICAgIHZhciBzZXJ2ZXJNZXRob2RLZXlzID0gT2JqZWN0LmtleXMoc2VydmVyLm1ldGhvZHMpO1xuXG4gICAgICAgIHNlcnZlck1ldGhvZEtleXMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kS2V5KSB7XG5cbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBzZXJ2ZXIubWV0aG9kc1ttZXRob2RLZXldO1xuXG4gICAgICAgICAgICBpZiAobWV0aG9kSWRMaXN0LmluZGV4T2YobWV0aG9kLmluZm8uaWQpID4gLTEpIHtcblxuICAgICAgICAgICAgICAgIHJlcG9zaXRvcnkucmVtb3ZlU2VydmVyTWV0aG9kKHNlcnZlcklkLCBtZXRob2RLZXkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52b2tlKGlkLCBtZXRob2QsIGFyZ3MsIHRhcmdldCkge1xuXG4gICAgICAgIHZhciBzZXJ2ZXJJZCA9IHRhcmdldC5pZDtcbiAgICAgICAgdmFyIG1ldGhvZElkID0gbWV0aG9kLmluZm8uaWQ7XG5cbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzZW5kaW5nIGNhbGwgKCcgKyBpZCArICcpIGZvciBtZXRob2QgaWQgJyArIG1ldGhvZElkICsgJyB0byBzZXJ2ZXIgJyArIHNlcnZlcklkKTtcbiAgICAgICAgdmFyIG1zZyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdjYWxsJyxcbiAgICAgICAgICAgIHNlcnZlcl9pZDogc2VydmVySWQsXG4gICAgICAgICAgICBtZXRob2RfaWQ6IG1ldGhvZElkLFxuICAgICAgICAgICAgYXJndW1lbnRzX2t2OiBhcmdzXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gd2UgdHJhbnNmZXIgdGhlIGludm9jYXRpb24gaWQgYXMgdGFnXG4gICAgICAgIGNvbm5lY3Rpb24uc2VuZChtc2csIHsgaW52b2NhdGlvbklkOiBpZCwgc2VydmVySWQ6IHNlcnZlcklkIH0pXG4gICAgICAgICAgICAudGhlbihoYW5kbGVSZXN1bHRNZXNzYWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkludm9jYXRpb25SZXN1bHQoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2tzLmFkZCgnb25SZXN1bHQnLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVzdWx0TWVzc2FnZShtc2cpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdoYW5kbGUgcmVzdWx0IG1lc3NhZ2UgJyArIG1zZyk7XG5cbiAgICAgICAgdmFyIGludm9jYXRpb25JZCA9IG1zZy5fdGFnLmludm9jYXRpb25JZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG1zZy5yZXN1bHQ7XG4gICAgICAgIHZhciBzZXJ2ZXJJZCA9IG1zZy5fdGFnLnNlcnZlcklkO1xuICAgICAgICB2YXIgc2VydmVyID0gcmVwb3NpdG9yeS5nZXRTZXJ2ZXJCeUlkKHNlcnZlcklkKTtcblxuICAgICAgICBjYWxsYmFja3MuZXhlY3V0ZSgnb25SZXN1bHQnLCBpbnZvY2F0aW9uSWQsIHNlcnZlci5nZXRJbmZvRm9yVXNlcigpLCAwLCByZXN1bHQsICcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbnZva2U6IGludm9rZSxcbiAgICAgICAgb25JbnZvY2F0aW9uUmVzdWx0OiBvbkludm9jYXRpb25SZXN1bHQsXG4gICAgICAgIHN1YnNjcmliZTogc3RyZWFtaW5nLnN1YnNjcmliZVxuICAgIH07XG59O1xuIiwidmFyIHJhbmRvbSA9IHJlcXVpcmUoJy4vLi4vLi4vaGVscGVycy9yYW5kb20nKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnZXM2LXByb21pc2UnKS5Qcm9taXNlO1xudmFyIHByb21pc2lmeSA9IHJlcXVpcmUoJy4vLi4vLi4vaGVscGVycy9wcm9taXNpZnknKTtcblxuLyoqXG4qIFByb3ZpZGVzIHdheSBvZiBkZWxlZ2F0aW5nIGVycm9yIGFuZCBzdWNjZXNzIG1lc3NhZ2VzIGZyb20gZ3czIHRvIHRoZSBjbGllbnQgb3Igc2VydmVyXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29ubmVjdGlvbiwgbG9nZ2VyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHBlZXJJZCA9IGNvbm5lY3Rpb24uZ2V0UGVlcklkKCk7XG5cbiAgICBjb25uZWN0aW9uLm9uKCd3ZWxjb21lJywgaGFuZGxlV2VsY29tZU1lc3NhZ2UpOyAvLyBzdWJzY3JpYmUgZm9yIHdlbGNvbWUgc28gd2UgZ2V0IG91ciBwZWVyLWlkXG4gICAgY29ubmVjdGlvbi5vbignZXJyb3InLCBoYW5kbGVFcnJvck1lc3NhZ2UpO1xuICAgIGNvbm5lY3Rpb24ub24oJ3N1Y2Nlc3MnLCBoYW5kbGVTdWNjZXNzTWVzc2FnZSk7XG4gICAgY29ubmVjdGlvbi5vbigncmVzdWx0JywgaGFuZGxlU3VjY2Vzc01lc3NhZ2UpO1xuICAgIGNvbm5lY3Rpb24ub24oJ3N1YnNjcmliZWQnLCBoYW5kbGVTdWNjZXNzTWVzc2FnZSk7XG5cbiAgICB2YXIgcmVxdWVzdHNNYXAgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yTWVzc2FnZShtc2cpIHtcbiAgICAgICAgdmFyIHJlcXVlc3RJZCA9IG1zZy5yZXF1ZXN0X2lkO1xuICAgICAgICB2YXIgZW50cnkgPSByZXF1ZXN0c01hcFtyZXF1ZXN0SWRdO1xuICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsb2dnZXIuZXJyb3IoJ2Vycm9yIG1lc3NhZ2UgJyArIEpTT04uc3RyaW5naWZ5KG1zZykpO1xuICAgICAgICBlbnRyeS5lcnJvcihtc2cpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN1Y2Nlc3NNZXNzYWdlKG1zZykge1xuICAgICAgICB2YXIgcmVxdWVzdElkID0gbXNnLnJlcXVlc3RfaWQ7XG5cbiAgICAgICAgdmFyIGVudHJ5ID0gcmVxdWVzdHNNYXBbcmVxdWVzdElkXTtcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVudHJ5LnN1Y2Nlc3MobXNnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVXZWxjb21lTWVzc2FnZShtc2cpIHtcbiAgICAgICAgaGFuZGxlU3VjY2Vzc01lc3NhZ2UobXNnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXROZXh0UmVxdWVzdElkKCkge1xuICAgICAgICByZXR1cm4gcmFuZG9tKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gbXNnIG1lc3NhZ2UgdG8gc2VuZFxuICAgICAqIEBwYXJhbSB0YWcgYSBjdXN0b20gb2JqZWN0ICh0YWcpIC0gaXQgd2lsbCBiZSB0cmFuc2ZlcnJlZCB0byBzdWNjZXNzL2Vycm9yIGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NcbiAgICAgKiBAcGFyYW0gZXJyb3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZW5kKG1zZywgdGFnLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAvLyBBbGxvd3MgZnVuY3Rpb24gY2FsbGVyIHRvIG92ZXJyaWRlIHJlcXVlc3RfaWRcbiAgICAgICAgdmFyIHJlcXVlc3RJZCA9IGdldE5leHRSZXF1ZXN0SWQoKTtcbiAgICAgICAgbXNnLnJlcXVlc3RfaWQgPSBtc2cucmVxdWVzdF9pZCA/IG1zZy5yZXF1ZXN0X2lkIDogcmVxdWVzdElkO1xuICAgICAgICBtc2cucGVlcl9pZCA9IHBlZXJJZDtcblxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHJlcXVlc3RzTWFwW3JlcXVlc3RJZF0gPSB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oc3VjY2Vzc01zZykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVxdWVzdHNNYXBbcmVxdWVzdElkXTtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc01zZy5fdGFnID0gdGFnO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN1Y2Nlc3NNc2cpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yTXNnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0c01hcFtyZXF1ZXN0SWRdO1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1zZy5fdGFnID0gdGFnO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JNc2cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoJ3RpY2s0Mi1hZ20nLCBtc2cpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5KHByb21pc2UsIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZW5kRmlyZUFuZEZvcmdldChtc2cpIHtcbiAgICAgICAgLy8gQWxsb3dzIGZ1bmN0aW9uIGNhbGxlciB0byBvdmVycmlkZSByZXF1ZXN0X2lkXG4gICAgICAgIG1zZy5yZXF1ZXN0X2lkID0gbXNnLnJlcXVlc3RfaWQgPyBtc2cucmVxdWVzdF9pZCA6IGdldE5leHRSZXF1ZXN0SWQoKTtcbiAgICAgICAgbXNnLnBlZXJfaWQgPSBwZWVySWQ7XG5cbiAgICAgICAgY29ubmVjdGlvbi5zZW5kKCd0aWNrNDItYWdtJywgbXNnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZW5kOiBzZW5kLFxuICAgICAgICBzZW5kRmlyZUFuZEZvcmdldDogc2VuZEZpcmVBbmRGb3JnZXQsXG4gICAgICAgIG9uOiBjb25uZWN0aW9uLm9uLFxuICAgICAgICBwZWVySWQgOiBwZWVySWRcbiAgICB9XG59O1xuIiwidmFyIHNlc3Npb25GYWN0b3J5ID0gcmVxdWlyZSgnLi9zZXNzaW9uJyk7XG52YXIgc2VydmVyRmFjdG9yeSA9IHJlcXVpcmUoJy4vc2VydmVyJyk7XG52YXIgY2xpZW50RmFjdG9yeSA9IHJlcXVpcmUoJy4vY2xpZW50Jyk7XG52YXIgY29ubmVjdGlvbldyYXBwZXJGYWN0b3J5ID0gcmVxdWlyZSgnLi9jb253cmFwJyk7XG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2VzNi1wcm9taXNlJykuUHJvbWlzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGNvbm5lY3Rpb24sIHJlcG9zaXRvcnksIHZhdWx0LCBjb25maWd1cmF0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGxvZ2dlciA9IGNvbmZpZ3VyYXRpb24ubG9nZ2VyLnN1YkxvZ2dlcignZ3cyLXByb3RvY29sJyk7XG5cbiAgICBpZiAoIWNvbm5lY3Rpb24uZ2V0UGVlcklkKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgbG9nZ2VkIGluISBDYW4gbm90IGNvbnRpbnVlJyk7XG4gICAgfVxuXG4gICAgdmFyIGNvbm5lY3Rpb25XcmFwcGVyID0gY29ubmVjdGlvbldyYXBwZXJGYWN0b3J5KGNvbm5lY3Rpb24sIGxvZ2dlcik7XG4gICAgdmFyIHNlc3Npb24gPSBzZXNzaW9uRmFjdG9yeShpbnN0YW5jZSwgY29ubmVjdGlvbldyYXBwZXIsIHJlcG9zaXRvcnksIGxvZ2dlci5zdWJMb2dnZXIoJ3Nlc3Npb24nKSk7XG4gICAgdmFyIHNlcnZlciA9IHNlcnZlckZhY3RvcnkoaW5zdGFuY2UsIGNvbm5lY3Rpb25XcmFwcGVyLCByZXBvc2l0b3J5LCB2YXVsdCwgc2Vzc2lvbiwgbG9nZ2VyLnN1YkxvZ2dlcignc2VydmVyJykpO1xuICAgIHZhciBjbGllbnQgPSBjbGllbnRGYWN0b3J5KGluc3RhbmNlLCBjb25uZWN0aW9uV3JhcHBlciwgcmVwb3NpdG9yeSwgc2Vzc2lvbiwgbG9nZ2VyLnN1YkxvZ2dlcignY2xpZW50JykpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICBzZXNzaW9uLm9uQ29ubmVjdGVkKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGludm9rZTogY2xpZW50Lmludm9rZSxcbiAgICAgICAgICAgICAgICBvbkludm9jYXRpb25SZXN1bHQ6IGNsaWVudC5vbkludm9jYXRpb25SZXN1bHQsXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXI6IHNlcnZlci5yZWdpc3RlcixcbiAgICAgICAgICAgICAgICAvLyBUT0RPIGNoYW5nZSBwYXJhbXNcbiAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyOiBzZXJ2ZXIudW5yZWdpc3RlcixcbiAgICAgICAgICAgICAgICBvbkludm9rZWQ6IHNlcnZlci5vbkludm9rZWQsXG4gICAgICAgICAgICAgICAgbWV0aG9kSW52b2NhdGlvblJlc3VsdDogc2VydmVyLm1ldGhvZEludm9jYXRpb25SZXN1bHQsXG5cbiAgICAgICAgICAgICAgICAvLyBzdHJlYW0tcmVsYXRlZFxuICAgICAgICAgICAgICAgIHN1YnNjcmliZTogY2xpZW50LnN1YnNjcmliZSxcbiAgICAgICAgICAgICAgICBjcmVhdGVTdHJlYW06IHNlcnZlci5jcmVhdGVTdHJlYW0sXG4gICAgICAgICAgICAgICAgZ2V0QnJhbmNoTGlzdDogc2VydmVyLmdldEJyYW5jaExpc3QsXG4gICAgICAgICAgICAgICAgZ2V0U3Vic2NyaXB0aW9uTGlzdDogc2VydmVyLmdldFN1YnNjcmlwdGlvbkxpc3QsXG4gICAgICAgICAgICAgICAgY2xvc2VBbGxTdWJzY3JpcHRpb25zOiBzZXJ2ZXIuY2xvc2VBbGxTdWJzY3JpcHRpb25zLFxuICAgICAgICAgICAgICAgIGNsb3NlU2luZ2xlU3Vic2NyaXB0aW9uOiBzZXJ2ZXIuY2xvc2VTaW5nbGVTdWJzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgcHVzaERhdGE6IHNlcnZlci5wdXNoRGF0YSxcbiAgICAgICAgICAgICAgICBwdXNoRGF0YVRvU2luZ2xlOiBzZXJ2ZXIucHVzaERhdGFUb1NpbmdsZSxcbiAgICAgICAgICAgICAgICBvblN1YlJlcXVlc3Q6IHNlcnZlci5vblN1YlJlcXVlc3QsXG4gICAgICAgICAgICAgICAgYWNjZXB0UmVxdWVzdE9uQnJhbmNoOiBzZXJ2ZXIuYWNjZXB0UmVxdWVzdE9uQnJhbmNoLFxuICAgICAgICAgICAgICAgIHJlamVjdFJlcXVlc3Q6IHNlcnZlci5yZWplY3RSZXF1ZXN0LFxuICAgICAgICAgICAgICAgIG9uU3ViQWRkZWQ6IHNlcnZlci5vblN1YkFkZGVkLFxuICAgICAgICAgICAgICAgIG9uU3ViUmVtb3ZlZDogc2VydmVyLm9uU3ViUmVtb3ZlZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXNzaW9uLnN0YXJ0KCk7XG4gICAgfSk7XG59O1xuIiwidmFyIGNhbGxiYWNrUmVnaXN0cnkgPSByZXF1aXJlKCdjYWxsYmFjay1yZWdpc3RyeScpO1xuXG4vKipcbiAqIEhhbmRsZXMgcmVnaXN0ZXJpbmcgbWV0aG9kcyBhbmQgc2VuZGluZyBkYXRhIHRvIGNsaWVudHNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGNvbm5lY3Rpb24sIHJlcG9zaXRvcnksIHZhdWx0LCBzZXNzaW9uLCBsb2dnZXIpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgY29ubmVjdGlvbi5vbignYWRkLWludGVyZXN0JywgaGFuZGxlQWRkSW50ZXJlc3QpO1xuICAgIGNvbm5lY3Rpb24ub24oJ3JlbW92ZS1pbnRlcmVzdCcsIGhhbmRsZVJlbW92ZUludGVyZXN0KTtcblxuICAgIHZhciBTVUJTQ1JJUFRJT05fUkVRVUVTVCA9ICdvblN1YnNjcmlwdGlvblJlcXVlc3QnO1xuICAgIHZhciBTVUJTQ1JJUFRJT05fQURERUQgPSAnb25TdWJzY3JpcHRpb25BZGRlZCc7XG4gICAgdmFyIFNVQlNDUklQVElPTl9SRU1PVkVEID0gJ29uU3Vic2NyaXB0aW9uUmVtb3ZlZCc7XG4gICAgdmFyIEVSUl9VUklfU1VCU0NSSVBUSU9OX0ZBSUxFRCA9ICdjb20udGljazQyLmFnbS5lcnJvcnMuc3Vic2NyaXB0aW9uLmZhaWx1cmUnO1xuICAgIHZhciBjYWxsYmFja3MgPSBjYWxsYmFja1JlZ2lzdHJ5KCk7XG4gICAgdmFyIG5leHRTdHJlYW1JZCA9IDA7XG5cbiAgICAvLyBUT0RPIHRoZXJlIGFyZSBtYW55IG9mIHRoZXNlIGluY3JlbWVudGluZyBpbnRlZ2VyIGlkJ3MgLT4gbWFrZSBhIGhlbHBlciBtb2R1bGVcbiAgICBmdW5jdGlvbiBnZXROZXh0U3RyZWFtSWQoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbmV4dFN0cmVhbUlkO1xuICAgICAgICBuZXh0U3RyZWFtSWQgKz0gMTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIGEgc3Vic2NyaXB0aW9uIHJlcXVlc3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVBZGRJbnRlcmVzdChtc2cpIHtcblxuICAgICAgICBsb2dnZXIuZGVidWcoJ3NlcnZlcl9BZGRJbnRlcmVzdCAnLCBtc2cpO1xuXG4gICAgICAgIHZhciBjYWxsZXIgPSByZXBvc2l0b3J5LmdldFNlcnZlckJ5SWQobXNnLmNhbGxlcl9pZCk7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICh0eXBlb2YgY2FsbGVyLmdldEluZm9Gb3JVc2VyID09PSAnZnVuY3Rpb24nKSA/IGNhbGxlci5nZXRJbmZvRm9yVXNlcigpIDogbnVsbDtcblxuICAgICAgICAvLyBjYWxsIHN1YnNjcmlwdGlvblJlcXVlc3RIYW5kbGVyXG4gICAgICAgIHZhciByZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgICAgIG1zZzogbXNnLFxuICAgICAgICAgICAgYXJndW1lbnRzOiBtc2cuYXJndW1lbnRzX2t2IHx8IHt9LFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0cmVhbWluZ01ldGhvZCA9IHZhdWx0LmdldEJ5SWQobXNnLm1ldGhvZF9pZCk7XG5cbiAgICAgICAgaWYgKHN0cmVhbWluZ01ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzZW5kU3Vic2NyaXB0aW9uRmFpbGVkKFxuICAgICAgICAgICAgICAgICdObyBtZXRob2Qgd2l0aCBpZCAnICsgbXNnLm1ldGhvZF9pZCArICcgb24gdGhpcyBzZXJ2ZXIuJyxcbiAgICAgICAgICAgICAgICBtc2cuc3Vic2NyaXB0aW9uX2lkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zTWFwICYmIHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zTWFwW21zZy5zdWJzY3JpcHRpb25faWRdKSB7XG4gICAgICAgICAgICBzZW5kU3Vic2NyaXB0aW9uRmFpbGVkKFxuICAgICAgICAgICAgICAgICdBIHN1YnNjcmlwdGlvbiB3aXRoIGlkICcgKyBtc2cuc3Vic2NyaXB0aW9uX2lkICsgJyBhbHJlYWR5IGV4aXN0cy4nLFxuICAgICAgICAgICAgICAgIG1zZy5zdWJzY3JpcHRpb25faWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFja3MuZXhlY3V0ZShTVUJTQ1JJUFRJT05fUkVRVUVTVCwgcmVxdWVzdENvbnRleHQsIHN0cmVhbWluZ01ldGhvZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VuZFN1YnNjcmlwdGlvbkZhaWxlZChyZWFzb24sIHN1YnNjcmlwdGlvbklkKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSB7XG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgcmVhc29uX3VyaTogRVJSX1VSSV9TVUJTQ1JJUFRJT05fRkFJTEVELFxuICAgICAgICAgICAgcmVhc29uOiByZWFzb24sXG4gICAgICAgICAgICByZXF1ZXN0X2lkOiBzdWJzY3JpcHRpb25JZCAvLyB0aGlzIG92ZXJyaWRlcyBjb25uZWN0aW9uIHdyYXBwZXJcbiAgICAgICAgfTtcblxuICAgICAgICBjb25uZWN0aW9uLnNlbmRGaXJlQW5kRm9yZ2V0KGVycm9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWNjZXB0UmVxdWVzdE9uQnJhbmNoIChyZXF1ZXN0Q29udGV4dCwgc3RyZWFtaW5nTWV0aG9kLCBicmFuY2gpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3RDb250ZXh0JywgcmVxdWVzdENvbnRleHQpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYnJhbmNoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnJhbmNoID0gJyc7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZW1wdHkgYnJhbmNoJywgYnJhbmNoKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9uc01hcCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBzdHJlYW1pbmcgbWV0aG9kIGlzIG1pc3NpbmcgaXRzIHN1YnNjcmlwdGlvbnMuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3RyZWFtaW5nTWV0aG9kLmJyYW5jaEtleVRvU3RyZWFtSWRNYXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgc3RyZWFtaW5nIG1ldGhvZCBpcyBtaXNzaW5nIGl0cyBicmFuY2hlcy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHJlYW1JZCA9IGdldFN0cmVhbUlkKHN0cmVhbWluZ01ldGhvZCwgYnJhbmNoKTtcblxuICAgICAgICAvLyBBZGQgYSBuZXcgc3Vic2NyaXB0aW9uIHRvIHRoZSBtZXRob2RcbiAgICAgICAgdmFyIGtleSA9IHJlcXVlc3RDb250ZXh0Lm1zZy5zdWJzY3JpcHRpb25faWQ7XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgIGlkOiBrZXksXG4gICAgICAgICAgICBhcmd1bWVudHM6IHJlcXVlc3RDb250ZXh0LmFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluc3RhbmNlOiByZXF1ZXN0Q29udGV4dC5pbnN0YW5jZSxcbiAgICAgICAgICAgIGJyYW5jaEtleTogYnJhbmNoLFxuICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgc3Vic2NyaWJlTXNnOiByZXF1ZXN0Q29udGV4dC5tc2dcbiAgICAgICAgfTtcblxuICAgICAgICBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9uc01hcFtrZXldID0gc3Vic2NyaXB0aW9uO1xuXG4gICAgICAgIC8vIEluZm9ybSB0aGUgZ3dcbiAgICAgICAgY29ubmVjdGlvbi5zZW5kRmlyZUFuZEZvcmdldCh7XG4gICAgICAgICAgICB0eXBlOiAnYWNjZXB0ZWQnLFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uX2lkOiBrZXksXG4gICAgICAgICAgICBzdHJlYW1faWQ6IHN0cmVhbUlkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFBhc3Mgc3RhdGUgYWJvdmUtcHJvdG9jb2wgZm9yIHVzZXIgb2JqZWN0c1xuICAgICAgICBjYWxsYmFja3MuZXhlY3V0ZShTVUJTQ1JJUFRJT05fQURERUQsIHN1YnNjcmlwdGlvbiwgc3RyZWFtaW5nTWV0aG9kKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0cmVhbUlkKHN0cmVhbWluZ01ldGhvZCwgYnJhbmNoS2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgYnJhbmNoS2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnJhbmNoS2V5ID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmVlZGxlQnJhbmNoID0gc3RyZWFtaW5nTWV0aG9kLmJyYW5jaEtleVRvU3RyZWFtSWRNYXAuZmlsdGVyKGZ1bmN0aW9uIChicmFuY2gpIHtcbiAgICAgICAgICAgIHJldHVybiBicmFuY2gua2V5ID09PSBicmFuY2hLZXk7XG4gICAgICAgIH0pWzBdO1xuXG4gICAgICAgIHZhciBzdHJlYW1JZCA9IChuZWVkbGVCcmFuY2ggPyBuZWVkbGVCcmFuY2guc3RyZWFtSWQgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgICAgc3RyZWFtSWQgIT09ICdzdHJpbmcnIHx8IHN0cmVhbUlkID09PSAnJykge1xuICAgICAgICAgICAgc3RyZWFtSWQgPSBnZXROZXh0U3RyZWFtSWQoKTtcbiAgICAgICAgICAgIHN0cmVhbWluZ01ldGhvZC5icmFuY2hLZXlUb1N0cmVhbUlkTWFwLnB1c2goeyBrZXk6IGJyYW5jaEtleSwgc3RyZWFtSWQ6IHN0cmVhbUlkIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cmVhbUlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdFJlcXVlc3QocmVxdWVzdENvbnRleHQsIHN0cmVhbWluZ01ldGhvZCwgcmVhc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVhc29uICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVhc29uID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBzZW5kU3Vic2NyaXB0aW9uRmFpbGVkKFxuICAgICAgICAgICAgJ1N1YnNjcmlwdGlvbiByZWplY3RlZCBieSB1c2VyLiAnICsgcmVhc29uLFxuICAgICAgICAgICAgcmVxdWVzdENvbnRleHQubXNnLnN1YnNjcmlwdGlvbl9pZFxuICAgICAgICApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TdWJzY3JpcHRpb25MaWZldGltZUV2ZW50KGV2ZW50TmFtZSwgaGFuZGxlckZ1bmMpIHtcbiAgICAgICAgY2FsbGJhY2tzLmFkZChldmVudE5hbWUsIGhhbmRsZXJGdW5jKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1c2hUb0JyYW5jaChzdHJlYW1pbmdNZXRob2QsIGRhdGEsIGJyYW5jaGVzKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtaW5nTWV0aG9kICE9PSAnb2JqZWN0JyB8fCAhQXJyYXkuaXNBcnJheShzdHJlYW1pbmdNZXRob2QuYnJhbmNoS2V5VG9TdHJlYW1JZE1hcCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE8gdmFsaWRhdGUgZGF0YSBpcyBhIHBsYWluIG9iamVjdFxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnRzLiBEYXRhIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBicmFuY2hlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGJyYW5jaGVzID0gW2JyYW5jaGVzXTsgLy8gdXNlciB3YW50cyB0byBwdXNoIHRvIHNpbmdsZSBicmFuY2hcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShicmFuY2hlcykgfHwgYnJhbmNoZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIGJyYW5jaGVzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdldCB0aGUgU3RyZWFtSWQncyBmcm9tIHRoZSBtZXRob2QncyBicmFuY2ggbWFwXG4gICAgICAgIHZhciBzdHJlYW1JZExpc3QgPSBzdHJlYW1pbmdNZXRob2QuYnJhbmNoS2V5VG9TdHJlYW1JZE1hcFxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBicmFuY2hlcyA9PT0gbnVsbCB8fCAoQm9vbGVhbihicikgJiYgdHlwZW9mIGJyLmtleSA9PT0gJ3N0cmluZycgJiYgYnJhbmNoZXMuaW5kZXhPZihici5rZXkpID49IDApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoYnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnIuc3RyZWFtSWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBzdHJlYW1JZExpc3QuZm9yRWFjaChmdW5jdGlvbiAoc3RyZWFtSWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VuZEZpcmVBbmRGb3JnZXQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdwdWJsaXNoJyxcbiAgICAgICAgICAgICAgICBzdHJlYW1faWQ6IHN0cmVhbUlkLFxuICAgICAgICAgICAgICAgIC8vIHNlcXVlbmNlOiBudWxsLCAgLy8gdGhlIHN0cmVhbWluZ01ldGhvZCBtaWdodCBiZSB1c2VkIGZvciB0aGlzXG4gICAgICAgICAgICAgICAgLy8gc25hcHNob3Q6IGZhbHNlLCAvLyAuLi5hbmQgdGhpc1xuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1c2hEYXRhVG9TaW5nbGUoc3RyZWFtaW5nTWV0aG9kLCBzdWJzY3JpcHRpb24sIGRhdGEpIHtcbiAgICAgICAgLy8gVE9ETyB2YWxpZGF0ZSBkYXRhIGlzIGEgcGxhaW4gb2JqZWN0XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudHMuIERhdGEgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25uZWN0aW9uLnNlbmRGaXJlQW5kRm9yZ2V0KHtcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbl9pZDogc3Vic2NyaXB0aW9uLmlkLFxuICAgICAgICAgICAgLy8gc2VxdWVuY2U6IG51bGwsICAvLyB0aGUgc3RyZWFtaW5nTWV0aG9kIG1pZ2h0IGJlIHVzZWQgZm9yIHRoaXNcbiAgICAgICAgICAgIC8vIHNuYXBzaG90OiBmYWxzZSwgLy8gLi4uYW5kIHRoaXNcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZVNpbmdsZVN1YnNjcmlwdGlvbihzdHJlYW1pbmdNZXRob2QsIHN1YnNjcmlwdGlvbikge1xuXG4gICAgICAgIGRlbGV0ZSBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9uc01hcFtzdWJzY3JpcHRpb24uaWRdO1xuXG4gICAgICAgIGNvbm5lY3Rpb24uc2VuZEZpcmVBbmRGb3JnZXQoe1xuICAgICAgICAgICAgdHlwZTogJ2Ryb3Atc3Vic2NyaXB0aW9uJyxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbl9pZDogc3Vic2NyaXB0aW9uLmlkLFxuICAgICAgICAgICAgcmVhc29uOiAnU2VydmVyIGRyb3BwaW5nIGEgc2luZ2xlIHN1YnNjcmlwdGlvbidcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBzdWJzY3JpcHRpb24uaW5zdGFuY2U7XG5cbiAgICAgICAgY2FsbGJhY2tzLmV4ZWN1dGUoU1VCU0NSSVBUSU9OX1JFTU9WRUQsIHN1YnNjcmliZXIsIHN0cmVhbWluZ01ldGhvZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2VNdWx0aXBsZVN1YnNjcmlwdGlvbnMoc3RyZWFtaW5nTWV0aG9kLCBicmFuY2hLZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHJlYW1pbmdNZXRob2QgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9uc01hcCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zVG9DbG9zZSA9IE9iamVjdC5rZXlzKHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zTWFwKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtaW5nTWV0aG9kLnN1YnNjcmlwdGlvbnNNYXBba2V5XTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYnJhbmNoS2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1RvQ2xvc2UgPSBzdWJzY3JpcHRpb25zVG9DbG9zZS5maWx0ZXIoZnVuY3Rpb24oc3ViKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1Yi5icmFuY2hLZXkgPT09IGJyYW5jaEtleTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uc1RvQ2xvc2UuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBkZWxldGUgc3RyZWFtaW5nTWV0aG9kLnN1YnNjcmlwdGlvbnNNYXBbc3Vic2NyaXB0aW9uLmlkXTtcblxuICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kRmlyZUFuZEZvcmdldCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Ryb3Atc3Vic2NyaXB0aW9uJyxcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25faWQ6IHN1YnNjcmlwdGlvbi5pZCxcbiAgICAgICAgICAgICAgICByZWFzb246ICdTZXJ2ZXIgZHJvcHBpbmcgYWxsIHN1YnNjcmlwdGlvbnMgb24gc3RyZWFtX2lkOiAnICsgc3Vic2NyaXB0aW9uLnN0cmVhbUlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3Vic2NyaXB0aW9uTGlzdChzdHJlYW1pbmdNZXRob2QsIGJyYW5jaEtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHN0cmVhbWluZ01ldGhvZCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gW107XG5cbiAgICAgICAgdmFyIGFsbFN1YnNjcmlwdGlvbnMgPSBPYmplY3Qua2V5cyhzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9uc01hcCkubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zTWFwW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYnJhbmNoS2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucyA9IGFsbFN1YnNjcmlwdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zID0gYWxsU3Vic2NyaXB0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHN1Yikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWIuYnJhbmNoS2V5ID09PSBicmFuY2hLZXk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEJyYW5jaExpc3Qoc3RyZWFtaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtaW5nTWV0aG9kICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFsbFN1YnNjcmlwdGlvbnMgPSBPYmplY3Qua2V5cyhzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9uc01hcCkubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zTWFwW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBrZXlzV2l0aER1cGxpY2F0ZXMgPSBhbGxTdWJzY3JpcHRpb25zLm1hcChmdW5jdGlvbiAoc3ViKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3ViID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygc3ViLmJyYW5jaEtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzdWIuYnJhbmNoS2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHNlZW4gPSBbXTtcblxuICAgICAgICB2YXIgYnJhbmNoQXJyYXkgPSBrZXlzV2l0aER1cGxpY2F0ZXMuZmlsdGVyKGZ1bmN0aW9uIChiS2V5KSB7XG4gICAgICAgICAgICBpZiAoYktleSA9PT0gbnVsbCB8fCBzZWVuLmluZGV4T2YoYktleSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZW4ucHVzaChiS2V5KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYnJhbmNoQXJyYXk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlSW50ZXJlc3QobXNnKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnaGFuZGxlUmVtb3ZlSW50ZXJlc3QnLCBtc2cpO1xuXG4gICAgICAgIHZhciBzdHJlYW1pbmdNZXRob2QgPSB2YXVsdC5nZXRCeUlkKG1zZy5tZXRob2RfaWQpXG5cbiAgICAgICAgaWYgKHR5cGVvZiBtc2cuc3Vic2NyaXB0aW9uX2lkICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgdHlwZW9mIHN0cmVhbWluZ01ldGhvZCAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgICAgIHR5cGVvZiBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9uc01hcFttc2cuc3Vic2NyaXB0aW9uX2lkXSAhPT0gJ29iamVjdCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IHN0cmVhbWluZ01ldGhvZC5zdWJzY3JpcHRpb25zTWFwW21zZy5zdWJzY3JpcHRpb25faWRdLmluc3RhbmNlO1xuXG4gICAgICAgIGRlbGV0ZSBzdHJlYW1pbmdNZXRob2Quc3Vic2NyaXB0aW9uc01hcFttc2cuc3Vic2NyaXB0aW9uX2lkXTtcblxuICAgICAgICBjYWxsYmFja3MuZXhlY3V0ZShTVUJTQ1JJUFRJT05fUkVNT1ZFRCwgc3Vic2NyaWJlciwgc3RyZWFtaW5nTWV0aG9kKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwdXNoRGF0YTogcHVzaFRvQnJhbmNoLFxuICAgICAgICBwdXNoRGF0YVRvU2luZ2xlOiBwdXNoRGF0YVRvU2luZ2xlLFxuICAgICAgICBvblN1YlJlcXVlc3Q6IG9uU3Vic2NyaXB0aW9uTGlmZXRpbWVFdmVudC5iaW5kKG51bGwsIFNVQlNDUklQVElPTl9SRVFVRVNUKSxcbiAgICAgICAgb25TdWJBZGRlZDogb25TdWJzY3JpcHRpb25MaWZldGltZUV2ZW50LmJpbmQobnVsbCwgU1VCU0NSSVBUSU9OX0FEREVEKSxcbiAgICAgICAgb25TdWJSZW1vdmVkOiBvblN1YnNjcmlwdGlvbkxpZmV0aW1lRXZlbnQuYmluZChudWxsLCBTVUJTQ1JJUFRJT05fUkVNT1ZFRCksXG4gICAgICAgIGFjY2VwdFJlcXVlc3RPbkJyYW5jaDogYWNjZXB0UmVxdWVzdE9uQnJhbmNoLFxuICAgICAgICByZWplY3RSZXF1ZXN0OiByZWplY3RSZXF1ZXN0LFxuICAgICAgICBnZXRTdWJzY3JpcHRpb25MaXN0OiBnZXRTdWJzY3JpcHRpb25MaXN0LFxuICAgICAgICBnZXRCcmFuY2hMaXN0OiBnZXRCcmFuY2hMaXN0LFxuICAgICAgICBjbG9zZVNpbmdsZVN1YnNjcmlwdGlvbjogY2xvc2VTaW5nbGVTdWJzY3JpcHRpb24sXG4gICAgICAgIGNsb3NlTXVsdGlwbGVTdWJzY3JpcHRpb25zOiBjbG9zZU11bHRpcGxlU3Vic2NyaXB0aW9uc1xuICAgIH07XG59O1xuXG4iLCJ2YXIgY2FsbGJhY2tSZWdpc3RyeSA9IHJlcXVpcmUoJ2NhbGxiYWNrLXJlZ2lzdHJ5Jyk7XG52YXIgU3RyZWFtaW5nID0gcmVxdWlyZSgnLi9zZXJ2ZXItc3RyZWFtaW5nJyk7XG5cbi8qKlxuICogSGFuZGxlcyByZWdpc3RlcmluZyBtZXRob2RzIGFuZCBzZW5kaW5nIGRhdGEgdG8gY2xpZW50c1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgY29ubmVjdGlvbiwgcmVwb3NpdG9yeSwgdmF1bHQsIHNlc3Npb24sIGxvZ2dlcikge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgY2FsbGJhY2tzID0gY2FsbGJhY2tSZWdpc3RyeSgpO1xuICAgIHZhciBzdHJlYW1pbmcgPSBuZXcgU3RyZWFtaW5nKGluc3RhbmNlLCBjb25uZWN0aW9uLCByZXBvc2l0b3J5LCB2YXVsdCwgc2Vzc2lvbiwgbG9nZ2VyKTtcblxuICAgIGNvbm5lY3Rpb24ub24oJ2ludm9rZScsIGhhbmRsZUludm9rZU1lc3NhZ2UpO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVnaXN0ZXJlZE1lc3NhZ2UobXNnKSB7XG4gICAgICAgIHZhciBtZXRob2RJZCA9IG1zZy5fdGFnLm1ldGhvZElkO1xuICAgICAgICB2YXIgcmVwb01ldGhvZCA9IHZhdWx0LmdldEJ5SWQobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmIChyZXBvTWV0aG9kICYmIHJlcG9NZXRob2QucmVnaXN0cmF0aW9uQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ3JlZ2lzdGVyZWQgbWV0aG9kICcgKyByZXBvTWV0aG9kLmRlZmluaXRpb24ubmFtZSArICcgd2l0aCBpZCAnICsgbWV0aG9kSWQpO1xuICAgICAgICAgICAgcmVwb01ldGhvZC5yZWdpc3RyYXRpb25DYWxsYmFja3Muc3VjY2VzcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRXJyb3JSZWdpc3Rlcihtc2cpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4obXNnKTtcblxuICAgICAgICB2YXIgbWV0aG9kSWQgPSBtc2cuX3RhZy5tZXRob2RJZDtcbiAgICAgICAgdmFyIHJlcG9NZXRob2QgPSB2YXVsdC5nZXRCeUlkKG1ldGhvZElkKTtcblxuICAgICAgICBpZiAocmVwb01ldGhvZCAmJiByZXBvTWV0aG9kLnJlZ2lzdHJhdGlvbkNhbGxiYWNrcykge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdmYWlsZWQgdG8gcmVnaXN0ZXIgbWV0aG9kICcgKyByZXBvTWV0aG9kLmRlZmluaXRpb24ubmFtZSArICcgd2l0aCBpZCAnICsgbWV0aG9kSWQpO1xuICAgICAgICAgICAgcmVwb01ldGhvZC5yZWdpc3RyYXRpb25DYWxsYmFja3MuZmFpbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlSW52b2tlTWVzc2FnZShtc2cpIHtcbiAgICAgICAgdmFyIGludm9jYXRpb25JZCA9IG1zZy5pbnZvY2F0aW9uX2lkO1xuICAgICAgICB2YXIgcGVlcklkID0gbXNnLnBlZXJfaWQ7XG4gICAgICAgIHZhciBtZXRob2RJZCA9IG1zZy5tZXRob2RfaWQ7XG4gICAgICAgIHZhciBhcmdzID0gbXNnLmFyZ3VtZW50c19rdjtcblxuICAgICAgICBsb2dnZXIuZGVidWcoJ3JlY2VpdmVkIGludm9jYXRpb24gZm9yIG1ldGhvZCBpZCBcIicgKyBtZXRob2RJZCArICdcIicpO1xuXG4gICAgICAgIHZhciBtZXRob2RMaXN0ID0gdmF1bHQuZ2V0TGlzdCgpO1xuXG4gICAgICAgIHZhciBtZXRob2QgPSBtZXRob2RMaXN0LmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIG0uX3JlcG9JZCA9PT0gbWV0aG9kSWQ7XG4gICAgICAgIH0pWzBdO1xuXG4gICAgICAgIC8vIFN0b3AgaWYgdGhlIG1lc3NhZ2UgaXNuJ3QgZm9yIHVzXG4gICAgICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsaWVudCA9IHJlcG9zaXRvcnkuZ2V0U2VydmVyQnlJZChwZWVySWQpO1xuICAgICAgICB2YXIgaW52b2NhdGlvbkFyZ3MgPSB7IGFyZ3M6IGFyZ3MsIGluc3RhbmNlOiBjbGllbnQuZ2V0SW5mb0ZvclVzZXIoKSB9O1xuXG4gICAgICAgIGNhbGxiYWNrcy5leGVjdXRlKCdvbkludm9rZWQnLCBtZXRob2QsIGludm9jYXRpb25JZCwgaW52b2NhdGlvbkFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVN0cmVhbShyZXBvTWV0aG9kLCBzdHJlYW1EZWYsIHN1Y2Nlc3MsIGZhaWwpIHtcbiAgICAgICAgdmFyIGlzU3RyZWFtaW5nID0gdHJ1ZTtcblxuICAgICAgICAvLyBVdGlsaXR5IHRoaW5ncyBmb3IgdGhpcyBwcm90b2NvbFxuICAgICAgICByZXBvTWV0aG9kLnN1YnNjcmlwdGlvbnNNYXAgPSB7fTsgLy8gfnN1YnNjcmlwdGlvbl9pZH4gOiB7aWQ6fiwgYnJhbmNoS2V5OiAnficsIGFyZ3VtZW50czoge359LCBpbnN0YW5jZTp7fn0sIGV0Yy59XG4gICAgICAgIHJlcG9NZXRob2QuYnJhbmNoS2V5VG9TdHJlYW1JZE1hcCA9IFtdOyAvLyBbIHticmFuY2hLZXk6ICcnLCBzdHJlYW1JZDogN30sIHsuLi59LCAuLi5dXG5cbiAgICAgICAgcmVnaXN0ZXIocmVwb01ldGhvZCwgc3VjY2VzcywgZmFpbCwgaXNTdHJlYW1pbmcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKHJlcG9NZXRob2QsIHN1Y2Nlc3MsIGZhaWwsIGlzU3RyZWFtaW5nKSB7XG5cbiAgICAgICAgdmFyIG1ldGhvZERlZiA9IHJlcG9NZXRob2QuZGVmaW5pdGlvbjtcblxuICAgICAgICAvLyBUT0RPIHJldmlldywgd2h5IGlzIHRoaXMgdHlwZSBvZiBjbG9zdXJlIG5lY2Vzc2FyeVxuICAgICAgICByZXBvTWV0aG9kLnJlZ2lzdHJhdGlvbkNhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MsXG4gICAgICAgICAgICBmYWlsOiBmYWlsXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGZsYWdzID0ge307XG4gICAgICAgIGlmIChpc1N0cmVhbWluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZmxhZ3MgPSB7IHN1cHBvcnRzU3RyZWFtaW5nOiB0cnVlIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ2dlci5kZWJ1ZygncmVnaXN0ZXJpbmcgbWV0aG9kIFwiJyArIG1ldGhvZERlZi5uYW1lICsgJ1wiJyk7XG4gICAgICAgIHZhciByZWdpc3Rlck1zZyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdyZWdpc3RlcicsXG4gICAgICAgICAgICBtZXRob2RzOiBbe1xuICAgICAgICAgICAgICAgIGlkOiByZXBvTWV0aG9kLl9yZXBvSWQsXG4gICAgICAgICAgICAgICAgbmFtZTogbWV0aG9kRGVmLm5hbWUsXG4gICAgICAgICAgICAgICAgZGlzcGxheV9uYW1lOiBtZXRob2REZWYuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG1ldGhvZERlZi5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBtZXRob2REZWYudmVyc2lvbixcbiAgICAgICAgICAgICAgICBmbGFnczogZmxhZ3MsXG4gICAgICAgICAgICAgICAgb2JqZWN0X3R5cGVzOiBtZXRob2REZWYub2JqZWN0VHlwZXMsXG4gICAgICAgICAgICAgICAgaW5wdXRfc2lnbmF0dXJlOiBtZXRob2REZWYuYWNjZXB0cyxcbiAgICAgICAgICAgICAgICByZXN1bHRfc2lnbmF0dXJlOiBtZXRob2REZWYucmV0dXJucyxcbiAgICAgICAgICAgICAgICByZXN0cmljdGlvbnM6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfV1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25uZWN0aW9uLnNlbmQocmVnaXN0ZXJNc2csIHsgbWV0aG9kSWQ6IHJlcG9NZXRob2QuX3JlcG9JZCB9KVxuICAgICAgICAgICAgLnRoZW4oaGFuZGxlUmVnaXN0ZXJlZE1lc3NhZ2UpWydjYXRjaCddKGhhbmRsZUVycm9yUmVnaXN0ZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uSW52b2tlZChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFja3MuYWRkKCdvbkludm9rZWQnLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWV0aG9kSW52b2NhdGlvblJlc3VsdChyZWdpc3RyYXRpb25JZCwgaW52b2NhdGlvbklkLCBlcnIsIHJlc3VsdCkge1xuICAgICAgICB2YXIgbXNnID0ge1xuICAgICAgICAgICAgdHlwZTogJ3lpZWxkJyxcbiAgICAgICAgICAgIGludm9jYXRpb25faWQ6IGludm9jYXRpb25JZCxcbiAgICAgICAgICAgIHBlZXJfaWQ6IHNlc3Npb24ucGVlcklkKCksXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbm5lY3Rpb24uc2VuZEZpcmVBbmRGb3JnZXQobXNnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnJlZ2lzdGVyKG1ldGhvZCkge1xuICAgICAgICB2YXIgbXNnID0ge1xuICAgICAgICAgICAgdHlwZTogJ3VucmVnaXN0ZXInLFxuICAgICAgICAgICAgbWV0aG9kczogW21ldGhvZC5fcmVwb0lkXVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbm5lY3Rpb24uc2VuZChtc2cpXG4gICAgICAgICAgICAudGhlbihoYW5kbGVVbnJlZ2lzdGVyZWRNZXNzYWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVVbnJlZ2lzdGVyZWRNZXNzYWdlKG1zZykge1xuICAgICAgICB2YXIgcmVxdWVzdElkID0gbXNnLnJlcXVlc3RfaWQ7XG5cbiAgICAgICAgbG9nZ2VyLmRlYnVnKCd1bnJlZ2lzdGVyZWQgYnkgcmVxdWVzdElkICcgKyByZXF1ZXN0SWQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcbiAgICAgICAgb25JbnZva2VkOiBvbkludm9rZWQsXG4gICAgICAgIG1ldGhvZEludm9jYXRpb25SZXN1bHQ6IG1ldGhvZEludm9jYXRpb25SZXN1bHQsXG4gICAgICAgIHVucmVnaXN0ZXI6IHVucmVnaXN0ZXIsXG5cbiAgICAgICAgY3JlYXRlU3RyZWFtOiBjcmVhdGVTdHJlYW0sXG4gICAgICAgIGdldEJyYW5jaExpc3Q6IHN0cmVhbWluZy5nZXRCcmFuY2hMaXN0LFxuICAgICAgICBnZXRTdWJzY3JpcHRpb25MaXN0OiBzdHJlYW1pbmcuZ2V0U3Vic2NyaXB0aW9uTGlzdCxcbiAgICAgICAgY2xvc2VBbGxTdWJzY3JpcHRpb25zOiBzdHJlYW1pbmcuY2xvc2VNdWx0aXBsZVN1YnNjcmlwdGlvbnMsXG4gICAgICAgIGNsb3NlU2luZ2xlU3Vic2NyaXB0aW9uOiBzdHJlYW1pbmcuY2xvc2VTaW5nbGVTdWJzY3JpcHRpb24sXG4gICAgICAgIHB1c2hEYXRhOiBzdHJlYW1pbmcucHVzaERhdGEsXG4gICAgICAgIHB1c2hEYXRhVG9TaW5nbGU6IHN0cmVhbWluZy5wdXNoRGF0YVRvU2luZ2xlLFxuICAgICAgICBvblN1YlJlcXVlc3Q6IHN0cmVhbWluZy5vblN1YlJlcXVlc3QsXG4gICAgICAgIGFjY2VwdFJlcXVlc3RPbkJyYW5jaDogc3RyZWFtaW5nLmFjY2VwdFJlcXVlc3RPbkJyYW5jaCxcbiAgICAgICAgcmVqZWN0UmVxdWVzdDogc3RyZWFtaW5nLnJlamVjdFJlcXVlc3QsXG4gICAgICAgIG9uU3ViQWRkZWQ6IHN0cmVhbWluZy5vblN1YkFkZGVkLFxuICAgICAgICBvblN1YlJlbW92ZWQ6IHN0cmVhbWluZy5vblN1YlJlbW92ZWRcbiAgICB9XG59O1xuIiwidmFyIGNhbGxiYWNrUmVnaXN0cnkgPSByZXF1aXJlKCdjYWxsYmFjay1yZWdpc3RyeScpO1xuXG4vKipcbiAqIEhhbmRsZXMgc2Vzc2lvbiBsaWZldGltZSBhbmQgZXZlbnRzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluc3RhbmNlLCBjb25uZWN0aW9uLCByZXBvc2l0b3J5LCBsb2dnZXIpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGRvbWFpbiA9ICdjb20udGljazQyLmFnbSc7XG5cbiAgICBjb25uZWN0aW9uLm9uKCdsZWF2ZScsIGhhbmRsZUdvb2RieWVNZXNzYWdlKVxuXG4gICAgdmFyIG15UGVlcklkID0gY29ubmVjdGlvbi5wZWVySWQ7XG4gICAgdmFyIGNhbGxiYWNrcyA9IGNhbGxiYWNrUmVnaXN0cnkoKTtcbiAgICB2YXIgam9pbmVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdzdGFydGluZyBzZXNzaW9uIC4uLicpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2pvaW5pbmcgZG9tYWluIFwiJyArIGRvbWFpbik7XG5cbiAgICAgICAgdmFyIGpvaW5Nc2cgPSB7XG4gICAgICAgICAgICB0eXBlOiAnam9pbicsXG4gICAgICAgICAgICBkb21haW46IGRvbWFpblxuICAgICAgICB9O1xuICAgICAgICBjb25uZWN0aW9uLnNlbmQoam9pbk1zZylcbiAgICAgICAgICAgIC50aGVuKGhhbmRsZUpvaW5lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlSm9pbmVkKCkge1xuICAgICAgICBqb2luZWQgPSB0cnVlO1xuICAgICAgICByZXBvc2l0b3J5LmFkZFNlcnZlcihpbnN0YW5jZSwgbXlQZWVySWQpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2pvaW5lZCB0byBBR00gZG9tYWluIScpO1xuICAgICAgICBjYWxsYmFja3MuZXhlY3V0ZSgnb25Db25uZWN0ZWQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ3N0b3BwaW5nIHNlc3Npb24uLi4nKTtcbiAgICAgICAgdmFyIG1zZyA9IFsnTEVBVkUnLCBteVBlZXJJZCwgZG9tYWluXTtcbiAgICAgICAgY29ubmVjdGlvbi5zZW5kKG1zZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlR29vZGJ5ZU1lc3NhZ2UoKSB7XG4gICAgICAgIGpvaW5lZCA9IGZhbHNlO1xuICAgICAgICBteVBlZXJJZCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNvbm5lY3RlZChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFja3MuYWRkKCdvbkNvbm5lY3RlZCcsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiBqb2luZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBzdG9wOiBzdG9wLFxuICAgICAgICBjb25uZWN0ZWQ6IGNvbm5lY3RlZCxcbiAgICAgICAgcGVlcklkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbXlQZWVySWQ7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ29ubmVjdGVkOiBvbkNvbm5lY3RlZFxuICAgIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiX2FyZ3NcIjogW1xuICAgIFtcbiAgICAgIFwidGljazQyLWFnbUAzLjIuMVwiLFxuICAgICAgXCJDOlxcXFx3b3JrXFxcXHN0YXNoXFxcXEdMVUUtZGV2XFxcXGpzLWdsdWVcIlxuICAgIF1cbiAgXSxcbiAgXCJfZnJvbVwiOiBcInRpY2s0Mi1hZ21AMy4yLjFcIixcbiAgXCJfaWRcIjogXCJ0aWNrNDItYWdtQDMuMi4xXCIsXG4gIFwiX2luQ2FjaGVcIjogdHJ1ZSxcbiAgXCJfaW5zdGFsbGFibGVcIjogdHJ1ZSxcbiAgXCJfbG9jYXRpb25cIjogXCIvdGljazQyLWFnbVwiLFxuICBcIl9ub2RlVmVyc2lvblwiOiBcIjYuMy4wXCIsXG4gIFwiX25wbVVzZXJcIjoge30sXG4gIFwiX25wbVZlcnNpb25cIjogXCIzLjguNVwiLFxuICBcIl9waGFudG9tQ2hpbGRyZW5cIjoge30sXG4gIFwiX3JlcXVlc3RlZFwiOiB7XG4gICAgXCJuYW1lXCI6IFwidGljazQyLWFnbVwiLFxuICAgIFwicmF3XCI6IFwidGljazQyLWFnbUAzLjIuMVwiLFxuICAgIFwicmF3U3BlY1wiOiBcIjMuMi4xXCIsXG4gICAgXCJzY29wZVwiOiBudWxsLFxuICAgIFwic3BlY1wiOiBcIjMuMi4xXCIsXG4gICAgXCJ0eXBlXCI6IFwidmVyc2lvblwiXG4gIH0sXG4gIFwiX3JlcXVpcmVkQnlcIjogW1xuICAgIFwiL1wiXG4gIF0sXG4gIFwiX3NoYXN1bVwiOiBcIjhiYmM4MzVmMzAwYjgxNzc3NTkxYjQ1NWYwNGEzMTcwZWJiNDQxODJcIixcbiAgXCJfc2hyaW5rd3JhcFwiOiBudWxsLFxuICBcIl9zcGVjXCI6IFwidGljazQyLWFnbUAzLjIuMVwiLFxuICBcIl93aGVyZVwiOiBcIkM6XFxcXHdvcmtcXFxcc3Rhc2hcXFxcR0xVRS1kZXZcXFxcanMtZ2x1ZVwiLFxuICBcImF1dGhvclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiVGljazQyXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwOi8vd3d3LnRpY2s0Mi5jb21cIlxuICB9LFxuICBcImJpblwiOiB7XG4gICAgXCJidWlsZFwiOiBcIi4vYmluL2J1aWxkLmpzXCIsXG4gICAgXCJjbGVhblwiOiBcIi4vYmluL2NsZWFuLmpzXCIsXG4gICAgXCJmaWxlLXZlcnNpb25pZnlcIjogXCIuL2Jpbi9maWxlLXZlcnNpb25pZnkuanNcIixcbiAgICBcIm1pbmlmeVwiOiBcIi4vYmluL21pbmlmeS5qc1wiXG4gIH0sXG4gIFwiYnVnc1wiOiB7XG4gICAgXCJ1cmxcIjogXCJodHRwczovL2ppcmEudGljazQyLmNvbS9icm93c2UvQVBQQ1RSTFwiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImNhbGxiYWNrLXJlZ2lzdHJ5XCI6IFwiXjEuMC4xXCIsXG4gICAgXCJjdWlkXCI6IFwiXjEuMy44XCIsXG4gICAgXCJlczYtcHJvbWlzZVwiOiBcIl4zLjAuMlwiLFxuICAgIFwidGljazQyLWdhdGV3YXktY29ubmVjdGlvblwiOiBcIl4yLjAuMFwiLFxuICAgIFwidXRpbC1kZXByZWNhdGVcIjogXCJeMS4wLjJcIlxuICB9LFxuICBcImRlc2NyaXB0aW9uXCI6IFwiSmF2YVNjcmlwdCBBR01cIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYmxhbmtldFwiOiBcIl4xLjEuNlwiLFxuICAgIFwiYmx1ZWJpcmRcIjogXCJeMi45LjMwXCIsXG4gICAgXCJicm93c2VyaWZ5XCI6IFwiXjEzLjAuMFwiLFxuICAgIFwiYnJvd3NlcmlmeS1yZXBsYWNpZnlcIjogXCJeMC4wLjRcIixcbiAgICBcImJyb3dzZXJpZnktdmVyc2lvbmlmeVwiOiBcIl4xLjAuNFwiLFxuICAgIFwiZXNsaW50XCI6IFwiXjMuMS4xXCIsXG4gICAgXCJlc2xpbnQtY29uZmlnLXN0YW5kYXJkXCI6IFwiXjUuMy41XCIsXG4gICAgXCJlc2xpbnQtY29uZmlnLXRpY2s0MlwiOiBcIl4xLjAuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1wcm9taXNlXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXN0YW5kYXJkXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJmc1wiOiBcIjAuMC4yXCIsXG4gICAgXCJodHRwLXNlcnZlclwiOiBcIl4wLjkuMFwiLFxuICAgIFwianNkb21cIjogXCJeOC4xLjBcIixcbiAgICBcIm1pbmlmeWlmeVwiOiBcIl43LjMuMlwiLFxuICAgIFwib25jaGFuZ2VcIjogXCJeMi4xLjJcIixcbiAgICBcInBoYW50b21qc1wiOiBcIl4xLjkuMTJcIixcbiAgICBcInF1bml0anNcIjogXCJeMS4xNS4wXCIsXG4gICAgXCJzaGVsbGpzXCI6IFwiXjAuNi4wXCJcbiAgfSxcbiAgXCJkaXN0XCI6IHtcbiAgICBcInNoYXN1bVwiOiBcIjhiYmM4MzVmMzAwYjgxNzc3NTkxYjQ1NWYwNGEzMTcwZWJiNDQxODJcIixcbiAgICBcInRhcmJhbGxcIjogXCJodHRwOi8vMTkyLjE2OC4wLjIzNDo0ODczL3RpY2s0Mi1hZ20vLS90aWNrNDItYWdtLTMuMi4xLnRnelwiXG4gIH0sXG4gIFwiZ2l0SGVhZFwiOiBcImIzNjUxN2FjMGEzYmNiN2E2OTJiZTE2MWJiMmFmNGU0OGVlNjk0YWZcIixcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJhZ21cIixcbiAgICBcImphdmFzY3JpcHRcIixcbiAgICBcImxpYnJhcnlcIlxuICBdLFxuICBcIm1haW5cIjogXCJsaWJyYXJ5L2FnbS5qc1wiLFxuICBcIm5hbWVcIjogXCJ0aWNrNDItYWdtXCIsXG4gIFwib3B0aW9uYWxEZXBlbmRlbmNpZXNcIjoge30sXG4gIFwicmVhZG1lXCI6IFwiRVJST1I6IE5vIFJFQURNRSBkYXRhIGZvdW5kIVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiYnVpbGRcIjogXCJucG0gcnVuIGVzbGludCAmJiBub2RlIGJpbi9jbGVhbi5qcyAmJiBub2RlIGJpbi9idWlsZC5qcyAmJiBub2RlIGJpbi9taW5pZnkgJiYgbm9kZSBiaW4vZmlsZS12ZXJzaW9uaWZ5XCIsXG4gICAgXCJlc2xpbnRcIjogXCJlc2xpbnQgbGlicmFyeVwiLFxuICAgIFwiZXNsaW50OmZpeFwiOiBcImVzbGludCBsaWJyYXJ5IC0tZml4XCIsXG4gICAgXCJwcmVwdWJsaXNoXCI6IFwibnBtIHVwZGF0ZSAmIG5wbSBydW4gYnVpbGRcIixcbiAgICBcInNlcnZlXCI6IFwiaHR0cC1zZXJ2ZXIgLXAgODAwMCAtYSAxMjcuMC4wLjFcIixcbiAgICBcInRlc3RcIjogXCJucG0gcnVuIGVzbGludCAmJiBtb2NoYSAtLXJlcXVpcmUgLi90ZXN0L3Rlc3RfaGVscGVyIFxcXCJ0ZXN0LyoqLyouanNcXFwiXCIsXG4gICAgXCJ3YXRjaFwiOiBcIm9uY2hhbmdlIFxcXCIuL2xpYnJhcnkvKiovKi5qc1xcXCIgLWl2IC1lIFxcXCIuL2JpblxcXCIgLS0gbnBtIHJ1biBidWlsZFwiXG4gIH0sXG4gIFwidGl0bGVcIjogXCJUaWNrNDIgQUdNXCIsXG4gIFwidmVyc2lvblwiOiBcIjMuMi4xXCJcbn1cbiIsInZhciBhcHBsaWNhdGlvbiA9IHJlcXVpcmUoJy4vYXBwbGljYXRpb24nKTtcbnZhciBpbnN0YW5jZSA9IHJlcXVpcmUoJy4vaW5zdGFuY2UnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG52YXIgUGFja2FnZUpzb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcbnZhciBkZXByZWNhdGUgPSByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5hcHBfbWFuYWdlciA9IGZ1bmN0aW9uIGFwcE1hbmFnZXIoYWdtLCB3aW5kb3dzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBhcHBzID0gYXBwbGljYXRpb24oYWdtLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZXM7XG4gICAgfSk7XG5cbiAgICB2YXIgaW5zdGFuY2VzID0gaW5zdGFuY2UoYWdtLCBhcHBzKTtcbiAgICB2YXIgbWFuYWdlciA9IHtcbiAgICAgICAgYXBwbGljYXRpb25zOiBhcHBzLmFsbCxcbiAgICAgICAgYXBwbGljYXRpb246IGFwcHMuZ2V0X2J5X2lkLFxuICAgICAgICBvbkFwcEFkZGVkOiBoZWxwZXJzLmFkZENhbGxiYWNrKCdhZGRlZCcpLmJpbmQoYXBwcyksXG4gICAgICAgIG9uQXBwQXZhaWxhYmxlOiBoZWxwZXJzLmFkZENhbGxiYWNrKCdhdmFpbGFibGUnKS5iaW5kKGFwcHMpLFxuICAgICAgICBvbkFwcFJlbW92ZWQ6IGhlbHBlcnMuYWRkQ2FsbGJhY2soJ3JlbW92ZWQnKS5iaW5kKGFwcHMpLFxuICAgICAgICBvbkFwcFVuYXZhaWxhYmxlOiBoZWxwZXJzLmFkZENhbGxiYWNrKCd1bmF2YWlsYWJsZScpLmJpbmQoYXBwcyksXG5cbiAgICAgICAgaW5zdGFuY2VzOiBpbnN0YW5jZXMuYWxsLFxuICAgICAgICBvbkluc3RhbmNlU3RhcnRlZDogaGVscGVycy5hZGRDYWxsYmFjaygnc3RhcnRlZCcpLmJpbmQoaW5zdGFuY2VzKSxcbiAgICAgICAgb25JbnN0YW5jZVN0b3BwZWQ6IGhlbHBlcnMuYWRkQ2FsbGJhY2soJ3N0b3BwZWQnKS5iaW5kKGluc3RhbmNlcyksXG4gICAgICAgIG9uSW5zdGFuY2VVcGRhdGVkOiBoZWxwZXJzLmFkZENhbGxiYWNrKCd1cGRhdGVkJykuYmluZChpbnN0YW5jZXMpLFxuXG4gICAgICAgIGdldEJyYW5jaGVzOiBmdW5jdGlvbiAoc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgIGFnbS5pbnZva2UoJ1Q0Mi5BQ1MuR2V0QnJhbmNoZXMnLCB7fSwgJ2Jlc3QnLCB7fSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKGhlbHBlcnMudmFscyhlLnJldHVybmVkLkJyYW5jaGVzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZXJyb3IpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEN1cnJlbnRCcmFuY2g6IGZ1bmN0aW9uIChzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgYWdtLmludm9rZSgnVDQyLkFDUy5HZXRDdXJyZW50QnJhbmNoJywge30sICdiZXN0Jywge30sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyhlLnJldHVybmVkLkJyYW5jaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZXJyb3IpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldEN1cnJlbnRCcmFuY2g6IGZ1bmN0aW9uIChicmFuY2gsIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICBhZ20uaW52b2tlKCdUNDIuQUNTLlNldEN1cnJlbnRCcmFuY2gnLCB7IEJyYW5jaDogYnJhbmNoIH0sICdiZXN0Jywge30sIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjdXJyZW50VXNlcjogZnVuY3Rpb24gKHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICBhZ20uaW52b2tlKCdUNDIuQUNTLkdldFVzZXInLCB7fSwgJ2Jlc3QnLCB7fSwgc3VjY2VzcywgZXJyb3IpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEZ1bmN0aW9uYWxFbnRpdGxlbWVudDogZnVuY3Rpb24gKGZuLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgYWdtLmludm9rZSgnVDQyLkFDUy5HZXRGdW5jdGlvbmFsRW50aXRsZW1lbnQnLCB7IEZ1bmN0aW9uOiBmbiB9LCAnYmVzdCcsIHt9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZS5yZXR1cm5lZC5FbnRpdGxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZXJyb3IpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEZ1bmN0aW9uYWxFbnRpdGxlbWVudEJyYW5jaDogZnVuY3Rpb24gKGZuLCBiciwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgICAgIGFnbS5pbnZva2UoJ1Q0Mi5BQ1MuR2V0RnVuY3Rpb25hbEVudGl0bGVtZW50JywgeyBGdW5jdGlvbjogZm4sIEJyYW5jaDogYnIgfSwgJ2Jlc3QnLCB7fSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzKGUucmV0dXJuZWQuRW50aXRsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGVycm9yKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5JOiBmdW5jdGlvbiAoZm4sIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICBhZ20uaW52b2tlKCdUNDIuQUNTLkNhbkknLCB7IEZ1bmN0aW9uOiBmbiB9LCAnYmVzdCcsIHt9LCBzdWNjZXNzLCBlcnJvcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuSUJyYW5jaDogZnVuY3Rpb24gKGZuLCBicmFuY2gsIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICBhZ20uaW52b2tlKCdUNDIuQUNTLkNhbkknLCB7IEZ1bmN0aW9uOiBmbiwgQnJhbmNoOiBicmFuY2ggfSwgJ2Jlc3QnLCB7fSwgc3VjY2VzcywgZXJyb3IpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV4aXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFnbS5pbnZva2UoJ1Q0Mi5BQ1MuU2h1dGRvd24nLCB7fSwgJ2FsbCcsIHt9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGEpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRSZWdpb246IGZ1bmN0aW9uIChyZWdpb24sIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICBhZ20uaW52b2tlKCdUNDIuQUNTLlNldENvbmZpZ3VyYXRpb25SZWdpb24nLCB7IFJlZ2lvbjogcmVnaW9uIH0sICdiZXN0Jywge30sIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRSZWdpb246IGZ1bmN0aW9uIChzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgYWdtLmludm9rZSgnVDQyLkFDUy5HZXRDb25maWd1cmF0aW9uUmVnaW9uJywge30sICdiZXN0Jywge30sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyhlLnJldHVybmVkLlJlZ2lvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZXJyb3IpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF90cmlnZ2VyX2FwcF9ldmVudDogYXBwcy5fdHJpZ2dlcixcbiAgICAgICAgX3RyaWdnZXJfaW5zdGFuY2VfZXZlbnQ6IGluc3RhbmNlcy5fdHJpZ2dlclxuXG4gICAgfTtcblxuICAgIC8vIENyZWF0ZSBldmVudCBiaW5kaW5nc1xuXG4gICAgLy8gVGVsbCB0aGUgYXBwIHdoZW4gaXRzIGluc3RhbmNlcyBhcmUgYWRkZWQvcmVtb3ZlZFxuXG4gICAgbWFuYWdlci5vbkluc3RhbmNlU3RhcnRlZChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5hcHBsaWNhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRyaWdnZXIgXCJpbnN0YW5jZV9zdGFydGVkXCIgZXZlbnQgb24gYXBwbGljYXRpb25cbiAgICAgICAgbWFuYWdlci5fdHJpZ2dlcl9hcHBfZXZlbnQoJ2luc3RhbmNlU3RhcnRlZCcsIGluc3RhbmNlLCBpbnN0YW5jZS5hcHBsaWNhdGlvbi5uYW1lKTtcblxuICAgICAgICAvLyBUcmlnZ2VyIFwid2luZG93X29wZW5lZFwiIGV2ZW50IG9uIGluc3RhbmNlXG4gICAgICAgIGlmICghd2luZG93cyB8fCAhZ2x1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZCA9IChpbnN0YW5jZS5jb250ZXh0ICYmIGluc3RhbmNlLmNvbnRleHQuZ3VpZCkgPyBpbnN0YW5jZS5jb250ZXh0Lmd1aWQgOiBpbnN0YW5jZS5pZDtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGluc3RhbmNlLmFwcGxpY2F0aW9uLmNvbmZpZ3VyYXRpb24uY29udGFpbmVyO1xuXG4gICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgIGdsdWUuYWdtLmludm9rZSgnVDQyLlduZC5GaW5kQnlJZCcsIHsgd2luZG93SWQ6IGluc3RhbmNlLmlkIH0sIHsgYXBwbGljYXRpb246IGNvbnRhaW5lciB9LCB7fSwgd2luZG93T3BlbmVkLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB3aW5kb3dPcGVuZWQoYSkge1xuICAgICAgICAgICAgLy8gV3JhcCB0aGUgd2luZG93IGluIGEgd2luZG93IG9iamVjdCwgdXNpbmcgdGhlIGdsdWUgd2luZG93cyBsaWJcbiAgICAgICAgICAgIHZhciB3ID0gYS5yZXR1cm5lZFtPYmplY3Qua2V5cyhhLnJldHVybmVkKVswXV07XG4gICAgICAgICAgICB2YXIgd2luID0gZ2x1ZS53aW5kb3dzLl9mcm9tX2V2ZW50KHcud2luZG93TmFtZSwgY29udGFpbmVyLCB3LnVybCwgdy53aW5kb3dJZCwgdy53aW5kb3dTdHlsZUF0dHJpYnV0ZXMsIHcud2luZG93VGl0bGUpO1xuXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIHRoZSB3aW5kb3cgb3BlbmVkIGV2ZW50XG4gICAgICAgICAgICBtYW5hZ2VyLl90cmlnZ2VyX2luc3RhbmNlX2V2ZW50KCd3aW5kb3dBZGRlZCcsIHdpbiwgaWQpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBtYW5hZ2VyLm9uSW5zdGFuY2VTdG9wcGVkKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBpZiAoaW5zdGFuY2UuYXBwbGljYXRpb24pIHtcbiAgICAgICAgICAgIG1hbmFnZXIuX3RyaWdnZXJfYXBwX2V2ZW50KCdpbnN0YW5jZVN0b3BwZWQnLCBpbnN0YW5jZSwgaW5zdGFuY2UuYXBwbGljYXRpb24ubmFtZSk7XG5cbiAgICAgICAgICAgIHZhciBpZCA9IChpbnN0YW5jZS5jb250ZXh0ICYmIGluc3RhbmNlLmNvbnRleHQuZ3VpZCkgPyBpbnN0YW5jZS5jb250ZXh0Lmd1aWQgOiBpbnN0YW5jZS5pZDtcbiAgICAgICAgICAgIG1hbmFnZXIuX3RyaWdnZXJfaW5zdGFuY2VfZXZlbnQoJ3dpbmRvd1JlbW92ZWQnLCB7fSwgaWQpO1xuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIG1hbmFnZXIub25JbnN0YW5jZVVwZGF0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBpZiAoaW5zdGFuY2UuYXBwbGljYXRpb24pIHtcbiAgICAgICAgLy8gbWFuYWdlci5fdHJpZ2dlcl9hcHBfZXZlbnQoXCJpbnN0YW5jZV9zdG9wcGVkXCIsIGluc3RhbmNlLCBpbnN0YW5jZS5hcHBsaWNhdGlvbi5uYW1lKTtcblxuICAgICAgICAvLyB2YXIgaWQgPSAoaW5zdGFuY2UuY29udGV4dCAmJiBpbnN0YW5jZS5jb250ZXh0Lmd1aWQpID8gaW5zdGFuY2UuY29udGV4dC5ndWlkIDogaW5zdGFuY2UuaWQ7XG4gICAgICAgIC8vIG1hbmFnZXIuX3RyaWdnZXJfaW5zdGFuY2VfZXZlbnQoXCJ0aXRsZV9jaGFuZ2VkXCIsIHt9LCBpZCk7XG4gICAgICAgIC8vIH1cbiAgICB9KTtcblxuICAgIC8vIFdoZW4gYW4gYXBwIGlzIHJlbW92ZWQsIHJlbW92ZSBhbHNvIGl0cyBpbnN0YW5jZXNcblxuICAgIG1hbmFnZXIub25BcHBSZW1vdmVkKGZ1bmN0aW9uIChhcHApIHtcbiAgICAgICAgYXBwLmluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIGlkID0gKGluc3RhbmNlLmNvbnRleHQgJiYgaW5zdGFuY2UuY29udGV4dC5ndWlkKSA/IGluc3RhbmNlLmNvbnRleHQuZ3VpZCA6IGluc3RhbmNlLmlkO1xuICAgICAgICAgICAgbWFuYWdlci5fdHJpZ2dlcl9pbnN0YW5jZV9ldmVudCgnc3RvcHBlZCcsIHt9LCBpZCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGJyYW5jaENoYW5nZWRDYWxsYmFjaztcbiAgICBtYW5hZ2VyLm9uQnJhbmNoZXNDaGFuZ2VkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIGJyYW5jaENoYW5nZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBvbkJyYW5jaENoYW5nZWQoZSkge1xuICAgICAgICBpZiAodHlwZW9mIGJyYW5jaENoYW5nZWRDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgYnJhbmNoQ2hhbmdlZENhbGxiYWNrKGhlbHBlcnMudmFscyhlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVBcHBSZWFkeShhcHApIHtcbiAgICAgICAgaWYgKGFwcC5Jc1JlYWR5KSB7XG4gICAgICAgICAgICBtYW5hZ2VyLl90cmlnZ2VyX2FwcF9ldmVudCgnYXZhaWxhYmxlJywgYXBwKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgbWFuYWdlci5fdHJpZ2dlcl9hcHBfZXZlbnQoJ3VuYXZhaWxhYmxlJywgYXBwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcEZhaWxlZChlKSB7XG4gICAgICAgIG1hbmFnZXIuX3RyaWdnZXJfaW5zdGFuY2VfZXZlbnQoJ2Vycm9yJywgZSwgZS5Db250ZXh0Lmd1aWQpO1xuICAgIH1cblxuICAgIC8vIGRlcHJlY2F0ZXNcbiAgICBtYW5hZ2VyLmNhbl9pID0gZGVwcmVjYXRlKG1hbmFnZXIuY2FuSSwgJ2FwcE1hbmFnZXIuY2FuX2kgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwTWFuYWdlci5jYW5JKCkgaW5zdGVhZCcpO1xuICAgIG1hbmFnZXIuY2FuX2lfYnJhbmNoID0gZGVwcmVjYXRlKG1hbmFnZXIuY2FuSUJyYW5jaCwgJ2FwcE1hbmFnZXIuY2FuX2lfYnJhbmNoIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIGFwcE1hbmFnZXIuY2FuSWJyYW5jaCgpIGluc3RlYWQnKTtcbiAgICBtYW5hZ2VyLmN1cnJlbnRfdXNlciA9IGRlcHJlY2F0ZShtYW5hZ2VyLmN1cnJlbnRVc2VyLCAnYXBwTWFuYWdlci5jdXJyZW50X3VzZXIgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwTWFuYWdlci5jdXJyZW50VXNlcigpIGluc3RlYWQnKTtcbiAgICBtYW5hZ2VyLnNldF9jdXJyZW50X2JyYW5jaCA9IGRlcHJlY2F0ZShtYW5hZ2VyLnNldEN1cnJlbnRCcmFuY2gsICdhcHBNYW5hZ2VyLnNldF9jdXJyZW50X2JyYW5jaCBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBhcHBNYW5hZ2VyLnNldEN1cnJlbnRCcmFuY2goKSBpbnN0ZWFkJyk7XG4gICAgbWFuYWdlci5nZXRfY3VycmVudF9icmFuY2ggPSBkZXByZWNhdGUobWFuYWdlci5nZXRDdXJyZW50QnJhbmNoLCAnYXBwTWFuYWdlci5nZXRfY3VycmVudF9icmFuY2ggaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwTWFuYWdlci5nZXRDdXJyZW50QnJhbmNoKCkgaW5zdGVhZCcpO1xuICAgIG1hbmFnZXIuZ2V0X2JyYW5jaGVzID0gZGVwcmVjYXRlKG1hbmFnZXIuZ2V0QnJhbmNoZXMsICdhcHBNYW5hZ2VyLmdldF9icmFuY2hlcyBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBhcHBNYW5hZ2VyLmdldEJyYW5jaGVzKCkgaW5zdGVhZCcpO1xuICAgIG1hbmFnZXIuZ2V0X2Z1bmN0aW9uYWxfZW50aXRsZW1lbnRfYnJhbmNoID0gZGVwcmVjYXRlKG1hbmFnZXIuZ2V0RnVuY3Rpb25hbEVudGl0bGVtZW50QnJhbmNoLCAnYXBwTWFuYWdlci5nZXRfZnVuY3Rpb25hbF9lbnRpdGxlbWVudF9icmFuY2ggaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwTWFuYWdlci5nZXRGdW5jdGlvbmFsRW50aXRsZW1lbnRCcmFuY2goKSBpbnN0ZWFkJyk7XG4gICAgbWFuYWdlci5nZXRfZnVuY3Rpb25hbF9lbnRpdGxlbWVudCA9IGRlcHJlY2F0ZShtYW5hZ2VyLmdldEZ1bmN0aW9uYWxFbnRpdGxlbWVudCwgJ2FwcE1hbmFnZXIuZ2V0X2Z1bmN0aW9uYWxfZW50aXRsZW1lbnQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwTWFuYWdlci5nZXRGdW5jdGlvbmFsRW50aXRsZW1lbnQoKSBpbnN0ZWFkJyk7XG4gICAgbWFuYWdlci5nZXRfcmVnaW9uID0gZGVwcmVjYXRlKG1hbmFnZXIuZ2V0UmVnaW9uLCAnYXBwTWFuYWdlci5nZXRfcmVnaW9uIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIGFwcE1hbmFnZXIuZ2V0UmVnaW9uKCkgaW5zdGVhZCcpO1xuICAgIG1hbmFnZXIuc2V0X3JlZ2lvbiA9IGRlcHJlY2F0ZShtYW5hZ2VyLnNldFJlZ2lvbiwgJ2FwcE1hbmFnZXIuc2V0X3JlZ2lvbiBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBhcHBNYW5hZ2VyLnNldFJlZ2lvbigpIGluc3RlYWQnKTtcbiAgICBtYW5hZ2VyLm9uX2FwcF91bmF2YWlsYWJsZSA9IGRlcHJlY2F0ZShtYW5hZ2VyLm9uQXBwVW5hdmFpbGFibGUsICdhcHBNYW5hZ2VyLm9uX2FwcF91bmF2YWlsYWJsZSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBhcHBNYW5hZ2VyLm9uQXBwVW5hdmFpbGFibGUoKSBpbnN0ZWFkJyk7XG4gICAgbWFuYWdlci5vbl9hcHBfcmVtb3ZlZCA9IGRlcHJlY2F0ZShtYW5hZ2VyLm9uQXBwUmVtb3ZlZCwgJ2FwcE1hbmFnZXIub25fYXBwX3JlbW92ZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwTWFuYWdlci5vbkFwcFJlbW92ZWQoKSBpbnN0ZWFkJyk7XG4gICAgbWFuYWdlci5vbl9hcHBfYWRkZWQgPSBkZXByZWNhdGUobWFuYWdlci5vbkFwcEFkZGVkLCAnYXBwTWFuYWdlci5vbl9hcHBfYWRkZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwTWFuYWdlci5vbkFwcEFkZGVkKCkgaW5zdGVhZCcpO1xuICAgIG1hbmFnZXIub25fYXBwX2F2YWlsYWJsZSA9IGRlcHJlY2F0ZShtYW5hZ2VyLm9uQXBwQXZhaWxhYmxlLCAnYXBwTWFuYWdlci5vbl9hcHBfYXZhaWxhYmxlIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIGFwcE1hbmFnZXIub25BcHBBdmFpbGFibGUoKSBpbnN0ZWFkJyk7XG4gICAgbWFuYWdlci5vbl9icmFuY2hlc19jaGFuZ2VkID0gZGVwcmVjYXRlKG1hbmFnZXIub25CcmFuY2hlc0NoYW5nZWQsICdhcHBNYW5hZ2VyLm9uX2JyYW5jaGVzX2NoYW5nZWQgIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIGFwcE1hbmFnZXIub25CcmFuY2hlc0NoYW5nZWQoKSBpbnN0ZWFkJyk7XG4gICAgbWFuYWdlci5vbl9pbnN0YW5jZV9zdGFydGVkID0gZGVwcmVjYXRlKG1hbmFnZXIub25JbnN0YW5jZVN0YXJ0ZWQsICdhcHBNYW5hZ2VyLm9uX2luc3RhbmNlX3N0YXJ0ZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwTWFuYWdlci5vbkluc3RhbmNlU3RhcnRlZCgpIGluc3RlYWQnKTtcbiAgICBtYW5hZ2VyLm9uX2luc3RhbmNlX3N0b3BwZWQgPSBkZXByZWNhdGUobWFuYWdlci5vbkluc3RhbmNlU3RvcHBlZCwgJ2FwcE1hbmFnZXIub25faW5zdGFuY2Vfc3RvcHBlZCBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBhcHBNYW5hZ2VyLm9uSW5zdGFuY2VTdG9wcGVkKCkgaW5zdGVhZCcpO1xuICAgIG1hbmFnZXIub25faW5zdGFuY2VfdXBkYXRlZCA9IGRlcHJlY2F0ZShtYW5hZ2VyLm9uSW5zdGFuY2VVcGRhdGVkLCAnYXBwTWFuYWdlci5vbl9pbnN0YW5jZV91cGRhdGVkIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIGFwcE1hbmFnZXIub25JbnN0YW5jZVVwZGF0ZWQoKSBpbnN0ZWFkJyk7XG5cbiAgICBpZiAoYWdtICYmIGFnbS5zdWJzY3JpYmUpIHtcblxuICAgICAgICBtYW5hZ2VyLmFnbSA9IGFnbTtcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gW1xuICAgICAgICAgICAgeyBldmVudDogJ09uQXBwbGljYXRpb25BZGRlZCcsIHRyaWdnZXI6ICdhZGRlZCcsIG9uOiBhcHBzIH0sXG4gICAgICAgICAgICB7IGV2ZW50OiAnT25BcHBsaWNhdGlvblJlbW92ZWQnLCB0cmlnZ2VyOiAncmVtb3ZlZCcsIG9uOiBhcHBzIH0sXG4gICAgICAgICAgICB7IGV2ZW50OiAnT25BcHBsaWNhdGlvbkNoYW5nZWQnLCB0cmlnZ2VyOiAnY2hhbmdlZCcsIG9uOiBhcHBzIH0sXG4gICAgICAgICAgICB7IGV2ZW50OiAnT25BcHBsaWNhdGlvblN0YXJ0ZWQnLCB0cmlnZ2VyOiAnc3RhcnRlZCcsIG9uOiBpbnN0YW5jZXMgfSxcbiAgICAgICAgICAgIHsgZXZlbnQ6ICdPbkFwcGxpY2F0aW9uU3RvcHBlZCcsIHRyaWdnZXI6ICdzdG9wcGVkJywgb246IGluc3RhbmNlcyB9LFxuICAgICAgICAgICAgeyBldmVudDogJ09uQXBwbGljYXRpb25VcGRhdGVkJywgdHJpZ2dlcjogJ3VwZGF0ZWQnLCBvbjogaW5zdGFuY2VzIH0sXG4gICAgICAgICAgICB7IGV2ZW50OiAnT25BcHBsaWNhdGlvbkFnbVNlcnZlclJlYWR5JywgdHJpZ2dlcjogJ2FnbVJlYWR5Jywgb246IGluc3RhbmNlcyB9LFxuICAgICAgICAgICAgeyBldmVudDogJ09uQXBwbGljYXRpb25SZWFkeScsIGZ1bmM6IGhhbmRsZUFwcFJlYWR5IH0sXG4gICAgICAgICAgICB7IGV2ZW50OiAnT25CcmFuY2hlc01vZGlmaWVkJywgZnVuYzogb25CcmFuY2hDaGFuZ2VkIH0sXG4gICAgICAgICAgICB7IGV2ZW50OiAnT25BcHBsaWNhdGlvblN0YXJ0RmFpbGVkJywgcmF3X2Z1bmM6IGFwcEZhaWxlZCB9XG4gICAgICAgIF07XG5cbiAgICAgICAgYWdtLnNlcnZlck1ldGhvZEFkZGVkKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgICBpZiAoKHJlc3Auc2VydmVyLmFwcGxpY2F0aW9uLmluZGV4T2YoJ0FwcE1hbmFnZXInKSAhPT0gLTEgJiYgcmVzcC5tZXRob2QubmFtZS5pbmRleE9mKCdUNDIuQUNTLk9uRXZlbnQnKSAhPT0gLTEpKSB7XG4gICAgICAgICAgICAgICAgYWdtLnN1YnNjcmliZSgnVDQyLkFDUy5PbkV2ZW50JywgeyB0YXJnZXQ6ICdhbGwnIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5vbkRhdGEoZnVuY3Rpb24gKHN0cmVhbURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gc3RyZWFtRGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdHMgPSBldmVudHNbaGFuZGxlci5ldmVudF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3RzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyLnJhd19mdW5jICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLnJhd19mdW5jKG9iamVjdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVycy52YWxzKG9iamVjdHMpLmZvckVhY2goZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyLm9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vbi5fdHJpZ2dlcihoYW5kbGVyLnRyaWdnZXIsIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5mdW5jKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWFuYWdlci52ZXJzaW9uID0gUGFja2FnZUpzb24udmVyc2lvbjtcblxuICAgIHJldHVybiBtYW5hZ2VyO1xufTtcblxuZ2xvYmFsLnRpY2s0MiA9IGdsb2JhbC50aWNrNDIgfHwge307XG5nbG9iYWwudGljazQyLmFwcF9tYW5hZ2VyID0gZ2xvYmFsLmFwcF9tYW5hZ2VyO1xuIiwidmFyIGV2ZW50TWFuYWdlciA9IHJlcXVpcmUoJy4vZXZlbnRfbWFuYWdlcicpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcbnZhciBkZXByZWNhdGUgPSByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhZ20sIGluc3RhbmNlcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgYXBwUHJvdG8gPSBoZWxwZXJzLmFkZENhbGxiYWNrcyh7XG5cbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIChwYXJhbXMsIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgICAgICAgICBwYXJhbXMuZ3VpZCA9IHBhcmFtcy5ndWlkIHx8IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwKTtcbiAgICAgICAgICAgIGlmIChhZ20pIHtcbiAgICAgICAgICAgICAgICBhZ20uaW52b2tlKCdUNDIuQUNTLlN0YXJ0QXBwbGljYXRpb24nLCB7IE5hbWU6IHRoaXMubmFtZSwgQ29udGV4dDogcGFyYW1zIH0sICdiZXN0Jywge30sIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlcygpLl90cmlnZ2VyKCdjcmVhdGUnLCB7IENvbnRleHQ6IHBhcmFtcyB9KTtcblxuICAgICAgICB9XG5cbiAgICB9LCBbJ0FkZGVkJywgJ1JlbW92ZWQnLCAnQXZhaWxhYmxlJywgJ1VuYXZhaWxhYmxlJywgJ0luc3RhbmNlU3RhcnRlZCcsICdJbnN0YW5jZVN0b3BwZWQnLCAnQ2hhbmdlZCddLCAnb24nKTtcblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBhcHBQcm90by5vbl9hZGRlZCA9IGRlcHJlY2F0ZShhcHBQcm90by5vbkFkZGVkLCAnYXBwbGljYXRpb24ub25fYWRkZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwbGljYXRpb24ub25BZGRlZCgpIGluc3RlYWQnKTtcbiAgICBhcHBQcm90by5vbl9yZW1vdmVkID0gZGVwcmVjYXRlKGFwcFByb3RvLm9uUmVtb3ZlZCwgJ2FwcGxpY2F0aW9uLm9uX3JlbW92ZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwbGljYXRpb24ub25SZW1vdmVkKCkgaW5zdGVhZCcpO1xuICAgIGFwcFByb3RvLm9uX2F2YWlsYWJsZSA9IGRlcHJlY2F0ZShhcHBQcm90by5vbkF2YWlsYWJsZSwgJ2FwcGxpY2F0aW9uLm9uX2F2YWlsYWJsZSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBhcHBsaWNhdGlvbi5vbkF2YWlsYWJsZSgpIGluc3RlYWQnKTtcbiAgICBhcHBQcm90by5vbl91bmF2YWlsYWJsZSA9IGRlcHJlY2F0ZShhcHBQcm90by5vblVuYXZhaWxhYmxlLCAnYXBwbGljYXRpb24ub25fdW5hdmFpbGFibGUgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwbGljYXRpb24ub25VbmF2YWlsYWJsZSgpIGluc3RlYWQnKTtcbiAgICBhcHBQcm90by5vbl9pbnN0YW5jZV9zdGFydGVkID0gZGVwcmVjYXRlKGFwcFByb3RvLm9uSW5zdGFuY2VTdGFydGVkLCAnYXBwbGljYXRpb24ub25faW5zdGFuY2Vfc3RhcnRlZCBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBhcHBsaWNhdGlvbi5vbkluc3RhbmNlU3RhcnRlZCgpIGluc3RlYWQnKTtcbiAgICBhcHBQcm90by5vbl9pbnN0YW5jZV9zdG9wcGVkID0gZGVwcmVjYXRlKGFwcFByb3RvLm9uSW5zdGFuY2VTdG9wcGVkLCAnYXBwbGljYXRpb24ub25faW5zdGFuY2Vfc3RvcHBlZCBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBhcHBsaWNhdGlvbi5vbkluc3RhbmNlU3RvcHBlZCgpIGluc3RlYWQnKTtcbiAgICBhcHBQcm90by5vbl9jaGFuZ2VkID0gZGVwcmVjYXRlKGFwcFByb3RvLm9uQ2hhbmdlZCwgJ2FwcGxpY2F0aW9uLm9uX2NoYW5nZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwbGljYXRpb24ub25DaGFuZ2VkKCkgaW5zdGVhZCcpO1xuXG4gICAgLy8gY29uc3RydWN0b3IsIGluaXRfZXZlbnQsIGlkX2ZpZWxkXG5cbiAgICBmdW5jdGlvbiB1cGRhdGVBcHAocHJvcHMsIG9iaikge1xuICAgICAgICBvYmoubmFtZSA9IHByb3BzLk5hbWU7XG4gICAgICAgIG9iai50aXRsZSA9IHByb3BzLlRpdGxlO1xuICAgICAgICBvYmoudmVyc2lvbiA9IHByb3BzLlZlcnNpb247XG4gICAgICAgIG9iai5pbnN0YW5jZXMgPSBbXTtcbiAgICAgICAgb2JqLmNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICAgICAgb2JqLmNvbmZpZ3VyYXRpb24uYXV0b19zdGFydCA9IHByb3BzLkF1dG9TdGFydDtcbiAgICAgICAgb2JqLmNvbmZpZ3VyYXRpb24uY2FwdGlvbiA9IHByb3BzLkNhcHRpb247XG4gICAgICAgIG9iai5jb25maWd1cmF0aW9uLmhpZGRlbiA9IHByb3BzLklzSGlkZGVuO1xuICAgICAgICBvYmouY29uZmlndXJhdGlvbi5jb250YWluZXIgPSBwcm9wcy5BcHBsaWNhdGlvbk5hbWU7XG4gICAgICAgIC8vIG9iai5kaXNhYmxlZCA9IHByb3BzLklzRGlzYWJsZWQ7XG4gICAgICAgIG9iai5jb25maWd1cmF0aW9uLmFsbG93X211bHRpcGxlID0gcHJvcHMuQWxsb3dNdWx0aXBsZTtcbiAgICAgICAgb2JqLmF2YWlsYWJsZSA9IHByb3BzLklzUmVhZHkgfHwgZmFsc2U7XG4gICAgICAgIG9iai5pY29uID0gcHJvcHMuSWNvbjtcbiAgICAgICAgb2JqLnNvcnRPcmRlciA9IHByb3BzLlNvcnRPcmRlcjtcbiAgICAgICAgb2JqLnVzZXJQcm9wZXJ0aWVzID0gcHJvcHMuVXNlclByb3BlcnRpZXM7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgdmFyIGFwcFRvRXZlbnRNYW5hZ2VyID0ge1xuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZUFwcChwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUFwcChwcm9wcywgT2JqZWN0LmNyZWF0ZShhcHBQcm90bykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogdXBkYXRlQXBwLFxuICAgICAgICBpbml0X2V2ZW50OiAnYWRkZWQnLFxuICAgICAgICBleGl0X2V2ZW50OiAncmVtb3ZlZCcsXG4gICAgICAgIGlkX2ZpZWxkOiAnTmFtZScsXG4gICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgICAgYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2hhbmdlZDogZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uID0gcHJvcHMuSWNvbjtcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gcHJvcHMuVGl0bGU7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmNhcHRpb24gPSBwcm9wcy5DYXB0aW9uO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdW5hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgaW5zdGFuY2VTdGFydGVkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGluc3RhbmNlU3RvcHBlZDogZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMgPSB0aGlzLmluc3RhbmNlcy5maWx0ZXIoZnVuY3Rpb24gKG15SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG15SW5zdGFuY2UgIT09IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBkZXByZWNhdGVkXG4gICAgYXBwVG9FdmVudE1hbmFnZXIuY2FsbGJhY2tzLmluc3RhbmNlX3N0YXJ0ZWQgPSBkZXByZWNhdGUoYXBwVG9FdmVudE1hbmFnZXIuY2FsbGJhY2tzLmluc3RhbmNlU3RhcnRlZCwgJ2FwcGxpY2F0aW9uLmluc3RhbmNlX3N0YXJ0ZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgYXBwbGljYXRpb24uaW5zdGFuY2VTdGFydGVkKCkgaW5zdGVhZCcpO1xuICAgIGFwcFRvRXZlbnRNYW5hZ2VyLmNhbGxiYWNrcy5pbnN0YW5jZV9zdG9wcGVkID0gZGVwcmVjYXRlKGFwcFRvRXZlbnRNYW5hZ2VyLmNhbGxiYWNrcy5pbnN0YW5jZVN0b3BwZWQsICdhcHBsaWNhdGlvbi5pbnN0YW5jZV9zdG9wcGVkIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIGFwcGxpY2F0aW9uLmluc3RhbmNlU3RvcHBlZCgpIGluc3RlYWQnKTtcblxuICAgIHJldHVybiBldmVudE1hbmFnZXIoYXBwVG9FdmVudE1hbmFnZXIpO1xufTtcbiIsInZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbmZ1bmN0aW9uIGV4ZWNDYWxsYmFja3Mob2JqLCBhcnIsIHZhbCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAoYXJyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKG9iaiwgdmFsKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVudmlyb25tZW50KHNldHRpbmdzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBvYmplY3RzID0ge307XG4gICAgdmFyIGdsb2JhbENhbGxiYWNrcyA9IHt9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMudmFscyhvYmplY3RzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfYnlfaWQ6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdHNbaWRdO1xuICAgICAgICB9LFxuXG4gICAgICAgIF90cmlnZ2VyOiBmdW5jdGlvbiAodHlwZSwgcHJvcHMsIGlkKSB7XG4gICAgICAgICAgICBpZCA9IGlkIHx8ICh0eXBlb2Ygc2V0dGluZ3MuaWRfZmllbGQgPT09ICdmdW5jdGlvbicgPyBzZXR0aW5ncy5pZF9maWVsZChwcm9wcykgOiBwcm9wc1tzZXR0aW5ncy5pZF9maWVsZF0pO1xuXG4gICAgICAgICAgICAvLyBRdWl0IGlmIHdlIHJlY2VpdmUgYW4gZXZlbnQgZm9yIGFuIG9iamVjdCBiZWZvcmUgaW5pdGlhdGluZyBpdC5cbiAgICAgICAgICAgIGlmIChvYmplY3RzW2lkXSA9PT0gdW5kZWZpbmVkICYmICh0eXBlICE9PSBzZXR0aW5ncy5pbml0X2V2ZW50ICYmIHR5cGUgIT09IHNldHRpbmdzLmNyZWF0ZV9ldmVudCkpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyAoXCJSZWNlaXZlZCAnXCIrdHlwZStcIicgZXZlbnQgYmVmb3JlICdcIitzZXR0aW5ncy5pbml0X2V2ZW50K1wiJ1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBvciByZXRyaWV2ZSBhbiBvYmplY3QsIHJlcHJlc2VudGluZyB0aGUgZW50aXR5XG4gICAgICAgICAgICB2YXIgb2JqID0gb2JqZWN0c1tpZF0gPSBvYmplY3RzW2lkXSB8fCBpbml0T2JqZWN0KHNldHRpbmdzLmNyZWF0ZShwcm9wcykpO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gc2V0dGluZ3MuaW5pdF9ldmVudCkge1xuICAgICAgICAgICAgICAgIC8vIFF1aXQgaWYgd2UgcmVjZWl2ZSBhIGluaXQgZXZlbnQgZm9yIGFuIG9iamVjdCB0aGF0IGlzIGFscmVhZHkgYWN0aXZlXG4gICAgICAgICAgICAgICAgaWYgKG9iai5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cgKFwiUmVjZWl2ZWQgc2Vjb25kICdcIitzZXR0aW5ncy5pbml0X2V2ZW50K1wiJyBmb3IgYXBwIFwiK2lkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlLCBtYWtlIGl0IGFjdGl2ZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy51cGRhdGUocHJvcHMsIG9iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIGVudGl0eSBpcyByZW1vdmVkLCBzZXQgaXQgdG8gbm9uLWFjdGl2ZVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBzZXR0aW5ncy5leGl0X2V2ZW50KSB7XG4gICAgICAgICAgICAgICAgb2JqLmFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgLy8gV2hlbiBhIGNyZWF0ZSBldmVudCBpcyByZWNlaXZlZCwganVzdCByZXR1cm4gdGhlIG9iamVjdCB3aXRob3V0IGRvaW5nIGFueXRoaW5nIGVsc2VcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gc2V0dGluZ3MuY3JlYXRlX2V2ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBzZXR0aW5ncy51cGRhdGVfZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy51cGRhdGUocHJvcHMsIG9iaik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgc3lzdGVtIGNhbGxiYWNrc1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLmNhbGxiYWNrc1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuY2FsbGJhY2tzW3R5cGVdLmNhbGwob2JqLCBwcm9wcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IGVycm9ycyBpbiB1c2VyIHNwZWNpZmllZCBjYWxsYmFja3MgZG9lcyBub3RcbiAgICAgICAgICAgIC8vIGJyZWFrIG91ciBsaWJyYXJ5XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGUgZ2xvYmFsIGNhbGxiYWNrc1xuICAgICAgICAgICAgICAgIGV4ZWNDYWxsYmFja3ModW5kZWZpbmVkLCBnbG9iYWxDYWxsYmFja3NbdHlwZV0sIG9iaik7XG5cbiAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHVzZXItZGVmaW5lZCBjYWxsYmFja3MgdGhhdCBhcmUgYXR0YWNoZWQgdG8gdGhlIG9iamVjdFxuICAgICAgICAgICAgICAgIGV4ZWNDYWxsYmFja3Mob2JqLCBvYmouY2FsbGJhY2tzW3R5cGVdLCBwcm9wcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIGVudGl0eSBpcyByZW1vdmVkLCByZW1vdmUgYWxsIGNhbGxiYWNrcyAoYWZ0ZXIgeW91IGV4ZWN1dGUgdGhlbSlcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBzZXR0aW5ncy5leGl0X2V2ZW50KSB7XG4gICAgICAgICAgICAgICAgb2JqLmNhbGxiYWNrcyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuXG4gICAgICAgIH0sXG4gICAgICAgIC8vIEV4cG9zZSB0aGUgZ2xvYmFsIGNhbGxiYWNrcyBvYmplY3Qgc28gdGhhdCB1c2VyIGNhbiByZWdpc3RlciBzb21lXG4gICAgICAgIGNhbGxiYWNrczogZ2xvYmFsQ2FsbGJhY2tzXG4gICAgfTtcbn07XG5cbmZ1bmN0aW9uIGluaXRPYmplY3Qob2JqZWN0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIG9iamVjdC5jYWxsYmFja3MgPSB7fTtcbiAgICBvYmplY3QuYWN0aXZlID0gZmFsc2U7XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cbiIsImZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xufVxuXG5mdW5jdGlvbiBleGVjSWYoY29uZGl0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXBwLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoY29uZGl0aW9uKGFwcCkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoYXBwKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydHMuYWRkQ2FsbGJhY2tzID0gZnVuY3Rpb24gYWRkQ2FsbGJhY2tzKG9iamVjdCwgZXZlbnRzLCBwcmVmaXgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBldmVudCA9IHsgbmFtZTogZXZlbnQsIHRyaWdnZXJfd2hlbjogbm9vcCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqZWN0W3ByZWZpeCArIGV2ZW50Lm5hbWVdID0gZXhwb3J0cy5hZGRDYWxsYmFjayhldmVudC5uYW1lLCBleGVjSWYoZXZlbnQudHJpZ2dlcl93aGVuKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqZWN0O1xuXG59O1xuXG5leHBvcnRzLmFkZENhbGxiYWNrID0gZnVuY3Rpb24gYWRkQ2FsbGJhY2soa2V5LCBvbkFkZCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBvYmogPSB0aGlzLmNhbGxiYWNrcztcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2JqW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBbY2FsbGJhY2tdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqW2tleV0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG9uQWRkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkFkZCh0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufTtcblxuZXhwb3J0cy52YWxzID0gZnVuY3Rpb24gdmFscyhvYmopIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChhcnIsIGtleSkge1xuICAgICAgICBhcnIucHVzaChvYmpba2V5XSk7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfSwgW10pO1xufTtcbiIsInZhciBldmVudE1hbmFnZXIgPSByZXF1aXJlKCcuL2V2ZW50X21hbmFnZXInKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG52YXIgZGVwcmVjYXRlID0gcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWdtLCBhcHBzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBpbnN0YW5jZVByb3RvID0gaGVscGVycy5hZGRDYWxsYmFja3Moe1xuICAgICAgICBzdG9wOiBmdW5jdGlvbiAocGFyYW1zLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgYWdtLmludm9rZSgnVDQyLkFDUy5TdG9wQXBwbGljYXRpb24nLCB7IE5hbWU6IHRoaXMuYXBwbGljYXRpb24ubmFtZSwgSWQ6IHRoaXMuaWQgfSwgJ2Jlc3QnLCB7fSwgc3VjY2VzcywgZXJyb3IpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFjdGl2YXRlOiBmdW5jdGlvbiAocGFyYW1zLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICAgICAgYWdtLmludm9rZSgnVDQyLkFDUy5BY3RpdmF0ZUFwcGxpY2F0aW9uJywgeyBOYW1lOiB0aGlzLmFwcGxpY2F0aW9uLm5hbWUsIElkOiB0aGlzLmlkIH0sICdiZXN0Jywge30sIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ1dpbmRvd0FkZGVkJywgdHJpZ2dlcl93aGVuOiBmdW5jdGlvbiAoYXBwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcC5hY3RpdmUgJiYgYXBwLm1haW5fd2luZG93ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdXaW5kb3dSZW1vdmVkJywgdHJpZ2dlcl93aGVuOiBmdW5jdGlvbiAoYXBwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcC5tYWluX3dpbmRvdyA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnU3RhcnRlZCcsIHRyaWdnZXJfd2hlbjogZnVuY3Rpb24gKGFwcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcHAuaWQgIT09IHVuZGVmaW5lZCAmJiBhcHAuYWN0aXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnU3RvcHBlZCcsIHRyaWdnZXJfd2hlbjogZnVuY3Rpb24gKGFwcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcHAuaWQgIT09IHVuZGVmaW5lZCAmJiAhYXBwLmFjdGl2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0FnbVJlYWR5JywgdHJpZ2dlcl93aGVuOiBmdW5jdGlvbiAoYXBwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcC5hY3RpdmUgJiYgYXBwLmFnbSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnRXJyb3InLCB0cmlnZ2VyX3doZW46IGZ1bmN0aW9uIChhcHApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwLmVycm9yICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdLCAnb24nKTtcblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBpbnN0YW5jZVByb3RvLm9uX3dpbmRvd19hZGRlZCA9IGRlcHJlY2F0ZShpbnN0YW5jZVByb3RvLm9uV2luZG93QWRkZWQsICdpbnN0YW5jZS5vbl93aW5kb3dfYWRkZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgaW5zdGFuY2Uub25XaW5kb3dBZGRlZCgpIGluc3RlYWQnKTtcbiAgICBpbnN0YW5jZVByb3RvLm9uX3dpbmRvd19yZW1vdmVkID0gZGVwcmVjYXRlKGluc3RhbmNlUHJvdG8ub25XaW5kb3dSZW1vdmVkLCAnaW5zdGFuY2Uub25fd2luZG93X3JlbW92ZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgaW5zdGFuY2Uub25XaW5kb3dSZW1vdmVkKCkgaW5zdGVhZCcpO1xuICAgIGluc3RhbmNlUHJvdG8ub25fc3RhcnRlZCA9IGRlcHJlY2F0ZShpbnN0YW5jZVByb3RvLm9uU3RhcnRlZCwgJ2luc3RhbmNlLm9uX3N0YXJ0ZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgaW5zdGFuY2Uub25TdGFydGVkKCkgaW5zdGVhZCcpO1xuICAgIGluc3RhbmNlUHJvdG8ub25fc3RvcHBlZCA9IGRlcHJlY2F0ZShpbnN0YW5jZVByb3RvLm9uU3RvcHBlZCwgJ2luc3RhbmNlLm9uX3N0b3BwZWQgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgaW5zdGFuY2Uub25TdG9wcGVkKCkgaW5zdGVhZCcpO1xuICAgIGluc3RhbmNlUHJvdG8ub25fYWdtX3JlYWR5ID0gZGVwcmVjYXRlKGluc3RhbmNlUHJvdG8ub25BZ21SZWFkeSwgJ2luc3RhbmNlLm9uX2FnbV9yZWFkeSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBpbnN0YW5jZS5vbkFnbVJlYWR5KCkgaW5zdGVhZCcpO1xuICAgIGluc3RhbmNlUHJvdG8ub25fZXJyb3IgPSBkZXByZWNhdGUoaW5zdGFuY2VQcm90by5vbkVycm9yLCAnaW5zdGFuY2Uub25fZXJyb3IgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgaW5zdGFuY2Uub25FcnJvcigpIGluc3RlYWQnKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUluc3RhbmNlKHByb3BzLCBvYmopIHtcbiAgICAgICAgb2JqLmlkID0gcHJvcHMuSWQ7XG4gICAgICAgIG9iai5hcHBsaWNhdGlvbiA9IGFwcHMuZ2V0X2J5X2lkKHByb3BzLk5hbWUpO1xuICAgICAgICBvYmouY29udGV4dCA9IHByb3BzLkNvbnRleHQ7XG4gICAgICAgIG9iai50aXRsZSA9IHByb3BzLlRpdGxlO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHZhciBpbnN0YW5jZVRvRXZlbnRNYW5hZ2VyID0ge1xuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUluc3RhbmNlKHByb3BzLCBPYmplY3QuY3JlYXRlKGluc3RhbmNlUHJvdG8pKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IHVwZGF0ZUluc3RhbmNlLFxuICAgICAgICBjcmVhdGVfZXZlbnQ6ICdjcmVhdGUnLFxuICAgICAgICBpbml0X2V2ZW50OiAnc3RhcnRlZCcsXG4gICAgICAgIGV4aXRfZXZlbnQ6ICdzdG9wcGVkJyxcbiAgICAgICAgdXBkYXRlX2V2ZW50OiAndXBkYXRlZCcsXG4gICAgICAgIGlkX2ZpZWxkOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUuQ29udGV4dCAhPT0gdW5kZWZpbmVkICYmIGUuQ29udGV4dC5ndWlkICE9PSB1bmRlZmluZWQgPyBlLkNvbnRleHQuZ3VpZCA6IGUuSWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICBhZ21SZWFkeTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIGZpcnN0IEFHTVxuICAgICAgICAgICAgICAgIHZhciBzZXJ2ZXJOYW1lID0gT2JqZWN0LmtleXMoZS5BZ21TZXJ2ZXJzKVswXTtcbiAgICAgICAgICAgICAgICAvLyBBdHRhY2ggaXQgdG8gdGhlIG9iamVjdFxuICAgICAgICAgICAgICAgIHRoaXMuYWdtID0gY29udmVydEFnbUluc3RhbmNlKGUuQWdtU2VydmVyc1tzZXJ2ZXJOYW1lXSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdpbmRvd0FkZGVkOiBmdW5jdGlvbiAod2luKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluX3dpbmRvdyA9IHdpbjtcbiAgICAgICAgICAgICAgICB0aGlzLndpbmRvd3MgPSB0aGlzLndpbmRvd3MgfHwgW107XG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3dzLnB1c2god2luKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHdpbmRvd1JlbW92ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5fd2luZG93ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMud2luZG93cyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBpbnN0YW5jZVRvRXZlbnRNYW5hZ2VyLmNhbGxiYWNrcy5hZ21fcmVhZHkgPSBkZXByZWNhdGUoaW5zdGFuY2VUb0V2ZW50TWFuYWdlci5jYWxsYmFja3MuYWdtUmVhZHksICdpbnN0YW5jZS5hZ21fcmVhZHkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2UgaW5zdGFuY2UuYWdtUmVhZHkoKSBpbnN0ZWFkJyk7XG4gICAgaW5zdGFuY2VUb0V2ZW50TWFuYWdlci5jYWxsYmFja3Mud2luZG93X2FkZGVkID0gZGVwcmVjYXRlKGluc3RhbmNlVG9FdmVudE1hbmFnZXIuY2FsbGJhY2tzLndpbmRvd0FkZGVkLCAnaW5zdGFuY2Uud2luZG93X2FkZGVkIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIGluc3RhbmNlLndpbmRvd0FkZGVkKCkgaW5zdGVhZCcpO1xuICAgIGluc3RhbmNlVG9FdmVudE1hbmFnZXIuY2FsbGJhY2tzLndpbmRvd19yZW1vdmVkID0gZGVwcmVjYXRlKGluc3RhbmNlVG9FdmVudE1hbmFnZXIuY2FsbGJhY2tzLndpbmRvd1JlbW92ZWQsICdpbnN0YW5jZS53aW5kb3dfcmVtb3ZlZCBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSBpbnN0YW5jZS53aW5kb3dSZW1vdmVkKCkgaW5zdGVhZCcpO1xuXG4gICAgcmV0dXJuIGV2ZW50TWFuYWdlcihpbnN0YW5jZVRvRXZlbnRNYW5hZ2VyKTtcbn07XG5cbmZ1bmN0aW9uIGNvbnZlcnRBZ21JbnN0YW5jZShhZ20pIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFjaGluZTogYWdtLm1hY2hpbmVOYW1lLFxuICAgICAgICB1c2VyOiBhZ20udXNlck5hbWUsXG4gICAgICAgIGVudmlyb25tZW50OiBhZ20uZW52aXJvbm1lbnQsXG4gICAgICAgIGFwcGxpY2F0aW9uOiBhZ20uYXBwbGljYXRpb25OYW1lXG5cbiAgICB9O1xufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIl9hcmdzXCI6IFtcbiAgICBbXG4gICAgICBcInRpY2s0Mi1hcHAtbWFuYWdlckAyLjMuNlwiLFxuICAgICAgXCJDOlxcXFx3b3JrXFxcXHN0YXNoXFxcXEdMVUUtZGV2XFxcXGpzLWdsdWVcIlxuICAgIF1cbiAgXSxcbiAgXCJfZnJvbVwiOiBcInRpY2s0Mi1hcHAtbWFuYWdlckAyLjMuNlwiLFxuICBcIl9pZFwiOiBcInRpY2s0Mi1hcHAtbWFuYWdlckAyLjMuNlwiLFxuICBcIl9pbkNhY2hlXCI6IHRydWUsXG4gIFwiX2luc3RhbGxhYmxlXCI6IHRydWUsXG4gIFwiX2xvY2F0aW9uXCI6IFwiL3RpY2s0Mi1hcHAtbWFuYWdlclwiLFxuICBcIl9ub2RlVmVyc2lvblwiOiBcIjYuMC4wXCIsXG4gIFwiX25wbVVzZXJcIjoge30sXG4gIFwiX25wbVZlcnNpb25cIjogXCIzLjEwLjVcIixcbiAgXCJfcGhhbnRvbUNoaWxkcmVuXCI6IHt9LFxuICBcIl9yZXF1ZXN0ZWRcIjoge1xuICAgIFwibmFtZVwiOiBcInRpY2s0Mi1hcHAtbWFuYWdlclwiLFxuICAgIFwicmF3XCI6IFwidGljazQyLWFwcC1tYW5hZ2VyQDIuMy42XCIsXG4gICAgXCJyYXdTcGVjXCI6IFwiMi4zLjZcIixcbiAgICBcInNjb3BlXCI6IG51bGwsXG4gICAgXCJzcGVjXCI6IFwiMi4zLjZcIixcbiAgICBcInR5cGVcIjogXCJ2ZXJzaW9uXCJcbiAgfSxcbiAgXCJfcmVxdWlyZWRCeVwiOiBbXG4gICAgXCIvXCJcbiAgXSxcbiAgXCJfcmVzb2x2ZWRcIjogXCJodHRwOi8vMTkyLjE2OC4wLjIzNDo0ODczL3RpY2s0Mi1hcHAtbWFuYWdlci8tL3RpY2s0Mi1hcHAtbWFuYWdlci0yLjMuNi50Z3pcIixcbiAgXCJfc2hhc3VtXCI6IFwiNjczOTU1M2U5ZmRjMzViZTE5MTdkNGVkZjliZTZiN2RiMTIzOWE1N1wiLFxuICBcIl9zaHJpbmt3cmFwXCI6IG51bGwsXG4gIFwiX3NwZWNcIjogXCJ0aWNrNDItYXBwLW1hbmFnZXJAMi4zLjZcIixcbiAgXCJfd2hlcmVcIjogXCJDOlxcXFx3b3JrXFxcXHN0YXNoXFxcXEdMVUUtZGV2XFxcXGpzLWdsdWVcIixcbiAgXCJhdXRob3JcIjoge1xuICAgIFwibmFtZVwiOiBcIlRpY2s0MlwiLFxuICAgIFwidXJsXCI6IFwiaHR0cDovL3d3dy50aWNrNDIuY29tXCJcbiAgfSxcbiAgXCJiaW5cIjoge1xuICAgIFwiYnVpbGRcIjogXCIuL2Jpbi9idWlsZC5qc1wiLFxuICAgIFwiY2xlYW5cIjogXCIuL2Jpbi9jbGVhbi5qc1wiLFxuICAgIFwiZmlsZS12ZXJzaW9uaWZ5XCI6IFwiLi9iaW4vZmlsZS12ZXJzaW9uaWZ5LmpzXCIsXG4gICAgXCJtaW5pZnlcIjogXCIuL2Jpbi9taW5pZnkuanNcIlxuICB9LFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJ1dGlsLWRlcHJlY2F0ZVwiOiBcIl4xLjAuMlwiXG4gIH0sXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBcHAgTWFuYWdlciBBUEkgZm9yIEphdmFTY3JpcHRcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYmxhbmtldFwiOiBcIl4xLjEuNlwiLFxuICAgIFwiYm9vdHN0cmFwXCI6IFwiXjMuMy40XCIsXG4gICAgXCJicm93c2VyaWZ5XCI6IFwiXjEzLjAuMFwiLFxuICAgIFwiYnJvd3NlcmlmeS1yZXBsYWNpZnlcIjogXCJeMC4wLjRcIixcbiAgICBcImJyb3dzZXJpZnktdmVyc2lvbmlmeVwiOiBcIl4xLjAuNFwiLFxuICAgIFwiZXNsaW50XCI6IFwiXjMuMS4xXCIsXG4gICAgXCJlc2xpbnQtY29uZmlnLXN0YW5kYXJkXCI6IFwiXjUuMy41XCIsXG4gICAgXCJlc2xpbnQtY29uZmlnLXRpY2s0MlwiOiBcIl4xLjAuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1wcm9taXNlXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXN0YW5kYXJkXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJmc1wiOiBcIjAuMC4yXCIsXG4gICAgXCJodHRwLXNlcnZlclwiOiBcIl4wLjguMFwiLFxuICAgIFwianF1ZXJ5XCI6IFwiXjIuMS40XCIsXG4gICAgXCJqc2RvbVwiOiBcIl44LjEuMFwiLFxuICAgIFwibG9kYXNoXCI6IFwiXjMuOS4zXCIsXG4gICAgXCJtaW5pZnlpZnlcIjogXCJeNy4zLjJcIixcbiAgICBcIm9uY2hhbmdlXCI6IFwiXjIuMS4yXCIsXG4gICAgXCJwaGFudG9tanNcIjogXCJeMS45LjEyXCIsXG4gICAgXCJxdW5pdGpzXCI6IFwiXjEuMTUuMFwiLFxuICAgIFwic2hlbGxqc1wiOiBcIl4wLjYuMFwiLFxuICAgIFwidGljazQyLWFnbVwiOiBcIl4xLjMuMFwiLFxuICAgIFwidWdsaWZ5aWZ5XCI6IFwiXjMuMC4xXCJcbiAgfSxcbiAgXCJkaXJlY3Rvcmllc1wiOiB7XG4gICAgXCJleGFtcGxlXCI6IFwiZXhhbXBsZXNcIlxuICB9LFxuICBcImRpc3RcIjoge1xuICAgIFwic2hhc3VtXCI6IFwiNjczOTU1M2U5ZmRjMzViZTE5MTdkNGVkZjliZTZiN2RiMTIzOWE1N1wiLFxuICAgIFwidGFyYmFsbFwiOiBcImh0dHA6Ly8xOTIuMTY4LjAuMjM0OjQ4NzMvdGljazQyLWFwcC1tYW5hZ2VyLy0vdGljazQyLWFwcC1tYW5hZ2VyLTIuMy42LnRnelwiXG4gIH0sXG4gIFwiZ2l0SGVhZFwiOiBcImQ1NjU5MDk5YjM1YTk3NjE0MTU3NDdiNmZlNzNkNWM1NjY4YTEzNGRcIixcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCIsXG4gIFwibWFpblwiOiBcImxpYnJhcnkvYXBwX21hbmFnZXIuanNcIixcbiAgXCJuYW1lXCI6IFwidGljazQyLWFwcC1tYW5hZ2VyXCIsXG4gIFwib3B0aW9uYWxEZXBlbmRlbmNpZXNcIjoge30sXG4gIFwicmVhZG1lXCI6IFwiRVJST1I6IE5vIFJFQURNRSBkYXRhIGZvdW5kIVwiLFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidHlwZVwiOiBcImdpdFwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9pYmFsdGFkemhpZXZhQHN0YXNoLnRpY2s0Mi5jb20vc2NtL29mZ3cvanMtYXBwLW1hbmFnZXIuZ2l0XCJcbiAgfSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJ1aWxkXCI6IFwibnBtIHJ1biBlc2xpbnQgJiYgbm9kZSBiaW4vY2xlYW4uanMgJiYgbm9kZSBiaW4vYnVpbGQuanMgJiYgbm9kZSBiaW4vbWluaWZ5ICYmIG5vZGUgYmluL2ZpbGUtdmVyc2lvbmlmeVwiLFxuICAgIFwiZXNsaW50XCI6IFwiZXNsaW50IGxpYnJhcnlcIixcbiAgICBcImVzbGludDpmaXhcIjogXCJlc2xpbnQgbGlicmFyeSAtLWZpeFwiLFxuICAgIFwicHJlcHVibGlzaFwiOiBcIm5wbSB1cGRhdGUgJiBucG0gcnVuIGJ1aWxkXCIsXG4gICAgXCJ0ZXN0XCI6IFwibnBtIHJ1biBlc2xpbnQgJiYgbW9jaGEgLS1yZXF1aXJlIC4vdGVzdC90ZXN0X2hlbHBlciBcXFwidGVzdC8qKi8qLmpzXFxcIlwiLFxuICAgIFwid2F0Y2hcIjogXCJvbmNoYW5nZSBcXFwiLi9saWJyYXJ5LyouanNcXFwiIC1pdiAtZSBcXFwiLi9iaW5cXFwiIC0tIG5wbSBydW4gYnVpbGRcIlxuICB9LFxuICBcInZlcnNpb25cIjogXCIyLjMuNlwiXG59XG4iLCIvKipcbiAqIEBtb2R1bGUgYXBwY29uZmlnXG4gKi9cbnZhciBfID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgTW9kZWwgPSByZXF1aXJlKCcuL21vZGVsJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG52YXIgZXZlbnRzID0ge1xuICAgIGNvbm5lY3Q6ICdjb25uZWN0JyxcbiAgICBkaXNjb25uZWN0OiAnZGlzY29ubmVjdCcsXG4gICAgdXBkYXRlOiAndXBkYXRlJyxcbiAgICBzdGF0dXM6ICdzdGF0dXMnXG59O1xuXG52YXIgRXZlbnRCdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBzdWJzY3JpcHRpb25zQnlUeXBlO1xuICAgIHZhciBvbiA9IGZ1bmN0aW9uICh0eXBlLCBvbmNlLCBjYWxsYmFjaywgc2NvcGUpIHtcbiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIG9uY2U6IG9uY2UsXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICBzY29wZTogc2NvcGVcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnNCeVR5cGVbdHlwZV07XG4gICAgICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zQnlUeXBlW3R5cGVdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpcHRpb24uaWQgPSBzdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKSAtIDE7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcblxuICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIHR5cGUgPSBhcmdzLnNwbGljZSgwLCAxKVswXTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zQnlUeXBlW3R5cGVdO1xuICAgICAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uc0J5VHlwZVt0eXBlXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5jYWxsYmFjay5hcHBseShzdWJzY3JpcHRpb24uc2NvcGUsIGFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIF8ud2FybignRXhjZXB0aW9uIGR1cmluZyBleGVjdXRpb24gb2YgY2FsbGJhY2snLCBzdWJzY3JpcHRpb24sIGFyZ3MsIHgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLm9uY2UpIHtcbiAgICAgICAgICAgICAgICBvZmYoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBvZmYgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uc0J5VHlwZVtzdWJzY3JpcHRpb24udHlwZV07XG4gICAgICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbi5pZF07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc3VtZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb24uaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gb24oc3Vic2NyaXB0aW9uLnR5cGUsIHN1YnNjcmlwdGlvbi5vbmNlLCBzdWJzY3JpcHRpb24uY2FsbGJhY2ssIHN1YnNjcmlwdGlvbi5zY29wZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnNCeVR5cGVbc3Vic2NyaXB0aW9uLnR5cGVdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb25zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zQnlUeXBlW3N1YnNjcmlwdGlvbi50eXBlXSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbi5pZF0gPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb25zQnlUeXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3Vic2NyaXB0aW9uc0J5VHlwZSkuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uc0J5VHlwZVt0eXBlXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uLmlkO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmlwdGlvbnNCeVR5cGUgPSB7fTtcbiAgICB9O1xuXG4gICAgcmVzZXQoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvbjogb24sXG4gICAgICAgIGVtaXQ6IGVtaXQsXG4gICAgICAgIG9mZjogb2ZmLFxuICAgICAgICByZXN1bWU6IHJlc3VtZSxcbiAgICAgICAgcmVzZXQ6IHJlc2V0XG5cbiAgICB9O1xufTtcblxudmFyIEFwcENvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGRlZmF1bHRMaXN0ZW4gID0gdHJ1ZTtcbiAgICB2YXIgZ2F0ZXdheTtcbiAgICB2YXIgaW5pdEdhdGV3YXk7XG4gICAgdmFyIGJ1cyA9IG5ldyBFdmVudEJ1cygpO1xuICAgIHZhciBtb2RlbCA9IG5ldyBNb2RlbChidXMpO1xuXG4gICAgdmFyIHJvb3QgPSByZXF1aXJlKCcuL3Byb3BzJykobW9kZWwucm9vdCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIGdhdGV3YXlDb25uZWN0aW9uO1xuICAgIHZhciBwb2xsaW5nSW50ZXJ2YWxJZDtcbiAgICB2YXIgY2xlYXJQb2xsaW5nSW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcG9sbGluZ0ludGVydmFsSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHBvbGxpbmdJbnRlcnZhbElkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQdWJsaWMgQVBJXG4gICAgc2VsZi5pbml0ID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICAgIHNldHRpbmdzID0gc2V0dGluZ3MgfHwge307XG4gICAgICAgIHZhciBpc0lkZW50aXR5VmFsaWQgPSB0eXBlb2Ygc2V0dGluZ3MuaWRlbnRpdHkgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgT2JqZWN0LmtleXMoc2V0dGluZ3MuaWRlbnRpdHkpLmxlbmd0aCA+IDA7XG5cbiAgICAgICAgaWYgKGlzSWRlbnRpdHlWYWxpZCkge1xuICAgICAgICAgICAgc2VsZi5pZGVudGl0eSA9IHNldHRpbmdzLmlkZW50aXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdExpc3RlbiA9IHNldHRpbmdzLmRlZmF1bHRMaXN0ZW4gfHwgZGVmYXVsdExpc3RlbjtcbiAgICAgICAgaWYgKCFzZWxmLmlkZW50aXR5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpZGVudGl0eSBtdXN0IGJlIG5vbiBlbXB0eSBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbC5zZXBhcmF0b3IgPSBzZXR0aW5ncy5kZWZhdWx0U2VwYXJhdG9yIHx8IG1vZGVsLnNlcGFyYXRvcjtcblxuICAgICAgICBzZWxmLnNjaGVtYSA9IHNldHRpbmdzLnNjaGVtYSB8fCBzZWxmLnNjaGVtYSB8fCAnQXBwbGljYXRpb25Db25maWd1cmF0aW9uJztcblxuICAgICAgICBpbml0R2F0ZXdheSA9IF8uaXNGdW5jdGlvbihzZXR0aW5ncy5nYXRld2F5KVxuICAgICAgICA/IHNldHRpbmdzLmdhdGV3YXlcbiAgICAgICAgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmdhdGV3YXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuZ2F0ZXdheSA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmdhdGV3YXkuaW5zdGFuY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuZ2F0ZXdheS5pbnN0YW5jZSA9IF8udXVpZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi9nYXRld2F5Jykoc2V0dGluZ3MuZ2F0ZXdheSk7XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHNlbGYuY29ubmVjdCA9IGZ1bmN0aW9uIChsaXN0ZW4sIGNhbGxiYWNrLCBzY29wZSkge1xuICAgICAgICBjbGVhclBvbGxpbmdJbnRlcnZhbCgpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChfLmlzRnVuY3Rpb24obGlzdGVuKSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gbGlzdGVuO1xuICAgICAgICAgICAgICAgIHNjb3BlID0gY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgbGlzdGVuID0gZGVmYXVsdExpc3RlbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gYnVzLm9uKGV2ZW50cy5jb25uZWN0LCB0cnVlLCBjYWxsYmFjaywgc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICBpZiAoIXNlbGYuaWRlbnRpdHkpIHtcbiAgICAgICAgICAgIGVycm9yID0gJ2lkZW50aXR5IGlzIG5vdCBzcGVjaWZpZWQuIGRpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgaW5pdCgpPyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWdhdGV3YXkpIHtcbiAgICAgICAgICAgICAgICBnYXRld2F5ID0gaW5pdEdhdGV3YXkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFsaXN0ZW4pIHtcbiAgICAgICAgICAgICAgICBnYXRld2F5Q29ubmVjdGlvbiA9XG4gICAgICAgICAgICAgICAgICBnYXRld2F5LmNvbm5lY3QoXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlkZW50aXR5LFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yLCBzbmFwc2hvdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hcHBseVNuYXBzaG90KHNuYXBzaG90KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYnVzLmVtaXQoZXZlbnRzLmNvbm5lY3QsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVzLmVtaXQoZXZlbnRzLnN0YXR1cywgZXJyb3IsIHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY29ubmVjdEVtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBnYXRld2F5Q29ubmVjdGlvbiA9IGdhdGV3YXkuY29ubmVjdChcbiAgICAgICAgICAgICAgICAgIHNlbGYuc2NoZW1hLFxuICAgICAgICAgICAgICAgICAgc2VsZi5pZGVudGl0eSxcbiAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IsIHNuYXBzaG90LCB1cGRhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzbmFwc2hvdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYXBwbHlTbmFwc2hvdChzbmFwc2hvdCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5hcHBseVVwZGF0ZXModXBkYXRlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0RW1pdHRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0RW1pdHRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ1cy5lbWl0KGV2ZW50cy5jb25uZWN0LCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgTElTVEVOX05PVF9TVVBQT1JURUQgPSA4O1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMuY29kZSA9PT0gTElTVEVOX05PVF9TVVBQT1JURUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9sbGluZ0ludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXRld2F5LmRpc2Nvbm5lY3QoZ2F0ZXdheUNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2F0ZXdheUNvbm5lY3Rpb24gPSBnYXRld2F5LmNvbm5lY3Qoc2VsZi5zY2hlbWEsIHNlbGYuaWRlbnRpdHksIGZhbHNlLCBmdW5jdGlvbiAoZXJyb3IsIHNuYXBzaG90KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYXBwbHlTbmFwc2hvdChzbmFwc2hvdCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMDApO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGJ1cy5lbWl0LCAwLCBldmVudHMuY29ubmVjdCwgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG5cbiAgICB9O1xuXG4gICAgc2VsZi5wcm9wcyA9IGZ1bmN0aW9uIChzZWN0aW9uLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIHJvb3QucHJvcHMoc2VjdGlvbiwgc2VwYXJhdG9yKTtcbiAgICB9O1xuXG4gICAgc2VsZi5tb2RpZnkgPSBmdW5jdGlvbiAobW9kaWZpY2F0aW9ucywgY2FsbGJhY2ssIHNjb3BlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbW9kaWZpY2F0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIG1vZGlmaWNhdGlvbnMgPSBbbW9kaWZpY2F0aW9uc107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gYnVzLm9uKGV2ZW50cy51cGRhdGUsIHRydWUsIGNhbGxiYWNrLCBzY29wZSk7XG5cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuXG4gICAgc2VsZi5vbkNvbm5lY3QgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBidXMub24oZXZlbnRzLmNvbm5lY3QsIGZhbHNlLCBjYWxsYmFjaywgc2NvcGUpO1xuXG4gICAgfTtcblxuICAgIHNlbGYub25EaXNjb25uZWN0ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBzY29wZSkge1xuICAgICAgICByZXR1cm4gYnVzLm9uKGV2ZW50cy5kaXNjb25uZWN0LCBmYWxzZSwgY2FsbGJhY2ssIHNjb3BlKTtcbiAgICB9O1xuXG4gICAgc2VsZi5vZmYgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGJ1cy5vZmYoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBzZWxmLm9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBidXMucmVzdW1lKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBzY29wZSkge1xuICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgYnVzLm9uKGV2ZW50cy5kaXNjb25uZWN0LCB0cnVlLCBjYWxsYmFjaywgc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJQb2xsaW5nSW50ZXJ2YWwoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBnYXRld2F5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZ2F0ZXdheS5kaXNjb25uZWN0KGdhdGV3YXlDb25uZWN0aW9uLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBidXMuZW1pdChldmVudHMuZGlzY29ubmVjdCwgZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGdhdGV3YXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidXMuZW1pdChldmVudHMuZGlzY29ubmVjdCwgJ25vdCBjb25uZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG5BcHBDb25maWcucHJvdG90eXBlLmlkZW50aXR5RXF1YWwgPSBoZWxwZXJzLmlkZW50aXR5RXF1YWw7XG5BcHBDb25maWcucHJvdG90eXBlLmlkZW50aXR5VG9TdHJpbmcgPSBoZWxwZXJzLmlkZW50aXR5VG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gbmV3IEFwcENvbmZpZygpO1xufTtcbiIsInZhciBnYXRld2F5Q29ubmVjdGlvbiA9IHJlcXVpcmUoJ3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24nKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG52YXIgaWRlbnRpdHlUb1N0cmluZyA9IGhlbHBlcnMuaWRlbnRpdHlUb1N0cmluZztcbnZhciBQUk9EVUNUID0gJ2FwcGNvbmZpZyc7XG5cbnZhciBHYXRld2F5VHJhbnNwb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGNvbm5lY3Rpb247XG4gICAgdmFyIGRhdGFIYW5kbGVycyA9IHt9O1xuICAgIHZhciBzdGF0dXNIYW5kbGVycyA9IHt9O1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RhdHVzTWVzc2FnZShtc2cpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBzdGF0dXNIYW5kbGVyc1ttc2cuaW5zdGFuY2VdO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgaGFuZGxlcihtc2cuZXJyb3IsIG1zZy5zdGF0dXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRGF0YU1lc3NhZ2UobXNnKSB7XG4gICAgICAgIHZhciBzY2hlbWEgPSBtc2cuc2NoZW1hO1xuICAgICAgICB2YXIgc2NoZW1hSGFuZGxlcnMgPSBkYXRhSGFuZGxlcnNbc2NoZW1hXTtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFIYW5kbGVycyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZGVudGl0eUtleSA9IGlkZW50aXR5VG9TdHJpbmcobXNnLmlkZW50aXR5LCB0cnVlKTtcbiAgICAgICAgdmFyIGlkZW50aXR5SGFuZGxlcnMgPSBzY2hlbWFIYW5kbGVyc1tpZGVudGl0eUtleV07XG4gICAgICAgIGlmICh0eXBlb2YgaWRlbnRpdHlIYW5kbGVycyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlkZW50aXR5SGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKG1zZy5lcnJvciwgbXNnLnNuYXBzaG90LCBtc2cudXBkYXRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuc3VyZUNvbm5lY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKGNvbm5lY3Rpb24pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbm5lY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IG9wdGlvbnMuY29ubmVjdGlvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IGdhdGV3YXlDb25uZWN0aW9uKG9wdGlvbnMuc2V0dGluZ3MsIG9wdGlvbnMuY3VzdG9tX2Nvbm5lY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRhdGFTdWJzY3JpcHRpb247XG4gICAgdmFyIHN0YXR1c1N1YnNjcmlwdGlvbjtcbiAgICB2YXIgY29ubmVjdCA9IGZ1bmN0aW9uIChzY2hlbWEsIGlkZW50aXR5LCBsaXN0ZW4sIGhhbmRsZXIsIHN0YXR1c0hhbmRsZXIpIHtcbiAgICAgICAgZW5zdXJlQ29ubmVjdGlvbigpO1xuICAgICAgICB2YXIgc2NoZW1hSGFuZGxlcnMgPSBkYXRhSGFuZGxlcnNbc2NoZW1hXTtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFIYW5kbGVycyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHNjaGVtYUhhbmRsZXJzID0gZGF0YUhhbmRsZXJzW3NjaGVtYV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZGVudGl0eUtleSA9IGlkZW50aXR5VG9TdHJpbmcoaWRlbnRpdHksIHRydWUpO1xuICAgICAgICB2YXIgaWRlbnRpdHlIYW5kbGVycyA9IHNjaGVtYUhhbmRsZXJzW2lkZW50aXR5S2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiBpZGVudGl0eUhhbmRsZXJzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWRlbnRpdHlIYW5kbGVycyA9IHNjaGVtYUhhbmRsZXJzW2lkZW50aXR5S2V5XSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhbmRsZXJUb1JlZ2lzdGVyO1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIGlmIChsaXN0ZW4pIHtcbiAgICAgICAgICAgIGhhbmRsZXJUb1JlZ2lzdGVyID0gaGFuZGxlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZXJUb1JlZ2lzdGVyID0gZnVuY3Rpb24gKGVycm9yLCBzbmFwc2hvdCwgdXBkYXRlcykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoZXJyb3IsIHNuYXBzaG90LCB1cGRhdGVzKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgaWRlbnRpdHlIYW5kbGVyc1tpbmRleF07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXggPSBpZGVudGl0eUhhbmRsZXJzLnB1c2goaGFuZGxlclRvUmVnaXN0ZXIpIC0gMTtcblxuICAgICAgICBpZiAodHlwZW9mIChkYXRhU3Vic2NyaXB0aW9uKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRhdGFTdWJzY3JpcHRpb24gPSBjb25uZWN0aW9uLm9uKFBST0RVQ1QsIEdhdGV3YXlUcmFuc3BvcnQuTWVzc2FnZVR5cGUuREFUQSwgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgICAgIGhhbmRsZURhdGFNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG9wdGlvbnMuaW5zdGFuY2U7XG4gICAgICAgIHN0YXR1c0hhbmRsZXJzW2luc3RhbmNlXSA9IHN0YXR1c0hhbmRsZXI7XG4gICAgICAgIGlmICh0eXBlb2YgKHN0YXR1c1N1YnNjcmlwdGlvbikgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzdGF0dXNTdWJzY3JpcHRpb24gPSBjb25uZWN0aW9uLm9uKFBST0RVQ1QsIEdhdGV3YXlUcmFuc3BvcnQuTWVzc2FnZVR5cGUuU1RBVFVTLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlU3RhdHVzTWVzc2FnZShtc2cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbXNnID0ge1xuICAgICAgICAgICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgICAgICAgICBpZGVudGl0eTogaWRlbnRpdHksXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBsaXN0ZW46IGxpc3RlblxuICAgICAgICB9O1xuICAgICAgICBjb25uZWN0aW9uLnNlbmQoUFJPRFVDVCwgR2F0ZXdheVRyYW5zcG9ydC5NZXNzYWdlVHlwZS5DT05ORUNULCBtc2cpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgICAgICAgICBpZGVudGl0eTogaWRlbnRpdHksXG4gICAgICAgICAgICBsaXN0ZW46IGxpc3RlbixcbiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIG1vZGlmeSA9IGZ1bmN0aW9uIChzY2hlbWEsIGlkZW50aXR5LCBtb2RpZmljYXRpb25zKSB7XG4gICAgICAgIGVuc3VyZUNvbm5lY3Rpb24oKTtcbiAgICAgICAgY29ubmVjdGlvbi5zZW5kKFBST0RVQ1QsIEdhdGV3YXlUcmFuc3BvcnQuTWVzc2FnZVR5cGUuTU9ESUZZLCBtb2RpZmljYXRpb25zKTtcbiAgICB9O1xuXG4gICAgdmFyIGRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICAgICAgICB2YXIgc2NoZW1hSGFuZGxlcnMgPSBkYXRhSGFuZGxlcnNbZGVzY3JpcHRvci5zY2hlbWFdO1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYUhhbmRsZXJzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIGlkZW50aXR5S2V5ID0gaWRlbnRpdHlUb1N0cmluZyhkZXNjcmlwdG9yLmlkZW50aXR5LCB0cnVlKTtcbiAgICAgICAgICAgIHZhciBpZGVudGl0eUhhbmRsZXJzID0gc2NoZW1hSGFuZGxlcnNbaWRlbnRpdHlLZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpZGVudGl0eUhhbmRsZXJzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gaWRlbnRpdHlIYW5kbGVyc1tkZXNjcmlwdG9yLmluZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2hlbWE6IGRlc2NyaXB0b3Iuc2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpdHk6IGRlc2NyaXB0b3IuaWRlbnRpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogb3B0aW9ucy5pbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoR2F0ZXdheVRyYW5zcG9ydC5NZXNzYWdlVHlwZS5ESVNDT05ORUNULCBtc2cpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgaWRlbnRpdHlIYW5kbGVyc1tkZXNjcmlwdG9yLmluZGV4XTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaWRlbnRpdHlIYW5kbGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYUhhbmRsZXJzW2lkZW50aXR5S2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhzY2hlbWFIYW5kbGVycykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFIYW5kbGVyc1tkZXNjcmlwdG9yLnNjaGVtYV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoZGF0YUhhbmRsZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGRhdGFTdWJzY3JpcHRpb24pICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ub2ZmKGRhdGFTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHN0YXR1c0hhbmRsZXJzW2Rlc2NyaXB0b3IuaW5zdGFuY2VdO1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoc3RhdHVzSGFuZGxlcnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0dXNTdWJzY3JpcHRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5vZmYoc3RhdHVzU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjb25uZWN0OiBjb25uZWN0LFxuICAgICAgICBtb2RpZnk6IG1vZGlmeSxcbiAgICAgICAgZGlzY29ubmVjdDogZGlzY29ubmVjdFxuICAgIH07XG59O1xuXG5HYXRld2F5VHJhbnNwb3J0Lk1lc3NhZ2VUeXBlID0ge1xuICAgIC8vIHsgc2NoZW1hOiAnQXBwbGljYXRpb25Db25maWd1cmF0aW9uJywgaWRlbnRpdHk6IHt9LCBsaXN0ZW46IHRydWUsIGluc3RhbmNlOiAnJyB9XG4gICAgQ09OTkVDVDogJ2Nvbm5lY3QnLFxuICAgIC8vIHsgc2NoZW1hOiAnQXBwbGljYXRpb25Db25maWd1cmF0aW9uJywgaWRlbnRpdHk6IHt9LCBpbnN0YW5jZTogJycgfVxuICAgIERJU0NPTk5FQ1Q6ICdkaXNjb25uZWN0JyxcbiAgICAvLyB7IHNjaGVtYTogJ0FwcGxpY2F0aW9uQ29uZmlndXJhdGlvbicsIGlkZW50aXR5OiB7fSwgdXBkYXRlczogW10sIGluc3RhbmNlOiAnJyB9XG4gICAgTU9ESUZZOiAnbW9kaWZ5JyxcbiAgICAvLyB7IHNjaGVtYTogJ0FwcGxpY2F0aW9uQ29uZmlndXJhdGlvbicsIGlkZW50aXR5OiB7fSwgZXJyb3I6ICcnLCBzbmFwc2hvdDoge2RlZmF1bHRLZXlWYWx1ZTogJycsIGtleXM6IFtdLCBwcm9wczoge319LCB1cGRhdGVzOiBbXSB9XG4gICAgREFUQTogJ2RhdGEnLFxuICAgIC8vIHsgc2NoZW1hOiAnQXBwbGljYXRpb25Db25maWd1cmF0aW9uJywgaWRlbnRpdHk6IHt9LCBpbnN0YW5jZTogJycsIHN0YXR1czogJycsIGVycm9yOiAnJyB9XG4gICAgU1RBVFVTOiAnc3RhdHVzJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBHYXRld2F5VHJhbnNwb3J0O1xuIiwiZnVuY3Rpb24gZXNjYXBlSWRlbnRpdHlUZXh0KHRleHQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bXFxcXF0vZywgJ1xcXFxcXFxcJykucmVwbGFjZSgvWzpdL2csICdcXFxcOicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaWRlbnRpdHlUb1N0cmluZyhpZGVudGl0eSwgaW5jbHVkZUtleXMsIHNlcGFyYXRvciwgb3JkZXIpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiAoaWRlbnRpdHkpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJy8nO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaWRlbnRpdHkpO1xuICAgIGlmICh0eXBlb2YgKG9yZGVyKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBrZXlzLnNvcnQob3JkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMuc29ydCgpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBpbmNsdWRlS2V5cyA/IChlc2NhcGVJZGVudGl0eVRleHQoa2V5KSArICc6JyArIGVzY2FwZUlkZW50aXR5VGV4dChpZGVudGl0eVtrZXldKSkgOiBpZGVudGl0eVtrZXldO1xuICAgIH0pLmpvaW4oc2VwYXJhdG9yKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHlFcXVhbChpZGVudGl0eTEsIGlkZW50aXR5Mikge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gaWRlbnRpdHlUb1N0cmluZyhpZGVudGl0eTEsIHRydWUpID09PSBpZGVudGl0eVRvU3RyaW5nKGlkZW50aXR5MiwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4ocHJvcHMsIHNlcGFyYXRvciwgbmFtZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJy4nO1xuICAgIHZhciBwcmVmaXggPSBuYW1lID8gbmFtZSArIHNlcGFyYXRvciA6ICcnO1xuICAgIHZhciB2YWwgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkuaW5kZXhPZihwcmVmaXgpICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGF0aCA9IGtleS5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCk7XG4gICAgICAgIHZhciB0YXJnZXQgPSB2YWw7XG4gICAgICAgIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoc2VwYXJhdG9yKTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0W3BhcnRzW2ldXSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtwYXJ0c1tpXV0gPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0W3BhcnRzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldFtwYXJ0c1tpXV0gPSBwcm9wc1trZXldLnZhbHVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gcHJvcEVxdWFsKGxocywgcmhzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmIChsaHMudmFsdWUgIT09IHJocy52YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaHMudW5kZXJseWluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbGhzVW5kZXJseWluZyA9IGxocy51bmRlcmx5aW5nW2ldO1xuICAgICAgICB2YXIgcmhzVW5kZXJseWluZyA9IHJocy51bmRlcmx5aW5nW2ldIHx8IHt9O1xuICAgICAgICBpZiAobGhzVW5kZXJseWluZy52YWx1ZSAhPT0gcmhzVW5kZXJseWluZy52YWx1ZSB8fCAhaWRlbnRpdHlFcXVhbChsaHNVbmRlcmx5aW5nLnBhcmVudCwgcmhzVW5kZXJseWluZy5wYXJlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZmxhdHRlbjogZmxhdHRlbixcbiAgICBwcm9wRXF1YWw6IHByb3BFcXVhbCxcbiAgICBpZGVudGl0eVRvU3RyaW5nOiBpZGVudGl0eVRvU3RyaW5nLFxuICAgIGlkZW50aXR5RXF1YWw6IGlkZW50aXR5RXF1YWxcbn07XG4iLCJ2YXIgcHJvcEVxdWFsID0gcmVxdWlyZSgnLi9oZWxwZXJzJykucHJvcEVxdWFsO1xuXG52YXIgVXBkYXRlVHlwZSA9IHtcbiAgICBBZGRlZDogJ0FkZGVkJyxcbiAgICBDaGFuZ2VkOiAnQ2hhbmdlZCcsXG4gICAgUmVtb3ZlZDogJ1JlbW92ZWQnXG59O1xuXG52YXIgTW9kZWwgPSBmdW5jdGlvbiAoYnVzLCBzZXBhcmF0b3IpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdGhpcy5idXMgPSBidXM7XG4gICAgdGhpcy5yb290ID0gbmV3IFZpZXdNb2RlbCh0aGlzLCAnJywgc2VwYXJhdG9yIHx8ICcuJyk7XG4gICAgdGhpcy52aWV3cyA9IHt9O1xufTtcblxudmFyIFZpZXdNb2RlbCA9IGZ1bmN0aW9uIChtb2RlbCwgcGF0aCwgc2VwYXJhdG9yKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLm1vZGVsID0gbW9kZWw7XG4gICAgc2VsZi5wcm9wcyA9IHt9O1xuICAgIHNlbGYuc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8IG1vZGVsLnNlcGFyYXRvcjtcbiAgICBzZWxmLnBhdGggPSBwYXRoO1xufTtcblxuVmlld01vZGVsLnByb3RvdHlwZS5nZXRWaWV3TW9kZWwgPSBmdW5jdGlvbiAobmFtZSwgc2VwYXJhdG9yKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoICsgbmFtZSArIChzZXBhcmF0b3IgPyBzZXBhcmF0b3IgOiAnLicpO1xuICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWw7XG4gICAgaWYgKHBhdGggPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBtb2RlbC5yb290O1xuICAgIH1cblxuICAgIGlmICghbW9kZWwudmlld3NbcGF0aF0pIHtcbiAgICAgICAgdmFyIGJlc3RQYXJlbnQgPSAnJztcbiAgICAgICAgLy8gZmlsbCBzdWJ2aWV3IHJlZmVyZW5jZXMgYW5kIGNob29zZSBiZXN0IHBhcmVudCBwcm9wcyB0byBjb3B5IGZyb20uXG4gICAgICAgIE9iamVjdC5rZXlzKG1vZGVsLnZpZXdzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChwYXRoLmluZGV4T2Yoa2V5KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChiZXN0UGFyZW50Lmxlbmd0aCA8IGtleS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYmVzdFBhcmVudCA9IGtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8ga2VlcCBzdWJ2aWV3cyBzb3J0ZWQuXG4gICAgICAgICAgICAgICAgdmFyIHN1YnZpZXdzID0gbW9kZWwudmlld3Nba2V5XS5zdWJ2aWV3cztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJ2aWV3c1tpXS5pbmRleE9mKHBhdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJ2aWV3cy5zcGxpY2UoaSwgMCwgcGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdWJ2aWV3cy5wdXNoKHBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdmlld01vZGVsID0gbmV3IFZpZXdNb2RlbChtb2RlbCwgcGF0aCwgc2VwYXJhdG9yKTtcblxuICAgICAgICB2YXIgcGFyZW50UHJvcHMgPSBiZXN0UGFyZW50ID09PSAnJyA/IG1vZGVsLnJvb3QucHJvcHMgOiBtb2RlbC52aWV3c1tiZXN0UGFyZW50XS5tb2RlbC5wcm9wcztcbiAgICAgICAgT2JqZWN0LmtleXMocGFyZW50UHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIHByb3AgPSBwYXJlbnRQcm9wc1trZXldO1xuICAgICAgICAgICAgaWYgKHByb3AubmFtZS5pbmRleE9mKHBhdGgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBwcm9wLm5hbWUuc3Vic3RyaW5nKHBhdGgubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB2aWV3TW9kZWwucHJvcHNbbmFtZV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtb2RlbC52aWV3c1twYXRoXSA9IHtcbiAgICAgICAgICAgIHN1YnZpZXdzOiBbXSxcbiAgICAgICAgICAgIG1vZGVsOiB2aWV3TW9kZWxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9kZWwudmlld3NbcGF0aF0ubW9kZWw7XG59O1xuXG5WaWV3TW9kZWwucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBzY29wZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5vbih0aGlzLnBhdGgsIGNhbGxiYWNrLCBzY29wZSk7XG59O1xuXG5Nb2RlbC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAocGF0aCwgY2FsbGJhY2ssIHNjb3BlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciB0eXBlID0gdXBkYXRlVHlwZUZvclBhdGgocGF0aCk7XG4gICAgcmV0dXJuIHRoaXMuYnVzLm9uKHR5cGUsIGZhbHNlLCBjYWxsYmFjaywgc2NvcGUpO1xufTtcblxuTW9kZWwucHJvdG90eXBlLmFwcGx5U25hcHNob3QgPSBmdW5jdGlvbiAoc25hcHNob3QsIGlzU25hcHNob3QpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaXNTbmFwc2hvdCA9IHR5cGVvZiBpc1NuYXBzaG90ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBpc1NuYXBzaG90O1xuXG4gICAgdmFyIHVwZGF0ZXMgPSB0b1VwZGF0ZXMoaXNTbmFwc2hvdCA/IHt9IDogdGhpcy5yb290LnByb3BzLCBzbmFwc2hvdC5wcm9wcyk7XG4gICAgYXBwbHlVcGRhdGVzQW5kRW1pdEV2ZW50cyh0aGlzLCB1cGRhdGVzLCBpc1NuYXBzaG90KTtcbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZVR5cGVGb3JQYXRoKHBhdGgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIHR5cGUgPSAndXBkYXRlJztcbiAgICBpZiAocGF0aCAhPT0gJycpIHtcbiAgICAgICAgdHlwZSA9IHR5cGUgKyAnfCcgKyBwYXRoO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlO1xufVxuXG4vLyBzaGFsbG93IGNvcHlcbmZ1bmN0aW9uIGNsb25lVXBkYXRlRm9yUGF0aCh1cGRhdGUsIHBhdGgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGNsb25lID0ge1xuICAgICAgICB0eXBlOiB1cGRhdGUudHlwZSxcbiAgICAgICAgbmFtZTogdXBkYXRlLm5hbWUuc3Vic3RyaW5nKHBhdGgubGVuZ3RoKVxuICAgIH07XG5cbiAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgIGNhc2UgVXBkYXRlVHlwZS5DaGFuZ2VkOlxuICAgICAgICAgICAgY2xvbmUub2xkVmFsdWUgPSB1cGRhdGUub2xkVmFsdWU7XG4gICAgICAgICAgICBjbG9uZS52YWx1ZSA9IHVwZGF0ZS52YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFVwZGF0ZVR5cGUuQWRkZWQ6XG4gICAgICAgICAgICBjbG9uZS52YWx1ZSA9IHVwZGF0ZS52YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFVwZGF0ZVR5cGUuUmVtb3ZlZDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gYXBwbHlVcGRhdGVzQW5kRW1pdEV2ZW50cyhtb2RlbCwgdXBkYXRlcywgaXNTbmFwc2hvdCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgdmlld3MgPSBPYmplY3Qua2V5cyhtb2RlbC52aWV3cyk7XG4gICAgdmFyIGVmZmVjdGl2ZVVwZGF0ZXMgPSB7ICcnOiB1cGRhdGVzIH07XG4gICAgaWYgKHZpZXdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gc29ydCB2aWV3cyBmb3IgcHJlZml4IHNlYXJjaFxuICAgICAgICBpZiAodmlld3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmlld3Muc29ydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IHZpZXdzKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlLm5hbWUuaW5kZXhPZih2aWV3c1tpXSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldyA9IHZpZXdzW2ldO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmlldyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVmZmVjdGl2ZVVwZGF0ZXNbdmlld10ucHVzaChjbG9uZVVwZGF0ZUZvclBhdGgodXBkYXRlLCB2aWV3KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBhZmZlY3RlZFBhdGhzID0gT2JqZWN0LmtleXMoZWZmZWN0aXZlVXBkYXRlcyk7XG4gICAgaWYgKGFmZmVjdGVkUGF0aHMubGVuZ3RoID4gMSkge1xuICAgICAgICBhZmZlY3RlZFBhdGhzLnNvcnQoKTtcbiAgICB9XG5cbiAgICBhZmZlY3RlZFBhdGhzLmZvckVhY2goZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIHZpZXdNb2RlbCA9IHBhdGggPT09ICcnID8gbW9kZWwucm9vdCA6IG1vZGVsLnZpZXdzW3BhdGhdLm1vZGVsO1xuICAgICAgICBpZiAoaXNTbmFwc2hvdCkge1xuICAgICAgICAgICAgdmlld01vZGVsLnByb3BzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBlZmZlY3RpdmVVcGRhdGVzW3BhdGhdLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgICAgICAgc3dpdGNoICh1cGRhdGUudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgVXBkYXRlVHlwZS5BZGRlZDpcbiAgICAgICAgICAgICAgIC8vIGJyZWFrIG9taXR0ZWRcbiAgICAgICAgICAgICAgICBjYXNlIFVwZGF0ZVR5cGUuQ2hhbmdlZDpcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2VkIHdvcmtzIGV2ZW4gZm9yIG1pc3NpbmcgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICB2aWV3TW9kZWwucHJvcHNbdXBkYXRlLm5hbWVdID0gdXBkYXRlLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFVwZGF0ZVR5cGUuUmVtb3ZlZDpcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZpZXdNb2RlbC5wcm9wc1t1cGRhdGUubmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhZmZlY3RlZFBhdGhzLmZvckVhY2goZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB1cGRhdGVUeXBlRm9yUGF0aChwYXRoKTtcbiAgICAgICAgbW9kZWwuYnVzLmVtaXQodHlwZSwgaXNTbmFwc2hvdCwgdXBkYXRlcyk7XG4gICAgfSk7XG59XG5cbk1vZGVsLnByb3RvdHlwZS5hcHBseVVwZGF0ZXMgPSBmdW5jdGlvbiAodXBkYXRlcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBhcHBseVVwZGF0ZXNBbmRFbWl0RXZlbnRzKHRoaXMsIHVwZGF0ZXMsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHRvVXBkYXRlcyhpbWFnZSwgc25hcHNob3QpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgc25hcHNob3QgPSBzbmFwc2hvdCB8fCB7fTtcbiAgICB2YXIgdXBkYXRlcyA9IFtdO1xuICAgIHZhciB0b0RlbGV0ZSA9IE9iamVjdC5rZXlzKGltYWdlKTtcbiAgICBPYmplY3Qua2V5cyhzbmFwc2hvdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB1cGRhdGUgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbWFnZVtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdXBkYXRlLnR5cGUgPSBVcGRhdGVUeXBlLkFkZGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFwcm9wRXF1YWwoaW1hZ2Vba2V5XSwgc25hcHNob3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUudHlwZSA9IFVwZGF0ZVR5cGUuQ2hhbmdlZDtcbiAgICAgICAgICAgICAgICB1cGRhdGUub2xkVmFsdWUgPSBpbWFnZVtrZXldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaW5kZXhUb0RlbGV0ZTtcbiAgICAgICAgICAgIGZvciAoaW5kZXhUb0RlbGV0ZSA9IDA7IGluZGV4VG9EZWxldGUgPCB0b0RlbGV0ZS5sZW5ndGg7IHRvRGVsZXRlKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodG9EZWxldGVbaW5kZXhUb0RlbGV0ZV0gPT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9EZWxldGVbaW5kZXhUb0RlbGV0ZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdG9EZWxldGUuc3BsaWNlKGluZGV4VG9EZWxldGUsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgICAgICB1cGRhdGUudmFsdWUgPSBzbmFwc2hvdFtrZXldO1xuICAgICAgICAgICAgdXBkYXRlLm5hbWUgPSBrZXk7XG4gICAgICAgICAgICB1cGRhdGVzLnB1c2godXBkYXRlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdG9EZWxldGUuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHVwZGF0ZXMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBVcGRhdGVUeXBlLlJlbW92ZWQsXG4gICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXBkYXRlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb2RlbDtcbiIsInZhciBmbGF0dGVuID0gcmVxdWlyZSgnLi9oZWxwZXJzJykuZmxhdHRlbjtcblxudmFyIFByb3BzID0gZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBwcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsLnByb3BzW25hbWVdO1xuICAgIH07XG5cbiAgICB2YXIgdmFsID0gZnVuY3Rpb24gdmFsKG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbW9kZWwucHJvcHNbbmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmxhdHRlbihtb2RlbC5wcm9wcywgbW9kZWwuc2VwYXJhdG9yLCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb2RlbC5wcm9wc1tuYW1lXS52YWx1ZTtcbiAgICB9O1xuXG4gICAgdmFyIHByb3BzID0gZnVuY3Rpb24gKHNlY3Rpb24sIHNlcGFyYXRvcikge1xuICAgICAgICBzZWN0aW9uID0gc2VjdGlvbiB8fCAnJztcbiAgICAgICAgaWYgKHNlY3Rpb24gPT09ICcnKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBzdXBwb3J0IHNlcGFyYXRvciBjaGFuZ2UgZm9yICcnIChzYW1lKSBzZWN0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cblxuICAgICAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgbW9kZWwuc2VwYXJhdG9yO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BzKG1vZGVsLmdldFZpZXdNb2RlbChzZWN0aW9uLCBzZXBhcmF0b3IpKTtcbiAgICB9O1xuXG4gICAgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNjb3BlKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZGVsLnByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoc2NvcGUsIG1vZGVsLnByb3BzW2tleV0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIG9uVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBzY29wZSkge1xuICAgICAgICBtb2RlbC5vbihjYWxsYmFjaywgc2NvcGUpO1xuICAgIH07XG5cbiAgICB2YXIgc2VsZiA9IHtcbiAgICAgICAgcHJvcDogcHJvcCxcbiAgICAgICAgdmFsOiB2YWwsXG4gICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgZm9yRWFjaDogZm9yRWFjaCxcbiAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlXG4gICAgfTtcbiAgICByZXR1cm4gc2VsZjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvcHM7XG4iLCJ2YXIgdXVpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwO1xuICAgICAgICB2YXIgdiA9IGMgPT09ICd4JyA/IHIgOiAoKHIgJiAweDMpIHwgMHg4KTtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59O1xuXG52YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59O1xuXG52YXIgbGV2ZWxzID0ge1xuICAgIGRlYnVnOiAnZGVidWcnLFxuICAgIGluZm86ICdpbmZvJyxcbiAgICB3YXJuOiAnd2FybicsXG4gICAgZXJyb3I6ICdlcnJvcidcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKGxldmVsLCBhcmdzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmIChjb25zb2xlKSB7XG4gICAgICAgIHZhciBsb2dnZXIgPSBjb25zb2xlW2xldmVsXTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obG9nZ2VyKSkge1xuICAgICAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBbXS5zcGxpY2UuY2FsbChhcmdzLCAwLCAwLCBub3cuZ2V0SG91cnMoKSArICc6JyArIG5vdy5nZXRNaW51dGVzKCkgKyAnOicgKyBub3cuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIGxvZ2dlci5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBpbmZvID0gZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBsb2cobGV2ZWxzLmluZm8sIGFyZ3VtZW50cyk7XG59O1xuXG52YXIgd2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgbG9nKGxldmVscy53YXJuLCBhcmd1bWVudHMpO1xufTtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBsb2cobGV2ZWxzLmRlYnVnLCBhcmd1bWVudHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdXVpZDogdXVpZCxcbiAgICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICAgIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgICBsb2c6IGxvZyxcbiAgICB3YXJuOiB3YXJuLFxuICAgIGluZm86IGluZm8sXG4gICAgZGVidWc6IGRlYnVnXG59O1xuIiwiZnVuY3Rpb24gY3JlYXRlQnJpZGdlKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHJldHVybiB7fTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCcmlkZ2U7XHJcbiIsImZ1bmN0aW9uIGNyZWF0ZUJyaWRnZSgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHZhciBmYWNhZGUgPSBodG1sQ29udGFpbmVyLnNoYXJlZENvbnRleHRGYWNhZGU7XHJcblxyXG4gICAgZnVuY3Rpb24gYWxsKCkge1xyXG4gICAgICAgIHZhciBhbGxPYmogPSBmYWNhZGUuYWxsKCk7XHJcbiAgICAgICAgaWYgKCFhbGxPYmogfHwgIWFsbE9iai5rZXlzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFsbE9iai5rZXlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZShuYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY2FkZS51cGRhdGUobmFtZSwgZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0KG5hbWUsIGRhdGEpIHtcclxuICAgICAgICBmYWNhZGUuc2V0KG5hbWUsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiBmYWNhZGUuc3Vic2NyaWJlKG5hbWUsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bnN1YnNjcmliZShrZXkpIHtcclxuICAgICAgICBmYWNhZGUudW5zdWJzY3JpYmUoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFsbDogYWxsLFxyXG4gICAgICAgIHVwZGF0ZTogdXBkYXRlLFxyXG4gICAgICAgIHNldDogc2V0LFxyXG4gICAgICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxyXG4gICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxyXG4gICAgfTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCcmlkZ2U7XHJcblxyXG5cclxuIiwidmFyIFBhY2thZ2VKc29uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XHJcbnZhciBoY0JyaWRnZSA9IHJlcXVpcmUoJy4vYnJpZGdlcy9oYy5qcycpO1xyXG52YXIgZ3dCcmlkZ2UgPSByZXF1aXJlKCcuL2JyaWRnZXMvZ3cuanMnKTtcclxuXHJcbmZ1bmN0aW9uIGNvbnRleHRzKGNvbmZpZykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIGJyaWRnZSA9IGdldEJyaWRnZShjb25maWcpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldEJyaWRnZShjb25maWcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGh0bWxDb250YWluZXIgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGlmICghaHRtbENvbnRhaW5lci5zaGFyZWRDb250ZXh0RmFjYWRlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1lvdXIgdmVyc2lvbiBvZiBIdG1sQ29udGFpbmVyIGRvZXMgbm90IHN1cHBvcnQgY29udGV4dHMuIEdldCB2ZXJzaW9uIDEuNDYuMC4wIG9yIGxhdGVyIHRvIGhhdmUgdGhhdCBmZWF0dXJlLic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGhjQnJpZGdlKGNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBnd0JyaWRnZShjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFsbCgpIHtcclxuICAgICAgICByZXR1cm4gYnJpZGdlLmFsbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZShuYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIGJyaWRnZS51cGRhdGUobmFtZSwgZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0KG5hbWUsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gYnJpZGdlLnNldChuYW1lLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUobmFtZSwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gYnJpZGdlLnN1YnNjcmliZShuYW1lLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5zdWJzY3JpYmUoa2V5KSB7XHJcbiAgICAgICAgYnJpZGdlLnVuc3Vic2NyaWJlKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYnJpZGdlIGJlaW5nIGEgc3RyaW5nIG1lYW5zIHRoZSBpbml0aWFsaXp0aW9uIGZhaWxlZCBhbmQgdGhlcmUgaXMgc29tZSBlcnJvciBpbiB0aGF0IHN0cmluZ1xyXG4gICAgaWYgKHR5cGVvZiBicmlkZ2UgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZXJyb3I6IGJyaWRnZSxcclxuICAgICAgICAgICAgdmVyc2lvbjogUGFja2FnZUpzb24udmVyc2lvblxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhbGw6IGFsbCxcclxuICAgICAgICB1cGRhdGU6IHVwZGF0ZSxcclxuICAgICAgICBzZXQ6IHNldCxcclxuICAgICAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcclxuICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmUsXHJcbiAgICAgICAgdmVyc2lvbjogUGFja2FnZUpzb24udmVyc2lvblxyXG4gICAgfTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjb250ZXh0cztcclxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIl9hcmdzXCI6IFtcbiAgICBbXG4gICAgICBcInRpY2s0Mi1jb250ZXh0c0AwLjAuMlwiLFxuICAgICAgXCJDOlxcXFx3b3JrXFxcXHN0YXNoXFxcXEdMVUUtZGV2XFxcXGpzLWdsdWVcIlxuICAgIF1cbiAgXSxcbiAgXCJfZnJvbVwiOiBcInRpY2s0Mi1jb250ZXh0c0AwLjAuMlwiLFxuICBcIl9pZFwiOiBcInRpY2s0Mi1jb250ZXh0c0AwLjAuMlwiLFxuICBcIl9pbkNhY2hlXCI6IHRydWUsXG4gIFwiX2luc3RhbGxhYmxlXCI6IHRydWUsXG4gIFwiX2xvY2F0aW9uXCI6IFwiL3RpY2s0Mi1jb250ZXh0c1wiLFxuICBcIl9ub2RlVmVyc2lvblwiOiBcIjUuMy4wXCIsXG4gIFwiX25wbVVzZXJcIjoge30sXG4gIFwiX25wbVZlcnNpb25cIjogXCIzLjMuMTJcIixcbiAgXCJfcGhhbnRvbUNoaWxkcmVuXCI6IHt9LFxuICBcIl9yZXF1ZXN0ZWRcIjoge1xuICAgIFwibmFtZVwiOiBcInRpY2s0Mi1jb250ZXh0c1wiLFxuICAgIFwicmF3XCI6IFwidGljazQyLWNvbnRleHRzQDAuMC4yXCIsXG4gICAgXCJyYXdTcGVjXCI6IFwiMC4wLjJcIixcbiAgICBcInNjb3BlXCI6IG51bGwsXG4gICAgXCJzcGVjXCI6IFwiMC4wLjJcIixcbiAgICBcInR5cGVcIjogXCJ2ZXJzaW9uXCJcbiAgfSxcbiAgXCJfcmVxdWlyZWRCeVwiOiBbXG4gICAgXCIvXCJcbiAgXSxcbiAgXCJfcmVzb2x2ZWRcIjogXCJodHRwOi8vMTkyLjE2OC4wLjIzNDo0ODczL3RpY2s0Mi1jb250ZXh0cy8tL3RpY2s0Mi1jb250ZXh0cy0wLjAuMi50Z3pcIixcbiAgXCJfc2hhc3VtXCI6IFwiYWYwMzhiYjU5ZWM0MzA5MTI5ZjM5MmU3NjNiNGI1NTI3NGNlZWU1ZVwiLFxuICBcIl9zaHJpbmt3cmFwXCI6IG51bGwsXG4gIFwiX3NwZWNcIjogXCJ0aWNrNDItY29udGV4dHNAMC4wLjJcIixcbiAgXCJfd2hlcmVcIjogXCJDOlxcXFx3b3JrXFxcXHN0YXNoXFxcXEdMVUUtZGV2XFxcXGpzLWdsdWVcIixcbiAgXCJhdXRob3JcIjoge1xuICAgIFwibmFtZVwiOiBcIlRpY2s0MlwiXG4gIH0sXG4gIFwiYmluXCI6IHtcbiAgICBcImJ1aWxkXCI6IFwiLi9iaW4vYnVpbGQuanNcIixcbiAgICBcImNsZWFuXCI6IFwiLi9iaW4vY2xlYW4uanNcIixcbiAgICBcImZpbGUtdmVyc2lvbmlmeVwiOiBcIi4vYmluL2ZpbGUtdmVyc2lvbmlmeS5qc1wiLFxuICAgIFwibWluaWZ5XCI6IFwiLi9iaW4vbWluaWZ5LmpzXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwidGljazQyLWdhdGV3YXktY29ubmVjdGlvblwiOiBcIj49MS4xLjlcIlxuICB9LFxuICBcImRlc2NyaXB0aW9uXCI6IFwiQSBsaWJyYXJ5IGZvciBzaGFyZWQgY29udGV4dHNcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYnJvd3NlcmlmeVwiOiBcIl4xMy4wLjBcIixcbiAgICBcImJyb3dzZXJpZnktcmVwbGFjaWZ5XCI6IFwiXjAuMC40XCIsXG4gICAgXCJicm93c2VyaWZ5LXZlcnNpb25pZnlcIjogXCJeMS4wLjRcIixcbiAgICBcImVzbGludFwiOiBcIl4zLjEuMVwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy1zdGFuZGFyZFwiOiBcIl41LjMuNVwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy10aWNrNDJcIjogXCJeMS4wLjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcHJvbWlzZVwiOiBcIl4yLjAuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zdGFuZGFyZFwiOiBcIl4yLjAuMFwiLFxuICAgIFwibWluaWZ5aWZ5XCI6IFwiXjcuMy4yXCIsXG4gICAgXCJvbmNoYW5nZVwiOiBcIl4yLjEuMlwiXG4gIH0sXG4gIFwiZGlzdFwiOiB7XG4gICAgXCJzaGFzdW1cIjogXCJhZjAzOGJiNTllYzQzMDkxMjlmMzkyZTc2M2I0YjU1Mjc0Y2VlZTVlXCIsXG4gICAgXCJ0YXJiYWxsXCI6IFwiaHR0cDovLzE5Mi4xNjguMC4yMzQ6NDg3My90aWNrNDItY29udGV4dHMvLS90aWNrNDItY29udGV4dHMtMC4wLjIudGd6XCJcbiAgfSxcbiAgXCJnaXRIZWFkXCI6IFwiYWQwZmY0MTU2YjIwOWNkZWIwYjg1NTNmZjBiM2RhYTMzNTg1Zjc2ZFwiLFxuICBcImxpY2Vuc2VcIjogXCJJU0NcIixcbiAgXCJtYWluXCI6IFwibGlicmFyeS9tYWluLmpzXCIsXG4gIFwibmFtZVwiOiBcInRpY2s0Mi1jb250ZXh0c1wiLFxuICBcIm9wdGlvbmFsRGVwZW5kZW5jaWVzXCI6IHt9LFxuICBcInJlYWRtZVwiOiBcIkVSUk9SOiBObyBSRUFETUUgZGF0YSBmb3VuZCFcIixcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8va3BvcG92QHN0YXNoLnRpY2s0Mi5jb20vc2NtL3RnL2pzLWNvbnRleHRzLmdpdFwiXG4gIH0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJidWlsZFwiOiBcIm5wbSBydW4gZXNsaW50ICYmIG5vZGUgYmluL2NsZWFuLmpzICYmIG5vZGUgYmluL2J1aWxkLmpzICYmIG5vZGUgYmluL21pbmlmeSAmJiBub2RlIGJpbi9maWxlLXZlcnNpb25pZnlcIixcbiAgICBcImVzbGludFwiOiBcImVzbGludCBsaWJyYXJ5XCIsXG4gICAgXCJlc2xpbnQ6Zml4XCI6IFwiZXNsaW50IGxpYnJhcnkgLS1maXhcIixcbiAgICBcInByZXB1Ymxpc2hcIjogXCJucG0gdXBkYXRlICYgbnBtIHJ1biBidWlsZFwiLFxuICAgIFwid2F0Y2hcIjogXCJvbmNoYW5nZSBcXFwiLi9saWJyYXJ5LyouanNcXFwiIC1pdiAtZSBcXFwiLi9iaW5cXFwiIC0tIG5wbSBydW4gYnVpbGRcIlxuICB9LFxuICBcInZlcnNpb25cIjogXCIwLjAuMlwiXG59XG4iLCJ2YXIgY2FsbGJhY2tSZWdpc3RyeSA9IHJlcXVpcmUoJ2NhbGxiYWNrLXJlZ2lzdHJ5Jyk7XG52YXIgcGFja2FnZUpzb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcblxuLyoqXG4gKiBBIHRlbXBsYXRlIGZvciBnYXRld2F5IGNvbm5lY3Rpb25zIC0gdGhpcyBpcyBleHRlbmRlZCBmcm9tIHNwZWNpZmljIHByb3RvY29scyBhbmQgdHJhbnNwb3J0cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLy8gVGhlIG1lc3NhZ2UgaGFuZGxlcnMgdGhhdCBoYXZlIHRvIGJlIGV4ZWN1dGVkIGZvciBlYWNoIHJlY2VpdmVkIG1lc3NhZ2VcbiAgICB2YXIgbWVzc2FnZUhhbmRsZXJzID0ge307XG4gICAgdmFyIGlkcyA9IDA7XG4gICAgdmFyIHJlZ2lzdHJ5ID0gY2FsbGJhY2tSZWdpc3RyeSgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgX2Nvbm5lY3RlZCA6IGZhbHNlLFxuXG4gICAgICAgIC8vIGFzc2VtYmxlcyBhIG5ldyBtZXNzYWdlIHRvIGJlIHNlbnQgdG8gZ2F0ZXdheSxcbiAgICAgICAgLy8gdGhpcyBzaG91bGQgYmUgcmVwbGFjZWQgZnJvbSBjb25jcmV0ZSBnYXRld2F5IGNvbm5lY3Rpb25cbiAgICAgICAgX2NyZWF0ZU1lc3NhZ2U6IGZ1bmN0aW9uKHR5cGUsIG1lc3NhZ2UsIGlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCAtIHlvdSBzaG91bGQgZXh0ZW5kIHRoZSBjb25uZWN0aW9uIHdpdGggcHJvdG9jb2wgJyArIHR5cGUgKyBtZXNzYWdlICsgaWQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHByb2Nlc3NlcyBhIG5ldyBtZXNzYWdlIGNhbGxpbmcgdGhlIGRpc3RyaWJ1dGUgbWV0aG9kLFxuICAgICAgICAvLyB0aGlzIHNob3VsZCBiZSByZXBsYWNlZCBmcm9tIGNvbmNyZXRlIGlmIHRoZXkgaGF2ZSBkaWZmZXJlbnQgbWVzc2FnZSBzdHJ1Y3R1cmVcbiAgICAgICAgX3Byb2Nlc3NNZXNzYWdlOiBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCAtIHlvdSBzaG91bGQgZXh0ZW5kIHRoZSBjb25uZWN0aW9uIHdpdGggcHJvdG9jb2wgJyArIG1lc3NhZ2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEV4ZWN1dGVzIGFwcHJvcHJpYXRlIG1lc3NhZ2UgaGFuZGxlcnMgZm9yIHRoZSBtZXNzYWdlIHR5cGUuXG4gICAgICAgIF9kaXN0cmlidXRlTWVzc2FnZTogZnVuY3Rpb24gKG1lc3NhZ2UsIHR5cGUpIHtcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIGhhbmRsZXJzIGZvciB0aGUgbWVzc2FnZSB0eXBlXG4gICAgICAgICAgICB2YXIgaGFuZGxlcnMgPSBtZXNzYWdlSGFuZGxlcnNbdHlwZS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGVtXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoaGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGhhbmRsZXJzW2hhbmRsZXJJZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyB0cmlnZ2VycyBjb25uZWN0aW9uIGNoYW5nZSBub3RpZnlpbmcgYWxsIHVzZXJzXG4gICAgICAgIF90cmlnZ2VyQ29ubmVjdGlvbkNoYW5nZWQ6IGZ1bmN0aW9uKGNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGVkID0gY29ubmVjdGVkO1xuXG4gICAgICAgICAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0cnkuZXhlY3V0ZSgnY29ubmVjdGVkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlZ2lzdHJ5LmV4ZWN1dGUoJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEF0dGFjaGVzIGEgaGFuZGxlclxuICAgICAgICBvbjogZnVuY3Rpb24gKHByb2R1Y3QsIHR5cGUsIG1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgICAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VIYW5kbGVyc1t0eXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXJzW3R5cGVdID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpZCA9IGlkcysrO1xuICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXJzW3R5cGVdW2lkXSA9IG1lc3NhZ2VIYW5kbGVyO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IGlkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFJlbW92ZSBhIGhhbmRsZXJcbiAgICAgICAgb2ZmOiBmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VIYW5kbGVyc1tpbmZvLnR5cGUudG9Mb3dlckNhc2UoKV1baW5mby5pZF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhzZXR0aW5ncy53cyB8fCBzZXR0aW5ncy5odHRwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVnaXN0cnkuYWRkKCdjb25uZWN0ZWQnLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGlzY29ubmVjdGVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlZ2lzdHJ5LmFkZCgnZGlzY29ubmVjdGVkJywgY2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvZ2luOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvZ291dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBJbml0IGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgc3VjY2Vzc2Z1bCBsb2dpblxuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHByb3RvY29sVmVyc2lvbiA6IHNldHRpbmdzLnByb3RvY29sVmVyc2lvbiB8fCAxLFxuXG4gICAgICAgIHZlcnNpb246IHBhY2thZ2VKc29uLnZlcnNpb25cbiAgICB9XG59O1xuXG4iLCJ2YXIgYmFzZUNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24nKTtcblxuLyoqXG4gKiBDaGVjayByZWFkbWUubWQgZm9yIGRldGFpbGVkIGRlc2NyaXB0aW9uXG4gKi9cbnZhciBjb25uZWN0aW9uID0gZnVuY3Rpb24gKHNldHRpbmdzLCBjdXN0b21Db25uZWN0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHNldHRpbmdzID0gc2V0dGluZ3MgfHwge307XG4gICAgdmFyIGNvbm5lY3Rpb24gPSBiYXNlQ29ubmVjdGlvbihzZXR0aW5ncyk7XG5cbiAgICAvLyBpZiBydW5uaW5nIGluIEhDIHdlIHVzZSBndzEgcHJvdG9jb2wgYW5kIGhjIHRyYW5zcG9ydFxuICAgIGlmIChnbG9iYWwuaHRtbENvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL3Byb3RvY29scy9ndzEnKShjb25uZWN0aW9uLCBzZXR0aW5ncyk7XG4gICAgICAgIHJldHVybiByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaGMnKShjb25uZWN0aW9uLCBzZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgLy8gaWYgcnVubmluZyBpbiB0aGUgYnJvd3NlciAtIGxldCdzIGNoZWNrIHdoaWNoIHByb3RvY29sIHZlcnNpb24gdXNlciB3YW50c1xuICAgIGlmIChzZXR0aW5ncy5wcm90b2NvbFZlcnNpb24gPT09IDMpIHtcbiAgICAgICAgY29ubmVjdGlvbiA9IHJlcXVpcmUoJy4vcHJvdG9jb2xzL2d3MycpKGNvbm5lY3Rpb24sIHNldHRpbmdzKTtcbiAgICB9IGVsc2UgaWYgKHNldHRpbmdzLnByb3RvY29sVmVyc2lvbiA9PT0gMikge1xuICAgICAgICBjb25uZWN0aW9uID0gcmVxdWlyZSgnLi9wcm90b2NvbHMvZ3cyJykoY29ubmVjdGlvbiwgc2V0dGluZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL3Byb3RvY29scy9ndzEnKShjb25uZWN0aW9uLCBzZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgaWYgKHNldHRpbmdzLndzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4vdHJhbnNwb3J0cy93cycpKGNvbm5lY3Rpb24sIHNldHRpbmdzKTtcbiAgICB9IGVsc2UgaWYgKHNldHRpbmdzLmh0dHAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2h0dHAnKShjb25uZWN0aW9uLCBzZXR0aW5ncyk7XG4gICAgfSBlbHNlIGlmIChjdXN0b21Db25uZWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9tb2NrJykoY29ubmVjdGlvbiwgY3VzdG9tQ29ubmVjdGlvbiwgc2V0dGluZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY29ubmVjdGlvbi4gTWFrZSBzdXJlIHlvdSBhcmUgcnVubmluZyB0aGUgYXBwbGljYXRpb24gZnJvbSBUaWNrNDIgSHRtbENvbnRhaW5lciBvciBmaWxsIHRoZSBcXCdjb25uZWN0aW9uLndlYnNvY2tldF91cmxcXCcgcHJvcGVydHkuJyk7XG4gICAgfVxufTtcblxuaWYgKGdsb2JhbC50aWNrNDIgPT09IHVuZGVmaW5lZCkge1xuICAgIGdsb2JhbC50aWNrNDIgPSB7fTtcbn1cblxuZ2xvYmFsLnRpY2s0Mi5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBjb25uZWN0aW9uO1xuIiwiLy8gQ29ubmVjdGlvbiB0byBnYXRld2F5IFYxIC0gdGhlIG9uZSB0aGF0IHJ1bnMgb24gdGhlIGRlc2t0b3Agd2l0aG91dCBhdXRoZW50aWNhdGlvblxudmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29ubmVjdGlvbikge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGNvbm5lY3Rpb24uX3Byb2Nlc3NNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlID0gSlNPTi5wYXJzZShtZXNzYWdlKTtcbiAgICAgICAgY29ubmVjdGlvbi5fZGlzdHJpYnV0ZU1lc3NhZ2UobWVzc2FnZS5tZXNzYWdlLCBtZXNzYWdlLnR5cGUpO1xuICAgIH07XG5cbiAgICBjb25uZWN0aW9uLl9jcmVhdGVNZXNzYWdlID0gZnVuY3Rpb24odHlwZSwgbWVzc2FnZSwgaWQpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICAgICAgaWQ6IGlkXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25uZWN0aW9uLmxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIGNvbm5lY3Rpb247XG59O1xuIiwiLy8gQ29ubmVjdGlvbiB0byBnYXRld2F5IFYyIC0gZ3cxICsgIGF1dGhlbnRpY2F0aW9uXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJ2VzNi1wcm9taXNlJykuUHJvbWlzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb25uZWN0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHNlc3Npb25Db29raWU7XG4gICAgY29ubmVjdGlvbi5fcHJvY2Vzc01lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBKU09OLnBhcnNlKG1lc3NhZ2UpO1xuICAgICAgICB2YXIgZGF0YVR5cGUgPSBtZXNzYWdlLnR5cGU7XG5cbiAgICAgICAgaWYgKGRhdGFUeXBlID09PSAnU0VORCcpICB7XG4gICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5kYXRhO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5fZGlzdHJpYnV0ZU1lc3NhZ2UobWVzc2FnZS5tZXNzYWdlLCBtZXNzYWdlLnR5cGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5fZGlzdHJpYnV0ZU1lc3NhZ2UobWVzc2FnZSwgbWVzc2FnZS50eXBlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25uZWN0aW9uLl9jcmVhdGVNZXNzYWdlID0gZnVuY3Rpb24odHlwZSwgbWVzc2FnZSwgaWQpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdMT0dJTicpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShtZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlID09PSAnTE9HT1VUJykge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgdHlwZTogJ0xPR09VVCcgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgdHlwZTogJ1NFTkQnLFxuICAgICAgICAgICAgc2Vzc2lvbkNvb2tpZTogc2Vzc2lvbkNvb2tpZSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgaWQ6IGlkXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25uZWN0aW9uLmxvZ2luID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdDtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IG1lc3NhZ2UudG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdMT0dJTl9UT0tFTidcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnVzZXJuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogbWVzc2FnZS51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IG1lc3NhZ2UucGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdMT0dJTidcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgYXV0aCBtZXNzYWdlJyArIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGxyU3VicyA9IGNvbm5lY3Rpb24ub24oJycsICdMT0dJTl9SRVNQT05TRScsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ub2ZmKGxyU3Vicyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgIXJlc3BvbnNlLmVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uQ29va2llID0gcmVzcG9uc2Uuc2Vzc2lvbkNvb2tpZTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKCcnLCAnTE9HSU4nLCByZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbm5lY3Rpb24ubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbm5lY3Rpb24uc2VuZCgnJywgJ0xPR09VVCcpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29ubmVjdGlvbjtcbn07XG5cbiIsInZhciBjdWlkID0gcmVxdWlyZSgnY3VpZCcpO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gcmVxdWlyZSgndXJsLXNlYXJjaC1wYXJhbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb25uZWN0aW9uLCBzZXR0aW5ncykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgZGF0ZVByZWZpeCA9ICcjVDQyX0RBVEUoJztcbiAgICB2YXIgZGF0ZVBvc3RmaXggPSAnKSc7XG4gICAgdmFyIGRhdGVQcmVmaXhMZW4gPSBkYXRlUHJlZml4Lmxlbmd0aDtcbiAgICB2YXIgZGF0ZU1pbkxlbiA9IGRhdGVQcmVmaXhMZW4gKyAxICsgZGF0ZVBvc3RmaXgubGVuZ3RoOy8vIHByZWZpeCArIHBvc3RmaXggKyBhdCBsZWFzdCBvbmUgY2hhclxuICAgIHZhciBkYXRlUHJlZml4Rmlyc3RDaGFyID0gZGF0ZVByZWZpeFswXTtcblxuICAgIGNvbm5lY3Rpb24uaW5zdGFuY2UgPSBjdWlkKCk7XG5cbiAgICBjb25uZWN0aW9uLl9wcm9jZXNzTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgbWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZSwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtleVswXSAhPT0gZGF0ZVByZWZpeEZpcnN0Q2hhcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPCBkYXRlTWluTGVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHBhcnNlSW50KHZhbHVlLnN1YnN0cmluZyhkYXRlUHJlZml4TGVuKSwgMTApO1xuICAgICAgICAgICAgaWYgKGlzTmFOKG1pbGxpc2Vjb25kcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobWlsbGlzZWNvbmRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbm5lY3Rpb24uX2Rpc3RyaWJ1dGVNZXNzYWdlKG1lc3NhZ2UsIG1lc3NhZ2UudHlwZSk7XG4gICAgfTtcblxuICAgIGNvbm5lY3Rpb24uX2NyZWF0ZU1lc3NhZ2UgPSAgZnVuY3Rpb24odHlwZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIHNlcmlhbGl6ZSBkYXRlcyBhcyAjVDQyX0RBVEUoPE1JTExJU0VDT05EU19GUk9NXzE5NzBfMDFfMDE+KVxuXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNvbWUgZHVjayB0eXBpbmdcbiAgICAgICAgICAgIGlmICghdmFsdWUuZ2V0VGltZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRhdGVQcmVmaXggKyB2YWx1ZS5nZXRUaW1lKCkgKyBkYXRlUG9zdGZpeDtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbm5lY3Rpb24ubG9naW4gPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBhdXRoZW50aWNhdGlvbiA9IHt9O1xuICAgICAgICAgICAgdmFyIGd3VG9rZW4gPSBnZXRHYXRld2F5VG9rZW4oKTtcbiAgICAgICAgICAgIGlmIChnd1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb24ubWV0aG9kID0gJ2dhdGV3YXktdG9rZW4nO1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uLnRva2VuID0gZ3dUb2tlbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS50b2tlbikge1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uLm1ldGhvZCA9ICdhY2Nlc3MtdG9rZW4nO1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uLnRva2VuID0gbWVzc2FnZS50b2tlbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS51c2VybmFtZSkge1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uLm1ldGhvZCA9ICdzZWNyZXQnO1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uLnVzZXIgPSBtZXNzYWdlLnVzZXJuYW1lO1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uLnNlY3JldCA9IG1lc3NhZ2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhdXRoIG1lc3NhZ2UnICsgSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVxdWVzdElkID0gY3VpZCgpO1xuICAgICAgICAgICAgdmFyIGhlbGxvTXNnID0ge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RfaWQ6IHJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaGVsbG8nLFxuICAgICAgICAgICAgICAgIGlkZW50aXR5OiB7IGFwcGxpY2F0aW9uOiBzZXR0aW5ncy5hcHBsaWNhdGlvbiwgaW5zdGFuY2U6IGNvbm5lY3Rpb24uaW5zdGFuY2UgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvbjogYXV0aGVudGljYXRpb25cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciB3ZWxjb21lU3ViID0gY29ubmVjdGlvbi5vbignJywgJ3dlbGNvbWUnLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1zZy5yZXF1ZXN0X2lkICE9PSByZXF1ZXN0SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ub2ZmKHdlbGNvbWVTdWIpO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ub2ZmKGVycm9yU3ViKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnBlZXJJZCA9IG1zZy5wZWVyX2lkO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZ3dUb2tlbiA9IGd3VG9rZW47XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtc2cpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBlcnJvclN1YiA9IGNvbm5lY3Rpb24ub24oJycsICdlcnJvcicsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgICAgICBpZiAobXNnLnJlcXVlc3RfaWQgIT09IHJlcXVlc3RJZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5vZmYoZXJyb3JTdWIpO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ub2ZmKHdlbGNvbWVTdWIpO1xuICAgICAgICAgICAgICAgIHJlamVjdChtc2cpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbm5lY3Rpb24uc2VuZCgnJywgJ0xPR0lOJywgaGVsbG9Nc2cpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29ubmVjdGlvbi5sb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29ubmVjdGlvbi5zZW5kKCcnLCAnTE9HT1VUJyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldEdhdGV3YXlUb2tlbigpIHtcbiAgICAgICAgaWYgKHNldHRpbmdzLmd3VG9rZW5Qcm92aWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzLmd3VG9rZW5Qcm92aWRlci5nZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgICAgICAgIHZhciBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaC5zbGljZSgxKSk7XG4gICAgICAgICAgICByZXR1cm4gc2VhcmNoUGFyYW1zLmdldCgndDQyZ3d0b2tlbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbm5lY3Rpb247XG59O1xuXG4iLCIvKipcbiAqIENvbm5lY3Rpb24gdG8gSHRtbENvbnRhaW5lclxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBjb25uZWN0aW9uSWQgPSBNYXRoLmZsb29yKDFlMTAgKiBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygpO1xuICAgIC8vIFJvdXRlIG1lc3NhZ2VzIHRvIGZhY2FkZShzKVxuICAgIGNvbm5lY3Rpb24uc2VuZCA9IGZ1bmN0aW9uIChwcm9kdWN0LCB0eXBlLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmIChwcm9kdWN0ID09PSAnbWV0cmljcycpIHtcbiAgICAgICAgICAgIGdsb2JhbC5odG1sQ29udGFpbmVyLm1ldHJpY3NGYWNhZGUuc2VuZCh0eXBlLCBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvZHVjdCA9PT0gJ2xvZycpIHtcbiAgICAgICAgICAgIGdsb2JhbC5odG1sQ29udGFpbmVyLmxvZ2dpbmdGYWNhZGUuc2VuZCh0eXBlLCBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvZHVjdCA9PT0gJ2FwcGNvbmZpZycpIHtcbiAgICAgICAgICAgIGdsb2JhbC5odG1sQ29udGFpbmVyLmFwcENvbmZpZ0ZhY2FkZS5zZW5kKHR5cGUsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpLCBjb25uZWN0aW9uSWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmIChnbG9iYWwuaHRtbENvbnRhaW5lci5hcHBDb25maWdGYWNhZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnbG9iYWwuaHRtbENvbnRhaW5lci5hcHBDb25maWdGYWNhZGUuaW5pdENvbm5lY3Rpb24oXG4gICAgICAgICAgICBjb25uZWN0aW9uSWQsXG4gICAgICAgICAgICBmdW5jdGlvbiAobWVzc2FnZUFzSnNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLl9oYW5kbGVfbWVzc2FnZShKU09OLnBhcnNlKG1lc3NhZ2VBc0pzb24pKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdsb2JhbC5jb25uZWN0aW9ucyA9IGdsb2JhbC5jb25uZWN0aW9ucyB8fCB7fTtcbiAgICAvLyBFeHBvc2UgZnVuY3Rpb24gZm9yIHNlbmRpbmcgbWVzc2FnZXM6XG4gICAgZ2xvYmFsLmNvbm5lY3Rpb25zWydjb25uZWN0aW9uJyArIGNvbm5lY3Rpb25JZF0gPSBjb25uZWN0aW9uLl9oYW5kbGVfbWVzc2FnZTtcblxuICAgIHJldHVybiBjb25uZWN0aW9uO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbm5lY3Rpb24sIHNldHRpbmdzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciB1cmwgPSBzZXR0aW5ncy5odHRwO1xuICAgIC8vIHBvbGxpbmcgaW50ZXJ2YWwgaW4gbXMsIGRlZmF1bHQgaXMgMSBzZWNvbmRcbiAgICB2YXIgaW50ZXJ2YWwgPSBzZXR0aW5ncy5odHRwX2ludGVydmFsX21zO1xuICAgIGlmICghaW50ZXJ2YWwpIHtcbiAgICAgICAgaW50ZXJ2YWwgPSAxMDAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ0RlYnVnKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGdsb2JhbC5jb25zb2xlICE9PSB1bmRlZmluZWQgJiYgKHNldHRpbmdzLmRlYnVnID09PSB0cnVlIHx8IHNldHRpbmdzLnRyYWNlID09PSB0cnVlKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2dUcmFjZShtZXNzYWdlKSB7XG4gICAgICAgIGlmIChnbG9iYWwuY29uc29sZSAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLnRyYWNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvZ0RlYnVnKCdBdHRlbXBpbmcgdG8gY29ubmVjdCB0byBHYXRld2F5IHZpYSBIVFRQIHdpdGggdXJsIFxcJycgKyB1cmwgKyAnXFwnIGFuZCBwb2xsaW5nIGludGVydmFsICcgKyBpbnRlcnZhbCArICcgbXMnKTtcblxuICAgIGNvbm5lY3Rpb24uaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBwb2xsKHVybCwgaW50ZXJ2YWwsIDAsIGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGl0ZW1zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uX3Byb2Nlc3NNZXNzYWdlKGl0ZW1zW2luZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbm5lY3Rpb24uc2VuZCA9IGZ1bmN0aW9uIChwcm9kdWN0LCB0eXBlLCBtZXNzYWdlLCBpZCkge1xuICAgICAgICB2YXIgbXNnID0gY29ubmVjdGlvbi5fY3JlYXRlTWVzc2FnZSh0eXBlLCBtZXNzYWdlLCBpZCk7XG4gICAgICAgIGh0dHBQb3N0KHVybCwgbXNnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUG9sbHMgZGF0YSBmcm9tIGEgZ2l2ZW4gdXJsIG9uIHNvbWUgaW50ZXJ2YWxcbiAgICAgKiBAcGFyYW0gdXJsICAgICAgIEJhc2Ugc2VydmVyIHVybC4gQSBzZXF1ZW5jZSB1cmwgcGFyYW0gbWF5IGJlIGFkZGVkIGJhc2VkIG9uIHRoZSBzZXEgcGFyYW1cbiAgICAgKiBAcGFyYW0gaW50ZXJ2YWwgIEludGVydmFsIChpbiBtcykgYmV0d2VlbiBwb2xsaW5nIHJlcXVlc3R0c1xuICAgICAqIEBwYXJhbSBzZXEgICAgICAgTmV4dCBzZXF1ZW5jZSBudW1iZXIgd2Ugc2hvdWxkIGFzayBmb3IgKGlmIDAgdGhlIHNlcnZlciB3aWxsIHJldHVybiB0aGUgbGFzdCBrbm93biBtZXNzYWdlKVxuICAgICAqIEBwYXJhbSBvbmRhdGEgICAgRGF0YSBjYWxsYmFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBvbGwodXJsLCBpbnRlcnZhbCwgc2VxLCBvbmRhdGEpIHtcbiAgICAgICAgLy8gY29uc3RydWN0IHRoZSBnZXQgVXJsIC0gaWYgc2VxICE9IDAgYWRkIGFzIHVybCBwYXJhbSB0byBnZXRcbiAgICAgICAgLy8gb25seSBtZXNzYWdlcyBhZnRlciB0aGlzIHNlcXVlbmNlXG4gICAgICAgIHZhciBnZXRVcmwgPSB1cmw7XG5cbiAgICAgICAgaWYgKHNlcSAhPT0gMCkge1xuICAgICAgICAgICAgZ2V0VXJsID0gdXJsICsgJz9zZXF1ZW5jZT0nICsgc2VxICsgJyZuby1jYWNoZT0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgYSByZXF1ZXN0XG4gICAgICAgIHZhciB4bWxodHRwID0gY3JlYXRlQ09SU1JlcXVlc3QoJ0dFVCcsIGdldFVybCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHNlcSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ0RlYnVnKCdDb25uZWN0ZWQgdG8gR2F0ZXdheSBvbiAnICsgdXJsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG9nVHJhY2UoJ1Jlc3BvbnNlIGZyb20gXFwnJyArIGdldFVybCArICdcXCcgaXMgJyArIHhtbGh0dHAucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZSh4bWxodHRwLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAvLyB0aGUgc2VydmVyIHJldHVybnMgdGhlIG51bWJlciBvZiB0aGUgbmV4dCBzZXF1ZW5jZSB0aGF0IHdlIG11c3QgcXVlcnkgZm9yXG4gICAgICAgICAgICB2YXIgbmV4dFNlcSA9IG1lc3NhZ2UubmV4dFNlcXVlbmNlO1xuICAgICAgICAgICAgLy8gY2FsbCB1c2VyIGNhbGxiYWNrZVxuICAgICAgICAgICAgb25kYXRhKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgICAvLyByZS1zY2hlZHVsZVxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcG9sbCh1cmwsIGludGVydmFsLCBuZXh0U2VxLCBvbmRhdGEpO1xuICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgICAgICB9KTtcblxuICAgICAgICB4bWxodHRwLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBwb2xsaW5nIGRhdGEgZnJvbSBodHRwIHNlcnZlciBcXCcnICsgZ2V0VXJsICsgJ1xcJyAtICcgKyBldik7XG4gICAgICAgICAgICAvLyByZS1zY2hlZHVsZVxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcG9sbCh1cmwsIGludGVydmFsLCBzZXEsIG9uZGF0YSk7XG4gICAgICAgICAgICB9LCBpbnRlcnZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbG9nVHJhY2UoJ1NlbmRpbmcgR0VUIHRvIFxcJycgKyBnZXRVcmwgKyAnXFwnJyk7XG4gICAgICAgIHhtbGh0dHAuc2VuZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBPU1RzIGEgbWVzc2FnZSB0byBhIGdpdmVuIHVybFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGh0dHBQb3N0KHVybCwgbWVzc2FnZSkge1xuICAgICAgICAvLyBjcmVhdGUgYSByZXF1ZXN0XG4gICAgICAgIHZhciB4bWxodHRwID0gY3JlYXRlQ09SU1JlcXVlc3QoJ1BPU1QnLCB1cmwpO1xuICAgICAgICBsb2dUcmFjZSgnU2VuZGluZyBQT1NUIHRvIFxcJycgKyB1cmwgKyAnXFwnIDogJyArIG1lc3NhZ2UpO1xuICAgICAgICB4bWxodHRwLnNlbmQobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBDT1JTIHJlcXVlc3QgKGNyb3NzIGRvbWFpbiByZXF1ZXN0cykgZm9yIGRpZmZlcmVudCBicm93c2VycyAtIFhNTEh0dHBSZXF1ZXN0IHdpdGhDcmVkZW50aWFsc1xuICAgICAqIGZvciBDaHJvbWUgYW5kIEZGIGFuZCBYRG9tYWluUmVxdWVzdCBmb3IgSUVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDT1JTUmVxdWVzdChtZXRob2QsIHVybCwgcmVzdWx0Q2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3QgaGFzIGEgXCJ3aXRoQ3JlZGVudGlhbHNcIiBwcm9wZXJ0eS5cbiAgICAgICAgICAgIC8vIFwid2l0aENyZWRlbnRpYWxzXCIgb25seSBleGlzdHMgb24gWE1MSFRUUFJlcXVlc3QyIG9iamVjdHMuXG4gICAgICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdENhbGxiYWNrICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiB4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXG4gICAgICAgICAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLlxuICAgICAgICAgICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdENhbGxiYWNrICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHhoci5vbmxvYWQgPSByZXN1bHRDYWxsYmFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxuICAgICAgICAgICAgeGhyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB4aHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbm5lY3Rpb247XG59O1xuIiwiLyoqXG4gKiBVc2VkIGZvciB0ZXN0c1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24sIGN1c3RvbUNvbm5lY3Rpb24pIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgY29ubmVjdGlvbi5zZW5kID0gZnVuY3Rpb24gKHByb2R1Y3QsIHR5cGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgY3VzdG9tQ29ubmVjdGlvbi5wdWJsaXNoKHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjdXN0b21Db25uZWN0aW9uLnN1YnNjcmliZShjb25uZWN0aW9uLl9oYW5kbGVfbWVzc2FnZSk7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb247XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29ubmVjdGlvbiwgc2V0dGluZ3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBMb2FkIHRoZSAnd3MnIGxpYnJhcnksIGJ1dCBvbmx5IGlmIHdlIGFyZSBydW5uaW5nIHVuZGVyIG5vZGUganNcbiAgICB2YXIgV2ViU29ja2V0ID0gcmVxdWlyZSgnZGV0ZWN0LW5vZGUnKSA/IHJlcXVpcmUoJ3dzJykgOiBnbG9iYWwuV2ViU29ja2V0O1xuXG4gICAgZnVuY3Rpb24gaW5pdGlhdGVTb2NrZXQoKSB7XG4gICAgICAgIHZhciB3cyA9IG5ldyBXZWJTb2NrZXQoc2V0dGluZ3Mud3MpO1xuICAgICAgICB3cy5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5fdHJpZ2dlckNvbm5lY3Rpb25DaGFuZ2VkKGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTG9nIG9uIGNvbm5lY3Rpb25cbiAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5fdHJpZ2dlckNvbm5lY3Rpb25DaGFuZ2VkKHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBBdHRhY2ggaGFuZGxlclxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5fcHJvY2Vzc01lc3NhZ2UobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gd3M7XG4gICAgfVxuXG4gICAgLy8gSG9sZHMgY2FsbGJhY2sgZXhlY3V0aW9uIHVudGlsIHNvY2tldCBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkLlxuICAgIGZ1bmN0aW9uIHdhaXRGb3JTb2NrZXRDb25uZWN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc29ja2V0LnJlYWR5U3RhdGUgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICB9IGVsc2UgaWYgKHNvY2tldC5yZWFkeVN0YXRlID4gMSkge1xuICAgICAgICAgICAgLy8gPiAxIG1lYW5zIGNsb3Npbmcgb3IgY2xvc2VkXG4gICAgICAgICAgICBzb2NrZXQgPSBpbml0aWF0ZVNvY2tldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3YWl0Rm9yU29ja2V0Q29ubmVjdGlvbihjYWxsYmFjayk7XG4gICAgICAgIH0sIDUwKTsgLy8gd2FpdCA1IG1pbGxpc2Vjb25kcyBmb3IgdGhlIGNvbm5lY3Rpb24uLi5cbiAgICB9XG5cbiAgICAvLyBJbml0aWF0ZSBhIG5ldyBzb2NrZXQgKHRoaXMgZ2V0cyByZS1leGVjdXRlZCBvbiByZWNvbm5lY3QpXG4gICAgdmFyIHNvY2tldCA9IGluaXRpYXRlU29ja2V0KCk7XG5cbiAgICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBmb3Igc2VuZGluZyBhIG1lc3NhZ2VcbiAgICBjb25uZWN0aW9uLnNlbmQgPSBmdW5jdGlvbiAocHJvZHVjdCwgdHlwZSwgbWVzc2FnZSwgaWQpIHtcbiAgICAgICAgd2FpdEZvclNvY2tldENvbm5lY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gY29ubmVjdGlvbi5fY3JlYXRlTWVzc2FnZSh0eXBlLCBtZXNzYWdlLCBpZCk7XG4gICAgICAgICAgICBpZiAoIW1zZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvY2tldC5zZW5kKG1zZyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25uZWN0aW9uLndlYnNvY2tldF91cmwgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICBzZXR0aW5ncy53ZWJzb2NrZXRfdXJsID0gYTtcbiAgICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgICAgIHNvY2tldCA9IGluaXRpYXRlU29ja2V0KCk7XG4gICAgfTtcblxuICAgIHJldHVybiBjb25uZWN0aW9uO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJfYXJnc1wiOiBbXG4gICAgW1xuICAgICAgXCJ0aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uQDIuMS4wXCIsXG4gICAgICBcIkM6XFxcXHdvcmtcXFxcc3Rhc2hcXFxcR0xVRS1kZXZcXFxcanMtZ2x1ZVwiXG4gICAgXVxuICBdLFxuICBcIl9mcm9tXCI6IFwidGljazQyLWdhdGV3YXktY29ubmVjdGlvbkAyLjEuMFwiLFxuICBcIl9pZFwiOiBcInRpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb25AMi4xLjBcIixcbiAgXCJfaW5DYWNoZVwiOiB0cnVlLFxuICBcIl9pbnN0YWxsYWJsZVwiOiB0cnVlLFxuICBcIl9sb2NhdGlvblwiOiBcIi90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uXCIsXG4gIFwiX25vZGVWZXJzaW9uXCI6IFwiNi4zLjBcIixcbiAgXCJfbnBtT3BlcmF0aW9uYWxJbnRlcm5hbFwiOiB7XG4gICAgXCJob3N0XCI6IFwicGFja2FnZXMtMTYtZWFzdC5pbnRlcm5hbC5ucG1qcy5jb21cIixcbiAgICBcInRtcFwiOiBcInRtcC90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uLTIuMS4wLnRnel8xNDc0ODg5NzM1MjA5XzAuMTUwMTkwMjEyMDY1MzU0XCJcbiAgfSxcbiAgXCJfbnBtVXNlclwiOiB7XG4gICAgXCJlbWFpbFwiOiBcImtrcG9wb3ZAaG90bWFpbC5jb21cIixcbiAgICBcIm5hbWVcIjogXCJraXJpbC5wb3BvdlwiXG4gIH0sXG4gIFwiX25wbVZlcnNpb25cIjogXCIzLjguNVwiLFxuICBcIl9waGFudG9tQ2hpbGRyZW5cIjoge30sXG4gIFwiX3JlcXVlc3RlZFwiOiB7XG4gICAgXCJuYW1lXCI6IFwidGljazQyLWdhdGV3YXktY29ubmVjdGlvblwiLFxuICAgIFwicmF3XCI6IFwidGljazQyLWdhdGV3YXktY29ubmVjdGlvbkAyLjEuMFwiLFxuICAgIFwicmF3U3BlY1wiOiBcIjIuMS4wXCIsXG4gICAgXCJzY29wZVwiOiBudWxsLFxuICAgIFwic3BlY1wiOiBcIjIuMS4wXCIsXG4gICAgXCJ0eXBlXCI6IFwidmVyc2lvblwiXG4gIH0sXG4gIFwiX3JlcXVpcmVkQnlcIjogW1xuICAgIFwiL1wiLFxuICAgIFwiL3RpY2s0Mi1hZ21cIixcbiAgICBcIi90aWNrNDItYXBwY29uZmlnXCIsXG4gICAgXCIvdGljazQyLWNvbnRleHRzXCIsXG4gICAgXCIvdGljazQyLWxvZ2dlclwiLFxuICAgIFwiL3RpY2s0Mi1tZXRyaWNzXCJcbiAgXSxcbiAgXCJfc2hhc3VtXCI6IFwiODM4OWFmMmEyZjdmZDNhYTRhYzQyZjBmMTc1NzA3ZDNjNjUxNGRlN1wiLFxuICBcIl9zaHJpbmt3cmFwXCI6IG51bGwsXG4gIFwiX3NwZWNcIjogXCJ0aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uQDIuMS4wXCIsXG4gIFwiX3doZXJlXCI6IFwiQzpcXFxcd29ya1xcXFxzdGFzaFxcXFxHTFVFLWRldlxcXFxqcy1nbHVlXCIsXG4gIFwiYmluXCI6IHtcbiAgICBcImJ1aWxkXCI6IFwiLi9iaW4vYnVpbGQuanNcIixcbiAgICBcImNsZWFuXCI6IFwiLi9iaW4vY2xlYW4uanNcIixcbiAgICBcImZpbGUtdmVyc2lvbmlmeVwiOiBcIi4vYmluL2ZpbGUtdmVyc2lvbmlmeS5qc1wiLFxuICAgIFwibWluaWZ5XCI6IFwiLi9iaW4vbWluaWZ5LmpzXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYnJvd3NlcmlmeS12ZXJzaW9uaWZ5XCI6IFwiXjEuMC40XCIsXG4gICAgXCJjYWxsYmFjay1yZWdpc3RyeVwiOiBcIl4xLjAuMVwiLFxuICAgIFwiY3VpZFwiOiBcIl4xLjMuOFwiLFxuICAgIFwiZGV0ZWN0LW5vZGVcIjogXCJeMi4wLjNcIixcbiAgICBcImVzNi1wcm9taXNlXCI6IFwiXjMuMi4xXCIsXG4gICAgXCJ1cmwtc2VhcmNoLXBhcmFtc1wiOiBcIl4wLjUuMFwiLFxuICAgIFwid3NcIjogXCJeMC43LjJcIlxuICB9LFxuICBcImRlc2NyaXB0aW9uXCI6IFwiVGljazQyIEdhdGV3YXkgQ29ubmVjdGlvbi5cIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYmxhbmtldFwiOiBcIl4xLjEuNlwiLFxuICAgIFwiYnJvd3NlcmlmeVwiOiBcIl4xMy4wLjBcIixcbiAgICBcImJyb3dzZXJpZnktcmVwbGFjaWZ5XCI6IFwiXjAuMC40XCIsXG4gICAgXCJicm93c2VyaWZ5LXZlcnNpb25pZnlcIjogXCJeMS4wLjRcIixcbiAgICBcImVzbGludFwiOiBcIl4zLjEuMVwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy1zdGFuZGFyZFwiOiBcIl41LjMuNVwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy10aWNrNDJcIjogXCJeMS4wLjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcHJvbWlzZVwiOiBcIl4yLjAuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zdGFuZGFyZFwiOiBcIl4yLjAuMFwiLFxuICAgIFwiZnNcIjogXCIwLjAuMlwiLFxuICAgIFwianNkb21cIjogXCJeOC4xLjBcIixcbiAgICBcIm1pbmlmeWlmeVwiOiBcIl43LjMuMlwiLFxuICAgIFwib25jaGFuZ2VcIjogXCJeMi4xLjJcIixcbiAgICBcInBoYW50b21qc1wiOiBcIl4xLjkuMTJcIixcbiAgICBcInF1bml0anNcIjogXCJeMS4xNS4wXCIsXG4gICAgXCJzaGVsbGpzXCI6IFwiXjAuNi4wXCJcbiAgfSxcbiAgXCJkaXJlY3Rvcmllc1wiOiB7fSxcbiAgXCJkaXN0XCI6IHtcbiAgICBcInNoYXN1bVwiOiBcIjgzODlhZjJhMmY3ZmQzYWE0YWM0MmYwZjE3NTcwN2QzYzY1MTRkZTdcIixcbiAgICBcInRhcmJhbGxcIjogXCJodHRwOi8vMTkyLjE2OC4wLjIzNDo0ODczL3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24vLS90aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uLTIuMS4wLnRnelwiXG4gIH0sXG4gIFwiZ2l0SGVhZFwiOiBcIjEwZmJhZjFkOGQ1MTc0MmExYTljNjdkYzI5N2RmYjRhYWNjNGNlMjRcIixcbiAgXCJtYWluXCI6IFwibGlicmFyeS9tYWluLmpzXCIsXG4gIFwibWFpbnRhaW5lcnNcIjogW1xuICAgIHtcbiAgICAgIFwiZW1haWxcIjogXCJra3BvcG92QGhvdG1haWwuY29tXCIsXG4gICAgICBcIm5hbWVcIjogXCJraXJpbC5wb3BvdlwiXG4gICAgfVxuICBdLFxuICBcIm5hbWVcIjogXCJ0aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uXCIsXG4gIFwib3B0aW9uYWxEZXBlbmRlbmNpZXNcIjoge30sXG4gIFwicmVhZG1lXCI6IFwiRVJST1I6IE5vIFJFQURNRSBkYXRhIGZvdW5kIVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiYnVpbGRcIjogXCJucG0gcnVuIGVzbGludCAmJiBub2RlIGJpbi9jbGVhbi5qcyAmJiBub2RlIGJpbi9idWlsZC5qcyAmJiBub2RlIGJpbi9taW5pZnkgJiYgbm9kZSBiaW4vZmlsZS12ZXJzaW9uaWZ5XCIsXG4gICAgXCJlc2xpbnRcIjogXCJlc2xpbnQgbGlicmFyeVwiLFxuICAgIFwiZXNsaW50OmZpeFwiOiBcImVzbGludCBsaWJyYXJ5IC0tZml4IFwiLFxuICAgIFwicHJlcHVibGlzaFwiOiBcIm5wbSB1cGRhdGUgJiBucG0gcnVuIGJ1aWxkXCIsXG4gICAgXCJ0ZXN0XCI6IFwibnBtIHJ1biBlc2xpbnQgJiYgbW9jaGEgLS1yZXF1aXJlIC4vdGVzdC90ZXN0X2hlbHBlciBcXFwidGVzdC8qKi8qLmpzXFxcIlwiLFxuICAgIFwid2F0Y2hcIjogXCJvbmNoYW5nZSBcXFwiLi9saWJyYXJ5LyouanNcXFwiIC1pdiAtZSBcXFwiLi9iaW5cXFwiIC0tIG5wbSBydW4gYnVpbGRcIlxuICB9LFxuICBcInZlcnNpb25cIjogXCIyLjEuMFwiXG59XG4iLCJ2YXIgYXNjaWlUYWJsZSA9IHJlcXVpcmUoJ2FzY2lpLXRhYmxlJyk7XG52YXIgdGljazQyQ29ubmVjdGlvbiA9IHJlcXVpcmUoJ3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24nKTtcbnZhciBQYWNrYWdlSnNvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuXG52YXIgbGV2ZWxzID0gWyd0cmFjZScsICdkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnb2ZmJ107XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVBhdGgocGF0aCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4gcGF0aC5sZW5ndGggPT09IDAgPyAnJyA6IHBhdGguam9pbignLicpO1xufVxuXG52YXIgaXNDb25uZWN0aW9uID0gZnVuY3Rpb24gKGMpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIHR5cGVvZiBjID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYy5zZW5kID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBjLm9uID09PSAnZnVuY3Rpb24nO1xufTtcblxuZnVuY3Rpb24gZ2V0TGV2ZWwobG9nZ2VyLCBsZXZlbCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvLyBSZXRyaWV2ZXMgdGhlIGNvbnNvbGUgb3IgcHVibGlzaCBsZXZlbCBvZiBhIGxvZ2dlclxuICAgIC8vIGxvZ2dlciAtIHRoZSBsb2dnZXIgZm9yIHdoaWNoIHRvIHJldHJpZXZlIHRoZSBsZXZlbFxuICAgIC8vIGxldmVsIC0gYSBzdHJpbmcgd2hpY2ggY2FuIGVpdGhlciBiZSBcInB1Ymxpc2hMZXZlbFwiIGZvciByZXRyaWV2aW5nIHRoZSBwdWJsaXNoIGxldmVsIG9yIFwiY19sZXZlbFwiIGZvciByZXRyaWV2aW5nIHRoZSBjb25zb2xlIGxldmVsLlxuICAgIGlmIChsb2dnZXJbbGV2ZWxdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxvZ2dlcltsZXZlbF07XG4gICAgfSBlbHNlIGlmIChsb2dnZXIucGFyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGdldExldmVsKGxvZ2dlci5wYXJlbnQsIGxldmVsKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1lc3NhZ2VUb1RhYmxlKHRpdGxlLCByb3dzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8vIERpc3BsYXkgbWVzc2FnZSBhcyB0YWJsZSBpbiBmaWxlXG4gICAgdmFyIGtleXMgPSBnZXRBbGxLZXlzKHJvd3MpO1xuICAgIC8vIGZpbGwgcm93cyB3aXRoIG1lc3NhZ2UgcHJvcGVydGllc1xuICAgIHZhciB0YWJsZVJvd3MgPSByb3dzLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIHRhYmxlTWVzc2FnZSA9IGFzY2lpVGFibGUuZmFjdG9yeSh7XG4gICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgaGVhZGluZzoga2V5cyxcbiAgICAgICAgcm93czogdGFibGVSb3dzXG4gICAgfSk7XG4gICAgcmV0dXJuIHRhYmxlTWVzc2FnZS50b1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiBnZXRBbGxLZXlzKGRhdGEpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLy8gQWNjZXB0cyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUga2V5cyBmcm9tIGFsbCBvYmplY3RzXG4gICAgdmFyIGFsbEtleXMgPSBbXTtcblxuICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoYWxsS2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYWxsS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFsbEtleXM7XG59XG5cbmZ1bmN0aW9uIGxvZ2dlcihjb25maWd1cmF0aW9uKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0eXBlb2YgY29uZmlndXJhdGlvbi5jb25uZWN0aW9uICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25maWd1cmF0aW9uLmNvbm5lY3Rpb24gPSB7fTtcbiAgICB9XG5cbiAgICAvLyBTZXQgZGVidWcgZm9yIHRoZSBjb25uZWN0aW9uIG1vZHVsZSBpZiBnbG9iYWwgZGVidWcgaXMgc2V0XG4gICAgY29uZmlndXJhdGlvbi5jb25uZWN0aW9uLmRlYnVnID0gY29uZmlndXJhdGlvbi5kZWJ1ZztcblxuICAgIC8vIEluaXQgY29ubmVjdGlvblxuICAgIC8vIERldGVybWluZSBpZiB3ZSBhcmUgZ2l2ZW4gYSByZWFkeSAnY29ubmVjdGlvbicgb2JqZWN0IG9yIGEgY29uZmlndXJhdGlvbi5cbiAgICB2YXIgY29ubmVjdGlvbiA9IGlzQ29ubmVjdGlvbihjb25maWd1cmF0aW9uLmNvbm5lY3Rpb24pID8gY29uZmlndXJhdGlvbi5jb25uZWN0aW9uIDogdGljazQyQ29ubmVjdGlvbihjb25maWd1cmF0aW9uLmNvbm5lY3Rpb24pO1xuXG4gICAgdmFyIGlkS2V5cyA9IFsnc3lzdGVtJywgJ3NlcnZpY2UnLCAnaW5zdGFuY2UnXTtcblxuICAgIC8vIENvbnZlcnQgaW5zdGFuY2UgdG8gc3RyaW5nLCB0aHJvdyBleGNlcHRpb25zIGlmIGl0IGlzIG5vdCBmdWxsXG4gICAgdmFyIGluc3RhbmNlU3RyID0gaWRLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBwcm9wID0gY29uZmlndXJhdGlvbi5pZGVudGl0eVtrZXldO1xuICAgICAgICBpZiAodHlwZW9mIHByb3AgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSBzcGVjaWZ5IFwiJyArIGtleSArICdcIiBpbiB5b3VyIGlkZW50aXR5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvcDtcbiAgICB9KS5qb2luKCcvJyk7XG5cbiAgICB2YXIgbG9nZ2VyUHJvdG8gPSB7XG4gICAgICAgIHN1YkxvZ2dlcjogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzdWJsb2dnZXIgaXMgYWxyZWFkeSBjcmVhdGVkXG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdTdWJsb2dnZXIgPSB0aGlzLnN1YmxvZ2dlcnMuZmlsdGVyKGZ1bmN0aW9uIChzdWJMb2dnZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViTG9nZ2VyLm5hbWUgPT09IG5hbWU7XG4gICAgICAgICAgICB9KVswXTtcblxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nU3VibG9nZ2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdTdWJsb2dnZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBuYW1lIGlzbid0IHRoZSBzYW1lIGFzIG9uZSBvZiB0aGUgcGFyZW50IHByb3BlcnRpZXNcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIHN1YiBsb2dnZXIgbmFtZSBpcyBub3QgYWxsb3dlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBuYW1lIGlzbid0IHRoZSBzYW1lIGFzIG9uZSBvZiB0aGUgcGFyZW50IG1ldGhvZHNcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGxvZ2dlclByb3RvKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBzdWIgbG9nZ2VyIG5hbWUgaXMgbm90IGFsbG93ZWQuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBwYXRoID0gdGhpcy5wYXRoLnNsaWNlKDApO1xuICAgICAgICAgICAgcGF0aC5wdXNoKHRoaXMubmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9nZ2VyKG5hbWUsIHBhdGgsIHRoaXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHB1Ymxpc2hMZXZlbDogZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgICAgICBpZiAobGV2ZWwgIT09IG51bGwgJiYgbGV2ZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3B1Ymxpc2hMZXZlbCA9IGxldmVsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZ2V0TGV2ZWwodGhpcywgJ19wdWJsaXNoTGV2ZWwnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb25zb2xlTGV2ZWw6IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICAgICAgaWYgKGxldmVsICE9PSBudWxsICYmIGxldmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb25zb2xlTGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGdldExldmVsKHRoaXMsICdfY29uc29sZUxldmVsJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWV0cmljc0xldmVsOiBmdW5jdGlvbiAobGV2ZWwsIG1ldHJpY3NTeXN0ZW0pIHtcbiAgICAgICAgICAgIGlmIChsZXZlbCAhPT0gbnVsbCAmJiBsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0cmljTGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1ldHJpY3NTeXN0ZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWV0cmljc1N5c3RlbSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1ldHJpY3NTeXN0ZW0ub2JqZWN0TWV0cmljID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0cmljU3lzdGVtID0gbWV0cmljc1N5c3RlbTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSBzcGVjaWZ5IG1ldHJpYyBzeXN0ZW0gJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHRhYmxlOiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgLy8gbWVzc2FnZSBtdXN0IGJlIGluIGFuIGFycmF5LCB0byBiZSBkaXNwbGF5ZWQgYXMgdGFibGVcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIG1lc3NhZ2UgbXVzdCBiZSBpbiBhbiBhcnJheScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXRyaWV2ZSBsb2dnZXIgbmFtZSBhbmQgbGV2ZWxzXG4gICAgICAgICAgICB2YXIgbG9nZ2VyTmFtZSA9IGdldExvZ2dlck5hbWUodGhpcyk7XG5cbiAgICAgICAgICAgIC8vIFB1Ymxpc2ggaW4gY29uc29sZVxuICAgICAgICAgICAgaWYgKHNob3VsZFB1Ymxpc2goZ2V0TGV2ZWwodGhpcywgJ19jb25zb2xlTGV2ZWwnKSwgJ2luZm8nKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhsb2dnZXJOYW1lICsgJzonKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLnRhYmxlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUHVibGlzaCBpbiBmaWxlXG4gICAgICAgICAgICBpZiAoc2hvdWxkUHVibGlzaChnZXRMZXZlbCh0aGlzLCAnX3B1Ymxpc2hMZXZlbCcpLCAnaW5mbycpKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKCdsb2cnLCAnTG9nTWVzc2FnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlU3RyLFxuICAgICAgICAgICAgICAgICAgICBsZXZlbDogbGV2ZWxzLmluZGV4T2YoJ2luZm8nKSxcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyOiBsb2dnZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlVG9UYWJsZShsb2dnZXJOYW1lLCBtZXNzYWdlKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGxvZzogZnVuY3Rpb24gKG1lc3NhZ2UsIGxldmVsKSB7XG4gICAgICAgICAgICBwdWJsaXNoTWVzc2FnZSh0aGlzLCBsZXZlbCB8fCAnaW5mbycsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihuYW1lLCBwYXRoLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIGxvZ2dlciA9IE9iamVjdC5jcmVhdGUobG9nZ2VyUHJvdG8pO1xuICAgICAgICBsb2dnZXIubmFtZSA9IG5hbWU7XG4gICAgICAgIGxvZ2dlci5wYXRoID0gcGF0aDtcbiAgICAgICAgbG9nZ2VyLnN1YmxvZ2dlcnMgPSBbXTtcbiAgICAgICAgbG9nZ2VyLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgaWYgKHBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBhZGQgc3VibG9nZ2VyIHRvIHN1YmxvZ2dlcnMgYXJyYXlcbiAgICAgICAgICAgIHBhcmVudC5zdWJsb2dnZXJzLnB1c2gobG9nZ2VyKTtcbiAgICAgICAgICAgIC8vIGFkZCBlYXN5IGFjY2VzcyB0byBzdWJsb2dnZXJcbiAgICAgICAgICAgIHBhcmVudFtsb2dnZXIubmFtZV0gPSBsb2dnZXI7XG4gICAgICAgICAgICAvLyBjcmVhdGUgbWV0cmljIHN5c3RlbVxuICAgICAgICAgICAgaWYgKHBhcmVudC5tZXRyaWNTeXN0ZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5tZXRyaWNzTGV2ZWwoJ3dhcm4nLCBwYXJlbnQubWV0cmljU3lzdGVtLnN1YlN5c3RlbShsb2dnZXIubmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV2ZWxzLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgICAgICBsb2dnZXJbbGV2ZWxdID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBwdWJsaXNoTWVzc2FnZShsb2dnZXIsIGxldmVsLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxvZ2dlci5vZmYgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgICBsb2dnZXIudmVyc2lvbiA9IFBhY2thZ2VKc29uLnZlcnNpb247XG5cbiAgICAgICAgcmV0dXJuIGxvZ2dlcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwdWJsaXNoTWVzc2FnZShsb2dnZXIsIGxldmVsLCBtZXNzYWdlKSB7XG4gICAgICAgIC8vIFJldHJpZXZlIGxvZ2dlciBuYW1lIGFuZCBsZXZlbHNcbiAgICAgICAgdmFyIGxvZ2dlck5hbWUgPSBnZXRMb2dnZXJOYW1lKGxvZ2dlcik7XG5cbiAgICAgICAgLy8gQWRkIHN0YWNrIHRyYWNlIGlmIHRoZSBtZXNzYWdlIGlzIGFuIGVycm9yXG4gICAgICAgIGlmIChsZXZlbCA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgIGlmIChlLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UgKyAnXFxuJyArIChlLnN0YWNrLnNwbGl0KCdcXG4nKVxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMylcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFB1Ymxpc2ggaW4gY29uc29sZVxuICAgICAgICBpZiAoc2hvdWxkUHVibGlzaChnZXRMZXZlbChsb2dnZXIsICdfY29uc29sZUxldmVsJyksIGxldmVsKSkge1xuICAgICAgICAgICAgaWYgKCFjb25zb2xlW2xldmVsXSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGVbbGV2ZWxdKGxvZ2dlck5hbWUgKyAnOiAnICsgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHVibGlzaCBpbiBmaWxlXG4gICAgICAgIGlmIChzaG91bGRQdWJsaXNoKGdldExldmVsKGxvZ2dlciwgJ19wdWJsaXNoTGV2ZWwnKSwgbGV2ZWwpKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoJ2xvZycsICdMb2dNZXNzYWdlJywge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVN0cixcbiAgICAgICAgICAgICAgICBsZXZlbDogbGV2ZWxzLmluZGV4T2YobGV2ZWwpLFxuICAgICAgICAgICAgICAgIGxvZ2dlcjogbG9nZ2VyTmFtZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFB1Ymxpc2ggaW4gbWV0cmljc1xuICAgICAgICBpZiAoc2hvdWxkUHVibGlzaChnZXRMZXZlbChsb2dnZXIsICdfbWV0cmljTGV2ZWwnKSwgbGV2ZWwpKSB7XG4gICAgICAgICAgICBpZiAobG9nZ2VyLm1ldHJpY1N5c3RlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLm1ldHJpY1N5c3RlbS5vYmplY3RNZXRyaWMoJ0xvZ01lc3NhZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIFRpbWU6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlcjogbG9nZ2VyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgTGV2ZWw6IGxldmVsLFxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLm1ldHJpY1N5c3RlbS5zZXRTdGF0ZSgxMDAsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaG91bGRQdWJsaXNoID0gZnVuY3Rpb24gKHB1Ymxpc2hMZXZlbCwgbWVzc2FnZUxldmVsKSB7XG4gICAgICAgIHJldHVybiAoIXB1Ymxpc2hMZXZlbCB8fCBsZXZlbHMuaW5kZXhPZihwdWJsaXNoTGV2ZWwpIDw9IGxldmVscy5pbmRleE9mKG1lc3NhZ2VMZXZlbCkpO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0TG9nZ2VyTmFtZSA9IGZ1bmN0aW9uIChsb2dnZXIpIHtcbiAgICAgICAgdmFyIGxvZ2dlclBhdGhBbmROYW1lID0gbG9nZ2VyLnBhdGguc2xpY2UoKTtcbiAgICAgICAgbG9nZ2VyUGF0aEFuZE5hbWUucHVzaChsb2dnZXIubmFtZSk7XG4gICAgICAgIHJldHVybiAnWycgKyBzZXJpYWxpemVQYXRoKGxvZ2dlclBhdGhBbmROYW1lKSArICddJztcbiAgICB9O1xuXG4gICAgdmFyIG1haW5Mb2dnZXIgPSBjcmVhdGVMb2dnZXIoJ21haW4nLCBbXSwgdW5kZWZpbmVkKTtcbiAgICBtYWluTG9nZ2VyLnB1Ymxpc2hMZXZlbCgnd2FybicpO1xuICAgIG1haW5Mb2dnZXIuY29uc29sZUxldmVsKCdpbmZvJyk7XG4gICAgbWFpbkxvZ2dlci5tZXRyaWNzTGV2ZWwoJ3dhcm4nKTtcblxuICAgIHJldHVybiBtYWluTG9nZ2VyO1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3cudGljazQyID0gd2luZG93LnRpY2s0MiB8fCB7fTtcbiAgICB3aW5kb3cudGljazQyLmxvZyA9IGxvZ2dlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsb2dnZXI7XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiX2FyZ3NcIjogW1xuICAgIFtcbiAgICAgIFwidGljazQyLWxvZ2dlckAyLjAuNlwiLFxuICAgICAgXCJDOlxcXFx3b3JrXFxcXHN0YXNoXFxcXEdMVUUtZGV2XFxcXGpzLWdsdWVcIlxuICAgIF1cbiAgXSxcbiAgXCJfZnJvbVwiOiBcInRpY2s0Mi1sb2dnZXJAMi4wLjZcIixcbiAgXCJfaWRcIjogXCJ0aWNrNDItbG9nZ2VyQDIuMC42XCIsXG4gIFwiX2luQ2FjaGVcIjogdHJ1ZSxcbiAgXCJfaW5zdGFsbGFibGVcIjogdHJ1ZSxcbiAgXCJfbG9jYXRpb25cIjogXCIvdGljazQyLWxvZ2dlclwiLFxuICBcIl9ub2RlVmVyc2lvblwiOiBcIjYuMy4wXCIsXG4gIFwiX25wbVVzZXJcIjoge30sXG4gIFwiX25wbVZlcnNpb25cIjogXCIzLjguNVwiLFxuICBcIl9waGFudG9tQ2hpbGRyZW5cIjoge30sXG4gIFwiX3JlcXVlc3RlZFwiOiB7XG4gICAgXCJuYW1lXCI6IFwidGljazQyLWxvZ2dlclwiLFxuICAgIFwicmF3XCI6IFwidGljazQyLWxvZ2dlckAyLjAuNlwiLFxuICAgIFwicmF3U3BlY1wiOiBcIjIuMC42XCIsXG4gICAgXCJzY29wZVwiOiBudWxsLFxuICAgIFwic3BlY1wiOiBcIjIuMC42XCIsXG4gICAgXCJ0eXBlXCI6IFwidmVyc2lvblwiXG4gIH0sXG4gIFwiX3JlcXVpcmVkQnlcIjogW1xuICAgIFwiL1wiXG4gIF0sXG4gIFwiX3NoYXN1bVwiOiBcIjA0MTI0NzYzYjMwZDJiYmUxOTllMzhhYWM3MTVlMzA4ZTQyNWMwMjNcIixcbiAgXCJfc2hyaW5rd3JhcFwiOiBudWxsLFxuICBcIl9zcGVjXCI6IFwidGljazQyLWxvZ2dlckAyLjAuNlwiLFxuICBcIl93aGVyZVwiOiBcIkM6XFxcXHdvcmtcXFxcc3Rhc2hcXFxcR0xVRS1kZXZcXFxcanMtZ2x1ZVwiLFxuICBcImF1dGhvclwiOiB7XG4gICAgXCJuYW1lXCI6IFwiVGljazQyXCJcbiAgfSxcbiAgXCJiaW5cIjoge1xuICAgIFwiYnVpbGRcIjogXCIuL2Jpbi9idWlsZC5qc1wiLFxuICAgIFwiY2xlYW5cIjogXCIuL2Jpbi9jbGVhbi5qc1wiLFxuICAgIFwiZmlsZS12ZXJzaW9uaWZ5XCI6IFwiLi9iaW4vZmlsZS12ZXJzaW9uaWZ5LmpzXCIsXG4gICAgXCJtaW5pZnlcIjogXCIuL2Jpbi9taW5pZnkuanNcIlxuICB9LFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJhc2NpaS10YWJsZVwiOiBcIjAuMC44XCIsXG4gICAgXCJ0aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uXCI6IFwiPj0xLjEuOVwiXG4gIH0sXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBIGxpYnJhcnkgZm9yIGxvZ2dpbmdcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYmxhbmtldFwiOiBcIl4xLjEuNlwiLFxuICAgIFwiYnJvd3NlcmlmeVwiOiBcIl4xMy4wLjBcIixcbiAgICBcImJyb3dzZXJpZnktcmVwbGFjaWZ5XCI6IFwiXjAuMC40XCIsXG4gICAgXCJicm93c2VyaWZ5LXZlcnNpb25pZnlcIjogXCJeMS4wLjRcIixcbiAgICBcImVzbGludFwiOiBcIl4zLjEuMVwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy1zdGFuZGFyZFwiOiBcIl41LjMuNVwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy10aWNrNDJcIjogXCJeMS4wLjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcHJvbWlzZVwiOiBcIl4yLjAuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zdGFuZGFyZFwiOiBcIl4yLjAuMFwiLFxuICAgIFwiZnNcIjogXCIwLjAuMlwiLFxuICAgIFwianNkb21cIjogXCJeOC4xLjBcIixcbiAgICBcIm1pbmlmeWlmeVwiOiBcIl43LjMuMlwiLFxuICAgIFwib25jaGFuZ2VcIjogXCJeMi4xLjJcIixcbiAgICBcInBoYW50b21qc1wiOiBcIl4xLjkuMTJcIixcbiAgICBcInF1bml0anNcIjogXCJeMS4xNS4wXCIsXG4gICAgXCJzaGVsbGpzXCI6IFwiXjAuNi4wXCJcbiAgfSxcbiAgXCJkaXN0XCI6IHtcbiAgICBcInNoYXN1bVwiOiBcIjA0MTI0NzYzYjMwZDJiYmUxOTllMzhhYWM3MTVlMzA4ZTQyNWMwMjNcIixcbiAgICBcInRhcmJhbGxcIjogXCJodHRwOi8vMTkyLjE2OC4wLjIzNDo0ODczL3RpY2s0Mi1sb2dnZXIvLS90aWNrNDItbG9nZ2VyLTIuMC42LnRnelwiXG4gIH0sXG4gIFwiZ2l0SGVhZFwiOiBcIjM0YmUzMDE5YjIzNzkxMTkzNzYzOGE2ZjRhYmYxZTgyMGY2ZDE4MjlcIixcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCIsXG4gIFwibWFpblwiOiBcImxpYnJhcnkvbG9nZ2VyXCIsXG4gIFwibmFtZVwiOiBcInRpY2s0Mi1sb2dnZXJcIixcbiAgXCJvcHRpb25hbERlcGVuZGVuY2llc1wiOiB7fSxcbiAgXCJyZWFkbWVcIjogXCJFUlJPUjogTm8gUkVBRE1FIGRhdGEgZm91bmQhXCIsXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL3N0YXNoLnRpY2s0Mi5jb206ODQ0My9zY20vb2Zndy9qcy1sb2dnZXIuZ2l0XCJcbiAgfSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJ1aWxkXCI6IFwibnBtIHJ1biBlc2xpbnQgJiYgbm9kZSBiaW4vY2xlYW4uanMgJiYgbm9kZSBiaW4vYnVpbGQuanMgJiYgbm9kZSBiaW4vbWluaWZ5ICYmIG5vZGUgYmluL2ZpbGUtdmVyc2lvbmlmeVwiLFxuICAgIFwiZXNsaW50XCI6IFwiZXNsaW50IGxpYnJhcnlcIixcbiAgICBcImVzbGludDpmaXhcIjogXCJlc2xpbnQgbGlicmFyeSAtLWZpeFwiLFxuICAgIFwicHJlcHVibGlzaFwiOiBcIm5wbSB1cGRhdGUgJiBucG0gcnVuIGJ1aWxkXCIsXG4gICAgXCJ0ZXN0XCI6IFwibnBtIHJ1biBlc2xpbnQgJiYgbW9jaGEgLS1yZXF1aXJlIC4vdGVzdC90ZXN0X2hlbHBlciBcXFwidGVzdC8qKi8qLmpzXFxcIlwiLFxuICAgIFwid2F0Y2hcIjogXCJvbmNoYW5nZSBcXFwiLi9saWJyYXJ5LyouanNcXFwiIC1pdiAtZSBcXFwiLi9iaW5cXFwiIC0tIG5wbSBydW4gYnVpbGRcIlxuICB9LFxuICBcInZlcnNpb25cIjogXCIyLjAuNlwiXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIG9iamVjdE1ldHJpY18xID0gcmVxdWlyZShcIi4uL21ldHJpY3Mvb2JqZWN0TWV0cmljXCIpO1xyXG52YXIgc3RyaW5nTWV0cmljXzEgPSByZXF1aXJlKFwiLi4vbWV0cmljcy9zdHJpbmdNZXRyaWNcIik7XHJcbnZhciBudW1iZXJNZXRyaWNfMSA9IHJlcXVpcmUoXCIuLi9tZXRyaWNzL251bWJlck1ldHJpY1wiKTtcclxudmFyIHRpbWVzdGFtcE1ldHJpY18xID0gcmVxdWlyZShcIi4uL21ldHJpY3MvdGltZXN0YW1wTWV0cmljXCIpO1xyXG52YXIgTWV0cmljU2VyaWFsaXplciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZXRyaWNTZXJpYWxpemVyKCkge1xyXG4gICAgfVxyXG4gICAgTWV0cmljU2VyaWFsaXplci5tZXRyaWNUb01lc3NhZ2UgPSBmdW5jdGlvbiAobWV0cmljKSB7XHJcbiAgICAgICAgdmFyIGRlZiA9IE1ldHJpY1NlcmlhbGl6ZXIuX2dldE1ldHJpY0RlZmluaXRpb24obWV0cmljLm5hbWUsIG1ldHJpYy52YWx1ZSwgbWV0cmljLnBhdGgsIG1ldHJpYy50eXBlLCBtZXRyaWMuZGVzY3JpcHRpb24sIG1ldHJpYy5wZXJpb2QsIG1ldHJpYy5yZXNvbHV0aW9uKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogbWV0cmljLmlkLFxyXG4gICAgICAgICAgICBpbnN0YW5jZTogbWV0cmljLnJlcG8uaW5zdGFuY2UsXHJcbiAgICAgICAgICAgIGRlZmluaXRpb246IGRlZixcclxuICAgICAgICAgICAgdmFsdWU6IE1ldHJpY1NlcmlhbGl6ZXIuX3NlcmlhbGl6ZVZhbHVlKG1ldHJpYy52YWx1ZSwgbWV0cmljKSxcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIE1ldHJpY1NlcmlhbGl6ZXIuX2dldE1ldHJpY0RlZmluaXRpb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHBhdGgsIHR5cGUsIGRlc2NyaXB0aW9uLCByZXNvbHV0aW9uLCBwZXJpb2QpIHtcclxuICAgICAgICB2YXIgZGVmID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUgPyB0eXBlIDogTWV0cmljU2VyaWFsaXplci5fZ2V0VHlwZUZyb21WYWx1ZSh2YWx1ZSksXHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICAgIHJlc29sdXRpb246IHJlc29sdXRpb24sXHJcbiAgICAgICAgICAgIHBlcmlvZDogcGVyaW9kXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoZGVmLnR5cGUgPT09IG9iamVjdE1ldHJpY18xLk9iamVjdE1ldHJpYy50eXBlKSB7XHJcbiAgICAgICAgICAgIGRlZi5Db21wb3NpdGUgPSBPYmplY3Qua2V5cyh2YWx1ZSkucmVkdWNlKGZ1bmN0aW9uIChhcnIsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHZhbHVlW2tleV07XHJcbiAgICAgICAgICAgICAgICBhcnIucHVzaChNZXRyaWNTZXJpYWxpemVyLl9nZXRNZXRyaWNEZWZpbml0aW9uKGtleSwgdmFsLCBwYXRoKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgICAgICB9LCBbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZWY7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljU2VyaWFsaXplci5fc2VyaWFsaXplVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUsIG1ldHJpYykge1xyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gRGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLl92YWx1ZVR5cGVzLmluZGV4T2YoXCJkYXRlXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZS52YWx1ZU9mKCksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheTogZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBDb21wb3NpdGVWYWx1ZTogT2JqZWN0LmtleXModmFsdWUpLnJlZHVjZShmdW5jdGlvbiAoYXJyLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gTWV0cmljU2VyaWFsaXplci5fc2VyaWFsaXplVmFsdWUodmFsdWVba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsLklubmVyTWV0cmljTmFtZSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaCh2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgICAgICB9LCBbXSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZVR5cGUgPSBtZXRyaWMgPyBtZXRyaWMuZ2V0VmFsdWVUeXBlKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHZhbHVlVHlwZSA9IHZhbHVlVHlwZSB8IHRoaXMuX3ZhbHVlVHlwZXMuaW5kZXhPZih0eXBlb2YgdmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogeyB0eXBlOiB2YWx1ZVR5cGUsIHZhbHVlOiB2YWx1ZSwgaXNBcnJheTogZmFsc2UgfSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNZXRyaWNTZXJpYWxpemVyLl9nZXRUeXBlRnJvbVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHR5cGVBc1N0cmluZyA9IHZhbHVlLmNvbnN0cnVjdG9yID09PSBEYXRlID8gJ3RpbWVzdGFtcCcgOiB0eXBlb2YgdmFsdWU7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlQXNTdHJpbmcpIHtcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdNZXRyaWNfMS5TdHJpbmdNZXRyaWMudHlwZTtcclxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNZXRyaWNfMS5OdW1iZXJNZXRyaWMudHlwZTtcclxuICAgICAgICAgICAgY2FzZSAndGltZXN0YW1wJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBNZXRyaWNfMS5UaW1lc3RhbXBNZXRyaWMudHlwZTtcclxuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3RNZXRyaWNfMS5PYmplY3RNZXRyaWMudHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljU2VyaWFsaXplci5fdmFsdWVUeXBlcyA9IFtcclxuICAgICAgICBcImJvb2xlYW5cIixcclxuICAgICAgICBcImludFwiLFxyXG4gICAgICAgIFwibnVtYmVyXCIsXHJcbiAgICAgICAgXCJsb25nXCIsXHJcbiAgICAgICAgXCJzdHJpbmdcIixcclxuICAgICAgICBcImRhdGVcIixcclxuICAgICAgICBcIm9iamVjdFwiXTtcclxuICAgIHJldHVybiBNZXRyaWNTZXJpYWxpemVyO1xyXG59KCkpO1xyXG5leHBvcnRzLk1ldHJpY1NlcmlhbGl6ZXIgPSBNZXRyaWNTZXJpYWxpemVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWNTZXJpYWxpemVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgbWV0cmljU2VyaWFsaXplcl8xID0gcmVxdWlyZShcIi4vbWV0cmljU2VyaWFsaXplclwiKTtcclxudmFyIE1ldHJpY3NCcmlkZ2UgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTWV0cmljc0JyaWRnZShyZXBvLCBjb25uZWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9yZXBvID0gcmVwbztcclxuICAgICAgICB0aGlzLl9jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcclxuICAgICAgICBjb25uZWN0aW9uLm9uKCdtZXRyaWNzJywgXCJNZXRyaWNzU25hcHNob3RSZXF1ZXN0XCIsIGZ1bmN0aW9uIChpbnN0YW5jZUluZm8pIHtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlSW5mby5JbnN0YW5jZSAhPT0gcmVwby5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLnNlbmRGdWxsKF90aGlzLl9yZXBvKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIE1ldHJpY3NCcmlkZ2UucHJvdG90eXBlLnNlbmRGdWxsID0gZnVuY3Rpb24gKHJlcG8pIHtcclxuICAgICAgICB2YXIgcm9vdFN5c3RlbSA9IHJlcG8ucm9vdDtcclxuICAgICAgICBpZiAoIXJvb3RTeXN0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocm9vdFN5c3RlbS5zdWJTeXN0ZW1zLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZW5kRnVsbFN5c3RlbShyb290U3lzdGVtKTtcclxuICAgIH07XHJcbiAgICBNZXRyaWNzQnJpZGdlLnByb3RvdHlwZS5zZW5kRnVsbFN5c3RlbSA9IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNyZWF0ZVN5c3RlbShzKTtcclxuICAgICAgICBzLnN1YlN5c3RlbXMuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnNlbmRGdWxsU3lzdGVtKChzdWIpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzLm1ldHJpY3MuZm9yRWFjaChmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICBfdGhpcy5jcmVhdGVNZXRyaWMobSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljc0JyaWRnZS5wcm90b3R5cGUuY3JlYXRlTWV0cmljID0gZnVuY3Rpb24gKG1ldHJpYykge1xyXG4gICAgICAgIHRoaXMuX3NlbmQoXCJDcmVhdGVNZXRyaWNcIiwgbWV0cmljU2VyaWFsaXplcl8xLk1ldHJpY1NlcmlhbGl6ZXIubWV0cmljVG9NZXNzYWdlKG1ldHJpYykpO1xyXG4gICAgfTtcclxuICAgIE1ldHJpY3NCcmlkZ2UucHJvdG90eXBlLnVwZGF0ZU1ldHJpYyA9IGZ1bmN0aW9uIChtZXRyaWMpIHtcclxuICAgICAgICB0aGlzLl9zZW5kKFwiVXBkYXRlTWV0cmljXCIsIG1ldHJpY1NlcmlhbGl6ZXJfMS5NZXRyaWNTZXJpYWxpemVyLm1ldHJpY1RvTWVzc2FnZShtZXRyaWMpKTtcclxuICAgIH07XHJcbiAgICBNZXRyaWNzQnJpZGdlLnByb3RvdHlwZS5jcmVhdGVTeXN0ZW0gPSBmdW5jdGlvbiAoc3lzdGVtKSB7XHJcbiAgICAgICAgaWYgKHN5c3RlbS5wYXJlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZW5kKFwiQ3JlYXRlTWV0cmljU3lzdGVtXCIsIHtcclxuICAgICAgICAgICAgICAgIGlkOiBzeXN0ZW0uaWQsXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogc3lzdGVtLnJlcG8uaW5zdGFuY2UsXHJcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uOiB7IG5hbWU6IHN5c3RlbS5uYW1lLCBkZXNjcmlwdGlvbjogc3lzdGVtLmRlc2NyaXB0aW9uLCBwYXRoOiBzeXN0ZW0ucGF0aCB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNZXRyaWNzQnJpZGdlLnByb3RvdHlwZS51cGRhdGVTeXN0ZW0gPSBmdW5jdGlvbiAoc3lzdGVtLCBzdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuX3NlbmQoXCJVcGRhdGVNZXRyaWNTeXN0ZW1cIiwge1xyXG4gICAgICAgICAgICBpZDogc3lzdGVtLmlkLFxyXG4gICAgICAgICAgICBpbnN0YW5jZTogc3lzdGVtLnJlcG8uaW5zdGFuY2UsXHJcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE1ldHJpY3NCcmlkZ2UucHJvdG90eXBlLmhlYXJ0YmVhdCA9IGZ1bmN0aW9uIChyZXBvLCBpbnRlcnZhbCkge1xyXG4gICAgICAgIHRoaXMuX3NlbmQoXCJIZWFydGJlYXRNZXRyaWNzXCIsIHsgcHVibGlzaGluZ0ludGVydmFsOiBpbnRlcnZhbCwgaW5zdGFuY2U6IHJlcG8uaW5zdGFuY2UgfSk7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljc0JyaWRnZS5wcm90b3R5cGUuX3NlbmQgPSBmdW5jdGlvbiAodHlwZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uc2VuZChcIm1ldHJpY3NcIiwgdHlwZSwgbWVzc2FnZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1ldHJpY3NCcmlkZ2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuTWV0cmljc0JyaWRnZSA9IE1ldHJpY3NCcmlkZ2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zcG9ydC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIG1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljXCIpO1xyXG52YXIgQWRkcmVzc01ldHJpYyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWRkcmVzc01ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEFkZHJlc3NNZXRyaWMoZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgdmFsdWUpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCBBZGRyZXNzTWV0cmljLnR5cGUsIHZhbHVlIHx8ICcnKTtcclxuICAgIH1cclxuICAgIEFkZHJlc3NNZXRyaWMudHlwZSA9IDg7XHJcbiAgICByZXR1cm4gQWRkcmVzc01ldHJpYztcclxufShtZXRyaWNfMS5NZXRyaWMpKTtcclxuZXhwb3J0cy5BZGRyZXNzTWV0cmljID0gQWRkcmVzc01ldHJpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzc01ldHJpYy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIG1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljXCIpO1xyXG52YXIgQ291bnRNZXRyaWMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKENvdW50TWV0cmljLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ291bnRNZXRyaWMoZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgdmFsdWUpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCBDb3VudE1ldHJpYy50eXBlLCB2YWx1ZSB8fCAwKTtcclxuICAgIH1cclxuICAgIENvdW50TWV0cmljLnByb3RvdHlwZS5pbmNyZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pbmNyZW1lbnRCeSgxKTtcclxuICAgIH07XHJcbiAgICBDb3VudE1ldHJpYy5wcm90b3R5cGUuZGVjcmVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZGVjcmVtZW50QnkoMSk7XHJcbiAgICB9O1xyXG4gICAgQ291bnRNZXRyaWMucHJvdG90eXBlLmluY3JlbWVudEJ5ID0gZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgodGhpcy52YWx1ZSB8fCAwKSArIG4pO1xyXG4gICAgfTtcclxuICAgIENvdW50TWV0cmljLnByb3RvdHlwZS5kZWNyZW1lbnRCeSA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGUoKHRoaXMudmFsdWUgfHwgMCkgLSBuKTtcclxuICAgIH07XHJcbiAgICBDb3VudE1ldHJpYy5wcm90b3R5cGUuZ2V0VmFsdWVUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAzO1xyXG4gICAgfTtcclxuICAgIENvdW50TWV0cmljLnR5cGUgPSAzO1xyXG4gICAgcmV0dXJuIENvdW50TWV0cmljO1xyXG59KG1ldHJpY18xLk1ldHJpYykpO1xyXG5leHBvcnRzLkNvdW50TWV0cmljID0gQ291bnRNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50TWV0cmljLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgTWV0cmljID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1ldHJpYyhkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCB0eXBlLCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IGRlZi5uYW1lO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZWYuZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5wZXJpb2QgPSBkZWYucGVyaW9kO1xyXG4gICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IGRlZi5yZXNvbHV0aW9uO1xyXG4gICAgICAgIHRoaXMuc3lzdGVtID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMucmVwbyA9IHBhcmVudC5yZXBvO1xyXG4gICAgICAgIHRoaXMuaWQgPSBwYXJlbnQucGF0aCArIFwiL1wiICsgdGhpcy5uYW1lO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhcmVudC5wYXRoLnNsaWNlKDApO1xyXG4gICAgICAgIHRoaXMucGF0aC5wdXNoKHBhcmVudC5uYW1lKTtcclxuICAgICAgICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LmNyZWF0ZU1ldHJpYyh0aGlzKTtcclxuICAgIH1cclxuICAgIE1ldHJpYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC51cGRhdGVNZXRyaWModGhpcyk7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljLnByb3RvdHlwZS5nZXRWYWx1ZVR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBNZXRyaWMudHlwZSA9IDA7XHJcbiAgICByZXR1cm4gTWV0cmljO1xyXG59KCkpO1xyXG5leHBvcnRzLk1ldHJpYyA9IE1ldHJpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgbWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNcIik7XHJcbnZhciBOdW1iZXJNZXRyaWMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE51bWJlck1ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE51bWJlck1ldHJpYyhkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCB2YWx1ZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIE51bWJlck1ldHJpYy50eXBlLCB2YWx1ZSB8fCAwKTtcclxuICAgIH1cclxuICAgIE51bWJlck1ldHJpYy5wcm90b3R5cGUuaW5jcmVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuaW5jcmVtZW50QnkoMSk7XHJcbiAgICB9O1xyXG4gICAgTnVtYmVyTWV0cmljLnByb3RvdHlwZS5kZWNyZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5kZWNyZW1lbnRCeSgxKTtcclxuICAgIH07XHJcbiAgICBOdW1iZXJNZXRyaWMucHJvdG90eXBlLmluY3JlbWVudEJ5ID0gZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgodGhpcy52YWx1ZSB8fCAwKSArIG4pO1xyXG4gICAgfTtcclxuICAgIE51bWJlck1ldHJpYy5wcm90b3R5cGUuZGVjcmVtZW50QnkgPSBmdW5jdGlvbiAobikge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKCh0aGlzLnZhbHVlIHx8IDApIC0gbik7XHJcbiAgICB9O1xyXG4gICAgTnVtYmVyTWV0cmljLnR5cGUgPSAyO1xyXG4gICAgcmV0dXJuIE51bWJlck1ldHJpYztcclxufShtZXRyaWNfMS5NZXRyaWMpKTtcclxuZXhwb3J0cy5OdW1iZXJNZXRyaWMgPSBOdW1iZXJNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlck1ldHJpYy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIG1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljXCIpO1xyXG52YXIgT2JqZWN0TWV0cmljID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhPYmplY3RNZXRyaWMsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBPYmplY3RNZXRyaWMoZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgdmFsdWUpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCBPYmplY3RNZXRyaWMudHlwZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0TWV0cmljLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIHZhbHVlKTtcclxuICAgIH07XHJcbiAgICBPYmplY3RNZXRyaWMudHlwZSA9IDExO1xyXG4gICAgcmV0dXJuIE9iamVjdE1ldHJpYztcclxufShtZXRyaWNfMS5NZXRyaWMpKTtcclxuZXhwb3J0cy5PYmplY3RNZXRyaWMgPSBPYmplY3RNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdE1ldHJpYy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIG1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljXCIpO1xyXG52YXIgUmF0ZU1ldHJpYyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUmF0ZU1ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFJhdGVNZXRyaWMoZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgdmFsdWUpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCBSYXRlTWV0cmljLnR5cGUsIHZhbHVlIHx8IDApO1xyXG4gICAgfVxyXG4gICAgUmF0ZU1ldHJpYy50eXBlID0gNDtcclxuICAgIHJldHVybiBSYXRlTWV0cmljO1xyXG59KG1ldHJpY18xLk1ldHJpYykpO1xyXG5leHBvcnRzLlJhdGVNZXRyaWMgPSBSYXRlTWV0cmljO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYXRlTWV0cmljLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgbWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNcIik7XHJcbnZhciBTdGF0aXN0aWNzTWV0cmljID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhTdGF0aXN0aWNzTWV0cmljLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU3RhdGlzdGljc01ldHJpYyhkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCB2YWx1ZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIFN0YXRpc3RpY3NNZXRyaWMudHlwZSwgdmFsdWUgfHwgMCk7XHJcbiAgICB9XHJcbiAgICBTdGF0aXN0aWNzTWV0cmljLnR5cGUgPSA2O1xyXG4gICAgcmV0dXJuIFN0YXRpc3RpY3NNZXRyaWM7XHJcbn0obWV0cmljXzEuTWV0cmljKSk7XHJcbmV4cG9ydHMuU3RhdGlzdGljc01ldHJpYyA9IFN0YXRpc3RpY3NNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRpc3RpY3NNZXRyaWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBtZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY1wiKTtcclxudmFyIFN0cmluZ01ldHJpYyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoU3RyaW5nTWV0cmljLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gU3RyaW5nTWV0cmljKGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIHZhbHVlKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgU3RyaW5nTWV0cmljLnR5cGUsIHZhbHVlIHx8ICcnKTtcclxuICAgIH1cclxuICAgIFN0cmluZ01ldHJpYy50eXBlID0gMTtcclxuICAgIHJldHVybiBTdHJpbmdNZXRyaWM7XHJcbn0obWV0cmljXzEuTWV0cmljKSk7XHJcbmV4cG9ydHMuU3RyaW5nTWV0cmljID0gU3RyaW5nTWV0cmljO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmdNZXRyaWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBtZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY1wiKTtcclxudmFyIFRpbWVzcGFuTWV0cmljID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhUaW1lc3Bhbk1ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFRpbWVzcGFuTWV0cmljKGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIHZhbHVlKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgVGltZXNwYW5NZXRyaWMudHlwZSwgdmFsdWUgfHwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgVGltZXNwYW5NZXRyaWMucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKHRydWUpO1xyXG4gICAgfTtcclxuICAgIFRpbWVzcGFuTWV0cmljLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBUaW1lc3Bhbk1ldHJpYy50eXBlID0gMTA7XHJcbiAgICByZXR1cm4gVGltZXNwYW5NZXRyaWM7XHJcbn0obWV0cmljXzEuTWV0cmljKSk7XHJcbmV4cG9ydHMuVGltZXNwYW5NZXRyaWMgPSBUaW1lc3Bhbk1ldHJpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXNwYW5NZXRyaWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBtZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY1wiKTtcclxudmFyIFRpbWVzdGFtcE1ldHJpYyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoVGltZXN0YW1wTWV0cmljLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gVGltZXN0YW1wTWV0cmljKGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIHZhbHVlKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgVGltZXN0YW1wTWV0cmljLnR5cGUsIHZhbHVlIHx8IG5ldyBEYXRlKCkpO1xyXG4gICAgfVxyXG4gICAgVGltZXN0YW1wTWV0cmljLnByb3RvdHlwZS5ub3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGUobmV3IERhdGUoKSk7XHJcbiAgICB9O1xyXG4gICAgVGltZXN0YW1wTWV0cmljLnR5cGUgPSA3O1xyXG4gICAgcmV0dXJuIFRpbWVzdGFtcE1ldHJpYztcclxufShtZXRyaWNfMS5NZXRyaWMpKTtcclxuZXhwb3J0cy5UaW1lc3RhbXBNZXRyaWMgPSBUaW1lc3RhbXBNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVzdGFtcE1ldHJpYy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIHN5c3RlbV8xID0gcmVxdWlyZShcIi4vc3lzdGVtXCIpO1xyXG52YXIgdHJhbnNwb3J0XzEgPSByZXF1aXJlKFwiLi9icmlkZ2UvdHJhbnNwb3J0XCIpO1xyXG52YXIgUmVwb3NpdG9yeSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZXBvc2l0b3J5KGNvbmZpZykge1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLl90cmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0XzEuTWV0cmljc0JyaWRnZSh0aGlzLCBjb25maWcuY29ubmVjdGlvbik7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGNvbmZpZy5pZGVudGl0eS5zeXN0ZW0gKyAnLycgKyBjb25maWcuaWRlbnRpdHkuc2VydmljZSArICcvJyArIGNvbmZpZy5pZGVudGl0eS5pbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmlkZW50aXR5ID0gY29uZmlnLmlkZW50aXR5O1xyXG4gICAgICAgIHRoaXMuX3N0YXJ0SGVhcnRiZWF0aW5nKCk7XHJcbiAgICAgICAgdGhpcy5yb290ID0gbmV3IHN5c3RlbV8xLlN5c3RlbSgnJywgdGhpcywgdGhpcy5fdHJhbnNwb3J0KTtcclxuICAgICAgICB0aGlzLl9pbml0U3lzdGVtTWV0cmljcyh0aGlzLnJvb3QsIGNvbmZpZy5jbGlja1N0cmVhbSB8fCBjb25maWcuY2xpY2tTdHJlYW0gPT09IHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgICBSZXBvc2l0b3J5LnByb3RvdHlwZS5fc3RhcnRIZWFydGJlYXRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl90cmFuc3BvcnQuaGVhcnRiZWF0KHRoaXMsIHRoaXMuX2NvbmZpZy5zZXR0aW5ncy5oZWFydGJlYXRJbnRlcnZhbCk7XHJcbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fdHJhbnNwb3J0LmhlYXJ0YmVhdChfdGhpcywgX3RoaXMuX2NvbmZpZy5zZXR0aW5ncy5oZWFydGJlYXRJbnRlcnZhbCk7XHJcbiAgICAgICAgfSwgdGhpcy5fY29uZmlnLnNldHRpbmdzLmhlYXJ0YmVhdEludGVydmFsKTtcclxuICAgIH07XHJcbiAgICBSZXBvc2l0b3J5LnByb3RvdHlwZS5faW5pdFN5c3RlbU1ldHJpY3MgPSBmdW5jdGlvbiAocm9vdFN5c3RlbSwgdXNlQ2xpY2tTdHJlYW0pIHtcclxuICAgICAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcm9vdFN5c3RlbS5zdHJpbmdNZXRyaWMoJ1VzZXJBZ2VudCcsIG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXNlQ2xpY2tTdHJlYW0gJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB2YXIgY2xpY2tTdHJlYW1fMSA9IHJvb3RTeXN0ZW0uc3ViU3lzdGVtKFwiQ2xpY2tTdHJlYW1cIik7XHJcbiAgICAgICAgICAgIHZhciBkb2N1bWVudENsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2xpY2tTdHJlYW1fMS5vYmplY3RNZXRyaWMoXCJMYXN0QnJvd3NlckV2ZW50XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNsaWNrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGUudGFyZ2V0ID8gZS50YXJnZXQuY2xhc3NOYW1lIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlLnRhcmdldC5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJzwnICsgZS50YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICsgJz4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBlLnRhcmdldC5ocmVmIHx8IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2xpY2tTdHJlYW1fMS5vYmplY3RNZXRyaWMoXCJQYWdlXCIsIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBkb2N1bWVudC50aXRsZSxcclxuICAgICAgICAgICAgICAgIHBhZ2U6IHdpbmRvdy5sb2NhdGlvbi5ocmVmXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkb2N1bWVudENsaWNrSGFuZGxlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hdHRhY2hFdmVudCgnb25jbGljaycsIGRvY3VtZW50Q2xpY2tIYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVwb3NpdG9yeTtcclxufSgpKTtcclxuZXhwb3J0cy5SZXBvc2l0b3J5ID0gUmVwb3NpdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3NpdG9yeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIG51bWJlck1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljcy9udW1iZXJNZXRyaWNcIik7XHJcbnZhciB0aW1lc3Bhbk1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljcy90aW1lc3Bhbk1ldHJpY1wiKTtcclxudmFyIHN0cmluZ01ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljcy9zdHJpbmdNZXRyaWNcIik7XHJcbnZhciBhZGRyZXNzTWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNzL2FkZHJlc3NNZXRyaWNcIik7XHJcbnZhciBvYmplY3RNZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY3Mvb2JqZWN0TWV0cmljXCIpO1xyXG52YXIgdGltZXN0YW1wTWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNzL3RpbWVzdGFtcE1ldHJpY1wiKTtcclxudmFyIGNvdW50TWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNzL2NvdW50TWV0cmljXCIpO1xyXG52YXIgc3RhdGlzdGljc01ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljcy9zdGF0aXN0aWNzTWV0cmljXCIpO1xyXG52YXIgcmF0ZU1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljcy9yYXRlTWV0cmljXCIpO1xyXG52YXIgU3lzdGVtID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN5c3RlbShuYW1lLCByZXBvLCB0cmFuc3BvcnQsIHBhcmVudCwgZGVzY3JpcHRpb24pIHtcclxuICAgICAgICB0aGlzLm1ldHJpY3MgPSBbXTtcclxuICAgICAgICB0aGlzLnN1YlN5c3RlbXMgPSBbXTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbiB8fCAnJztcclxuICAgICAgICB0aGlzLnJlcG8gPSByZXBvO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IHRyYW5zcG9ydDtcclxuICAgICAgICB0aGlzLnBhdGggPSB0aGlzLl9idWlsZFBhdGgodGhpcy5wYXJlbnQpO1xyXG4gICAgICAgIHRoaXMuaWQgPSAodGhpcy5wYXRoLmxlbmd0aCA+IDAgPyB0aGlzLnBhdGguam9pbignLycpICsgJy8nIDogJycpICsgdGhpcy5uYW1lO1xyXG4gICAgICAgIHRoaXMuaWRlbnRpdHkgPSByZXBvLmlkZW50aXR5O1xyXG4gICAgICAgIHRoaXMucm9vdCA9IHJlcG8ucm9vdDtcclxuICAgICAgICB0aGlzLl90cmFuc3BvcnQuY3JlYXRlU3lzdGVtKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5zdWJTeXN0ZW0gPSBmdW5jdGlvbiAobmFtZSwgZGVzY3JpcHRpb24pIHtcclxuICAgICAgICBpZiAoIW5hbWUgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduYW1lIGlzIHJlcXVpcmVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtYXRjaGluZ1N5c3RlbXMgPSB0aGlzLnN1YlN5c3RlbXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLm5hbWUgPT09IG5hbWU7IH0pO1xyXG4gICAgICAgIGlmIChtYXRjaGluZ1N5c3RlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hpbmdTeXN0ZW1zWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3lzdGVtID0gbmV3IFN5c3RlbShuYW1lLCB0aGlzLnJlcG8sIHRoaXMuX3RyYW5zcG9ydCwgdGhpcywgZGVzY3JpcHRpb24pO1xyXG4gICAgICAgIHRoaXMuc3ViU3lzdGVtcy5wdXNoKHN5c3RlbSk7XHJcbiAgICAgICAgcmV0dXJuIHN5c3RlbTtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC51cGRhdGVTeXN0ZW0odGhpcywgeyBzdGF0ZTogc3RhdGUsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB9KTtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLnN0cmluZ01ldHJpYyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9yQ3JlYXRlTWV0cmljKGRlZmluaXRpb24sIHN0cmluZ01ldHJpY18xLlN0cmluZ01ldHJpYy50eXBlLCB2YWx1ZSwgZnVuY3Rpb24gKG1ldHJpY0RlZikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHN0cmluZ01ldHJpY18xLlN0cmluZ01ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5udW1iZXJNZXRyaWMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPckNyZWF0ZU1ldHJpYyhkZWZpbml0aW9uLCBudW1iZXJNZXRyaWNfMS5OdW1iZXJNZXRyaWMudHlwZSwgdmFsdWUsIGZ1bmN0aW9uIChtZXRyaWNEZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBudW1iZXJNZXRyaWNfMS5OdW1iZXJNZXRyaWMobWV0cmljRGVmLCBfdGhpcywgX3RoaXMuX3RyYW5zcG9ydCwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFN5c3RlbS5wcm90b3R5cGUuY291bnRNZXRyaWMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPckNyZWF0ZU1ldHJpYyhkZWZpbml0aW9uLCBjb3VudE1ldHJpY18xLkNvdW50TWV0cmljLnR5cGUsIHZhbHVlLCBmdW5jdGlvbiAobWV0cmljRGVmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgY291bnRNZXRyaWNfMS5Db3VudE1ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5hZGRyZXNzTWV0cmljID0gZnVuY3Rpb24gKGRlZmluaXRpb24sIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3JDcmVhdGVNZXRyaWMoZGVmaW5pdGlvbiwgYWRkcmVzc01ldHJpY18xLkFkZHJlc3NNZXRyaWMudHlwZSwgdmFsdWUsIGZ1bmN0aW9uIChtZXRyaWNEZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBhZGRyZXNzTWV0cmljXzEuQWRkcmVzc01ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5vYmplY3RNZXRyaWMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPckNyZWF0ZU1ldHJpYyhkZWZpbml0aW9uLCBvYmplY3RNZXRyaWNfMS5PYmplY3RNZXRyaWMudHlwZSwgdmFsdWUsIGZ1bmN0aW9uIChtZXRyaWNEZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBvYmplY3RNZXRyaWNfMS5PYmplY3RNZXRyaWMobWV0cmljRGVmLCBfdGhpcywgX3RoaXMuX3RyYW5zcG9ydCwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFN5c3RlbS5wcm90b3R5cGUudGltZXNwYW5NZXRyaWMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPckNyZWF0ZU1ldHJpYyhkZWZpbml0aW9uLCB0aW1lc3Bhbk1ldHJpY18xLlRpbWVzcGFuTWV0cmljLnR5cGUsIHZhbHVlLCBmdW5jdGlvbiAobWV0cmljRGVmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGltZXNwYW5NZXRyaWNfMS5UaW1lc3Bhbk1ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS50aW1lc3RhbXBNZXRyaWMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPckNyZWF0ZU1ldHJpYyhkZWZpbml0aW9uLCB0aW1lc3RhbXBNZXRyaWNfMS5UaW1lc3RhbXBNZXRyaWMudHlwZSwgdmFsdWUsIGZ1bmN0aW9uIChtZXRyaWNEZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyB0aW1lc3RhbXBNZXRyaWNfMS5UaW1lc3RhbXBNZXRyaWMobWV0cmljRGVmLCBfdGhpcywgX3RoaXMuX3RyYW5zcG9ydCwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFN5c3RlbS5wcm90b3R5cGUucmF0ZU1ldHJpYyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9yQ3JlYXRlTWV0cmljKGRlZmluaXRpb24sIHJhdGVNZXRyaWNfMS5SYXRlTWV0cmljLnR5cGUsIHZhbHVlLCBmdW5jdGlvbiAobWV0cmljRGVmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgcmF0ZU1ldHJpY18xLlJhdGVNZXRyaWMobWV0cmljRGVmLCBfdGhpcywgX3RoaXMuX3RyYW5zcG9ydCwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFN5c3RlbS5wcm90b3R5cGUuc3RhdGl0aWNzTWV0cmljID0gZnVuY3Rpb24gKGRlZmluaXRpb24sIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3JDcmVhdGVNZXRyaWMoZGVmaW5pdGlvbiwgc3RhdGlzdGljc01ldHJpY18xLlN0YXRpc3RpY3NNZXRyaWMudHlwZSwgdmFsdWUsIGZ1bmN0aW9uIChtZXRyaWNEZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBzdGF0aXN0aWNzTWV0cmljXzEuU3RhdGlzdGljc01ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5fdW5pb25Ub01ldHJpY0RlZiA9IGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1ldHJpY0RlZjtcclxuICAgICAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG1ldHJpY0RlZiA9IHsgbmFtZTogZGVmaW5pdGlvbiB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWV0cmljRGVmID0gZGVmaW5pdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1ldHJpY0RlZi5uYW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRyaWMgbmFtZSBpcyByZXF1aXJlZC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1ldHJpY0RlZjtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLl9nZXRPckNyZWF0ZU1ldHJpYyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uLCBleHBlY3RlZFR5cGUsIHZhbHVlLCBjcmVhdGVGdW5jKSB7XHJcbiAgICAgICAgdmFyIG1ldHJpY0RlZiA9IHRoaXMuX3VuaW9uVG9NZXRyaWNEZWYoZGVmaW5pdGlvbik7XHJcbiAgICAgICAgdmFyIG1hdGNoaW5nTWV0cmljcyA9IHRoaXMubWV0cmljcy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubmFtZSA9PT0gbWV0cmljRGVmLm5hbWU7IH0pO1xyXG4gICAgICAgIGlmIChtYXRjaGluZ01ldHJpY3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdNZXRyaWMgPSBtYXRjaGluZ01ldHJpY3NbMF07XHJcbiAgICAgICAgICAgIGlmIChleGlzdGluZ01ldHJpYy50eXBlICE9PSBleHBlY3RlZFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQSBtZXRyaWMgbmFtZWQgJyArIG1ldHJpY0RlZi5uYW1lICsgJyBpcyBhbHJlYWR5IGRlZmluZWQgd2l0aCBkaWZmZXJlbnQgdHlwZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBleGlzdGluZ01ldHJpYy51cGRhdGUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZ01ldHJpYztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5ld01ldHJpYyA9IGNyZWF0ZUZ1bmMobWV0cmljRGVmKTtcclxuICAgICAgICB0aGlzLm1ldHJpY3MucHVzaChuZXdNZXRyaWMpO1xyXG4gICAgICAgIHJldHVybiBuZXdNZXRyaWM7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5fYnVpbGRQYXRoID0gZnVuY3Rpb24gKHN5c3RlbSkge1xyXG4gICAgICAgIGlmICghc3lzdGVtIHx8ICFzeXN0ZW0ucGFyZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHBhdGggPSB0aGlzLl9idWlsZFBhdGgoc3lzdGVtLnBhcmVudCk7XHJcbiAgICAgICAgcGF0aC5wdXNoKHN5c3RlbS5uYW1lKTtcclxuICAgICAgICByZXR1cm4gcGF0aDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU3lzdGVtO1xyXG59KCkpO1xyXG5leHBvcnRzLlN5c3RlbSA9IFN5c3RlbTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3lzdGVtLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgcmVwb3NpdG9yeV8xID0gcmVxdWlyZShcIi4vY29yZS9yZXBvc2l0b3J5XCIpO1xyXG52YXIgdGljazQyX2dhdGV3YXlfY29ubmVjdGlvbl8xID0gcmVxdWlyZSgndGljazQyLWdhdGV3YXktY29ubmVjdGlvbicpO1xyXG52YXIgd2luZG93QXNBbnkgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IChuZXcgT2JqZWN0KCkpIDogd2luZG93O1xyXG53aW5kb3dBc0FueS50aWNrNDIgPSB3aW5kb3dBc0FueS50aWNrNDIgfHwge307XHJcbndpbmRvd0FzQW55LnRpY2s0Mi5tZXRyaWNzID0gd2luZG93QXNBbnkudGljazQyLm1ldHJpY3MgfHwgZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgaWYgKCFjb25maWcuaWRlbnRpdHkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lkZW50aXR5IG1pc3NpbmcgZnJvbSBtZXRyaWNzIGNvbmZpZ3VyYXRpb24nKTtcclxuICAgIH1cclxuICAgIGlmICghY29uZmlnLmlkZW50aXR5LnNlcnZpY2UgfHwgdHlwZW9mIGNvbmZpZy5pZGVudGl0eS5zZXJ2aWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VydmljZSBtaXNzaW5nIG9yIGludmFsaWQgaW4gbWV0cmljcyBpZGVudGl0eSBjb25maWd1cmF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWNvbmZpZy5pZGVudGl0eS5zeXN0ZW0gfHwgdHlwZW9mIGNvbmZpZy5pZGVudGl0eS5zeXN0ZW0gIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTeXN0ZW0gbWlzc2luZyBvciBpbnZhbGlkIGluIG1ldHJpY3MgaWRlbnRpdHkgY29uZmlndXJhdGlvbicpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFjb25maWcuaWRlbnRpdHkuaW5zdGFuY2UgfHwgdHlwZW9mIGNvbmZpZy5pZGVudGl0eS5pbnN0YW5jZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3RhbmNlbWlzc2luZyBvciBpbnZhbGlkIGluIG1ldHJpY3MgaWRlbnRpdHkgY29uZmlndXJhdGlvbicpO1xyXG4gICAgfVxyXG4gICAgY29uZmlnLnNldHRpbmdzID0gY29uZmlnLnNldHRpbmdzIHx8IHt9O1xyXG4gICAgY29uZmlnLnNldHRpbmdzLmhlYXJ0YmVhdEludGVydmFsID0gY29uZmlnLnNldHRpbmdzLmhlYXJ0YmVhdEludGVydmFsIHx8IDE1MDAwO1xyXG4gICAgaWYgKHR5cGVvZiBjb25maWcuY29ubmVjdGlvbiAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIGNvbmZpZy5jb25uZWN0aW9uID0ge307XHJcbiAgICB9XHJcbiAgICBpZiAoISh0eXBlb2YgY29uZmlnLmNvbm5lY3Rpb24gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGNvbmZpZy5jb25uZWN0aW9uLnNlbmQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgY29uZmlnLmNvbm5lY3Rpb24ub24gPT09IFwiZnVuY3Rpb25cIikpIHtcclxuICAgICAgICBjb25maWcuY29ubmVjdGlvbiA9IHRpY2s0Ml9nYXRld2F5X2Nvbm5lY3Rpb25fMS5jb25uZWN0aW9uKGNvbmZpZy5jb25uZWN0aW9uKTtcclxuICAgIH1cclxuICAgIHZhciByZXBvID0gbmV3IHJlcG9zaXRvcnlfMS5SZXBvc2l0b3J5KGNvbmZpZyk7XHJcbiAgICByZXBvWyd2ZXJzaW9uJ10gPSByZXBvLnJvb3RbJ3ZlcnNpb24nXSA9ICcyLjAuMTUnO1xyXG4gICAgcmV0dXJuIHJlcG8ucm9vdDtcclxufTtcclxubW9kdWxlLmV4cG9ydHMgPSB3aW5kb3dBc0FueS50aWNrNDIubWV0cmljcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljc01vZHVsZS5qcy5tYXAiLCIgIHZhciBoZWxwZXJzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuICBoZWxwZXJzLmludm9rZUFnbVN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FsbGJhY2tBYXJndW1lbnQpIHtcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjYWxsYmFjayhjYWxsYmFja0Fhcmd1bWVudCk7XG4gICAgICB9XG4gIH1cblxuICBoZWxwZXJzLmludm9rZUFnbUVycm9yQ2FsbGJhY2sgPSAgZnVuY3Rpb24gKGNhbGxiYWNrLCBlcnJvcikge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgfVxuICB9XG5cbiAgaGVscGVycy5leGVjQ2FsbGJhY2tzID0gIGZ1bmN0aW9uIChhcnIsIHZhbCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgaWYgKGFyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2sodmFsKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgfVxuXG4gIGhlbHBlcnMudmFscyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uKGFyciwga2V5KSB7XG4gICAgICAgICAgYXJyLnB1c2gob2JqW2tleV0pO1xuICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9LCBbXSk7XG4gIH1cbiIsInZhciBkZXByZWNhdGUgPSByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxubW9kdWxlLmV4cG9ydHMuaW5pdCA9IGluaXQ7XG5tb2R1bGUuZXhwb3J0cy5jcmVhdGUgPSBjcmVhdGVXaW5kb3c7XG5cbnZhciBhZ207XG5cbmZ1bmN0aW9uIHNldFdpbmRvd1N0eWxlQXR0cmlidXRlcyh3aW5kb3dTdHlsZXMpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLy8gQWRkaW5nIHdpbmRvd1N0eWxlQXR0cmlidXRlc1xuICAgIGlmICh3aW5kb3dTdHlsZXMgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygd2luZG93U3R5bGVzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh3aW5kb3dTdHlsZXMpO1xuICAgIH0gZWxzZSBpZiAod2luZG93U3R5bGVzICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHdpbmRvd1N0eWxlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvd1N0eWxlcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0KGEpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgYWdtID0gYTtcbn1cblxuXG5mdW5jdGlvbiBjcmVhdGVXaW5kb3coaWQsIGludGVybmFsSWQsIG5hbWUsIGNvbnRhaW5lck9iaiwgdXJsLCB0aXRsZSwgd2luZG93U3R5bGVzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgaWYgKCFjb250YWluZXJPYmopIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb250YWluZXJPYmogY2FuIG5vdCBiZSB1bmRlZmluZWQnKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0V2luZG93O1xuXG4gICAgZnVuY3Rpb24gYWRkQ2FsbGJhY2soa2V5LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgb2JqID0gcmVzdWx0V2luZG93Ll9jYWxsYmFja3M7XG4gICAgICAgIGlmIChvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IFtjYWxsYmFja107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmpba2V5XS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZ1bmN0aW9ucyBmb3Igb3BlbmluZywgY2xvc2luZywgcmVzaXppbmcgd2luZG93c1xuICAgIGZ1bmN0aW9uIG9wZW4oZGltZW5zaW9ucywgc3R5bGUsIHN1Y2Nlc3MsIGVycm9yKSB7XG5cbiAgICAgICAgLy8gQSB3cmFwcGVyIGZvciB0aGUgc3RhbmRhcmQgQUdNIFwib3BlblwiIGZ1bmN0aW9uXG4gICAgICAgIHZhciB0aGVXaW5kb3cgPSB0aGlzO1xuXG4gICAgICAgIC8vIEluaXQgc3R5bGUgb2JqZWN0cyBpZiB0aGV5IGFyZSBudWxsXG4gICAgICAgIGRpbWVuc2lvbnMgPSBkaW1lbnNpb25zIHx8IHt9O1xuICAgICAgICBzdHlsZSA9IHN0eWxlIHx8IHt9O1xuXG4gICAgICAgIC8vIFRha2Ugb3V0IHRoZSBzdGlja3ktd2luZG93cyByZWxhdGVkIHByb3BlcnRpZXMgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cbiAgICAgICAgdmFyIGlzU3RpY2t5ID0gc3R5bGUuaXNTdGlja3k7XG4gICAgICAgIGRlbGV0ZSBzdHlsZS5pc1N0aWNreTtcblxuICAgICAgICB2YXIgc3RpY2t5R3JvdXAgPSBzdHlsZS5zdGlja3lHcm91cDtcbiAgICAgICAgZGVsZXRlIHN0eWxlLnN0aWNreUdyb3VwO1xuICAgICAgICBkZWxldGUgc3R5bGUuaGFzTW92ZUFyZWFUaGlja25lc3M7XG4gICAgICAgIGRlbGV0ZSBzdHlsZS5oYXNTaXplQXJlYVRoaWNrbmVzcztcblxuICAgICAgICB2YXIgdGFyZ2V0ID0gY29udGFpbmVyT2JqLmdldEFnbVRhcmdldCgpO1xuXG4gICAgICAgIGFnbS5pbnZva2UoJ1Q0Mi5IdG1sLkNyZWF0ZVdpbmRvdycsIHtcbiAgICAgICAgICAgIC8vIFdpbmRvdyBuYW1lIGFuZCB1cmxcbiAgICAgICAgICAgIHdpbmRvd05hbWU6IHRoZVdpbmRvdy5uYW1lLFxuICAgICAgICAgICAgdXJsOiB0aGVXaW5kb3cudXJsLFxuICAgICAgICAgICAgLy8gZGltZW5zaW9uc1xuICAgICAgICAgICAgdG9wOiBkaW1lbnNpb25zLnRvcCxcbiAgICAgICAgICAgIGxlZnQ6IGRpbWVuc2lvbnMubGVmdCxcbiAgICAgICAgICAgIHdpZHRoOiBkaW1lbnNpb25zLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBkaW1lbnNpb25zLmhlaWdodCxcbiAgICAgICAgICAgIC8vIFN0aWNreXdpbmRvd3MgLSByZWxhdGVkIHByb3BzXG4gICAgICAgICAgICBpc1N0aWNreTogaXNTdGlja3ksXG4gICAgICAgICAgICBzdGlja3lHcm91cDogc3RpY2t5R3JvdXAsXG4gICAgICAgICAgICAvLyBTdHlsZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgICB3aW5kb3dTdHlsZUF0dHJpYnV0ZXM6IEpTT04uc3RyaW5naWZ5KHN0eWxlKVxuXG4gICAgICAgIH0sXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIG9wZW5lZCxcbiAgICAgICAgICAgIGNhbm5vdE9wZW4pO1xuXG4gICAgICAgIGZ1bmN0aW9uIG9wZW5lZChtZXNzYWdlKSB7XG4gICAgICAgICAgICAvLyBBZGQgaWQgdG8gdGhlIGN1cnJlbnQgd2luZG93cyBiZWNhdXNlIHRoZSBjdXJyZW50IEhUTUwgQ29udGFpbmVyXG4gICAgICAgICAgICAvLyBkb2Vzbid0IHN1cHBvcnQgdHJhY2tpbmcgdGhlIHVwZGF0ZXMgb2YgdGhlIHdpbmRvd1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmV0dXJuZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoZVdpbmRvdy5pZCA9IG1lc3NhZ2UucmV0dXJuZWQuaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWxwZXJzLmludm9rZUFnbVN1Y2Nlc3NDYWxsYmFjayhzdWNjZXNzLCB0aGVXaW5kb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2Fubm90T3BlbihlKSB7XG4gICAgICAgICAgICAvLyBDYWxsIHRoZSBlcnJvciBjYWxsYmFja1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVHJ5IHRvIGJpbmQgdGhlIHJldHVybmVkIG9iamVjdCBpbiBjYXNlLi4uXG4gICAgICAgICAgICAvLyBiaW5kV2luZG93KHRoZVdpbmRvdyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhlV2luZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICByZXR1cm4gYWdtQWN0aW9uKCdUNDIuV25kLlNldFdpbmRvd1N0eWxlJywgc3VjY2VzcywgZXJyb3IsIHsgd2luZG93U3R5bGVBdHRyaWJ1dGVzOiBKU09OLnN0cmluZ2lmeShzdHlsZSkgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb3BlbmVkKCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0V2luZG93LmlkICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlV2luZG93Q2xvc2UoKSB7XG4gICAgICAgIGlmIChyZXN1bHRXaW5kb3cuaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVscGVycy5leGVjQ2FsbGJhY2tzKHJlc3VsdFdpbmRvdy5fY2FsbGJhY2tzLm9uQ2xvc2UpO1xuICAgICAgICAgICAgcmVzdWx0V2luZG93LmlkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzdWx0V2luZG93Ll9jYWxsYmFja3MgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gYWdtQWN0aW9uKCdUNDIuV25kLkNsb3NlJywgZnVuY3Rpb24od2luKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXCInICsgd2luLm5hbWUgKyAgJ1wiIHdpbmRvdyB3YXMgY2xvc2VkLicpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnXCInICsgcmVzdWx0V2luZG93Lm5hbWUgKyAgJ1wiIHdpbmRvdyB3YXMgTk9UIGNsb3NlZCBkdWUgZm9sbG93aW5nIGVycm9yOiAnLCBlcnIpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5hdmlnYXRlKHVybCwgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGFnbUFjdGlvbignVDQyLkh0bWwuT3BlblVybCcsIHN1Y2Nlc3MsIGVycm9yLCB7IHVybDogdXJsIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFRpdGxlKHRpdGxlLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICByZXR1cm4gYWdtQWN0aW9uKCdUNDIuV25kLlNldFdpbmRvd1RpdGxlJywgc3VjY2VzcywgZXJyb3IsIHsgdGl0bGU6IHRpdGxlIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERldGFpbHMoc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgdmFyIHdpbmRvd0lkID0gcmVzdWx0V2luZG93LmlkO1xuICAgICAgICBhZ20uaW52b2tlKCdUNDIuV25kLkZpbmRCeUlkJywgeyB3aW5kb3dJZDogcmVzdWx0V2luZG93LmlkIH0sIGNvbnRhaW5lck9iai5nZXRBZ21UYXJnZXQoKSwge30sIHJldHVybmVkRGltZW5zaW9ucywgY2Fubm90UmV0dXJuRGltZW5zaW9ucyk7XG5cbiAgICAgICAgZnVuY3Rpb24gcmV0dXJuZWREaW1lbnNpb25zKHZhbHVlKSB7XG4gICAgICAgICAgICBoZWxwZXJzLmludm9rZUFnbVN1Y2Nlc3NDYWxsYmFjayhzdWNjZXNzLCB2YWx1ZS5yZXR1cm5lZFt3aW5kb3dJZF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2Fubm90UmV0dXJuRGltZW5zaW9ucyhlKSB7XG4gICAgICAgICAgICBoZWxwZXJzLmludm9rZUFnbUVycm9yQ2FsbGJhY2soZXJyb3IsIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW92ZVJlc2l6ZShkaW1lbnNpb25zLCBzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICByZXR1cm4gYWdtQWN0aW9uKCdUNDIuV25kLlJlc2l6ZUFuZE1vdmUnLCBzdWNjZXNzLCBlcnJvciwgZGltZW5zaW9ucylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUYWJCdXR0b24oYnV0dG9uSW5mbywgc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBidXR0b25JbmZvID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoJ05vIGJ1dHRvbiBpbmZvJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYnV0dG9uSW5mby5idXR0b25JZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvcignTm8gYnV0dG9uSWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChidXR0b25JbmZvLmltYWdlQmFzZTY0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVycm9yKCdObyBpbWFnZUJhc2U2NCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW52b2tlIHRoZSBBR00gbWV0aG9kXG4gICAgICAgIGFnbS5pbnZva2UoJ1Q0Mi5XbmQuQWRkQnV0dG9uJywge1xuICAgICAgICAgICAgd2luZG93SWQ6IHJlc3VsdFdpbmRvdy5pZCxcbiAgICAgICAgICAgIGJ1dHRvbkluZm86IGJ1dHRvbkluZm9cbiAgICAgICAgfSwgY29udGFpbmVyT2JqLmdldEFnbVRhcmdldCgpLCB7fSwgYnV0dG9uSXNBZGRlZC5iaW5kKHRoaXMpLCBidXR0b25DYW5ub3RCZUFkZGVkLmJpbmQodGhpcykpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGJ1dHRvbklzQWRkZWQoKSB7XG4gICAgICAgICAgICB2YXIgX2J1dHRvbklkID0gYnV0dG9uSW5mby5idXR0b25JZDtcbiAgICAgICAgICAgIHJlc3VsdFdpbmRvdy5idXR0b25zW19idXR0b25JZF0gPSB7XG4gICAgICAgICAgICAgICAgaWQ6IF9idXR0b25JZCxcbiAgICAgICAgICAgICAgICBpbmZvOiBidXR0b25JbmZvXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaGVscGVycy5pbnZva2VBZ21TdWNjZXNzQ2FsbGJhY2soc3VjY2VzcywgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBidXR0b25DYW5ub3RCZUFkZGVkKGUpIHtcbiAgICAgICAgICAgIGhlbHBlcnMuaW52b2tlQWdtRXJyb3JDYWxsYmFjayhlcnJvciwgZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblRpdGxlQ2hhbmdlZChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayhyZXN1bHRXaW5kb3cudGl0bGUpO1xuICAgICAgICBhZGRDYWxsYmFjaygnb25UaXRsZUNoYW5nZWQnLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25BdmFpbGFibGUoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHJlc3VsdFdpbmRvdy5vcGVuZWQoKSkge1xuICAgICAgICAgICAgY2FsbGJhY2sodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkZENhbGxiYWNrKCdvbkF2YWlsYWJsZScsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNsb3NlKGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZENhbGxiYWNrKCdvbkNsb3NlJywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVXJsQ2hhbmdlZChjYWxsYmFjaykge1xuICAgICAgICBhZGRDYWxsYmFjaygnb25VcmxDaGFuZ2VkJywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVGFiQnV0dG9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZENhbGxiYWNrKCdvblRhYkJ1dHRvbicsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZShzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICByZXR1cm4gYWdtQWN0aW9uKCdUNDIuV25kLkFjdGl2YXRlJywgc3VjY2VzcywgZXJyb3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heGltaXplUmVzdG9yZShzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICByZXR1cm4gYWdtQWN0aW9uKCdUNDIuV25kLk1heGltaXplT3JSZXN0b3JlRG93bicsIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXhpbWl6ZShzdWNjZXNzLCBlcnJvcikge1xuICAgICAgICByZXR1cm4gYWdtQWN0aW9uKCdUNDIuV25kLk1heGltaXplJywgc3VjY2VzcywgZXJyb3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc3RvcmUoc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGFnbUFjdGlvbignVDQyLlduZC5SZXN0b3JlJywgc3VjY2VzcywgZXJyb3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1pbmltaXplKHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgIHJldHVybiBhZ21BY3Rpb24oJ1Q0Mi5XbmQuTWluaW1pemUnLCBzdWNjZXNzLCBlcnJvcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29sbGFwc2Uoc3VjY2VzcywgZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGFnbUFjdGlvbignVDQyLlduZC5Db2xsYXBzZScsIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0aXRsZUNoYW5nZWQodGl0bGUpIHtcbiAgICAgICAgcmVzdWx0V2luZG93LnRpdGxlID0gdGl0bGU7XG4gICAgICAgIGhlbHBlcnMuZXhlY0NhbGxiYWNrcyhyZXN1bHRXaW5kb3cuX2NhbGxiYWNrcy5vblRpdGxlQ2hhbmdlZCwgdGl0bGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVybENoYW5nZWQodXJsKSB7XG4gICAgICAgIHJlc3VsdFdpbmRvdy51cmwgPSB1cmw7XG4gICAgICAgIGhlbHBlcnMuZXhlY0NhbGxiYWNrcyhyZXN1bHRXaW5kb3cuX2NhbGxiYWNrcy5vblVybENoYW5nZWQsIHVybCk7XG4gICAgfVxuXG4gICAgLy8gQWRkcyBhbiBhbGlhcyBvZiBhbiBBR00gbWV0aG9kIGluIHRoZSBXaW5kb3cgcHJvdG90eXBlXG4gICAgZnVuY3Rpb24gYWdtQWN0aW9uKGFjdGlvbiwgc3VjY2VzcywgZXJyb3IsIGFyZ3MpIHtcbiAgICAgICAgLy8gU3RvcCBpZiB0aGUgd2luZG93IGlzIGNsb3NlZFxuICAgICAgICBpZiAocmVzdWx0V2luZG93LnVybCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoJ0Nhbm5vdCBleGVjdXRlIGEgY29tbWFuZCBvbiBhIGNsb3NlZCB3aW5kb3cuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlIHdpbmRvdyBJRCB0byB0aGUgYXJndW1lbnRzXG4gICAgICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgICAgICBhcmdzLndpbmRvd0lkID0gcmVzdWx0V2luZG93LmlkO1xuXG4gICAgICAgIC8vIEludm9rZSB0aGUgQUdNIG1ldGhvZFxuICAgICAgICBhZ20uaW52b2tlKGFjdGlvbiwgYXJncywgY29udGFpbmVyT2JqLmdldEFnbVRhcmdldCgpLCB7fSwgZnVsZmlsbGVkLCBlcnJvcik7XG5cbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKCkge1xuICAgICAgICAgICAgaGVscGVycy5pbnZva2VBZ21TdWNjZXNzQ2FsbGJhY2soc3VjY2VzcywgcmVzdWx0V2luZG93KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc3VsdFdpbmRvdyA9IHtcbiAgICAgICAgX2ludGVybmFsSWQ6IGludGVybmFsSWQsXG4gICAgICAgIF9jYWxsYmFja3M6IHt9LFxuXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyT2JqLm5hbWUsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIGFwcGxpY2F0aW9uOiBjb250YWluZXJPYmoubmFtZSArICcuJyArIG5hbWUsXG4gICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgYnV0dG9uczoge30sXG4gICAgICAgIHdpbmRvd1N0eWxlQXR0cmlidXRlczogc2V0V2luZG93U3R5bGVBdHRyaWJ1dGVzKHdpbmRvd1N0eWxlcyksXG5cbiAgICAgICAgb25BdmFpbGFibGU6IG9uQXZhaWxhYmxlLFxuICAgICAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgICAgICBvblVybENoYW5nZWQ6IG9uVXJsQ2hhbmdlZCxcbiAgICAgICAgb25UaXRsZUNoYW5nZWQ6IG9uVGl0bGVDaGFuZ2VkLFxuICAgICAgICBvblRhYkJ1dHRvbjogb25UYWJCdXR0b24sXG5cbiAgICAgICAgbWF4aW1pemU6IG1heGltaXplLFxuICAgICAgICByZXN0b3JlOiByZXN0b3JlLFxuICAgICAgICBtaW5pbWl6ZTogbWluaW1pemUsXG4gICAgICAgIG1heGltaXplUmVzdG9yZTogbWF4aW1pemVSZXN0b3JlLFxuICAgICAgICBjb2xsYXBzZTogY29sbGFwc2UsXG4gICAgICAgIGZvY3VzOiBhY3RpdmF0ZSxcbiAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgb3BlbmVkOiBvcGVuZWQsXG4gICAgICAgIGdldERldGFpbHM6IGdldERldGFpbHMsXG4gICAgICAgIG1vdmVSZXNpemU6IG1vdmVSZXNpemUsXG4gICAgICAgIHNldFRpdGxlOiBzZXRUaXRsZSxcbiAgICAgICAgc2V0U3R5bGU6IHNldFN0eWxlLFxuICAgICAgICBuYXZpZ2F0ZTogbmF2aWdhdGUsXG4gICAgICAgIGFkZFRhYkJ1dHRvbjogYWRkVGFiQnV0dG9uLFxuICAgICAgICBjbG9zZTogY2xvc2UsXG4gICAgICAgIGhhbmRsZVdpbmRvd0Nsb3NlOiBoYW5kbGVXaW5kb3dDbG9zZSxcbiAgICAgICAgdGl0bGVDaGFuZ2VkOiB0aXRsZUNoYW5nZWQsXG4gICAgICAgIHVybENoYW5nZWQ6IHVybENoYW5nZWQsXG5cbiAgICAgICAgLy8gZGVwcmVjYXRlc1xuICAgICAgICBzZXRfc3R5bGU6IGRlcHJlY2F0ZShzZXRTdHlsZSwgJ3dpbmRvdy5zZXRfc3R5bGUoKSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSB3aW5kb3cuc2V0U3R5bGUoKSBpbnN0ZWFkJyksXG4gICAgICAgIG9uX2F2YWlsYWJsZTogZGVwcmVjYXRlKG9uQXZhaWxhYmxlLCAnd2luZG93Lm9uX2F2YWlsYWJsZSgpIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIHdpbmRvdy5vbkF2YWlsYWJsZSgpIGluc3RlYWQnKSxcbiAgICAgICAgb25fY2xvc2U6IGRlcHJlY2F0ZShvbkNsb3NlLCAnd2luZG93Lm9uX2Nsb3NlKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2Ugd2luZG93Lm9uQ2xvc2UoKSBpbnN0ZWFkJyksXG4gICAgICAgIG9uX3VybF9jaGFuZ2VkOiBkZXByZWNhdGUob25VcmxDaGFuZ2VkLCAnd2luZG93Lm9uX3VybF9jaGFuZ2VkKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2Ugd2luZG93Lm9uVXJsQ2hhbmdlZCgpIGluc3RlYWQnKSxcbiAgICAgICAgc2V0X3RpdGxlOiBkZXByZWNhdGUoc2V0VGl0bGUsICd3aW5kb3cuc2V0X3RpdGxlKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2Ugd2luZG93LnNldFRpdGxlKCkgaW5zdGVhZCcpLFxuICAgICAgICBnZXRfZGV0YWlsczogZGVwcmVjYXRlKGdldERldGFpbHMsICd3aW5kb3cuZ2V0X2RldGFpbHMoKSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSB3aW5kb3cuZ2V0RGV0YWlscygpIGluc3RlYWQnKSxcbiAgICAgICAgbW92ZV9yZXNpemU6IGRlcHJlY2F0ZShtb3ZlUmVzaXplLCAnd2luZG93Lm1vdmVfcmVzaXplKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2Ugd2luZG93Lm1vdmVSZXNpemUoKSBpbnN0ZWFkJyksXG4gICAgICAgIG1heGltaXplX3Jlc3RvcmU6IGRlcHJlY2F0ZShtYXhpbWl6ZVJlc3RvcmUsICd3aW5kb3cubWF4aW1pemVfcmVzdG9yZSgpIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIHdpbmRvdy5tYXhpbWl6ZVJlc3RvcmUoKSBpbnN0ZWFkJylcblxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdFdpbmRvdztcbn1cbiIsInZhciBQYWNrYWdlSnNvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xudmFyIGRlcHJlY2F0ZSA9IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJyk7XG52YXIgd2luZG93RmFjdG9yeSA9IHJlcXVpcmUoJy4vd2luZG93Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG52YXIgd2luZG93cyA9IGZ1bmN0aW9uIChhZ20pIHtcbiAgICAndXNlIHN0cmljdCdcblxuICAgIHdpbmRvd0ZhY3RvcnkuaW5pdChhZ20pO1xuXG4gICAgaWYgKGdsb2JhbC5odG1sQ29udGFpbmVyICYmIGFnbS5zdWJzY3JpYmUpIHtcclxuICAgICAgICAvLyBPbmx5IGNvbnRhaW5lci5cclxuICAgICAgICBhZ20uc2VydmVyTWV0aG9kQWRkZWQoZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgICAgICAgIGlmICgocmVzcC5zZXJ2ZXIuYXBwbGljYXRpb24uaW5kZXhPZignSHRtbENvbnRhaW5lci4nKSAhPT0gLTEgJiYgcmVzcC5zZXJ2ZXIuYXBwbGljYXRpb24uaW5kZXhPZignLkludGVybmFsJykgIT09IC0xKSAmJiByZXNwLm1ldGhvZC5uYW1lLmluZGV4T2YoJ1Q0Mi5XbmQuV2luZG93U3RhdGVDaGFuZ2VkJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYWdtLnN1YnNjcmliZSgnVDQyLlduZC5XaW5kb3dTdGF0ZUNoYW5nZWQnLCB7IHRhcmdldDogJ2FsbCcgfSkudGhlbihmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS5vbkRhdGEoZnVuY3Rpb24gKHN0cmVhbURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVdpbmRvdyhzdHJlYW1EYXRhLmRhdGEsIG1hdGNoQ29udGFpbmVyKHN0cmVhbURhdGEuc2VydmVyLmFwcGxpY2F0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBhdHRhY2ggY2FsbGJhY2tzXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0cmVhbS5vbihcImVuZFwiLCBoYW5kbGVTdHJlYW1DbG9zZWQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzdHJlYW0ub24oXCJjbG9zZVwiLCBoYW5kbGVTdHJlYW1DbG9zZWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB3aW5kb3dzIHRoYXQgYXJlIHRyYWNrZWQgYnkgSUQgYW5kIHJlY2VpdmUgdXBkYXRlc1xuICAgIHZhciB3aW5kb3dzID0ge307XG4gICAgdmFyIGNvbnRhaW5lcnMgPSBbXTtcblxuICAgIGlmIChnbG9iYWwuaHRtbENvbnRhaW5lcikge1xuICAgICAgICB2YXIgbXlDb250YWluZXIgPSBjb25zdHJ1Y3RDb250YWluZXJPYmplY3QoaHRtbENvbnRhaW5lci5jb250YWluZXJOYW1lKTtcbiAgICAgICAgYWRkQ29udGFpbmVyKGNvbnRhaW5lcnMsIG15Q29udGFpbmVyKTtcbiAgICAgICAgY3JlYXRlV2luZG93KGh0bWxDb250YWluZXIuYnJvd3NlcldpbmRvd05hbWUsIG15Q29udGFpbmVyLCB3aW5kb3cubG9jYXRpb24uaHJlZiwgaHRtbENvbnRhaW5lci53aW5kb3dJZCwgaHRtbENvbnRhaW5lci53aW5kb3dTdHlsZUF0dHJpYnV0ZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuc3VyZUNvbnRhaW5lckF2YWlsaWFibGUoY29udGFpbmVyLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lckZvdW5kID0gbWF0Y2hDb250YWluZXIoY29udGFpbmVyKVxuICAgICAgICBpZiAoY29udGFpbmVyRm91bmQpIHtcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhjb250YWluZXJGb3VuZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJGb3VuZCA9IG1hdGNoQ29udGFpbmVyKGNvbnRhaW5lcilcbiAgICAgICAgICAgIGlmIChjb250YWluZXJGb3VuZCkge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhjb250YWluZXJGb3VuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMjAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hDb250YWluZXIoY29udGFpbmVySWRlbnRpZmllcikge1xuICAgICAgICBpZiAoY29udGFpbmVySWRlbnRpZmllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyc1swXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGFpbmVycy5maWx0ZXIoZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5zaG9ydE5hbWUgPT09IGNvbnRhaW5lcklkZW50aWZpZXIgfHxcbiAgICAgICAgICAgICAgICBjb250YWluZXIubmFtZSA9PT0gY29udGFpbmVySWRlbnRpZmllciB8fFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZ21BcHBsaWNhdGlvbiA9PT0gY29udGFpbmVySWRlbnRpZmllcjtcbiAgICAgICAgfSlbMF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uc3RydWN0Q29udGFpbmVyT2JqZWN0KGNvbnRhaW5lcklkZW50aXR5KSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGNvbnRhaW5lcklkZW50aXR5LnNwbGl0KCcuJyk7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHBhcnRzLnNwbGljZSgwLCAwLCAnSHRtbENvbnRhaW5lcicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFnbUFwcGxpY2F0aW9uID0gcGFydHNbMF0gKyAnLicgKyBwYXJ0c1sxXSArICcuJyArIHBhcnRzWzJdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG9ydE5hbWU6IHBhcnRzWzJdLFxuICAgICAgICAgICAgbmFtZTogcGFydHNbMV0gKyAnLicgKyBwYXJ0c1syXSxcbiAgICAgICAgICAgIGFnbUFwcGxpY2F0aW9uOiBhZ21BcHBsaWNhdGlvbixcbiAgICAgICAgICAgIGdldEFnbVRhcmdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGFwcGxpY2F0aW9uOiBhZ21BcHBsaWNhdGlvbiB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQ29udGFpbmVyKGNvbnRhaW5lcnMsIGNvbnRhaW5lcikge1xuICAgICAgICBpZiAoY29udGFpbmVycy5maWx0ZXIoZnVuY3Rpb24oY29udCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnQuc2hvcnROYW1lID09PSBjb250YWluZXIuc2hvcnROYW1lICYmXG4gICAgICAgICAgICBjb250Lm5hbWUgPT09IGNvbnRhaW5lci5uYW1lICYmXG4gICAgICAgICAgICBjb250LmFnbUFwcGxpY2F0aW9uID09PSBjb250YWluZXIuYWdtQXBwbGljYXRpb25cbiAgICAgICAgfSkubGVuZ3RoICA9PT0gMCkge1xuICAgICAgICAgICAgY29udGFpbmVycy5wdXNoKGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250YWluZXJOYW1lKSB7XG4gICAgICAgIGlmIChjYWxsYmFja3MuY29udGFpbmVyc0NhbGxiYWNrc1tjb250YWluZXJOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzLmFsbENvbnRhaW5lcnNDYWxsYmFja3MuY29uY2F0KGNhbGxiYWNrcy5jb250YWluZXJzQ2FsbGJhY2tzW2NvbnRhaW5lck5hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFja3MuYWxsQ29udGFpbmVyc0NhbGxiYWNrcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1dENhbGxiYWNrcyhnbG9iYWxDYWxsYmFja3MsIGNhbGxiYWNrLCBjb250YWluZXIpIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBnbG9iYWxDYWxsYmFja3MuYWxsQ29udGFpbmVyc0NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChnbG9iYWxDYWxsYmFja3MuY29udGFpbmVyc0NhbGxiYWNrc1tjb250YWluZXJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxDYWxsYmFja3MuY29udGFpbmVyc0NhbGxiYWNrc1tjb250YWluZXJdID0gW2NhbGxiYWNrXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsQ2FsbGJhY2tzLmNvbnRhaW5lcnNDYWxsYmFja3NbY29udGFpbmVyXS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpbmRvdyh3aW5kb3dJbmZvLCBjb250YWluZXJOYW1lKSB7XG4gICAgICAgIHZhciB0aGVXaW5kb3cgPSBnZXRXaW5kb3cod2luZG93SW5mby53aW5kb3dOYW1lLCBjb250YWluZXJOYW1lLCB3aW5kb3dJbmZvLnVybCwgd2luZG93SW5mby53aW5kb3dJZCwgd2luZG93SW5mby53aW5kb3dTdHlsZUF0dHJpYnV0ZXMsIHdpbmRvd0luZm8ud2luZG93VGl0bGUpO1xuXG4gICAgICAgIGlmICh0aGVXaW5kb3cuaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhlV2luZG93LmlkID0gd2luZG93SW5mby53aW5kb3dJZDtcbiAgICAgICAgICAgIGhlbHBlcnMuZXhlY0NhbGxiYWNrcyh0aGVXaW5kb3cuX2NhbGxiYWNrcy5vbkF2YWlsYWJsZSwgdGhlV2luZG93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aW5kb3dJbmZvLnN0YXRlID09PSAnVGl0bGVDaGFuZ2VkJykge1xuICAgICAgICAgICAgdGhlV2luZG93LnRpdGxlQ2hhbmdlZCh3aW5kb3dJbmZvLndpbmRvd1RpdGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aW5kb3dJbmZvLnN0YXRlID09PSAnVXJsQ2hhbmdlZCcpIHtcbiAgICAgICAgICAgIHRoZVdpbmRvdy51cmxDaGFuZ2VkKHdpbmRvd0luZm8udXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aW5kb3dJbmZvLnN0YXRlID09PSAnQ3JlYXRlZCcpIHtcbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgZ2xvYmFsIFwid2luZG93X2FkZGVkXCIgY2FsbGJhY2tzXG4gICAgICAgICAgICBoZWxwZXJzLmV4ZWNDYWxsYmFja3MoZ2V0Q2FsbGJhY2tzKHdpbmRvd0FkZGVkQ2FsbGJhY2tzLCBjb250YWluZXJOYW1lKSwgdGhlV2luZG93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENsZWFyIHRoZSB3aW5kb3cgb24gY2xvc2UgZXZlbnRcbiAgICAgICAgaWYgKHdpbmRvd0luZm8uc3RhdGUgPT09ICdDbG9zZWQnKSB7XG4gICAgICAgICAgICAvLyBFeGVjdXRlIGdsb2JhbCBcIndpbmRvd19yZW1vdmVkXCIgY2FsbGJhY2tzXG4gICAgICAgICAgICBoZWxwZXJzLmV4ZWNDYWxsYmFja3MoZ2V0Q2FsbGJhY2tzKHdpbmRvd1JlbW92ZWRDYWxsYmFja3MsIGNvbnRhaW5lck5hbWUpLCB0aGVXaW5kb3cpO1xuXG4gICAgICAgICAgICBkZWxldGUgd2luZG93c1t0aGVXaW5kb3cuX2ludGVybmFsSWRdO1xuXG4gICAgICAgICAgICB0aGVXaW5kb3cuaGFuZGxlV2luZG93Q2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJ1dHRvbkNsaWNrZWRcbiAgICAgICAgaWYgKHdpbmRvd0luZm8uc3RhdGUgPT09ICdCdXR0b25DbGlja2VkJykge1xuICAgICAgICAgICAgLy8gRXhlY3V0ZSBnbG9iYWwgXCJ3aW5kb3dfYWRkZWRcIiBjYWxsYmFja3NcbiAgICAgICAgICAgIGlmICh0aGVXaW5kb3cuYnV0dG9ucyAhPT0gdW5kZWZpbmVkICYmIE9iamVjdC5rZXlzKHRoZVdpbmRvdy5idXR0b25zKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhlV2luZG93Ll9jYWxsYmFja3Mub25UYWJCdXR0b24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhlbHBlcnMuZXhlY0NhbGxiYWNrcyh0aGVXaW5kb3cuX2NhbGxiYWNrcy5vblRhYkJ1dHRvbiwgd2luZG93SW5mby5idXR0b25JZCwgdGhlV2luZG93LmJ1dHRvbnNbd2luZG93SW5mby5idXR0b25JZF0uaW5mbyk7XG5cbiAgICAgICAgICAgICAgICB0aGVXaW5kb3cuX2NhbGxiYWNrcy5vblRhYkJ1dHRvbi5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh3aW5kb3dJbmZvLmJ1dHRvbklkLCB0aGVXaW5kb3cuYnV0dG9uc1t3aW5kb3dJbmZvLmJ1dHRvbklkXS5pbmZvKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhIGRpY3Rpb25hcnkgdG8gc3RvcmUgdGhlIGNhbGxiYWNrcyBmb3IgdGhlIG1ldGhvZCBcIndpbmRvd19hZGRlZFwiLlxuICAgIHZhciB3aW5kb3dBZGRlZENhbGxiYWNrcyA9IHtcbiAgICAgICAgY29udGFpbmVyc0NhbGxiYWNrczoge30sXG4gICAgICAgIGFsbENvbnRhaW5lcnNDYWxsYmFja3M6IFtdXG4gICAgfTtcblxuICAgIC8vIENyZWF0ZSBhIGRpY3Rpb25hcnkgdG8gc3RvcmUgdGhlIGNhbGxiYWNrcyBmb3IgdGhlIG1ldGhvZCBcIndpbmRvd19yZW1vdmVkXCIuXG4gICAgdmFyIHdpbmRvd1JlbW92ZWRDYWxsYmFja3MgPSB7XG4gICAgICAgIGNvbnRhaW5lcnNDYWxsYmFja3M6IHt9LFxuICAgICAgICBhbGxDb250YWluZXJzQ2FsbGJhY2tzOiBbXVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVXaW5kb3dJZChuYW1lLCBjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5hZ21BcHBsaWNhdGlvbiArICcuJyArIG5hbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlV2luZG93KG5hbWUsIGNvbnRhaW5lciwgdXJsLCBpZCwgd2luZG93U3R5bGVzLCB0aXRsZSkge1xuICAgICAgICB2YXIgd2luZG93SWQgPSBjcmVhdGVXaW5kb3dJZChuYW1lLCBjb250YWluZXIpO1xuXG4gICAgICAgIHZhciB3aW5kb3dPYmogPSB3aW5kb3dGYWN0b3J5LmNyZWF0ZShpZCwgd2luZG93SWQsIG5hbWUsIGNvbnRhaW5lciwgdXJsLCB0aXRsZSwgd2luZG93U3R5bGVzKTtcblxuICAgICAgICB3aW5kb3dzW3dpbmRvd0lkXSA9IHdpbmRvd09iajtcblxuICAgICAgICByZXR1cm4gd2luZG93T2JqO1xuICAgIH1cblxuICAgIC8vIEl0IGlzIG5vdCBndWFyYW50ZWVkIHRvIHJldHVybiB0aGUgd2luZG93IHdpdGggdGhlIHNhbWUgVVJMIGFuZCBJRFxuICAgIGZ1bmN0aW9uIGdldFdpbmRvdyhuYW1lLCBjb250YWluZXIsIHVybCwgaWQsIHdpbmRvd1N0eWxlcywgdGl0bGUpIHtcblxuICAgICAgICB2YXIgd2luZG93SWQgPSBjcmVhdGVXaW5kb3dJZChuYW1lLCBjb250YWluZXIpO1xuXG4gICAgICAgIHZhciBleGlzdGluZ1dpbmRvdyA9IHdpbmRvd3Nbd2luZG93SWRdO1xuXG4gICAgICAgIGlmIChleGlzdGluZ1dpbmRvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdXaW5kb3c7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJbml0IG9iamVjdFxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVdpbmRvdyhuYW1lLCBjb250YWluZXIsIHVybCwgaWQsIHdpbmRvd1N0eWxlcywgdGl0bGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbXkoKSB7XG4gICAgICAgIHZhciBoO1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGggPSB3aW5kb3cuaHRtbENvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgY3VycmVudCB3aW5kb3cgKHRoZSBvbncgaW4gd2hpY2ggeW91ciBhcHBsaWNhdGlvbiBjdXJyZW50bHkgcmVzaWRlcykuXG4gICAgICAgIGlmIChoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0V2luZG93KGguYnJvd3NlcldpbmRvd05hbWUsIG1hdGNoQ29udGFpbmVyKGguY29udGFpbmVyTmFtZSksIHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBoLndpbmRvd0lkLCBoLndpbmRvd1N0eWxlQXR0cmlidXRlcywgZG9jdW1lbnQudGl0bGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb3BlbihuYW1lLCB1cmwsIGNvbnRhaW5lciwgZGltZW5zaW9ucywgc3R5bGUsIHN1Y2Nlc3MsIGVycm9yKSB7XG4gICAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lciB8fCAnSW50ZXJuYWwnO1xuICAgICAgICBlbnN1cmVDb250YWluZXJBdmFpbGlhYmxlKGNvbnRhaW5lciwgZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgcmV0dXJuIGdldFdpbmRvdyhuYW1lLCBjb250YWluZXIsIHVybCwgdW5kZWZpbmVkLCBzdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgLm9wZW4oZGltZW5zaW9ucywgc3R5bGUsIHN1Y2Nlc3MsIGVycm9yKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXJyb3IoJ2NhbiBub3QgZmluZCBjb250YWluZXInKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kIChuYW1lLCBjb250YWluZXIsIHN1Y2Nlc3MpIHtcblxuICAgICAgICBjb250YWluZXIgPSBtYXRjaENvbnRhaW5lcihjb250YWluZXIpO1xuXG4gICAgICAgIHZhciB3aW5kb3dzRm9yTGlzdGluZyA9IE9iamVjdC5rZXlzKHdpbmRvd3MpLnJlZHVjZShmdW5jdGlvbiAobWVtbywgd2luSWQpIHtcbiAgICAgICAgICAgIHZhciB3aW5kb3cgPSB3aW5kb3dzW3dpbklkXTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuY29udGFpbmVyID09PSBjb250YWluZXIubmFtZSAmJiB3aW5kb3cubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIG1lbW8ucHVzaCh3aW5kb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICAgIH0sIFtdKTtcblxuICAgICAgICBpZiAodHlwZW9mIHN1Y2Nlc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3dzRm9yTGlzdGluZ1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1Y2Nlc3Mod2luZG93c0Zvckxpc3RpbmdbMF0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3QgKGNvbnRhaW5lciwgc3VjY2Vzcykge1xuXG4gICAgICAgIGNvbnRhaW5lciA9IG1hdGNoQ29udGFpbmVyKGNvbnRhaW5lcik7XG5cbiAgICAgICAgdmFyIHdpbmRvd3NGb3JMaXN0aW5nID0gT2JqZWN0LmtleXMod2luZG93cykucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCB3aW5JZCkge1xuICAgICAgICAgICAgdmFyIHdpbmRvdyA9IHdpbmRvd3Nbd2luSWRdO1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5jb250YWluZXIgPT09IGNvbnRhaW5lci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgbWVtby5wdXNoKHdpbmRvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgICAgfSwgW10pO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3VjY2VzcyAhPT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICByZXR1cm4gd2luZG93c0Zvckxpc3Rpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBzdWNjZXNzKHdpbmRvd3NGb3JMaXN0aW5nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3aW5kb3dBZGRlZChjYWxsYmFjaywgY29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBBZGQgdGhlIGN1cnJlbnQgY2FsbGJhY2sgdG8gdGhlIGNhbGxiYWNrIGRpY3Rpb25hcnkuXG4gICAgICAgIHB1dENhbGxiYWNrcyh3aW5kb3dBZGRlZENhbGxiYWNrcywgY2FsbGJhY2ssIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAvLyBFeGVjdXRlIGFsbCB0aGUgY2FsbGJhY2tzIGZvciBhbHJlYWR5IGV4aXN0aW5nIHdpbmRvd3MuXG4gICAgICAgICAgICAvLyBHZXQgYWxsIGV4aXN0aW5nIGh0bWwgY29udGFpbmVycy5cbiAgICAgICAgYXBpLmNvbnRhaW5lckFkZGVkKGZ1bmN0aW9uIChzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBpcyBzdWJzY3JpYmVkIHRvIHRoZSBjb250YWluZXJcbiAgICAgICAgICAgIGlmIChjb250YWluZXIgPT09IHVuZGVmaW5lZCB8fCBjb250YWluZXIgPT09IHNlcnZlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBsaXN0IGFsbCB0aGUgd2luZG93cyBpbiB0aGUgY29udGFpbmVyLlxuICAgICAgICAgICAgICAgIGFwaS5saXN0KHNlcnZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChsaXN0T2ZXaW5kb3dzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhlY3V0ZSB0aGUgY2FsbGJhY2sgZm9yIGVhY2ggd2luZG93LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RPZldpbmRvd3MuZm9yRWFjaChmdW5jdGlvbiAoZXhpc3RpbmdXaW5kb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXhpc3RpbmdXaW5kb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVycm9yIGNhbGxiYWNrIGlmIHRoZSB3aW5kb3dzIGNhbm5vdCBiZSBsaXN0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmFibGUgdG8gbG9hZCBleGlzdGluZyB3aW5kb3dzLiAnICsgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2luZG93UmVtb3ZlZChjYWxsYmFjaywgY29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBBZGQgdGhlIGN1cnJlbnQgY2FsbGJhY2sgdG8gdGhlIGNhbGxiYWNrIGRpY3Rpb25hcnkuXG4gICAgICAgIHB1dENhbGxiYWNrcyh3aW5kb3dSZW1vdmVkQ2FsbGJhY2tzLCBjYWxsYmFjaywgY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250YWluZXJBZGRlZChjYWxsYmFjaykge1xuICAgICAgICBhZ20uc2VydmVyQWRkZWQoZnVuY3Rpb24gKHNlcnZlcikge1xuICAgICAgICAgICAgaWYgKHNlcnZlci5hcHBsaWNhdGlvbi5pbmRleE9mKCdIdG1sQ29udGFpbmVyLicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBjb25zdHJ1Y3RDb250YWluZXJPYmplY3Qoc2VydmVyLmFwcGxpY2F0aW9uKTtcbiAgICAgICAgICAgICAgICBhZGRDb250YWluZXIoY29udGFpbmVycywgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBoZWxwZXJzLmludm9rZUFnbVN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgc2VydmVyLmFwcGxpY2F0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udGFpbmVyUmVtb3ZlZChjYWxsYmFjaykge1xuICAgICAgICBhZ20uc2VydmVyUmVtb3ZlZChmdW5jdGlvbiAoc2VydmVyKSB7XG4gICAgICAgICAgICBpZiAoc2VydmVyLmFwcGxpY2F0aW9uLmluZGV4T2YoJ0h0bWxDb250YWluZXIuJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaGVscGVycy5pbnZva2VBZ21TdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIHNlcnZlci5hcHBsaWNhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRoZSBBUEkgaXRzZWxmXG4gICAgdmFyIGFwaSA9IHtcbiAgICAgICAgbXk6IG15LFxuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBmaW5kOiBmaW5kLFxuICAgICAgICBsaXN0OiBsaXN0LFxuICAgICAgICB3aW5kb3dBZGRlZDogd2luZG93QWRkZWQsXG4gICAgICAgIHdpbmRvd1JlbW92ZWQ6IHdpbmRvd1JlbW92ZWQsXG4gICAgICAgIGNvbnRhaW5lckFkZGVkOiBjb250YWluZXJBZGRlZCxcbiAgICAgICAgY29udGFpbmVyUmVtb3ZlZDogY29udGFpbmVyUmVtb3ZlZCxcblxuICAgICAgICBfZnJvbV9ldmVudDogZnVuY3Rpb24obmFtZSwgY29udGFpbmVyLCB1cmwsIGlkLCB3aW5kb3dTdHlsZXMsIHRpdGxlKSB7XG4gICAgICAgICAgICBjb250YWluZXIgPSBtYXRjaENvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGdldFdpbmRvdyhuYW1lLCBjb250YWluZXIsIHVybCwgaWQsIHdpbmRvd1N0eWxlcywgdGl0bGUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGRlcHJlY2F0ZXNcbiAgICBhcGkud2luZG93X2FkZGVkID0gZGVwcmVjYXRlKGFwaS53aW5kb3dBZGRlZCwgJ3dpbmRvdy53aW5kb3dfYWRkZWQoKSBpcyBkZXByZWNhdGVkIGFuZCBtaWdodCBiZSByZW1vdmVkIGZyb20gZnV0dXJlIHZlcnNpb25zIG9mIGdsdWUuIFVzZSB3aW5kb3cud2luZG93QWRkZWQoKSBpbnN0ZWFkJyk7XG4gICAgYXBpLndpbmRvd19yZW1vdmVkID0gZGVwcmVjYXRlKGFwaS53aW5kb3dSZW1vdmVkLCAnd2luZG93LndpbmRvd19yZW1vdmVkKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2Ugd2luZG93LndpbmRvd1JlbW92ZWQoKSBpbnN0ZWFkJyk7XG4gICAgYXBpLmNvbnRhaW5lcl9hZGRlZCA9IGRlcHJlY2F0ZShhcGkuY29udGFpbmVyQWRkZWQsICd3aW5kb3cuY29udGFpbmVyX2FkZGVkKCkgaXMgZGVwcmVjYXRlZCBhbmQgbWlnaHQgYmUgcmVtb3ZlZCBmcm9tIGZ1dHVyZSB2ZXJzaW9ucyBvZiBnbHVlLiBVc2Ugd2luZG93LmNvbnRhaW5lckFkZGVkKCkgaW5zdGVhZCcpO1xuICAgIGFwaS5jb250YWluZXJfcmVtb3ZlZCA9IGRlcHJlY2F0ZShhcGkuY29udGFpbmVyUmVtb3ZlZCwgJ3dpbmRvdy5jb250YWluZXJfcmVtb3ZlZCgpIGlzIGRlcHJlY2F0ZWQgYW5kIG1pZ2h0IGJlIHJlbW92ZWQgZnJvbSBmdXR1cmUgdmVyc2lvbnMgb2YgZ2x1ZS4gVXNlIHdpbmRvdy5jb250YWluZXJSZW1vdmVkKCkgaW5zdGVhZCcpO1xuXG4gICAgYXBpLnZlcnNpb24gPSBQYWNrYWdlSnNvbi52ZXJzaW9uO1xuXG4gICAgcmV0dXJuIGFwaTtcbn07XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy50aWNrNDIgPSB3aW5kb3cudGljazQyIHx8IHt9O1xuICAgIHdpbmRvdy50aWNrNDIud2luZG93cyA9IHdpbmRvd3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2luZG93cztcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJfYXJnc1wiOiBbXG4gICAgW1xuICAgICAgXCJ0aWNrNDItd2luZG93c0AyLjIuNFwiLFxuICAgICAgXCJDOlxcXFx3b3JrXFxcXHN0YXNoXFxcXEdMVUUtZGV2XFxcXGpzLWdsdWVcIlxuICAgIF1cbiAgXSxcbiAgXCJfZnJvbVwiOiBcInRpY2s0Mi13aW5kb3dzQDIuMi40XCIsXG4gIFwiX2lkXCI6IFwidGljazQyLXdpbmRvd3NAMi4yLjRcIixcbiAgXCJfaW5DYWNoZVwiOiB0cnVlLFxuICBcIl9pbnN0YWxsYWJsZVwiOiB0cnVlLFxuICBcIl9sb2NhdGlvblwiOiBcIi90aWNrNDItd2luZG93c1wiLFxuICBcIl9ub2RlVmVyc2lvblwiOiBcIjYuMC4wXCIsXG4gIFwiX25wbVVzZXJcIjoge30sXG4gIFwiX25wbVZlcnNpb25cIjogXCIzLjEwLjVcIixcbiAgXCJfcGhhbnRvbUNoaWxkcmVuXCI6IHt9LFxuICBcIl9yZXF1ZXN0ZWRcIjoge1xuICAgIFwibmFtZVwiOiBcInRpY2s0Mi13aW5kb3dzXCIsXG4gICAgXCJyYXdcIjogXCJ0aWNrNDItd2luZG93c0AyLjIuNFwiLFxuICAgIFwicmF3U3BlY1wiOiBcIjIuMi40XCIsXG4gICAgXCJzY29wZVwiOiBudWxsLFxuICAgIFwic3BlY1wiOiBcIjIuMi40XCIsXG4gICAgXCJ0eXBlXCI6IFwidmVyc2lvblwiXG4gIH0sXG4gIFwiX3JlcXVpcmVkQnlcIjogW1xuICAgIFwiL1wiXG4gIF0sXG4gIFwiX3Jlc29sdmVkXCI6IFwiaHR0cDovLzE5Mi4xNjguMC4yMzQ6NDg3My90aWNrNDItd2luZG93cy8tL3RpY2s0Mi13aW5kb3dzLTIuMi40LnRnelwiLFxuICBcIl9zaGFzdW1cIjogXCIwZmI0YzIyYTFmY2M2OWI1NmU5MDIzMmNiMDhiYTUzMGUzODg4YTBmXCIsXG4gIFwiX3Nocmlua3dyYXBcIjogbnVsbCxcbiAgXCJfc3BlY1wiOiBcInRpY2s0Mi13aW5kb3dzQDIuMi40XCIsXG4gIFwiX3doZXJlXCI6IFwiQzpcXFxcd29ya1xcXFxzdGFzaFxcXFxHTFVFLWRldlxcXFxqcy1nbHVlXCIsXG4gIFwiYXV0aG9yXCI6IHtcbiAgICBcIm5hbWVcIjogXCJUaWNrNDJcIlxuICB9LFxuICBcImJpblwiOiB7XG4gICAgXCJidWlsZFwiOiBcIi4vYmluL2J1aWxkLmpzXCIsXG4gICAgXCJjbGVhblwiOiBcIi4vYmluL2NsZWFuLmpzXCIsXG4gICAgXCJmaWxlLXZlcnNpb25pZnlcIjogXCIuL2Jpbi9maWxlLXZlcnNpb25pZnkuanNcIixcbiAgICBcIm1pbmlmeVwiOiBcIi4vYmluL21pbmlmeS5qc1wiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImVzNi1wcm9taXNlXCI6IFwiXjMuMC4yXCIsXG4gICAgXCJ1dGlsLWRlcHJlY2F0ZVwiOiBcIl4xLjAuMlwiXG4gIH0sXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBIHdpbmRvd2luZyBBUEkgZm9yIHRoZSBUaWNrNDIgSFRNTCBDb250YWluZXJcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYmxhbmtldFwiOiBcIl4xLjEuNlwiLFxuICAgIFwiYnJvd3NlcmlmeVwiOiBcIl4xMy4wLjBcIixcbiAgICBcImJyb3dzZXJpZnktcmVwbGFjaWZ5XCI6IFwiXjAuMC40XCIsXG4gICAgXCJicm93c2VyaWZ5LXZlcnNpb25pZnlcIjogXCJeMS4wLjRcIixcbiAgICBcImVzbGludFwiOiBcIl4zLjEuMVwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy1zdGFuZGFyZFwiOiBcIl41LjMuNVwiLFxuICAgIFwiZXNsaW50LWNvbmZpZy10aWNrNDJcIjogXCJeMS4wLjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcHJvbWlzZVwiOiBcIl4yLjAuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zdGFuZGFyZFwiOiBcIl4yLjAuMFwiLFxuICAgIFwiZnNcIjogXCIwLjAuMlwiLFxuICAgIFwianNjc1wiOiBcIl4zLjAuN1wiLFxuICAgIFwianNkb21cIjogXCJeOC4xLjBcIixcbiAgICBcImpzaGludFwiOiBcIl4yLjkuMVwiLFxuICAgIFwibWluaWZ5aWZ5XCI6IFwiXjcuMy4yXCIsXG4gICAgXCJvbmNoYW5nZVwiOiBcIl4yLjEuMlwiLFxuICAgIFwicGhhbnRvbWpzXCI6IFwiXjEuOS4xMlwiLFxuICAgIFwicXVuaXRqc1wiOiBcIl4xLjE1LjBcIixcbiAgICBcInNoZWxsanNcIjogXCJeMC42LjBcIlxuICB9LFxuICBcImRpcmVjdG9yaWVzXCI6IHtcbiAgICBcInRlc3RcIjogXCJ0ZXN0c1wiXG4gIH0sXG4gIFwiZGlzdFwiOiB7XG4gICAgXCJzaGFzdW1cIjogXCIwZmI0YzIyYTFmY2M2OWI1NmU5MDIzMmNiMDhiYTUzMGUzODg4YTBmXCIsXG4gICAgXCJ0YXJiYWxsXCI6IFwiaHR0cDovLzE5Mi4xNjguMC4yMzQ6NDg3My90aWNrNDItd2luZG93cy8tL3RpY2s0Mi13aW5kb3dzLTIuMi40LnRnelwiXG4gIH0sXG4gIFwiZ2l0SGVhZFwiOiBcIjFmZDY5ODM5NTkxOTNhMjJiODU0YzRiM2NkMjI5ZjZmODFjY2ZiZTRcIixcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCIsXG4gIFwibWFpblwiOiBcImxpYnJhcnkvd2luZG93cy5qc1wiLFxuICBcIm5hbWVcIjogXCJ0aWNrNDItd2luZG93c1wiLFxuICBcIm9wdGlvbmFsRGVwZW5kZW5jaWVzXCI6IHt9LFxuICBcInJlYWRtZVwiOiBcIkVSUk9SOiBObyBSRUFETUUgZGF0YSBmb3VuZCFcIixcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vc3Rhc2gudGljazQyLmNvbTo4NDQzL3NjbS9vZmd3L2pzLXdpbmRvd3MuZ2l0XCJcbiAgfSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJ1aWxkXCI6IFwibnBtIHJ1biBlc2xpbnQgJiYgbm9kZSBiaW4vY2xlYW4uanMgJiYgbm9kZSBiaW4vYnVpbGQuanMgJiYgbm9kZSBiaW4vbWluaWZ5ICYmIG5vZGUgYmluL2ZpbGUtdmVyc2lvbmlmeVwiLFxuICAgIFwiZXNsaW50XCI6IFwiZXNsaW50IGxpYnJhcnlcIixcbiAgICBcImVzbGludDpmaXhcIjogXCJlc2xpbnQgbGlicmFyeSAtLWZpeFwiLFxuICAgIFwicHJlcHVibGlzaFwiOiBcIm5wbSB1cGRhdGUgJiBucG0gcnVuIGJ1aWxkXCIsXG4gICAgXCJ0ZXN0XCI6IFwibnBtIHJ1biBlc2xpbnQgJiYgbW9jaGEgLS1yZXF1aXJlIC4vdGVzdC90ZXN0X2hlbHBlciBcXFwidGVzdC8qKi8qLmpzXFxcIlwiLFxuICAgIFwid2F0Y2hcIjogXCJvbmNoYW5nZSBcXFwiLi9saWJyYXJ5LyouanNcXFwiIC1pdiAtZSBcXFwiLi9iaW5cXFwiIC0tIG5wbSBydW4gYnVpbGRcIlxuICB9LFxuICBcInZlcnNpb25cIjogXCIyLjIuNFwiXG59XG4iLCIvKiFcbkNvcHlyaWdodCAoQykgMjAxNSBieSBXZWJSZWZsZWN0aW9uXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZShmaW5kLCByZXBsYWNlcik7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIucmVwbGFjZShwbHVzLCAnICcpKTtcbn1cblxuZnVuY3Rpb24gVVJMU2VhcmNoUGFyYW1zKHF1ZXJ5KSB7XG4gIHRoaXNbc2VjcmV0XSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICghcXVlcnkpIHJldHVybjtcbiAgZm9yICh2YXJcbiAgICBpbmRleCwgdmFsdWUsXG4gICAgcGFpcnMgPSAocXVlcnkgfHwgJycpLnNwbGl0KCcmJyksXG4gICAgaSA9IDAsXG4gICAgbGVuZ3RoID0gcGFpcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKytcbiAgKSB7XG4gICAgdmFsdWUgPSBwYWlyc1tpXTtcbiAgICBpbmRleCA9IHZhbHVlLmluZGV4T2YoJz0nKTtcbiAgICBpZiAoLTEgPCBpbmRleCkge1xuICAgICAgdGhpcy5hcHBlbmQoXG4gICAgICAgIGRlY29kZSh2YWx1ZS5zbGljZSgwLCBpbmRleCkpLFxuICAgICAgICBkZWNvZGUodmFsdWUuc2xpY2UoaW5kZXggKyAxKSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhclxuICBVUkxTZWFyY2hQYXJhbXNQcm90byA9IFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUsXG4gIGZpbmQgPSAvWyEnXFwoXFwpfl18JTIwfCUwMC9nLFxuICBwbHVzID0gL1xcKy9nLFxuICByZXBsYWNlID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfSxcbiAgcmVwbGFjZXIgPSBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gcmVwbGFjZVttYXRjaF07XG4gIH0sXG4gIGl0ZXJhYmxlID0gaXNJdGVyYWJsZSgpLFxuICBzZWNyZXQgPSAnX19VUkxTZWFyY2hQYXJhbXNfXzonICsgTWF0aC5yYW5kb20oKVxuO1xuXG5mdW5jdGlvbiBpc0l0ZXJhYmxlKCkge1xuICB0cnkge1xuICAgIHJldHVybiAhIVN5bWJvbC5pdGVyYXRvcjtcbiAgfSBjYXRjaChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5VUkxTZWFyY2hQYXJhbXNQcm90by5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgdmFyIGRpY3QgPSB0aGlzW3NlY3JldF07XG4gIGlmIChuYW1lIGluIGRpY3QpIHtcbiAgICBkaWN0W25hbWVdLnB1c2goJycgKyB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGljdFtuYW1lXSA9IFsnJyArIHZhbHVlXTtcbiAgfVxufTtcblxuVVJMU2VhcmNoUGFyYW1zUHJvdG8uZGVsZXRlID0gZnVuY3Rpb24gZGVsKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXNbc2VjcmV0XVtuYW1lXTtcbn07XG5cblVSTFNlYXJjaFBhcmFtc1Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gIHZhciBkaWN0ID0gdGhpc1tzZWNyZXRdO1xuICByZXR1cm4gbmFtZSBpbiBkaWN0ID8gZGljdFtuYW1lXVswXSA6IG51bGw7XG59O1xuXG5VUkxTZWFyY2hQYXJhbXNQcm90by5nZXRBbGwgPSBmdW5jdGlvbiBnZXRBbGwobmFtZSkge1xuICB2YXIgZGljdCA9IHRoaXNbc2VjcmV0XTtcbiAgcmV0dXJuIG5hbWUgaW4gZGljdCA/IGRpY3RbbmFtZV0uc2xpY2UoMCkgOiBbXTtcbn07XG5cblVSTFNlYXJjaFBhcmFtc1Byb3RvLmhhcyA9IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gIHJldHVybiBuYW1lIGluIHRoaXNbc2VjcmV0XTtcbn07XG5cblVSTFNlYXJjaFBhcmFtc1Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICB0aGlzW3NlY3JldF1bbmFtZV0gPSBbJycgKyB2YWx1ZV07XG59O1xuXG5VUkxTZWFyY2hQYXJhbXNQcm90by5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykge1xuICB2YXIgZGljdCA9IHRoaXNbc2VjcmV0XTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGljdCkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgZGljdFtuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbHVlLCBuYW1lLCB0aGlzKTtcbiAgICB9LCB0aGlzKTtcbiAgfSwgdGhpcyk7XG59O1xuXG5VUkxTZWFyY2hQYXJhbXNQcm90by5rZXlzID0gZnVuY3Rpb24ga2V5cygpIHtcbiAgdmFyIGl0ZW1zID0gW107XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpOyB9KTtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKTtcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3I7XG59O1xuXG5VUkxTZWFyY2hQYXJhbXNQcm90by52YWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gIHZhciBpdGVtcyA9IFtdO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSk7IH0pO1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpO1xuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9O1xuICAgIH1cbiAgfTtcblxuICBpZiAoaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvcjtcbn07XG5cblVSTFNlYXJjaFBhcmFtc1Byb3RvLmVudHJpZXMgPSBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSk7IH0pO1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpO1xuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9O1xuICAgIH1cbiAgfTtcblxuICBpZiAoaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvcjtcbn07XG5cbmlmIChpdGVyYWJsZSkge1xuICBVUkxTZWFyY2hQYXJhbXNQcm90b1tTeW1ib2wuaXRlcmF0b3JdID0gVVJMU2VhcmNoUGFyYW1zUHJvdG8uZW50cmllcztcbn1cblxuLypcblVSTFNlYXJjaFBhcmFtc1Byb3RvLnRvQm9keSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IEJsb2IoXG4gICAgW3RoaXMudG9TdHJpbmcoKV0sXG4gICAge3R5cGU6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnfVxuICApO1xufTtcbiovXG5cblVSTFNlYXJjaFBhcmFtc1Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgcmV0dXJuIHt9O1xufTtcblxuVVJMU2VhcmNoUGFyYW1zUHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIGRpY3QgPSB0aGlzW3NlY3JldF0sIHF1ZXJ5ID0gW10sIGksIGtleSwgbmFtZSwgdmFsdWU7XG4gIGZvciAoa2V5IGluIGRpY3QpIHtcbiAgICBuYW1lID0gZW5jb2RlKGtleSk7XG4gICAgZm9yIChcbiAgICAgIGkgPSAwLFxuICAgICAgdmFsdWUgPSBkaWN0W2tleV07XG4gICAgICBpIDwgdmFsdWUubGVuZ3RoOyBpKytcbiAgICApIHtcbiAgICAgIHF1ZXJ5LnB1c2gobmFtZSArICc9JyArIGVuY29kZSh2YWx1ZVtpXSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcXVlcnkuam9pbignJicpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuVVJMU2VhcmNoUGFyYW1zIHx8IFVSTFNlYXJjaFBhcmFtczsiLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZ2xvYmFsID0gKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSkoKTtcblxuLyoqXG4gKiBXZWJTb2NrZXQgY29uc3RydWN0b3IuXG4gKi9cblxudmFyIFdlYlNvY2tldCA9IGdsb2JhbC5XZWJTb2NrZXQgfHwgZ2xvYmFsLk1veldlYlNvY2tldDtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldCA/IHdzIDogbnVsbDtcblxuLyoqXG4gKiBXZWJTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogVGhlIHRoaXJkIGBvcHRzYCBvcHRpb25zIG9iamVjdCBnZXRzIGlnbm9yZWQgaW4gd2ViIGJyb3dzZXJzLCBzaW5jZSBpdCdzXG4gKiBub24tc3RhbmRhcmQsIGFuZCB0aHJvd3MgYSBUeXBlRXJyb3IgaWYgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAqIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2VpbmFyb3Mvd3MvaXNzdWVzLzIyN1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAqIEBwYXJhbSB7QXJyYXl9IHByb3RvY29scyAob3B0aW9uYWwpXG4gKiBAcGFyYW0ge09iamVjdCkgb3B0cyAob3B0aW9uYWwpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHdzKHVyaSwgcHJvdG9jb2xzLCBvcHRzKSB7XG4gIHZhciBpbnN0YW5jZTtcbiAgaWYgKHByb3RvY29scykge1xuICAgIGluc3RhbmNlID0gbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scyk7XG4gIH0gZWxzZSB7XG4gICAgaW5zdGFuY2UgPSBuZXcgV2ViU29ja2V0KHVyaSk7XG4gIH1cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5pZiAoV2ViU29ja2V0KSB3cy5wcm90b3R5cGUgPSBXZWJTb2NrZXQucHJvdG90eXBlO1xuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIm5hbWVcIjogXCJ0aWNrNDItZ2x1ZVwiLFxuICBcInZlcnNpb25cIjogXCIzLjAuMC1iZXRhLjJcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkEgSmF2YVNjcmlwdCBsaWJyYXJ5IHdoaWNoIHByb3ZpZGVzIHN1cHBvcnQgZm9yIFRpY2s0MiBHTFVFLlwiLFxuICBcIm1haW5cIjogXCIuL2xpYnJhcnkvbWFpbi5qc1wiLFxuICBcImJpblwiOiB7XG4gICAgXCJpbml0LWRldi1tb2RlXCI6IFwiYmluL2luaXQtZGV2LW1vZGUuanNcIixcbiAgICBcInJlbW92ZS1pbnN0YWxsZWQtZGVwZW5kZW5jaWVzXCI6IFwiYmluL3JlbW92ZS1pbnN0YWxsZWQtZGVwZW5kZW5jaWVzLmpzXCIsXG4gICAgXCJyZW1vdmUtZGV2ZWxvcG1lbnQtZGVwZW5kZW5jaWVzXCI6IFwiYmluL3JlbW92ZS1kZXZlbG9wbWVudC1kZXBlbmRlbmNpZXMuanNcIixcbiAgICBcImJ1aWxkXCI6IFwiLi9iaW4vYnVpbGQuanNcIixcbiAgICBcImNsZWFuXCI6IFwiLi9iaW4vY2xlYW4uanNcIixcbiAgICBcImZpbGUtdmVyc2lvbmlmeVwiOiBcImJpbi9maWxlLXZlcnNpb25pZnkuanNcIixcbiAgICBcIm1pbmlmeVwiOiBcIi4vYmluL21pbmlmeS5qc1wiXG4gIH0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJlc2xpbnRcIjogXCJlc2xpbnQgbGlicmFyeVwiLFxuICAgIFwiZXNsaW50OmZpeFwiOiBcImVzbGludCBsaWJyYXJ5IC0tZml4XCIsXG4gICAgXCJ0ZXN0XCI6IFwibnBtIHJ1biBlc2xpbnQgJiYgbW9jaGEgLS1yZXF1aXJlIC4vdGVzdC90ZXN0X2hlbHBlciBcXFwidGVzdC8qKi8qLmpzXFxcIlwiLFxuICAgIFwiYnVpbGRcIjogXCJucG0gcnVuIGVzbGludCAmJiBub2RlIGJpbi9jbGVhbi5qcyAmJiBub2RlIGJpbi9idWlsZC5qcyAmJiBub2RlIGJpbi9taW5pZnkgJiYgbm9kZSBiaW4vZmlsZS12ZXJzaW9uaWZ5XCIsXG4gICAgXCJidWlsZDpkZXZcIjogXCJucG0gcnVuIGVzbGludDpmaXggJiYgbm9kZSBiaW4vY2xlYW4gJiYgbm9kZSBiaW4vYnVpbGRcIixcbiAgICBcInByZXB1Ymxpc2hcIjogXCJucG0gdXBkYXRlICYmIG5wbSBydW4gYnVpbGRcIixcbiAgICBcImluaXQ6ZGV2ZWxvcFwiOiBcIm5vZGUgYmluL2luaXQtZGV2LW1vZGVcIixcbiAgICBcImNsZWFyOmRldmVsb3BcIjogXCJub2RlIGJpbi9yZW1vdmUtZGV2ZWxvcG1lbnQtZGVwZW5kZW5jaWVzXCIsXG4gICAgXCJ3YXRjaFwiOiBcIm9uY2hhbmdlIFxcXCIuL2xpYnJhcnkvKi5qc1xcXCIgXFxcIi4vbm9kZV9tb2R1bGVzL3RpY2s0Mi0qL2xpYnJhcnkvKi5qc1xcXCIgIFxcXCIuL25vZGVfbW9kdWxlcy90aWNrNDItKi9saWJyYXJ5X2pzLyouanNcXFwiIFxcXCIuLi9ub2RlX21vZHVsZXMvdGljazQyLSovbGlicmFyeS8qKi5qc1xcXCIgIFxcXCIuLi9ub2RlX21vZHVsZXMvdGljazQyLSovbGlicmFyeV9qcy8qLmpzXFxcIiAtaXYgLWUgXFxcIi4vYmluXFxcIiAtLSBucG0gcnVuIGJ1aWxkOmRldlwiLFxuICAgIFwid2F0Y2g6ZGV2ZWxvcFwiOiBcIm5vZGUgYmluL3JlbW92ZS1pbnN0YWxsZWQtZGVwZW5kZW5jaWVzICYmIG5wbSBydW4gd2F0Y2hcIixcbiAgICBcIndhdGNoOnByb2RcIjogXCJucG0gaW5zdGFsbCAmJiBucG0gcnVuIHdhdGNoXCJcbiAgfSxcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vYm1hcmlub3ZAc3Rhc2gudGljazQyLmNvbTo4NDQzL3NjbS9vZmd3L2pzLWdsdWUuZ2l0XCJcbiAgfSxcbiAgXCJhdXRob3JcIjoge1xuICAgIFwibmFtZVwiOiBcIlRpY2s0MlwiLFxuICAgIFwidXJsXCI6IFwiaHR0cDovL3d3dy50aWNrNDIuY29tXCJcbiAgfSxcbiAgXCJsaWNlbnNlXCI6IFwiSVNDXCIsXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImN1aWRcIjogXCJeMS4zLjhcIixcbiAgICBcImRldGVjdC1ub2RlXCI6IFwiXjIuMC4zXCIsXG4gICAgXCJlczUtc2hpbVwiOiBcIl40LjEuMTRcIixcbiAgICBcIm9iamVjdC1hc3NpZ25cIjogXCJeNC4xLjBcIixcbiAgICBcInRpY2s0Mi1hY3Rpdml0eVwiOiBcIl4yLjIuMVwiLFxuICAgIFwidGljazQyLWFnbVwiOiBcIl4zLjIuMFwiLFxuICAgIFwidGljazQyLWFwcC1tYW5hZ2VyXCI6IFwiXjIuMy42XCIsXG4gICAgXCJ0aWNrNDItYXBwY29uZmlnXCI6IFwiXjAuMS4yXCIsXG4gICAgXCJ0aWNrNDItY29udGV4dHNcIjogXCJeMC4wLjJcIixcbiAgICBcInRpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb25cIjogXCJeMi4wLjNcIixcbiAgICBcInRpY2s0Mi1sb2dnZXJcIjogXCJeMi4wLjVcIixcbiAgICBcInRpY2s0Mi1tZXRyaWNzXCI6IFwiXjIuMC4xNVwiLFxuICAgIFwidGljazQyLXdpbmRvd3NcIjogXCJeMi4yLjNcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgICBcImVzbGludFwiOiBcIl4zLjEuMVwiLFxuICAgICAgXCJlc2xpbnQtY29uZmlnLXN0YW5kYXJkXCI6IFwiXjUuMy41XCIsXG4gICAgICBcImVzbGludC1jb25maWctdGljazQyXCI6IFwiXjEuMC4wXCIsXG4gICAgICBcImVzbGludC1wbHVnaW4tcHJvbWlzZVwiOiBcIl4yLjAuMFwiLFxuICAgICAgXCJlc2xpbnQtcGx1Z2luLXN0YW5kYXJkXCI6IFwiXjIuMC4wXCIsXG4gICAgICBcImJyb3dzZXJpZnlcIjogXCJeMTMuMC4wXCIsXG4gICAgICBcImJyb3dzZXJpZnktcmVwbGFjaWZ5XCI6IFwiXjAuMC40XCIsXG4gICAgICBcImJyb3dzZXJpZnktdmVyc2lvbmlmeVwiOiBcIl4xLjAuNFwiLFxuICAgICAgXCJjaGFpXCI6IFwiXjMuNS4wXCIsXG4gICAgICBcImZzXCI6IFwiMC4wLjJcIixcbiAgICAgIFwianNkb21cIjogXCJeOC4xLjBcIixcbiAgICAgIFwianNoaW50XCI6IFwiXjIuOS4xXCIsXG4gICAgICBcIm1pbmlmeWlmeVwiOiBcIl43LjMuMlwiLFxuICAgICAgXCJtb2NoYVwiOiBcIl4yLjQuNVwiLFxuICAgICAgXCJvbmNoYW5nZVwiOiBcIl4yLjEuMlwiLFxuICAgICAgXCJzaGVsbGpzXCI6IFwiXjAuNi4wXCJcbiAgfVxufVxuIl19
