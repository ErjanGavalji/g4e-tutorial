(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function() {
  //Do not do anything if there is no support of ECMAScript 5
  if (typeof [].forEach !== 'function') {
    require("es5-shim");
    require("es5-shim/es5-sham");
  }

	var metrics = require("tick42-metrics");
	var agm = require("tick42-agm");
	var gatewayConnection = require("tick42-gateway-connection");
	var logger = require("tick42-logger");
	var appconfig = require("tick42-appconfig/src/js/appconfig");
	var windows = require("tick42-windows");
	var appManager = require("tick42-app-manager");
	var activity = require("tick42-activity");

  //Do not do anything if the user turned off the auto initialization
	if (window.glue_auto_initialize === false) {
		return;
	}

  //Init the GLUE namespace
	var glue = {};
	glue.version = "2.4.0";
	//Base configurations. Later they are updated depending on the runtime.
	var loggerConfiguration = {identity: {system: "Tick42"}};
	var metricsConfiguration = {identity: {system: "Tick42"}};
	var agmConfiguration = {instance: {}, server: {presence_interval: 3000}};

	//Here we will store a reference to the connection with the Service Provider
	glue.connection = undefined;
	var app_name;

	//If we are running in an HTML Container, use the HTML Container environment variables
	if (window.htmlContainer !== undefined) {
		//Generate AGM app name
		app_name = window.agm_application || window.htmlContainer.containerName + "." + window.htmlContainer.browserWindowName;

		//Fill logger configurations with custom properties
		agmConfiguration.instance.application = app_name;
		loggerConfiguration.identity.system = "HtmlContainer." + window.htmlContainer.containerName;
		loggerConfiguration.identity.service = "JS." + window.htmlContainer.browserWindowName;
		loggerConfiguration.identity.instance = "~" + window.htmlContainer.machineName;

		if (window.htmlContainer.appConfigFacade !== undefined && window.htmlContainer.appConfigFacade.config !== undefined) {
			// Initialize AppConfig
			glue.appconfig = appconfig();
			glue.appconfig.init(function () {
				function supplant(template) {
					return template.replace(/\{([^{}]*)\}/g, function (match, key) {
						var value = this;
						key.split('.').forEach(function (part) {
							if (value) {
								value = value[part];
							}
						});
						return typeof value === 'string' || typeof value === 'number' ? value : match;
					});
				}

				var settings = window.htmlContainer.appConfigFacade.config;
				var identity = {};
				Object.keys(settings.identity).forEach(function (key) {
					var value = supplant(settings.identity[key]);
					identity[key] = value;
				});
				settings.identity = identity;
				return settings;
			}());
		}

		//Init the Connection
		glue.connection = gatewayConnection();

		//If we are running in normal browser, connect via Websocket
	} else {
    var connection_config = {};
    var uid_prefix;

    if (typeof window.WebSocket !== 'function') {
      // if no support for WebSocket use HTTP
      uid_prefix = "HTTP";
      // don't make insecure requests from secure env
      var default_http_url = window.location.protocol === 'http:' ? "http://localhost:22037" : "https://localhost:22037";
      connection_config.http_url = window.glue_http_url || default_http_url;
    } else {
      uid_prefix = "WS";
      //Websocket URL (this is the default that is used in the demo WS server)
      var default_ws_url = window.location.protocol === 'http:' ? "ws://localhost:22037" : "wss://localhost:22037";
      connection_config.websocket_url = window.glue_ws_url || default_ws_url;
    }

    //Generate application UID to allow for the same application to be called multiple times.
    var uid = uid_prefix + Math.floor(1e10 * Math.random());

    //Generate AGM app name
		app_name = window.agm_application || document.title + uid;

		//Fill configurations with custom properties
		agmConfiguration.instance.application = app_name;
		loggerConfiguration.identity.system = "Browser";
		loggerConfiguration.identity.service = document.title || 'unknown';
		loggerConfiguration.identity.instance = "~" + uid;

		// Init the Connection and specify the URL of the Web Socket server that we are connecting to.
		glue.connection = gatewayConnection(connection_config);
	}

	//Place the Connection, as part of the components' configuration
	loggerConfiguration.connection = glue.connection;
	metricsConfiguration.connection = glue.connection;
	agmConfiguration.connection = glue.connection;

	//Override some props with environment variables, if provided
	loggerConfiguration.identity.system = window.glue_metric_system || loggerConfiguration.identity.system;
	loggerConfiguration.identity.service = window.glue_metric_service || loggerConfiguration.identity.service;
	loggerConfiguration.identity.instance = window.glue_metric_instance || loggerConfiguration.identity.instance;

	//Initialize Logger (uses the same configuration as Metrics)
	glue.logger = logger(loggerConfiguration);

	//Fill metrics configuration with the same properties as metrics configurations
	metricsConfiguration.identity = loggerConfiguration.identity;
	metricsConfiguration.logger = glue.logger.subLogger("metrics");

	//Initialize Metrics and save into the 'glue' global variable
	glue.metrics = metrics(metricsConfiguration).subSystem("App");

	//Initialize the metrics system in the logger's "metrics_level" method
	glue.logger.metricsLevel("warn", glue.metrics.parent.subSystem("LogEvents"));

	agmConfiguration.instance.application = window.glue_agm_application || agmConfiguration.instance.application;

	//Include the metric repo in the AGM configuration (so that AGM can broadcast metrics)
	agmConfiguration.metrics = glue.metrics.subSystem("AGM");

	//Initialize AGM save into the 'glue' global variable
	glue.agm = agm(agmConfiguration);

	// Add activity in the container only
	var activitiesFacade = window.htmlContainer ? window.htmlContainer.activityFacade : undefined;
	if (typeof activitiesFacade !== "undefined"){
		var activityLogger = glue.logger.subLogger("activity");
		activityLogger.publishLevel("debug");
		activityLogger.consoleLevel("info");
    activityLogger.metricsLevel("off");
		glue.activities = activity({agm: glue.agm, logger: activityLogger});
	}

	glue.windows = windows(glue.agm);

	// camel case for App Manager
	glue.appManager = appManager(glue.agm, glue.windows);

  glue.info = {
    glueVersion : '2.4.0',
    activities : glue.activities ? glue.activities.version : 'unknown', 
    metrics: glue.metrics.repo.version,
    agm: glue.agm.version,
    windows: glue.windows.version,
    logger: glue.logger.version,
    appManager: glue.appManager.version,
    connection: glue.connection.version    
  };
  
	// no conflict function
	var originalGlue = window.glue;
	glue.noConflict = function(){
		window.glue = originalGlue;
		return glue;
	};

	//Export GLUE
	window.glue = glue;
	module.exports = glue;
}());
},{"es5-shim":5,"es5-shim/es5-sham":4,"tick42-activity":12,"tick42-agm":30,"tick42-app-manager":39,"tick42-appconfig/src/js/appconfig":44,"tick42-gateway-connection":50,"tick42-logger":57,"tick42-metrics":72,"tick42-windows":73}],2:[function(require,module,exports){
/**
 * (c) 2013 Beau Sorensen
 * MIT Licensed
 * For all details and documentation:
 * https://github.com/sorensen/ascii-table
 */

;(function() {
'use strict';

/*!
 * Module dependencies
 */

var slice = Array.prototype.slice
  , toString = Object.prototype.toString

/**
 * AsciiTable constructor
 *
 * @param {String|Object} title or JSON table
 * @param {Object} table options
 *  - `prefix` - string prefix added to each line on render
 * @constructor
 * @api public
 */

function AsciiTable(name, options) {
  this.options = options || {}
  this.reset(name)
}

/*!
 * Current library version, should match `package.json`
 */

AsciiTable.VERSION = '0.0.8'

/*!
 * Alignment constants
 */

AsciiTable.LEFT = 0
AsciiTable.CENTER = 1
AsciiTable.RIGHT = 2

/*!
 * Static methods
 */

/**
 * Create a new table instance
 *
 * @param {String|Object} title or JSON table
 * @param {Object} table options
 * @api public
 */

AsciiTable.factory = function(name, options) {
  return new AsciiTable(name, options)
}

/**
 * Align the a string at the given length
 *
 * @param {Number} direction
 * @param {String} string input
 * @param {Number} string length
 * @param {Number} padding character
 * @api public
 */

AsciiTable.align = function(dir, str, len, pad) {
  if (dir === AsciiTable.LEFT) return AsciiTable.alignLeft(str, len, pad)
  if (dir === AsciiTable.RIGHT) return AsciiTable.alignRight(str, len, pad)
  if (dir === AsciiTable.CENTER) return AsciiTable.alignCenter(str, len, pad)
  return AsciiTable.alignAuto(str, len, pad)
}

/**
 * Left align a string by padding it at a given length
 *
 * @param {String} str
 * @param {Number} string length
 * @param {String} padding character (optional, default '')
 * @api public
 */

AsciiTable.alignLeft = function(str, len, pad) {
  if (!len || len < 0) return ''
  if (str === undefined || str === null) str = ''
  if (typeof pad === 'undefined') pad = ' '
  if (typeof str !== 'string') str = str.toString()
  var alen = len + 1 - str.length
  if (alen <= 0) return str
  return str + Array(len + 1 - str.length).join(pad)
}

/**
 * Center align a string by padding it at a given length
 *
 * @param {String} str
 * @param {Number} string length
 * @param {String} padding character (optional, default '')
 * @api public
 */

AsciiTable.alignCenter = function(str, len, pad) {
  if (!len || len < 0) return ''
  if (str === undefined || str === null) str = ''
  if (typeof pad === 'undefined') pad = ' '
  if (typeof str !== 'string') str = str.toString()
  var nLen = str.length
    , half = Math.floor(len / 2 - nLen / 2)
    , odds = Math.abs((nLen % 2) - (len % 2))
    , len = str.length

  return AsciiTable.alignRight('', half, pad) 
    + str
    + AsciiTable.alignLeft('', half + odds, pad)
}

/**
 * Right align a string by padding it at a given length
 *
 * @param {String} str
 * @param {Number} string length
 * @param {String} padding character (optional, default '')
 * @api public
 */

AsciiTable.alignRight = function(str, len, pad) {
  if (!len || len < 0) return ''
  if (str === undefined || str === null) str = ''
  if (typeof pad === 'undefined') pad = ' '
  if (typeof str !== 'string') str = str.toString()
  var alen = len + 1 - str.length
  if (alen <= 0) return str
  return Array(len + 1 - str.length).join(pad) + str
}

/**
 * Auto align string value based on object type
 *
 * @param {Any} object to string
 * @param {Number} string length
 * @param {String} padding character (optional, default '')
 * @api public
 */

AsciiTable.alignAuto = function(str, len, pad) {
  if (str === undefined || str === null) str = ''
  var type = toString.call(str)
  pad || (pad = ' ')
  len = +len
  if (type !== '[object String]') {
    str = str.toString()
  }
  if (str.length < len) {
    switch(type) {
      case '[object Number]': return AsciiTable.alignRight(str, len, pad)
      default: return AsciiTable.alignLeft(str, len, pad)
    }
  }
  return str
}

/**
 * Fill an array at a given size with the given value
 *
 * @param {Number} array size
 * @param {Any} fill value
 * @return {Array} filled array
 * @api public
 */

AsciiTable.arrayFill = function(len, fill) {
  var arr = new Array(len)
  for (var i = 0; i !== len; i++) {
    arr[i] = fill;
  }
  return arr
}

/*!
 * Instance methods
 */

/**
 * Reset the table state back to defaults
 *
 * @param {String|Object} title or JSON table
 * @api public
 */

AsciiTable.prototype.reset = 
AsciiTable.prototype.clear = function(name) {
  this.__name = ''
  this.__nameAlign = AsciiTable.CENTER
  this.__rows = []
  this.__maxCells = 0
  this.__aligns = []
  this.__colMaxes = []
  this.__spacing = 1
  this.__heading = null
  this.__headingAlign = AsciiTable.CENTER
  this.setBorder()

  if (toString.call(name) === '[object String]') {
    this.__name = name
  } else if (toString.call(name) === '[object Object]') {
    this.fromJSON(name)
  }
  return this
}

/**
 * Set the table border
 *
 * @param {String} horizontal edges (optional, default `|`)
 * @param {String} vertical edges (optional, default `-`)
 * @param {String} top corners (optional, default `.`)
 * @param {String} bottom corners (optional, default `'`)
 * @api public
 */

AsciiTable.prototype.setBorder = function(edge, fill, top, bottom) {
  this.__border = true
  if (arguments.length === 1) {
    fill = top = bottom = edge
  }
  this.__edge = edge || '|'
  this.__fill = fill || '-'
  this.__top = top || '.'
  this.__bottom = bottom || "'"
  return this
}

/**
 * Remove all table borders
 *
 * @api public
 */

AsciiTable.prototype.removeBorder = function() {
  this.__border = false
  this.__edge = ' '
  this.__fill = ' '
  return this
}

/**
 * Set the column alignment at a given index
 *
 * @param {Number} column index
 * @param {Number} alignment direction
 * @api public
 */

AsciiTable.prototype.setAlign = function(idx, dir) {
  this.__aligns[idx] = dir
  return this
}

/**
 * Set the title of the table
 *
 * @param {String} title
 * @api public
 */

AsciiTable.prototype.setTitle = function(name) {
  this.__name = name
  return this
}

/**
 * Get the title of the table
 *
 * @return {String} title
 * @api public
 */

AsciiTable.prototype.getTitle = function() {
  return this.__name
}

/**
 * Set table title alignment
 *
 * @param {Number} direction
 * @api public
 */

AsciiTable.prototype.setTitleAlign = function(dir) {
  this.__nameAlign = dir
  return this
}

/**
 * AsciiTable sorting shortcut to sort rows
 *
 * @param {Function} sorting method
 * @api public
 */

AsciiTable.prototype.sort = function(method) {
  this.__rows.sort(method)
  return this
}

/**
 * Sort rows based on sort method for given column
 *
 * @param {Number} column index
 * @param {Function} sorting method
 * @api public
 */

AsciiTable.prototype.sortColumn = function(idx, method) {
  this.__rows.sort(function(a, b) {
    return method(a[idx], b[idx])
  })
  return this
}

/**
 * Set table heading for columns
 *
 * @api public
 */

AsciiTable.prototype.setHeading = function(row) {
  if (arguments.length > 1 || toString.call(row) !== '[object Array]') {
    row = slice.call(arguments)
  }
  this.__heading = row
  return this
}

/**
 * Get table heading for columns
 *
 * @return {Array} copy of headings
 * @api public
 */

AsciiTable.prototype.getHeading = function() {
  return this.__heading.slice()
}

/**
 * Set heading alignment
 *
 * @param {Number} direction
 * @api public
 */

AsciiTable.prototype.setHeadingAlign = function(dir) {
  this.__headingAlign = dir
  return this
}

/**
 * Add a row of information to the table
 * 
 * @param {...|Array} argument values in order of columns
 * @api public
 */

AsciiTable.prototype.addRow = function(row) {
  if (arguments.length > 1 || toString.call(row) !== '[object Array]') {
    row = slice.call(arguments)
  }
  this.__maxCells = Math.max(this.__maxCells, row.length)
  this.__rows.push(row)
  return this
}

/**
 * Get a copy of all rows of the table
 *
 * @return {Array} copy of rows
 * @api public
 */

AsciiTable.prototype.getRows = function() {
  return this.__rows.slice().map(function(row) {
    return row.slice()
  })
}

/**
 * Add rows in the format of a row matrix
 *
 * @param {Array} row matrix
 * @api public
 */

AsciiTable.prototype.addRowMatrix = function(rows) {
  for (var i = 0; i < rows.length; i++) {
    this.addRow(rows[i])
  }
  return this
}

/**
 * Add rows from the given data array, processed by the callback function rowCallback.
 *
 * @param {Array} data
 * @param (Function) rowCallback
 * @param (Boolean) asMatrix - controls if the row created by rowCallback should be assigned as row matrix
 * @api public
 */

AsciiTable.prototype.addData = function(data, rowCallback, asMatrix) {
  if (toString.call(data) !== '[object Array]') {
    return this;
  }
  for (var index = 0, limit = data.length; index < limit; index++) {
    var row = rowCallback(data[index]);
    if(asMatrix) {
      this.addRowMatrix(row);
    } else {
      this.addRow(row);
    }
  }
  return this
}

  /**
 * Reset the current row state
 *
 * @api public
 */

AsciiTable.prototype.clearRows = function() {
  this.__rows = []
  this.__maxCells = 0
  this.__colMaxes = []
  return this
}

/**
 * Apply an even spaced column justification
 *
 * @param {Boolean} on / off
 * @api public
 */

AsciiTable.prototype.setJustify = function(val) {
  arguments.length === 0 && (val = true)
  this.__justify = !!val
  return this
}

/**
 * Convert the current instance to a JSON structure
 *
 * @return {Object} json representation
 * @api public
 */

AsciiTable.prototype.toJSON = function() {
  return {
    title: this.getTitle()
  , heading: this.getHeading()
  , rows: this.getRows()
  }
}

/**
 * Populate the table from a JSON object
 *
 * @param {Object} json representation
 * @api public
 */

AsciiTable.prototype.parse = 
AsciiTable.prototype.fromJSON = function(obj) {
  return this
    .clear()
    .setTitle(obj.title)
    .setHeading(obj.heading)
    .addRowMatrix(obj.rows)
}

/**
 * Render the table with the current information
 *
 * @return {String} formatted table
 * @api public
 */

AsciiTable.prototype.render =
AsciiTable.prototype.valueOf =
AsciiTable.prototype.toString = function() {
  var self = this
    , body = []
    , mLen = this.__maxCells
    , max = AsciiTable.arrayFill(mLen, 0)
    , total = mLen * 3
    , rows = this.__rows
    , justify
    , border = this.__border
    , all = this.__heading 
        ? [this.__heading].concat(rows)
        : rows

  // Calculate max table cell lengths across all rows
  for (var i = 0; i < all.length; i++) {
    var row = all[i]
    for (var k = 0; k < mLen; k++) {
      var cell = row[k]
      max[k] = Math.max(max[k], cell ? cell.toString().length : 0)
    }
  }
  this.__colMaxes = max
  justify = this.__justify ? Math.max.apply(null, max) : 0

  // Get 
  max.forEach(function(x) {
    total += justify ? justify : x + self.__spacing
  })
  justify && (total += max.length)
  total -= this.__spacing

  // Heading
  border && body.push(this._seperator(total - mLen + 1, this.__top))
  if (this.__name) {
    body.push(this._renderTitle(total - mLen + 1))
    border && body.push(this._seperator(total - mLen + 1))
  }
  if (this.__heading) {
    body.push(this._renderRow(this.__heading, ' ', this.__headingAlign))
    body.push(this._rowSeperator(mLen, this.__fill))
  }
  for (var i = 0; i < this.__rows.length; i++) {
    body.push(this._renderRow(this.__rows[i], ' '))
  }
  border && body.push(this._seperator(total - mLen + 1, this.__bottom))

  var prefix = this.options.prefix || ''
  return prefix + body.join('\n' + prefix)
}

/**
 * Create a line seperator
 *
 * @param {Number} string size
 * @param {String} side values (default '|')
 * @api private
 */

AsciiTable.prototype._seperator = function(len, sep) {
  sep || (sep = this.__edge)
  return sep + AsciiTable.alignRight(sep, len, this.__fill)
}

/**
 * Create a row seperator
 *
 * @return {String} seperator
 * @api private
 */

AsciiTable.prototype._rowSeperator = function() {
  var blanks = AsciiTable.arrayFill(this.__maxCells, this.__fill)
  return this._renderRow(blanks, this.__fill)
}

/**
 * Render the table title in a centered box
 *
 * @param {Number} string size
 * @return {String} formatted title
 * @api private
 */

AsciiTable.prototype._renderTitle = function(len) {
  var name = ' ' + this.__name + ' '
    , str = AsciiTable.align(this.__nameAlign, name, len - 1, ' ')
  return this.__edge + str + this.__edge
}

/**
 * Render an invdividual row
 *
 * @param {Array} row
 * @param {String} column seperator
 * @param {Number} total row alignment (optional, default `auto`)
 * @return {String} formatted row
 * @api private
 */

AsciiTable.prototype._renderRow = function(row, str, align) {
  var tmp = ['']
    , max = this.__colMaxes

  for (var k = 0; k < this.__maxCells; k++) {
    var cell = row[k]
      , just = this.__justify ? Math.max.apply(null, max) : max[k]
      // , pad = k === this.__maxCells - 1 ? just : just + this.__spacing
      , pad = just
      , cAlign = this.__aligns[k]
      , use = align
      , method = 'alignAuto'
  
    if (typeof align === 'undefined') use = cAlign

    if (use === AsciiTable.LEFT) method = 'alignLeft'
    if (use === AsciiTable.CENTER) method = 'alignCenter'
    if (use === AsciiTable.RIGHT) method = 'alignRight'

    tmp.push(AsciiTable[method](cell, pad, str))
  }
  var front = tmp.join(str + this.__edge + str)
  front = front.substr(1, front.length)
  return front + str + this.__edge
}

/*!
 * Aliases
 */

// Create method shortcuts to all alignment methods for each direction
;['Left', 'Right', 'Center'].forEach(function(dir) {
  var constant = AsciiTable[dir.toUpperCase()]

  ;['setAlign', 'setTitleAlign', 'setHeadingAlign'].forEach(function(method) {
    // Call the base method with the direction constant as the last argument
    AsciiTable.prototype[method + dir] = function() {
      var args = slice.call(arguments).concat(constant)
      return this[method].apply(this, args)
    }
  })
})

/*!
 * Module exports.
 */

if (typeof exports !== 'undefined') {
  module.exports = AsciiTable
} else {
  this.AsciiTable = AsciiTable
}

}).call(this);

},{}],3:[function(require,module,exports){
module.exports = require('./ascii-table')
},{"./ascii-table":2}],4:[function(require,module,exports){
/*!
 * https://github.com/es-shims/es5-shim
 * @license es5-shim Copyright 2009-2015 by contributors, MIT License
 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
 */

// vim: ts=4 sts=4 sw=4 expandtab

// Add semicolon to prevent IIFE from being passed as argument to concatenated code.
;

// UMD (Universal Module Definition)
// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
    'use strict';

    /* global define, exports, module */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.returnExports = factory();
  }
}(this, function () {

var call = Function.call;
var prototypeOfObject = Object.prototype;
var owns = call.bind(prototypeOfObject.hasOwnProperty);
var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);
var toStr = call.bind(prototypeOfObject.toString);

// If JS engine supports accessors creating shortcuts.
var defineGetter;
var defineSetter;
var lookupGetter;
var lookupSetter;
var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');
if (supportsAccessors) {
    /* eslint-disable no-underscore-dangle */
    defineGetter = call.bind(prototypeOfObject.__defineGetter__);
    defineSetter = call.bind(prototypeOfObject.__defineSetter__);
    lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
    lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
    /* eslint-enable no-underscore-dangle */
}

// ES5 15.2.3.2
// http://es5.github.com/#x15.2.3.2
if (!Object.getPrototypeOf) {
    // https://github.com/es-shims/es5-shim/issues#issue/2
    // http://ejohn.org/blog/objectgetprototypeof/
    // recommended by fschaefer on github
    //
    // sure, and webreflection says ^_^
    // ... this will nerever possibly return null
    // ... Opera Mini breaks here with infinite loops
    Object.getPrototypeOf = function getPrototypeOf(object) {
        /* eslint-disable no-proto */
        var proto = object.__proto__;
        /* eslint-enable no-proto */
        if (proto || proto === null) {
            return proto;
        } else if (toStr(object.constructor) === '[object Function]') {
            return object.constructor.prototype;
        } else if (object instanceof Object) {
          return prototypeOfObject;
        } else {
          // Correctly return null for Objects created with `Object.create(null)`
          // (shammed or native) or `{ __proto__: null}`.  Also returns null for
          // cross-realm objects on browsers that lack `__proto__` support (like
          // IE <11), but that's the best we can do.
          return null;
        }
    };
}

// ES5 15.2.3.3
// http://es5.github.com/#x15.2.3.3

var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {
    try {
        object.sentinel = 0;
        return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;
    } catch (exception) {
        return false;
    }
};

// check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.
if (Object.defineProperty) {
    var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});
    var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' ||
    doesGetOwnPropertyDescriptorWork(document.createElement('div'));
    if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {
        var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;
    }
}

if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {
    var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';

    /* eslint-disable no-proto */
    Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {
        if ((typeof object !== 'object' && typeof object !== 'function') || object === null) {
            throw new TypeError(ERR_NON_OBJECT + object);
        }

        // make a valiant attempt to use the real getOwnPropertyDescriptor
        // for I8's DOM elements.
        if (getOwnPropertyDescriptorFallback) {
            try {
                return getOwnPropertyDescriptorFallback.call(Object, object, property);
            } catch (exception) {
                // try the shim if the real one doesn't work
            }
        }

        var descriptor;

        // If object does not owns property return undefined immediately.
        if (!owns(object, property)) {
            return descriptor;
        }

        // If object has a property then it's for sure `configurable`, and
        // probably `enumerable`. Detect enumerability though.
        descriptor = {
            enumerable: isEnumerable(object, property),
            configurable: true
        };

        // If JS engine supports accessor properties then property may be a
        // getter or setter.
        if (supportsAccessors) {
            // Unfortunately `__lookupGetter__` will return a getter even
            // if object has own non getter property along with a same named
            // inherited getter. To avoid misbehavior we temporary remove
            // `__proto__` so that `__lookupGetter__` will return getter only
            // if it's owned by an object.
            var prototype = object.__proto__;
            var notPrototypeOfObject = object !== prototypeOfObject;
            // avoid recursion problem, breaking in Opera Mini when
            // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')
            // or any other Object.prototype accessor
            if (notPrototypeOfObject) {
                object.__proto__ = prototypeOfObject;
            }

            var getter = lookupGetter(object, property);
            var setter = lookupSetter(object, property);

            if (notPrototypeOfObject) {
                // Once we have getter and setter we can put values back.
                object.__proto__ = prototype;
            }

            if (getter || setter) {
                if (getter) {
                    descriptor.get = getter;
                }
                if (setter) {
                    descriptor.set = setter;
                }
                // If it was accessor property we're done and return here
                // in order to avoid adding `value` to the descriptor.
                return descriptor;
            }
        }

        // If we got this far we know that object has an own property that is
        // not an accessor so we set it as a value and return descriptor.
        descriptor.value = object[property];
        descriptor.writable = true;
        return descriptor;
    };
    /* eslint-enable no-proto */
}

// ES5 15.2.3.4
// http://es5.github.com/#x15.2.3.4
if (!Object.getOwnPropertyNames) {
    Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
        return Object.keys(object);
    };
}

// ES5 15.2.3.5
// http://es5.github.com/#x15.2.3.5
if (!Object.create) {

    // Contributed by Brandon Benvie, October, 2012
    var createEmpty;
    var supportsProto = !({ __proto__: null } instanceof Object);
                        // the following produces false positives
                        // in Opera Mini => not a reliable check
                        // Object.prototype.__proto__ === null

    // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    /* global ActiveXObject */
    var shouldUseActiveX = function shouldUseActiveX() {
        // return early if document.domain not set
        if (!document.domain) {
            return false;
        }

        try {
            return !!new ActiveXObject('htmlfile');
        } catch (exception) {
            return false;
        }
    };

    // This supports IE8 when document.domain is used
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    var getEmptyViaActiveX = function getEmptyViaActiveX() {
        var empty;
        var xDoc;

        xDoc = new ActiveXObject('htmlfile');

        xDoc.write('<script><\/script>');
        xDoc.close();

        empty = xDoc.parentWindow.Object.prototype;
        xDoc = null;

        return empty;
    };

    // The original implementation using an iframe
    // before the activex approach was added
    // see https://github.com/es-shims/es5-shim/issues/150
    var getEmptyViaIFrame = function getEmptyViaIFrame() {
        var iframe = document.createElement('iframe');
        var parent = document.body || document.documentElement;
        var empty;

        iframe.style.display = 'none';
        parent.appendChild(iframe);
        /* eslint-disable no-script-url */
        iframe.src = 'javascript:';
        /* eslint-enable no-script-url */

        empty = iframe.contentWindow.Object.prototype;
        parent.removeChild(iframe);
        iframe = null;

        return empty;
    };

    /* global document */
    if (supportsProto || typeof document === 'undefined') {
        createEmpty = function () {
            return { __proto__: null };
        };
    } else {
        // In old IE __proto__ can't be used to manually set `null`, nor does
        // any other method exist to make an object that inherits from nothing,
        // aside from Object.prototype itself. Instead, create a new global
        // object and *steal* its Object.prototype and strip it bare. This is
        // used as the prototype to create nullary objects.
        createEmpty = function () {
            // Determine which approach to use
            // see https://github.com/es-shims/es5-shim/issues/150
            var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();

            delete empty.constructor;
            delete empty.hasOwnProperty;
            delete empty.propertyIsEnumerable;
            delete empty.isPrototypeOf;
            delete empty.toLocaleString;
            delete empty.toString;
            delete empty.valueOf;

            var Empty = function Empty() {};
            Empty.prototype = empty;
            // short-circuit future calls
            createEmpty = function () {
                return new Empty();
            };
            return new Empty();
        };
    }

    Object.create = function create(prototype, properties) {

        var object;
        var Type = function Type() {}; // An empty constructor.

        if (prototype === null) {
            object = createEmpty();
        } else {
            if (typeof prototype !== 'object' && typeof prototype !== 'function') {
                // In the native implementation `parent` can be `null`
                // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)
                // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`
                // like they are in modern browsers. Using `Object.create` on DOM elements
                // is...err...probably inappropriate, but the native version allows for it.
                throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome
            }
            Type.prototype = prototype;
            object = new Type();
            // IE has no built-in implementation of `Object.getPrototypeOf`
            // neither `__proto__`, but this manually setting `__proto__` will
            // guarantee that `Object.getPrototypeOf` will work as expected with
            // objects created using `Object.create`
            /* eslint-disable no-proto */
            object.__proto__ = prototype;
            /* eslint-enable no-proto */
        }

        if (properties !== void 0) {
            Object.defineProperties(object, properties);
        }

        return object;
    };
}

// ES5 15.2.3.6
// http://es5.github.com/#x15.2.3.6

// Patch for WebKit and IE8 standard mode
// Designed by hax <hax.github.com>
// related issue: https://github.com/es-shims/es5-shim/issues#issue/5
// IE8 Reference:
//     http://msdn.microsoft.com/en-us/library/dd282900.aspx
//     http://msdn.microsoft.com/en-us/library/dd229916.aspx
// WebKit Bugs:
//     https://bugs.webkit.org/show_bug.cgi?id=36423

var doesDefinePropertyWork = function doesDefinePropertyWork(object) {
    try {
        Object.defineProperty(object, 'sentinel', {});
        return 'sentinel' in object;
    } catch (exception) {
        return false;
    }
};

// check whether defineProperty works if it's given. Otherwise,
// shim partially.
if (Object.defineProperty) {
    var definePropertyWorksOnObject = doesDefinePropertyWork({});
    var definePropertyWorksOnDom = typeof document === 'undefined' ||
        doesDefinePropertyWork(document.createElement('div'));
    if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
        var definePropertyFallback = Object.defineProperty,
            definePropertiesFallback = Object.defineProperties;
    }
}

if (!Object.defineProperty || definePropertyFallback) {
    var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';
    var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';
    var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';

    Object.defineProperty = function defineProperty(object, property, descriptor) {
        if ((typeof object !== 'object' && typeof object !== 'function') || object === null) {
            throw new TypeError(ERR_NON_OBJECT_TARGET + object);
        }
        if ((typeof descriptor !== 'object' && typeof descriptor !== 'function') || descriptor === null) {
            throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
        }
        // make a valiant attempt to use the real defineProperty
        // for I8's DOM elements.
        if (definePropertyFallback) {
            try {
                return definePropertyFallback.call(Object, object, property, descriptor);
            } catch (exception) {
                // try the shim if the real one doesn't work
            }
        }

        // If it's a data property.
        if ('value' in descriptor) {
            // fail silently if 'writable', 'enumerable', or 'configurable'
            // are requested but not supported
            /*
            // alternate approach:
            if ( // can't implement these features; allow false but not true
                ('writable' in descriptor && !descriptor.writable) ||
                ('enumerable' in descriptor && !descriptor.enumerable) ||
                ('configurable' in descriptor && !descriptor.configurable)
            ))
                throw new RangeError(
                    'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'
                );
            */

            if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {
                // As accessors are supported only on engines implementing
                // `__proto__` we can safely override `__proto__` while defining
                // a property to make sure that we don't hit an inherited
                // accessor.
                /* eslint-disable no-proto */
                var prototype = object.__proto__;
                object.__proto__ = prototypeOfObject;
                // Deleting a property anyway since getter / setter may be
                // defined on object itself.
                delete object[property];
                object[property] = descriptor.value;
                // Setting original `__proto__` back now.
                object.__proto__ = prototype;
                /* eslint-enable no-proto */
            } else {
                object[property] = descriptor.value;
            }
        } else {
            if (!supportsAccessors && (('get' in descriptor) || ('set' in descriptor))) {
                 return;
            }
            // If we got that far then getters and setters can be defined !!
            if ('get' in descriptor) {
                defineGetter(object, property, descriptor.get);
            }
            if ('set' in descriptor) {
                defineSetter(object, property, descriptor.set);
            }
        }
        return object;
    };
}

// ES5 15.2.3.7
// http://es5.github.com/#x15.2.3.7
if (!Object.defineProperties || definePropertiesFallback) {
    Object.defineProperties = function defineProperties(object, properties) {
        // make a valiant attempt to use the real defineProperties
        if (definePropertiesFallback) {
            try {
                return definePropertiesFallback.call(Object, object, properties);
            } catch (exception) {
                // try the shim if the real one doesn't work
            }
        }

        Object.keys(properties).forEach(function (property) {
            if (property !== '__proto__') {
                Object.defineProperty(object, property, properties[property]);
            }
        });
        return object;
    };
}

// ES5 15.2.3.8
// http://es5.github.com/#x15.2.3.8
if (!Object.seal) {
    Object.seal = function seal(object) {
        if (Object(object) !== object) {
            throw new TypeError('Object.seal can only be called on Objects.');
        }
        // this is misleading and breaks feature-detection, but
        // allows "securable" code to "gracefully" degrade to working
        // but insecure code.
        return object;
    };
}

// ES5 15.2.3.9
// http://es5.github.com/#x15.2.3.9
if (!Object.freeze) {
    Object.freeze = function freeze(object) {
        if (Object(object) !== object) {
            throw new TypeError('Object.freeze can only be called on Objects.');
        }
        // this is misleading and breaks feature-detection, but
        // allows "securable" code to "gracefully" degrade to working
        // but insecure code.
        return object;
    };
}

// detect a Rhino bug and patch it
try {
    Object.freeze(function () {});
} catch (exception) {
    Object.freeze = (function (freezeObject) {
        return function freeze(object) {
            if (typeof object === 'function') {
                return object;
            } else {
                return freezeObject(object);
            }
        };
    }(Object.freeze));
}

// ES5 15.2.3.10
// http://es5.github.com/#x15.2.3.10
if (!Object.preventExtensions) {
    Object.preventExtensions = function preventExtensions(object) {
        if (Object(object) !== object) {
            throw new TypeError('Object.preventExtensions can only be called on Objects.');
        }
        // this is misleading and breaks feature-detection, but
        // allows "securable" code to "gracefully" degrade to working
        // but insecure code.
        return object;
    };
}

// ES5 15.2.3.11
// http://es5.github.com/#x15.2.3.11
if (!Object.isSealed) {
    Object.isSealed = function isSealed(object) {
        if (Object(object) !== object) {
            throw new TypeError('Object.isSealed can only be called on Objects.');
        }
        return false;
    };
}

// ES5 15.2.3.12
// http://es5.github.com/#x15.2.3.12
if (!Object.isFrozen) {
    Object.isFrozen = function isFrozen(object) {
        if (Object(object) !== object) {
            throw new TypeError('Object.isFrozen can only be called on Objects.');
        }
        return false;
    };
}

// ES5 15.2.3.13
// http://es5.github.com/#x15.2.3.13
if (!Object.isExtensible) {
    Object.isExtensible = function isExtensible(object) {
        // 1. If Type(O) is not Object throw a TypeError exception.
        if (Object(object) !== object) {
            throw new TypeError('Object.isExtensible can only be called on Objects.');
        }
        // 2. Return the Boolean value of the [[Extensible]] internal property of O.
        var name = '';
        while (owns(object, name)) {
            name += '?';
        }
        object[name] = true;
        var returnValue = owns(object, name);
        delete object[name];
        return returnValue;
    };
}

}));

},{}],5:[function(require,module,exports){
/*!
 * https://github.com/es-shims/es5-shim
 * @license es5-shim Copyright 2009-2015 by contributors, MIT License
 * see https://github.com/es-shims/es5-shim/blob/master/LICENSE
 */

// vim: ts=4 sts=4 sw=4 expandtab

// Add semicolon to prevent IIFE from being passed as argument to concatenated code.
;

// UMD (Universal Module Definition)
// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
    'use strict';

    /* global define, exports, module */
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.returnExports = factory();
    }
}(this, function () {

/**
 * Brings an environment as close to ECMAScript 5 compliance
 * as is possible with the facilities of erstwhile engines.
 *
 * Annotated ES5: http://es5.github.com/ (specific links below)
 * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
 * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
 */

// Shortcut to an often accessed properties, in order to avoid multiple
// dereference that costs universally. This also holds a reference to known-good
// functions.
var $Array = Array;
var ArrayPrototype = $Array.prototype;
var $Object = Object;
var ObjectPrototype = $Object.prototype;
var $Function = Function;
var FunctionPrototype = $Function.prototype;
var $String = String;
var StringPrototype = $String.prototype;
var $Number = Number;
var NumberPrototype = $Number.prototype;
var array_slice = ArrayPrototype.slice;
var array_splice = ArrayPrototype.splice;
var array_push = ArrayPrototype.push;
var array_unshift = ArrayPrototype.unshift;
var array_concat = ArrayPrototype.concat;
var array_join = ArrayPrototype.join;
var call = FunctionPrototype.call;
var apply = FunctionPrototype.apply;
var max = Math.max;
var min = Math.min;

// Having a toString local variable name breaks in Opera so use to_string.
var to_string = ObjectPrototype.toString;

/* global Symbol */
/* eslint-disable one-var-declaration-per-line, no-redeclare */
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, constructorRegex = /^\s*class /, isES6ClassFn = function isES6ClassFn(value) { try { var fnStr = fnToStr.call(value); var singleStripped = fnStr.replace(/\/\/.*\n/g, ''); var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, ''); var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' '); return constructorRegex.test(spaceStripped); } catch (e) { return false; /* not a function */ } }, tryFunctionObject = function tryFunctionObject(value) { try { if (isES6ClassFn(value)) { return false; } fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]', isCallable = function isCallable(value) { if (!value) { return false; } if (typeof value !== 'function' && typeof value !== 'object') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } if (isES6ClassFn(value)) { return false; } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };

var isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };
var isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };
/* eslint-enable one-var-declaration-per-line, no-redeclare */

/* inlined from http://npmjs.com/define-properties */
var supportsDescriptors = $Object.defineProperty && (function () {
    try {
        var obj = {};
        $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        for (var _ in obj) { return false; }
        return obj.x === obj;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());
var defineProperties = (function (has) {
  // Define configurable, writable, and non-enumerable props
  // if they don't exist.
  var defineProperty;
  if (supportsDescriptors) {
      defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && (name in object)) { return; }
          $Object.defineProperty(object, name, {
              configurable: true,
              enumerable: false,
              writable: true,
              value: method
          });
      };
  } else {
      defineProperty = function (object, name, method, forceAssign) {
          if (!forceAssign && (name in object)) { return; }
          object[name] = method;
      };
  }
  return function defineProperties(object, map, forceAssign) {
      for (var name in map) {
          if (has.call(map, name)) {
            defineProperty(object, name, map[name], forceAssign);
          }
      }
  };
}(ObjectPrototype.hasOwnProperty));

//
// Util
// ======
//

/* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */
var isPrimitive = function isPrimitive(input) {
    var type = typeof input;
    return input === null || (type !== 'object' && type !== 'function');
};

var isActualNaN = $Number.isNaN || function (x) { return x !== x; };

var ES = {
    // ES5 9.4
    // http://es5.github.com/#x9.4
    // http://jsperf.com/to-integer
    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */
    ToInteger: function ToInteger(num) {
        var n = +num;
        if (isActualNaN(n)) {
            n = 0;
        } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
            n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }
        return n;
    },

    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */
    ToPrimitive: function ToPrimitive(input) {
        var val, valueOf, toStr;
        if (isPrimitive(input)) {
            return input;
        }
        valueOf = input.valueOf;
        if (isCallable(valueOf)) {
            val = valueOf.call(input);
            if (isPrimitive(val)) {
                return val;
            }
        }
        toStr = input.toString;
        if (isCallable(toStr)) {
            val = toStr.call(input);
            if (isPrimitive(val)) {
                return val;
            }
        }
        throw new TypeError();
    },

    // ES5 9.9
    // http://es5.github.com/#x9.9
    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */
    ToObject: function (o) {
        if (o == null) { // this matches both null and undefined
            throw new TypeError("can't convert " + o + ' to object');
        }
        return $Object(o);
    },

    /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */
    ToUint32: function ToUint32(x) {
        return x >>> 0;
    }
};

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

var Empty = function Empty() {};

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isCallable(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var bound;
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = apply.call(
                    target,
                    this,
                    array_concat.call(args, array_slice.call(arguments))
                );
                if ($Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return apply.call(
                    target,
                    that,
                    array_concat.call(args, array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            array_push.call(boundArgs, '$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        bound = $Function('binder', 'return function (' + array_join.call(boundArgs, ',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

// _Please note: Shortcuts are defined after `Function.prototype.bind` as we
// use it in defining shortcuts.
var owns = call.bind(ObjectPrototype.hasOwnProperty);
var toStr = call.bind(ObjectPrototype.toString);
var arraySlice = call.bind(array_slice);
var arraySliceApply = apply.bind(array_slice);
var strSlice = call.bind(StringPrototype.slice);
var strSplit = call.bind(StringPrototype.split);
var strIndexOf = call.bind(StringPrototype.indexOf);
var pushCall = call.bind(array_push);
var isEnum = call.bind(ObjectPrototype.propertyIsEnumerable);
var arraySort = call.bind(ArrayPrototype.sort);

//
// Array
// =====
//

var isArray = $Array.isArray || function isArray(obj) {
    return toStr(obj) === '[object Array]';
};

// ES5 15.4.4.12
// http://es5.github.com/#x15.4.4.13
// Return len+argCount.
// [bugfix, ielt8]
// IE < 8 bug: [].unshift(0) === undefined but should be "1"
var hasUnshiftReturnValueBug = [].unshift(0) !== 1;
defineProperties(ArrayPrototype, {
    unshift: function () {
        array_unshift.apply(this, arguments);
        return this.length;
    }
}, hasUnshiftReturnValueBug);

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties($Array, { isArray: isArray });

// The IsCallable() check in the Array functions
// has been replaced with a strict check on the
// internal class of the object to trap cases where
// the provided function was actually a regular
// expression literal, which in V8 and
// JavaScriptCore is a typeof "function".  Only in
// V8 are regular expression literals permitted as
// reduce parameters, so it is desirable in the
// general case for the shim to match the more
// strict and common behavior of rejecting regular
// expressions.

// ES5 15.4.4.18
// http://es5.github.com/#x15.4.4.18
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach

// Check failure of by-index access of string characters (IE < 9)
// and failure of `0 in boxedString` (Rhino)
var boxedString = $Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    var threwException = false;
    if (method) {
        try {
            method.call('foo', function (_, __, context) {
                if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
            });

            method.call([1], function () {
                'use strict';

                properlyBoxesStrict = typeof this === 'string';
            }, 'x');
        } catch (e) {
            threwException = true;
        }
    }
    return !!method && !threwException && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(callbackfn/*, thisArg*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var i = -1;
        var length = ES.ToUint32(self.length);
        var T;
        if (arguments.length > 1) {
          T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.forEach callback must be a function');
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                if (typeof T === 'undefined') {
                    callbackfn(self[i], i, object);
                } else {
                    callbackfn.call(T, self[i], i, object);
                }
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.19
// http://es5.github.com/#x15.4.4.19
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
defineProperties(ArrayPrototype, {
    map: function map(callbackfn/*, thisArg*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);
        var result = $Array(length);
        var T;
        if (arguments.length > 1) {
            T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.map callback must be a function');
        }

        for (var i = 0; i < length; i++) {
            if (i in self) {
                if (typeof T === 'undefined') {
                    result[i] = callbackfn(self[i], i, object);
                } else {
                    result[i] = callbackfn.call(T, self[i], i, object);
                }
            }
        }
        return result;
    }
}, !properlyBoxesContext(ArrayPrototype.map));

// ES5 15.4.4.20
// http://es5.github.com/#x15.4.4.20
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
defineProperties(ArrayPrototype, {
    filter: function filter(callbackfn/*, thisArg*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);
        var result = [];
        var value;
        var T;
        if (arguments.length > 1) {
            T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.filter callback must be a function');
        }

        for (var i = 0; i < length; i++) {
            if (i in self) {
                value = self[i];
                if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {
                    pushCall(result, value);
                }
            }
        }
        return result;
    }
}, !properlyBoxesContext(ArrayPrototype.filter));

// ES5 15.4.4.16
// http://es5.github.com/#x15.4.4.16
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
defineProperties(ArrayPrototype, {
    every: function every(callbackfn/*, thisArg*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);
        var T;
        if (arguments.length > 1) {
            T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.every callback must be a function');
        }

        for (var i = 0; i < length; i++) {
            if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                return false;
            }
        }
        return true;
    }
}, !properlyBoxesContext(ArrayPrototype.every));

// ES5 15.4.4.17
// http://es5.github.com/#x15.4.4.17
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
defineProperties(ArrayPrototype, {
    some: function some(callbackfn/*, thisArg */) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);
        var T;
        if (arguments.length > 1) {
            T = arguments[1];
        }

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.some callback must be a function');
        }

        for (var i = 0; i < length; i++) {
            if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {
                return true;
            }
        }
        return false;
    }
}, !properlyBoxesContext(ArrayPrototype.some));

// ES5 15.4.4.21
// http://es5.github.com/#x15.4.4.21
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
var reduceCoercesToObject = false;
if (ArrayPrototype.reduce) {
    reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) { return list; }) === 'object';
}
defineProperties(ArrayPrototype, {
    reduce: function reduce(callbackfn/*, initialValue*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.reduce callback must be a function');
        }

        // no value to return if no initial value and an empty array
        if (length === 0 && arguments.length === 1) {
            throw new TypeError('reduce of empty array with no initial value');
        }

        var i = 0;
        var result;
        if (arguments.length >= 2) {
            result = arguments[1];
        } else {
            do {
                if (i in self) {
                    result = self[i++];
                    break;
                }

                // if array contains no values, no initial value to return
                if (++i >= length) {
                    throw new TypeError('reduce of empty array with no initial value');
                }
            } while (true);
        }

        for (; i < length; i++) {
            if (i in self) {
                result = callbackfn(result, self[i], i, object);
            }
        }

        return result;
    }
}, !reduceCoercesToObject);

// ES5 15.4.4.22
// http://es5.github.com/#x15.4.4.22
// https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
var reduceRightCoercesToObject = false;
if (ArrayPrototype.reduceRight) {
    reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) { return list; }) === 'object';
}
defineProperties(ArrayPrototype, {
    reduceRight: function reduceRight(callbackfn/*, initial*/) {
        var object = ES.ToObject(this);
        var self = splitString && isString(this) ? strSplit(this, '') : object;
        var length = ES.ToUint32(self.length);

        // If no callback function or if callback is not a callable function
        if (!isCallable(callbackfn)) {
            throw new TypeError('Array.prototype.reduceRight callback must be a function');
        }

        // no value to return if no initial value, empty array
        if (length === 0 && arguments.length === 1) {
            throw new TypeError('reduceRight of empty array with no initial value');
        }

        var result;
        var i = length - 1;
        if (arguments.length >= 2) {
            result = arguments[1];
        } else {
            do {
                if (i in self) {
                    result = self[i--];
                    break;
                }

                // if array contains no values, no initial value to return
                if (--i < 0) {
                    throw new TypeError('reduceRight of empty array with no initial value');
                }
            } while (true);
        }

        if (i < 0) {
            return result;
        }

        do {
            if (i in self) {
                result = callbackfn(result, self[i], i, object);
            }
        } while (i--);

        return result;
    }
}, !reduceRightCoercesToObject);

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(searchElement/*, fromIndex */) {
        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
        var length = ES.ToUint32(self.length);

        if (length === 0) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = ES.ToInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === searchElement) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

// ES5 15.4.4.15
// http://es5.github.com/#x15.4.4.15
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
var hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;
defineProperties(ArrayPrototype, {
    lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {
        var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);
        var length = ES.ToUint32(self.length);

        if (length === 0) {
            return -1;
        }
        var i = length - 1;
        if (arguments.length > 1) {
            i = min(i, ES.ToInteger(arguments[1]));
        }
        // handle negative indices
        i = i >= 0 ? i : length - Math.abs(i);
        for (; i >= 0; i--) {
            if (i in self && searchElement === self[i]) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2LastIndexOfBug);

// ES5 15.4.4.12
// http://es5.github.com/#x15.4.4.12
var spliceNoopReturnsEmptyArray = (function () {
    var a = [1, 2];
    var result = a.splice();
    return a.length === 2 && isArray(result) && result.length === 0;
}());
defineProperties(ArrayPrototype, {
    // Safari 5.0 bug where .splice() returns undefined
    splice: function splice(start, deleteCount) {
        if (arguments.length === 0) {
            return [];
        } else {
            return array_splice.apply(this, arguments);
        }
    }
}, !spliceNoopReturnsEmptyArray);

var spliceWorksWithEmptyObject = (function () {
    var obj = {};
    ArrayPrototype.splice.call(obj, 0, 0, 1);
    return obj.length === 1;
}());
defineProperties(ArrayPrototype, {
    splice: function splice(start, deleteCount) {
        if (arguments.length === 0) { return []; }
        var args = arguments;
        this.length = max(ES.ToInteger(this.length), 0);
        if (arguments.length > 0 && typeof deleteCount !== 'number') {
            args = arraySlice(arguments);
            if (args.length < 2) {
                pushCall(args, this.length - start);
            } else {
                args[1] = ES.ToInteger(deleteCount);
            }
        }
        return array_splice.apply(this, args);
    }
}, !spliceWorksWithEmptyObject);
var spliceWorksWithLargeSparseArrays = (function () {
    // Per https://github.com/es-shims/es5-shim/issues/295
    // Safari 7/8 breaks with sparse arrays of size 1e5 or greater
    var arr = new $Array(1e5);
    // note: the index MUST be 8 or larger or the test will false pass
    arr[8] = 'x';
    arr.splice(1, 1);
    // note: this test must be defined *after* the indexOf shim
    // per https://github.com/es-shims/es5-shim/issues/313
    return arr.indexOf('x') === 7;
}());
var spliceWorksWithSmallSparseArrays = (function () {
    // Per https://github.com/es-shims/es5-shim/issues/295
    // Opera 12.15 breaks on this, no idea why.
    var n = 256;
    var arr = [];
    arr[n] = 'a';
    arr.splice(n + 1, 0, 'b');
    return arr[n] === 'a';
}());
defineProperties(ArrayPrototype, {
    splice: function splice(start, deleteCount) {
        var O = ES.ToObject(this);
        var A = [];
        var len = ES.ToUint32(O.length);
        var relativeStart = ES.ToInteger(start);
        var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);
        var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);

        var k = 0;
        var from;
        while (k < actualDeleteCount) {
            from = $String(actualStart + k);
            if (owns(O, from)) {
                A[k] = O[from];
            }
            k += 1;
        }

        var items = arraySlice(arguments, 2);
        var itemCount = items.length;
        var to;
        if (itemCount < actualDeleteCount) {
            k = actualStart;
            var maxK = len - actualDeleteCount;
            while (k < maxK) {
                from = $String(k + actualDeleteCount);
                to = $String(k + itemCount);
                if (owns(O, from)) {
                    O[to] = O[from];
                } else {
                    delete O[to];
                }
                k += 1;
            }
            k = len;
            var minK = len - actualDeleteCount + itemCount;
            while (k > minK) {
                delete O[k - 1];
                k -= 1;
            }
        } else if (itemCount > actualDeleteCount) {
            k = len - actualDeleteCount;
            while (k > actualStart) {
                from = $String(k + actualDeleteCount - 1);
                to = $String(k + itemCount - 1);
                if (owns(O, from)) {
                    O[to] = O[from];
                } else {
                    delete O[to];
                }
                k -= 1;
            }
        }
        k = actualStart;
        for (var i = 0; i < items.length; ++i) {
            O[k] = items[i];
            k += 1;
        }
        O.length = len - actualDeleteCount + itemCount;

        return A;
    }
}, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);

var originalJoin = ArrayPrototype.join;
var hasStringJoinBug;
try {
    hasStringJoinBug = Array.prototype.join.call('123', ',') !== '1,2,3';
} catch (e) {
    hasStringJoinBug = true;
}
if (hasStringJoinBug) {
    defineProperties(ArrayPrototype, {
        join: function join(separator) {
            var sep = typeof separator === 'undefined' ? ',' : separator;
            return originalJoin.call(isString(this) ? strSplit(this, '') : this, sep);
        }
    }, hasStringJoinBug);
}

var hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';
if (hasJoinUndefinedBug) {
    defineProperties(ArrayPrototype, {
        join: function join(separator) {
            var sep = typeof separator === 'undefined' ? ',' : separator;
            return originalJoin.call(this, sep);
        }
    }, hasJoinUndefinedBug);
}

var pushShim = function push(item) {
    var O = ES.ToObject(this);
    var n = ES.ToUint32(O.length);
    var i = 0;
    while (i < arguments.length) {
        O[n + i] = arguments[i];
        i += 1;
    }
    O.length = n + i;
    return n + i;
};

var pushIsNotGeneric = (function () {
    var obj = {};
    var result = Array.prototype.push.call(obj, undefined);
    return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);
}());
defineProperties(ArrayPrototype, {
    push: function push(item) {
        if (isArray(this)) {
            return array_push.apply(this, arguments);
        }
        return pushShim.apply(this, arguments);
    }
}, pushIsNotGeneric);

// This fixes a very weird bug in Opera 10.6 when pushing `undefined
var pushUndefinedIsWeird = (function () {
    var arr = [];
    var result = arr.push(undefined);
    return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);
}());
defineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);

// ES5 15.2.3.14
// http://es5.github.io/#x15.4.4.10
// Fix boxed string bug
defineProperties(ArrayPrototype, {
    slice: function (start, end) {
        var arr = isString(this) ? strSplit(this, '') : this;
        return arraySliceApply(arr, arguments);
    }
}, splitString);

var sortIgnoresNonFunctions = (function () {
    try {
        [1, 2].sort(null);
        [1, 2].sort({});
        return true;
    } catch (e) { /**/ }
    return false;
}());
var sortThrowsOnRegex = (function () {
    // this is a problem in Firefox 4, in which `typeof /a/ === 'function'`
    try {
        [1, 2].sort(/a/);
        return false;
    } catch (e) { /**/ }
    return true;
}());
var sortIgnoresUndefined = (function () {
    // applies in IE 8, for one.
    try {
        [1, 2].sort(undefined);
        return true;
    } catch (e) { /**/ }
    return false;
}());
defineProperties(ArrayPrototype, {
    sort: function sort(compareFn) {
        if (typeof compareFn === 'undefined') {
            return arraySort(this);
        }
        if (!isCallable(compareFn)) {
            throw new TypeError('Array.prototype.sort callback must be a function');
        }
        return arraySort(this, compareFn);
    }
}, sortIgnoresNonFunctions || !sortIgnoresUndefined || !sortThrowsOnRegex);

//
// Object
// ======
//

// ES5 15.2.3.14
// http://es5.github.com/#x15.2.3.14

// http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
var hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString');
var hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');
var hasStringEnumBug = !owns('x', '0');
var equalsConstructorPrototype = function (o) {
    var ctor = o.constructor;
    return ctor && ctor.prototype === o;
};
var blacklistedKeys = {
    $window: true,
    $console: true,
    $parent: true,
    $self: true,
    $frame: true,
    $frames: true,
    $frameElement: true,
    $webkitIndexedDB: true,
    $webkitStorageInfo: true,
    $external: true
};
var hasAutomationEqualityBug = (function () {
    /* globals window */
    if (typeof window === 'undefined') { return false; }
    for (var k in window) {
        try {
            if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {
                equalsConstructorPrototype(window[k]);
            }
        } catch (e) {
            return true;
        }
    }
    return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (object) {
    if (typeof window === 'undefined' || !hasAutomationEqualityBug) { return equalsConstructorPrototype(object); }
    try {
        return equalsConstructorPrototype(object);
    } catch (e) {
        return false;
    }
};
var dontEnums = [
    'toString',
    'toLocaleString',
    'valueOf',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'constructor'
];
var dontEnumsLength = dontEnums.length;

// taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js
// can be replaced with require('is-arguments') if we ever use a build process instead
var isStandardArguments = function isArguments(value) {
    return toStr(value) === '[object Arguments]';
};
var isLegacyArguments = function isArguments(value) {
    return value !== null &&
        typeof value === 'object' &&
        typeof value.length === 'number' &&
        value.length >= 0 &&
        !isArray(value) &&
        isCallable(value.callee);
};
var isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;

defineProperties($Object, {
    keys: function keys(object) {
        var isFn = isCallable(object);
        var isArgs = isArguments(object);
        var isObject = object !== null && typeof object === 'object';
        var isStr = isObject && isString(object);

        if (!isObject && !isFn && !isArgs) {
            throw new TypeError('Object.keys called on a non-object');
        }

        var theKeys = [];
        var skipProto = hasProtoEnumBug && isFn;
        if ((isStr && hasStringEnumBug) || isArgs) {
            for (var i = 0; i < object.length; ++i) {
                pushCall(theKeys, $String(i));
            }
        }

        if (!isArgs) {
            for (var name in object) {
                if (!(skipProto && name === 'prototype') && owns(object, name)) {
                    pushCall(theKeys, $String(name));
                }
            }
        }

        if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
            for (var j = 0; j < dontEnumsLength; j++) {
                var dontEnum = dontEnums[j];
                if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {
                    pushCall(theKeys, dontEnum);
                }
            }
        }
        return theKeys;
    }
});

var keysWorksWithArguments = $Object.keys && (function () {
    // Safari 5.0 bug
    return $Object.keys(arguments).length === 2;
}(1, 2));
var keysHasArgumentsLengthBug = $Object.keys && (function () {
    var argKeys = $Object.keys(arguments);
    return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;
}(1));
var originalKeys = $Object.keys;
defineProperties($Object, {
    keys: function keys(object) {
        if (isArguments(object)) {
            return originalKeys(arraySlice(object));
        } else {
            return originalKeys(object);
        }
    }
}, !keysWorksWithArguments || keysHasArgumentsLengthBug);

//
// Date
// ====
//

var hasNegativeMonthYearBug = new Date(-3509827329600292).getUTCMonth() !== 0;
var aNegativeTestDate = new Date(-1509842289600292);
var aPositiveTestDate = new Date(1449662400000);
var hasToUTCStringFormatBug = aNegativeTestDate.toUTCString() !== 'Mon, 01 Jan -45875 11:59:59 GMT';
var hasToDateStringFormatBug;
var hasToStringFormatBug;
var timeZoneOffset = aNegativeTestDate.getTimezoneOffset();
if (timeZoneOffset < -720) {
    hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Tue Jan 02 -45875';
    hasToStringFormatBug = !(/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
} else {
    hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Mon Jan 01 -45875';
    hasToStringFormatBug = !(/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-\+]\d\d\d\d(?: |$)/).test(aPositiveTestDate.toString());
}

var originalGetFullYear = call.bind(Date.prototype.getFullYear);
var originalGetMonth = call.bind(Date.prototype.getMonth);
var originalGetDate = call.bind(Date.prototype.getDate);
var originalGetUTCFullYear = call.bind(Date.prototype.getUTCFullYear);
var originalGetUTCMonth = call.bind(Date.prototype.getUTCMonth);
var originalGetUTCDate = call.bind(Date.prototype.getUTCDate);
var originalGetUTCDay = call.bind(Date.prototype.getUTCDay);
var originalGetUTCHours = call.bind(Date.prototype.getUTCHours);
var originalGetUTCMinutes = call.bind(Date.prototype.getUTCMinutes);
var originalGetUTCSeconds = call.bind(Date.prototype.getUTCSeconds);
var originalGetUTCMilliseconds = call.bind(Date.prototype.getUTCMilliseconds);
var dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
var daysInMonth = function daysInMonth(month, year) {
    return originalGetDate(new Date(year, month, 0));
};

defineProperties(Date.prototype, {
    getFullYear: function getFullYear() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetFullYear(this);
        if (year < 0 && originalGetMonth(this) > 11) {
            return year + 1;
        }
        return year;
    },
    getMonth: function getMonth() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetFullYear(this);
        var month = originalGetMonth(this);
        if (year < 0 && month > 11) {
            return 0;
        }
        return month;
    },
    getDate: function getDate() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetFullYear(this);
        var month = originalGetMonth(this);
        var date = originalGetDate(this);
        if (year < 0 && month > 11) {
            if (month === 12) {
                return date;
            }
            var days = daysInMonth(0, year + 1);
            return (days - date) + 1;
        }
        return date;
    },
    getUTCFullYear: function getUTCFullYear() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetUTCFullYear(this);
        if (year < 0 && originalGetUTCMonth(this) > 11) {
            return year + 1;
        }
        return year;
    },
    getUTCMonth: function getUTCMonth() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetUTCFullYear(this);
        var month = originalGetUTCMonth(this);
        if (year < 0 && month > 11) {
            return 0;
        }
        return month;
    },
    getUTCDate: function getUTCDate() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var year = originalGetUTCFullYear(this);
        var month = originalGetUTCMonth(this);
        var date = originalGetUTCDate(this);
        if (year < 0 && month > 11) {
            if (month === 12) {
                return date;
            }
            var days = daysInMonth(0, year + 1);
            return (days - date) + 1;
        }
        return date;
    }
}, hasNegativeMonthYearBug);

defineProperties(Date.prototype, {
    toUTCString: function toUTCString() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var day = originalGetUTCDay(this);
        var date = originalGetUTCDate(this);
        var month = originalGetUTCMonth(this);
        var year = originalGetUTCFullYear(this);
        var hour = originalGetUTCHours(this);
        var minute = originalGetUTCMinutes(this);
        var second = originalGetUTCSeconds(this);
        return dayName[day] + ', ' +
            (date < 10 ? '0' + date : date) + ' ' +
            monthName[month] + ' ' +
            year + ' ' +
            (hour < 10 ? '0' + hour : hour) + ':' +
            (minute < 10 ? '0' + minute : minute) + ':' +
            (second < 10 ? '0' + second : second) + ' GMT';
    }
}, hasNegativeMonthYearBug || hasToUTCStringFormatBug);

// Opera 12 has `,`
defineProperties(Date.prototype, {
    toDateString: function toDateString() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var day = this.getDay();
        var date = this.getDate();
        var month = this.getMonth();
        var year = this.getFullYear();
        return dayName[day] + ' ' +
            monthName[month] + ' ' +
            (date < 10 ? '0' + date : date) + ' ' +
            year;
    }
}, hasNegativeMonthYearBug || hasToDateStringFormatBug);

// can't use defineProperties here because of toString enumeration issue in IE <= 8
if (hasNegativeMonthYearBug || hasToStringFormatBug) {
    Date.prototype.toString = function toString() {
        if (!this || !(this instanceof Date)) {
            throw new TypeError('this is not a Date object.');
        }
        var day = this.getDay();
        var date = this.getDate();
        var month = this.getMonth();
        var year = this.getFullYear();
        var hour = this.getHours();
        var minute = this.getMinutes();
        var second = this.getSeconds();
        var timezoneOffset = this.getTimezoneOffset();
        var hoursOffset = Math.floor(Math.abs(timezoneOffset) / 60);
        var minutesOffset = Math.floor(Math.abs(timezoneOffset) % 60);
        return dayName[day] + ' ' +
            monthName[month] + ' ' +
            (date < 10 ? '0' + date : date) + ' ' +
            year + ' ' +
            (hour < 10 ? '0' + hour : hour) + ':' +
            (minute < 10 ? '0' + minute : minute) + ':' +
            (second < 10 ? '0' + second : second) + ' GMT' +
            (timezoneOffset > 0 ? '-' : '+') +
            (hoursOffset < 10 ? '0' + hoursOffset : hoursOffset) +
            (minutesOffset < 10 ? '0' + minutesOffset : minutesOffset);
    };
    if (supportsDescriptors) {
        $Object.defineProperty(Date.prototype, 'toString', {
            configurable: true,
            enumerable: false,
            writable: true
        });
    }
}

// ES5 15.9.5.43
// http://es5.github.com/#x15.9.5.43
// This function returns a String value represent the instance in time
// represented by this Date object. The format of the String is the Date Time
// string format defined in 15.9.1.15. All fields are present in the String.
// The time zone is always UTC, denoted by the suffix Z. If the time value of
// this object is not a finite Number a RangeError exception is thrown.
var negativeDate = -62198755200000;
var negativeYearString = '-000001';
var hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;
var hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';

var getTime = call.bind(Date.prototype.getTime);

defineProperties(Date.prototype, {
    toISOString: function toISOString() {
        if (!isFinite(this) || !isFinite(getTime(this))) {
            // Adope Photoshop requires the second check.
            throw new RangeError('Date.prototype.toISOString called on non-finite value.');
        }

        var year = originalGetUTCFullYear(this);

        var month = originalGetUTCMonth(this);
        // see https://github.com/es-shims/es5-shim/issues/111
        year += Math.floor(month / 12);
        month = (month % 12 + 12) % 12;

        // the date time string format is specified in 15.9.1.15.
        var result = [month + 1, originalGetUTCDate(this), originalGetUTCHours(this), originalGetUTCMinutes(this), originalGetUTCSeconds(this)];
        year = (
            (year < 0 ? '-' : (year > 9999 ? '+' : '')) +
            strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)
        );

        for (var i = 0; i < result.length; ++i) {
          // pad months, days, hours, minutes, and seconds to have two digits.
          result[i] = strSlice('00' + result[i], -2);
        }
        // pad milliseconds to have three digits.
        return (
            year + '-' + arraySlice(result, 0, 2).join('-') +
            'T' + arraySlice(result, 2).join(':') + '.' +
            strSlice('000' + originalGetUTCMilliseconds(this), -3) + 'Z'
        );
    }
}, hasNegativeDateBug || hasSafari51DateBug);

// ES5 15.9.5.44
// http://es5.github.com/#x15.9.5.44
// This function provides a String representation of a Date object for use by
// JSON.stringify (15.12.3).
var dateToJSONIsSupported = (function () {
    try {
        return Date.prototype.toJSON &&
            new Date(NaN).toJSON() === null &&
            new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&
            Date.prototype.toJSON.call({ // generic
                toISOString: function () { return true; }
            });
    } catch (e) {
        return false;
    }
}());
if (!dateToJSONIsSupported) {
    Date.prototype.toJSON = function toJSON(key) {
        // When the toJSON method is called with argument key, the following
        // steps are taken:

        // 1.  Let O be the result of calling ToObject, giving it the this
        // value as its argument.
        // 2. Let tv be ES.ToPrimitive(O, hint Number).
        var O = $Object(this);
        var tv = ES.ToPrimitive(O);
        // 3. If tv is a Number and is not finite, return null.
        if (typeof tv === 'number' && !isFinite(tv)) {
            return null;
        }
        // 4. Let toISO be the result of calling the [[Get]] internal method of
        // O with argument "toISOString".
        var toISO = O.toISOString;
        // 5. If IsCallable(toISO) is false, throw a TypeError exception.
        if (!isCallable(toISO)) {
            throw new TypeError('toISOString property is not callable');
        }
        // 6. Return the result of calling the [[Call]] internal method of
        //  toISO with O as the this value and an empty argument list.
        return toISO.call(O);

        // NOTE 1 The argument is ignored.

        // NOTE 2 The toJSON function is intentionally generic; it does not
        // require that its this value be a Date object. Therefore, it can be
        // transferred to other kinds of objects for use as a method. However,
        // it does require that any such object have a toISOString method. An
        // object is free to use the argument key to filter its
        // stringification.
    };
}

// ES5 15.9.4.2
// http://es5.github.com/#x15.9.4.2
// based on work shared by Daniel Friesen (dantman)
// http://gist.github.com/303249
var supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;
var acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));
var doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));
if (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {
    // XXX global assignment won't work in embeddings that use
    // an alternate object for the context.
    /* global Date: true */
    /* eslint-disable no-undef */
    var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;
    var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());
    /* eslint-disable no-implicit-globals */
    Date = (function (NativeDate) {
    /* eslint-enable no-implicit-globals */
    /* eslint-enable no-undef */
        // Date.length === 7
        var DateShim = function Date(Y, M, D, h, m, s, ms) {
            var length = arguments.length;
            var date;
            if (this instanceof NativeDate) {
                var seconds = s;
                var millis = ms;
                if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {
                    // work around a Safari 8/9 bug where it treats the seconds as signed
                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
                    var sToShift = Math.floor(msToShift / 1e3);
                    seconds += sToShift;
                    millis -= sToShift * 1e3;
                }
                date = length === 1 && $String(Y) === Y ? // isString(Y)
                    // We explicitly pass it through parse:
                    new NativeDate(DateShim.parse(Y)) :
                    // We have to manually make calls depending on argument
                    // length here
                    length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :
                    length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :
                    length >= 5 ? new NativeDate(Y, M, D, h, m) :
                    length >= 4 ? new NativeDate(Y, M, D, h) :
                    length >= 3 ? new NativeDate(Y, M, D) :
                    length >= 2 ? new NativeDate(Y, M) :
                    length >= 1 ? new NativeDate(Y instanceof NativeDate ? +Y : Y) :
                                  new NativeDate();
            } else {
                date = NativeDate.apply(this, arguments);
            }
            if (!isPrimitive(date)) {
              // Prevent mixups with unfixed Date object
              defineProperties(date, { constructor: DateShim }, true);
            }
            return date;
        };

        // 15.9.1.15 Date Time String Format.
        var isoDateExpression = new RegExp('^' +
            '(\\d{4}|[+-]\\d{6})' + // four-digit year capture or sign +
                                      // 6-digit extended year
            '(?:-(\\d{2})' + // optional month capture
            '(?:-(\\d{2})' + // optional day capture
            '(?:' + // capture hours:minutes:seconds.milliseconds
                'T(\\d{2})' + // hours capture
                ':(\\d{2})' + // minutes capture
                '(?:' + // optional :seconds.milliseconds
                    ':(\\d{2})' + // seconds capture
                    '(?:(\\.\\d{1,}))?' + // milliseconds capture
                ')?' +
            '(' + // capture UTC offset component
                'Z|' + // UTC capture
                '(?:' + // offset specifier +/-hours:minutes
                    '([-+])' + // sign capture
                    '(\\d{2})' + // hours offset capture
                    ':(\\d{2})' + // minutes offset capture
                ')' +
            ')?)?)?)?' +
        '$');

        var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];

        var dayFromMonth = function dayFromMonth(year, month) {
            var t = month > 1 ? 1 : 0;
            return (
                months[month] +
                Math.floor((year - 1969 + t) / 4) -
                Math.floor((year - 1901 + t) / 100) +
                Math.floor((year - 1601 + t) / 400) +
                365 * (year - 1970)
            );
        };

        var toUTC = function toUTC(t) {
            var s = 0;
            var ms = t;
            if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {
                // work around a Safari 8/9 bug where it treats the seconds as signed
                var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;
                var sToShift = Math.floor(msToShift / 1e3);
                s += sToShift;
                ms -= sToShift * 1e3;
            }
            return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));
        };

        // Copy any custom methods a 3rd party library may have added
        for (var key in NativeDate) {
            if (owns(NativeDate, key)) {
                DateShim[key] = NativeDate[key];
            }
        }

        // Copy "native" methods explicitly; they may be non-enumerable
        defineProperties(DateShim, {
            now: NativeDate.now,
            UTC: NativeDate.UTC
        }, true);
        DateShim.prototype = NativeDate.prototype;
        defineProperties(DateShim.prototype, {
            constructor: DateShim
        }, true);

        // Upgrade Date.parse to handle simplified ISO 8601 strings
        var parseShim = function parse(string) {
            var match = isoDateExpression.exec(string);
            if (match) {
                // parse months, days, hours, minutes, seconds, and milliseconds
                // provide default values if necessary
                // parse the UTC offset component
                var year = $Number(match[1]),
                    month = $Number(match[2] || 1) - 1,
                    day = $Number(match[3] || 1) - 1,
                    hour = $Number(match[4] || 0),
                    minute = $Number(match[5] || 0),
                    second = $Number(match[6] || 0),
                    millisecond = Math.floor($Number(match[7] || 0) * 1000),
                    // When time zone is missed, local offset should be used
                    // (ES 5.1 bug)
                    // see https://bugs.ecmascript.org/show_bug.cgi?id=112
                    isLocalTime = Boolean(match[4] && !match[8]),
                    signOffset = match[9] === '-' ? 1 : -1,
                    hourOffset = $Number(match[10] || 0),
                    minuteOffset = $Number(match[11] || 0),
                    result;
                var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;
                if (
                    hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&
                    minute < 60 && second < 60 && millisecond < 1000 &&
                    month > -1 && month < 12 && hourOffset < 24 &&
                    minuteOffset < 60 && // detect invalid offsets
                    day > -1 &&
                    day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))
                ) {
                    result = (
                        (dayFromMonth(year, month) + day) * 24 +
                        hour +
                        hourOffset * signOffset
                    ) * 60;
                    result = (
                        (result + minute + minuteOffset * signOffset) * 60 +
                        second
                    ) * 1000 + millisecond;
                    if (isLocalTime) {
                        result = toUTC(result);
                    }
                    if (-8.64e15 <= result && result <= 8.64e15) {
                        return result;
                    }
                }
                return NaN;
            }
            return NativeDate.parse.apply(this, arguments);
        };
        defineProperties(DateShim, { parse: parseShim });

        return DateShim;
    }(Date));
    /* global Date: false */
}

// ES5 15.9.4.4
// http://es5.github.com/#x15.9.4.4
if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}

//
// Number
// ======
//

// ES5.1 15.7.4.5
// http://es5.github.com/#x15.7.4.5
var hasToFixedBugs = NumberPrototype.toFixed && (
  (0.00008).toFixed(3) !== '0.000' ||
  (0.9).toFixed(0) !== '1' ||
  (1.255).toFixed(2) !== '1.25' ||
  (1000000000000000128).toFixed(0) !== '1000000000000000128'
);

var toFixedHelpers = {
  base: 1e7,
  size: 6,
  data: [0, 0, 0, 0, 0, 0],
  multiply: function multiply(n, c) {
      var i = -1;
      var c2 = c;
      while (++i < toFixedHelpers.size) {
          c2 += n * toFixedHelpers.data[i];
          toFixedHelpers.data[i] = c2 % toFixedHelpers.base;
          c2 = Math.floor(c2 / toFixedHelpers.base);
      }
  },
  divide: function divide(n) {
      var i = toFixedHelpers.size;
      var c = 0;
      while (--i >= 0) {
          c += toFixedHelpers.data[i];
          toFixedHelpers.data[i] = Math.floor(c / n);
          c = (c % n) * toFixedHelpers.base;
      }
  },
  numToString: function numToString() {
      var i = toFixedHelpers.size;
      var s = '';
      while (--i >= 0) {
          if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {
              var t = $String(toFixedHelpers.data[i]);
              if (s === '') {
                  s = t;
              } else {
                  s += strSlice('0000000', 0, 7 - t.length) + t;
              }
          }
      }
      return s;
  },
  pow: function pow(x, n, acc) {
      return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));
  },
  log: function log(x) {
      var n = 0;
      var x2 = x;
      while (x2 >= 4096) {
          n += 12;
          x2 /= 4096;
      }
      while (x2 >= 2) {
          n += 1;
          x2 /= 2;
      }
      return n;
  }
};

var toFixedShim = function toFixed(fractionDigits) {
    var f, x, s, m, e, z, j, k;

    // Test for NaN and round fractionDigits down
    f = $Number(fractionDigits);
    f = isActualNaN(f) ? 0 : Math.floor(f);

    if (f < 0 || f > 20) {
        throw new RangeError('Number.toFixed called with invalid number of decimals');
    }

    x = $Number(this);

    if (isActualNaN(x)) {
        return 'NaN';
    }

    // If it is too big or small, return the string value of the number
    if (x <= -1e21 || x >= 1e21) {
        return $String(x);
    }

    s = '';

    if (x < 0) {
        s = '-';
        x = -x;
    }

    m = '0';

    if (x > 1e-21) {
        // 1e-21 < x < 1e21
        // -70 < log2(x) < 70
        e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;
        z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));
        z *= 0x10000000000000; // Math.pow(2, 52);
        e = 52 - e;

        // -18 < e < 122
        // x = z / 2 ^ e
        if (e > 0) {
            toFixedHelpers.multiply(0, z);
            j = f;

            while (j >= 7) {
                toFixedHelpers.multiply(1e7, 0);
                j -= 7;
            }

            toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);
            j = e - 1;

            while (j >= 23) {
                toFixedHelpers.divide(1 << 23);
                j -= 23;
            }

            toFixedHelpers.divide(1 << j);
            toFixedHelpers.multiply(1, 1);
            toFixedHelpers.divide(2);
            m = toFixedHelpers.numToString();
        } else {
            toFixedHelpers.multiply(0, z);
            toFixedHelpers.multiply(1 << (-e), 0);
            m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);
        }
    }

    if (f > 0) {
        k = m.length;

        if (k <= f) {
            m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;
        } else {
            m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);
        }
    } else {
        m = s + m;
    }

    return m;
};
defineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);

var hasToPrecisionUndefinedBug = (function () {
    try {
        return 1.0.toPrecision(undefined) === '1';
    } catch (e) {
        return true;
    }
}());
var originalToPrecision = NumberPrototype.toPrecision;
defineProperties(NumberPrototype, {
    toPrecision: function toPrecision(precision) {
        return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);
    }
}, hasToPrecisionUndefinedBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group
        var maxSafe32BitInt = Math.pow(2, 32) - 1;

        StringPrototype.split = function (separator, limit) {
            var string = String(this);
            if (typeof separator === 'undefined' && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (!isRegex(separator)) {
                return strSplit(this, separator, limit);
            }

            var output = [];
            var flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline ? 'm' : '') +
                        (separator.unicode ? 'u' : '') + // in ES6
                        (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            var separatorCopy = new RegExp(separator.source, flags + 'g');
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // maxSafe32BitInt
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);
            match = separatorCopy.exec(string);
            while (match) {
                // `separatorCopy.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    pushCall(output, strSlice(string, lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        /* eslint-disable no-loop-func */
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (typeof arguments[i] === 'undefined') {
                                    match[i] = void 0;
                                }
                            }
                        });
                        /* eslint-enable no-loop-func */
                    }
                    if (match.length > 1 && match.index < string.length) {
                        array_push.apply(output, arraySlice(match, 1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= splitLimit) {
                        break;
                    }
                }
                if (separatorCopy.lastIndex === match.index) {
                    separatorCopy.lastIndex++; // Avoid an infinite loop
                }
                match = separatorCopy.exec(string);
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separatorCopy.test('')) {
                    pushCall(output, '');
                }
            } else {
                pushCall(output, strSlice(string, lastLastIndex));
            }
            return output.length > splitLimit ? arraySlice(output, 0, splitLimit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (typeof separator === 'undefined' && limit === 0) { return []; }
        return strSplit(this, separator, limit);
    };
}

var str_replace = StringPrototype.replace;
var replaceReportsGroupsCorrectly = (function () {
    var groups = [];
    'x'.replace(/x(.)?/g, function (match, group) {
        pushCall(groups, group);
    });
    return groups.length === 1 && typeof groups[0] === 'undefined';
}());

if (!replaceReportsGroupsCorrectly) {
    StringPrototype.replace = function replace(searchValue, replaceValue) {
        var isFn = isCallable(replaceValue);
        var hasCapturingGroups = isRegex(searchValue) && (/\)[*?]/).test(searchValue.source);
        if (!isFn || !hasCapturingGroups) {
            return str_replace.call(this, searchValue, replaceValue);
        } else {
            var wrappedReplaceValue = function (match) {
                var length = arguments.length;
                var originalLastIndex = searchValue.lastIndex;
                searchValue.lastIndex = 0;
                var args = searchValue.exec(match) || [];
                searchValue.lastIndex = originalLastIndex;
                pushCall(args, arguments[length - 2], arguments[length - 1]);
                return replaceValue.apply(this, args);
            };
            return str_replace.call(this, searchValue, wrappedReplaceValue);
        }
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        var normalizedStart = start;
        if (start < 0) {
            normalizedStart = max(this.length + start, 0);
        }
        return string_substr.call(this, normalizedStart, length);
    }
}, hasNegativeSubstrBug);

// ES5 15.5.4.20
// whitespace from: http://es5.github.io/#x15.5.4.20
var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
    '\u2029\uFEFF';
var zeroWidth = '\u200b';
var wsRegexChars = '[' + ws + ']';
var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');
var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');
var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());
defineProperties(StringPrototype, {
    // http://blog.stevenlevithan.com/archives/faster-trim-javascript
    // http://perfectionkills.com/whitespace-deviations/
    trim: function trim() {
        if (typeof this === 'undefined' || this === null) {
            throw new TypeError("can't convert " + this + ' to object');
        }
        return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
    }
}, hasTrimWhitespaceBug);
var trim = call.bind(String.prototype.trim);

var hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;
defineProperties(StringPrototype, {
    lastIndexOf: function lastIndexOf(searchString) {
        if (typeof this === 'undefined' || this === null) {
            throw new TypeError("can't convert " + this + ' to object');
        }
        var S = $String(this);
        var searchStr = $String(searchString);
        var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;
        var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);
        var start = min(max(pos, 0), S.length);
        var searchLen = searchStr.length;
        var k = start + searchLen;
        while (k > 0) {
            k = max(0, k - searchLen);
            var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);
            if (index !== -1) {
                return k + index;
            }
        }
        return -1;
    }
}, hasLastIndexBug);

var originalLastIndexOf = StringPrototype.lastIndexOf;
defineProperties(StringPrototype, {
    lastIndexOf: function lastIndexOf(searchString) {
        return originalLastIndexOf.apply(this, arguments);
    }
}, StringPrototype.lastIndexOf.length !== 1);

// ES-5 15.1.2.2
/* eslint-disable radix */
if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {
/* eslint-enable radix */
    /* global parseInt: true */
    parseInt = (function (origParseInt) {
        var hexRegex = /^[\-+]?0[xX]/;
        return function parseInt(str, radix) {
            var string = trim(str);
            var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);
            return origParseInt(string, defaultedRadix);
        };
    }(parseInt));
}

// https://es5.github.io/#x15.1.2.3
if (1 / parseFloat('-0') !== -Infinity) {
    /* global parseFloat: true */
    parseFloat = (function (origParseFloat) {
        return function parseFloat(string) {
            var inputString = trim(string);
            var result = origParseFloat(inputString);
            return result === 0 && strSlice(inputString, 0, 1) === '-' ? -0 : result;
        };
    }(parseFloat));
}

if (String(new RangeError('test')) !== 'RangeError: test') {
    var errorToStringShim = function toString() {
        if (typeof this === 'undefined' || this === null) {
            throw new TypeError("can't convert " + this + ' to object');
        }
        var name = this.name;
        if (typeof name === 'undefined') {
            name = 'Error';
        } else if (typeof name !== 'string') {
            name = $String(name);
        }
        var msg = this.message;
        if (typeof msg === 'undefined') {
            msg = '';
        } else if (typeof msg !== 'string') {
            msg = $String(msg);
        }
        if (!name) {
            return msg;
        }
        if (!msg) {
            return name;
        }
        return name + ': ' + msg;
    };
    // can't use defineProperties here because of toString enumeration issue in IE <= 8
    Error.prototype.toString = errorToStringShim;
}

if (supportsDescriptors) {
    var ensureNonEnumerable = function (obj, prop) {
        if (isEnum(obj, prop)) {
            var desc = Object.getOwnPropertyDescriptor(obj, prop);
            desc.enumerable = false;
            Object.defineProperty(obj, prop, desc);
        }
    };
    ensureNonEnumerable(Error.prototype, 'message');
    if (Error.prototype.message !== '') {
      Error.prototype.message = '';
    }
    ensureNonEnumerable(Error.prototype, 'name');
}

if (String(/a/mig) !== '/a/gim') {
    var regexToString = function toString() {
        var str = '/' + this.source + '/';
        if (this.global) {
            str += 'g';
        }
        if (this.ignoreCase) {
            str += 'i';
        }
        if (this.multiline) {
            str += 'm';
        }
        return str;
    };
    // can't use defineProperties here because of toString enumeration issue in IE <= 8
    RegExp.prototype.toString = regexToString;
}

}));

},{}],6:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   3.0.2
 */

(function() {
    "use strict";
    function lib$es6$promise$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function lib$es6$promise$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function lib$es6$promise$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var lib$es6$promise$utils$$_isArray;
    if (!Array.isArray) {
      lib$es6$promise$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      lib$es6$promise$utils$$_isArray = Array.isArray;
    }

    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
    var lib$es6$promise$asap$$len = 0;
    var lib$es6$promise$asap$$toString = {}.toString;
    var lib$es6$promise$asap$$vertxNext;
    var lib$es6$promise$asap$$customSchedulerFn;

    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
      lib$es6$promise$asap$$len += 2;
      if (lib$es6$promise$asap$$len === 2) {
        // If len is 2, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        if (lib$es6$promise$asap$$customSchedulerFn) {
          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
        } else {
          lib$es6$promise$asap$$scheduleFlush();
        }
      }
    }

    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
    }

    function lib$es6$promise$asap$$setAsap(asapFn) {
      lib$es6$promise$asap$$asap = asapFn;
    }

    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

    // test for web worker but not in IE10
    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function lib$es6$promise$asap$$useNextTick() {
      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // see https://github.com/cujojs/when/issues/410 for details
      return function() {
        process.nextTick(lib$es6$promise$asap$$flush);
      };
    }

    // vertx
    function lib$es6$promise$asap$$useVertxTimer() {
      return function() {
        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
      };
    }

    function lib$es6$promise$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function lib$es6$promise$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = lib$es6$promise$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function lib$es6$promise$asap$$useSetTimeout() {
      return function() {
        setTimeout(lib$es6$promise$asap$$flush, 1);
      };
    }

    var lib$es6$promise$asap$$queue = new Array(1000);
    function lib$es6$promise$asap$$flush() {
      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
        var callback = lib$es6$promise$asap$$queue[i];
        var arg = lib$es6$promise$asap$$queue[i+1];

        callback(arg);

        lib$es6$promise$asap$$queue[i] = undefined;
        lib$es6$promise$asap$$queue[i+1] = undefined;
      }

      lib$es6$promise$asap$$len = 0;
    }

    function lib$es6$promise$asap$$attemptVertx() {
      try {
        var r = require;
        var vertx = r('vertx');
        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return lib$es6$promise$asap$$useVertxTimer();
      } catch(e) {
        return lib$es6$promise$asap$$useSetTimeout();
      }
    }

    var lib$es6$promise$asap$$scheduleFlush;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (lib$es6$promise$asap$$isNode) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
    } else if (lib$es6$promise$asap$$isWorker) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
    } else {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
    }

    function lib$es6$promise$$internal$$noop() {}

    var lib$es6$promise$$internal$$PENDING   = void 0;
    var lib$es6$promise$$internal$$FULFILLED = 1;
    var lib$es6$promise$$internal$$REJECTED  = 2;

    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$selfFulfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function lib$es6$promise$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.');
    }

    function lib$es6$promise$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
        return lib$es6$promise$$internal$$GET_THEN_ERROR;
      }
    }

    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
       lib$es6$promise$asap$$asap(function(promise) {
        var sealed = false;
        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            lib$es6$promise$$internal$$resolve(promise, value);
          } else {
            lib$es6$promise$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          lib$es6$promise$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          lib$es6$promise$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, thenable._result);
      } else {
        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      }
    }

    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
      if (maybeThenable.constructor === promise.constructor) {
        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        } else if (lib$es6$promise$utils$$isFunction(then)) {
          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function lib$es6$promise$$internal$$resolve(promise, value) {
      if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
      } else {
        lib$es6$promise$$internal$$fulfill(promise, value);
      }
    }

    function lib$es6$promise$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      lib$es6$promise$$internal$$publish(promise);
    }

    function lib$es6$promise$$internal$$fulfill(promise, value) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = lib$es6$promise$$internal$$FULFILLED;

      if (promise._subscribers.length !== 0) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
      }
    }

    function lib$es6$promise$$internal$$reject(promise, reason) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
      promise._state = lib$es6$promise$$internal$$REJECTED;
      promise._result = reason;

      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
    }

    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
      }
    }

    function lib$es6$promise$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function lib$es6$promise$$internal$$ErrorObject() {
      this.error = null;
    }

    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
      }
    }

    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        lib$es6$promise$$internal$$resolve(promise, value);
      } else if (failed) {
        lib$es6$promise$$internal$$reject(promise, error);
      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, value);
      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      }
    }

    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      } catch(e) {
        lib$es6$promise$$internal$$reject(promise, e);
      }
    }

    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
      var enumerator = this;

      enumerator._instanceConstructor = Constructor;
      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (enumerator._validateInput(input)) {
        enumerator._input     = input;
        enumerator.length     = input.length;
        enumerator._remaining = input.length;

        enumerator._init();

        if (enumerator.length === 0) {
          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
        } else {
          enumerator.length = enumerator.length || 0;
          enumerator._enumerate();
          if (enumerator._remaining === 0) {
            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
          }
        }
      } else {
        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
      }
    }

    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
      return lib$es6$promise$utils$$isArray(input);
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
      return new Error('Array Methods must be provided an Array');
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
      this._result = new Array(this.length);
    };

    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
      var enumerator = this;

      var length  = enumerator.length;
      var promise = enumerator.promise;
      var input   = enumerator._input;

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        enumerator._eachEntry(input[i], i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var enumerator = this;
      var c = enumerator._instanceConstructor;

      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
          entry._onerror = null;
          enumerator._settledAt(entry._state, i, entry._result);
        } else {
          enumerator._willSettleAt(c.resolve(entry), i);
        }
      } else {
        enumerator._remaining--;
        enumerator._result[i] = entry;
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var enumerator = this;
      var promise = enumerator.promise;

      if (promise._state === lib$es6$promise$$internal$$PENDING) {
        enumerator._remaining--;

        if (state === lib$es6$promise$$internal$$REJECTED) {
          lib$es6$promise$$internal$$reject(promise, value);
        } else {
          enumerator._result[i] = value;
        }
      }

      if (enumerator._remaining === 0) {
        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
      });
    };
    function lib$es6$promise$promise$all$$all(entries) {
      return new lib$es6$promise$enumerator$$default(this, entries).promise;
    }
    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
    function lib$es6$promise$promise$race$$race(entries) {
      /*jshint validthis:true */
      var Constructor = this;

      var promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (!lib$es6$promise$utils$$isArray(entries)) {
        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
        return promise;
      }

      var length = entries.length;

      function onFulfillment(value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }

      function onRejection(reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      }

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
      }

      return promise;
    }
    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
    function lib$es6$promise$promise$resolve$$resolve(object) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$resolve(promise, object);
      return promise;
    }
    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
    function lib$es6$promise$promise$reject$$reject(reason) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$reject(promise, reason);
      return promise;
    }
    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

    var lib$es6$promise$promise$$counter = 0;

    function lib$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function lib$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise's eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
    function lib$es6$promise$promise$$Promise(resolver) {
      this._id = lib$es6$promise$promise$$counter++;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];

      if (lib$es6$promise$$internal$$noop !== resolver) {
        if (!lib$es6$promise$utils$$isFunction(resolver)) {
          lib$es6$promise$promise$$needsResolver();
        }

        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
          lib$es6$promise$promise$$needsNew();
        }

        lib$es6$promise$$internal$$initializePromise(this, resolver);
      }
    }

    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

    lib$es6$promise$promise$$Promise.prototype = {
      constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      })['catch'](function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
      then: function(onFulfillment, onRejection) {
        var parent = this;
        var state = parent._state;

        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
          return this;
        }

        var child = new this.constructor(lib$es6$promise$$internal$$noop);
        var result = parent._result;

        if (state) {
          var callback = arguments[state - 1];
          lib$es6$promise$asap$$asap(function(){
            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
          });
        } else {
          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
        }

        return child;
      },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor()['catch'](function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection) {
        return this.then(null, onRejection);
      }
    };
    function lib$es6$promise$polyfill$$polyfill() {
      var local;

      if (typeof global !== 'undefined') {
          local = global;
      } else if (typeof self !== 'undefined') {
          local = self;
      } else {
          try {
              local = Function('return this')();
          } catch (e) {
              throw new Error('polyfill failed because global object is unavailable in this environment');
          }
      }

      var P = local.Promise;

      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
        return;
      }

      local.Promise = lib$es6$promise$promise$$default;
    }
    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

    var lib$es6$promise$umd$$ES6Promise = {
      'Promise': lib$es6$promise$promise$$default,
      'polyfill': lib$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define(function() { return lib$es6$promise$umd$$ES6Promise; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = lib$es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
    }

    lib$es6$promise$polyfill$$default();
}).call(this);


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":7}],7:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],8:[function(require,module,exports){
var promiseExtensions_1 = require("./../helpers/promiseExtensions");
var activityManagementAPI_1 = require("./activityManagementAPI");
var activityAGM_1 = require("../core/activityAGM");
var ActivityAPI = (function () {
    function ActivityAPI(manager, my) {
        this.version = "2.1.3";
        this._manager = manager;
        this._my = my;
        this.all = new activityManagementAPI_1.ActivityManagementAPI(manager, my);
    }
    ActivityAPI.prototype.ready = function (callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            _this._manager.ready()
                .then(function () {
                resolve(_this);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    Object.defineProperty(ActivityAPI.prototype, "my", {
        get: function () {
            return this._my;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityAPI.prototype, "aware", {
        get: function () {
            return this._my.window !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityAPI.prototype, "inActivity", {
        get: function () {
            return this.aware && this._my.activity !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityAPI.prototype, "agm", {
        get: function () {
            if (!this.aware) {
                return undefined;
            }
            if (!this.inActivity) {
                return new activityAGM_1.ActivityAGM(null);
            }
            return this._my.activity.agm;
        },
        enumerable: true,
        configurable: true
    });
    return ActivityAPI;
})();
exports.ActivityAPI = ActivityAPI;

},{"../core/activityAGM":16,"./../helpers/promiseExtensions":27,"./activityManagementAPI":9}],9:[function(require,module,exports){
var util = require("./../helpers/util");
var ActivityManagementAPI = (function () {
    function ActivityManagementAPI(manager, my) {
        this._manager = manager;
        this._my = my;
        this.activityTypes = {
            get: this._getActivityTypesWrapper.bind(this),
            register: this._manager.registerActivityType.bind(this._manager),
            unregister: this._manager.unregisterActivityType.bind(this._manager),
            subscribe: this._manager.subscribeActivityTypeEvents.bind(this._manager),
            unsubscribe: undefined,
            initiate: this._manager.initiate.bind(this._manager)
        };
        this.windowTypes = {
            get: this._getWindowTypesWrapper.bind(this),
            registerFactory: this._manager.registerWindowFactory.bind(this._manager),
            unregisterFactory: this._manager.unregisterWindowFactory.bind(this._manager),
            subscribe: this._manager.subscribeWindowTypeEvents.bind(this._manager),
            unsubscribe: undefined
        };
        this.windows = {
            get: this._manager.getWindows.bind(this._manager),
            subscribe: this._manager.subscribeWindowEvents.bind(this._manager),
            announce: this._manager.announceWindow.bind(this._manager),
            unsubscribe: undefined,
            create: this._manager.createWindow.bind(this._manager)
        };
        this.instances = {
            get: this._manager.getActivities.bind(this._manager),
            subscribe: this._manager.subscribeActivityEvents.bind(this._manager),
            unsubscribe: undefined
        };
    }
    ActivityManagementAPI.prototype._getActivityTypesWrapper = function (name) {
        if (util.isUndefined(name)) {
            return this._manager.getActivityTypes();
        }
        return this._manager.getActivityType(name);
    };
    ActivityManagementAPI.prototype._getWindowTypesWrapper = function (name) {
        if (util.isUndefined(name)) {
            return this._manager.getWindowTypes();
        }
        return this._manager.getWindowType(name);
    };
    return ActivityManagementAPI;
})();
exports.ActivityManagementAPI = ActivityManagementAPI;

},{"./../helpers/util":29}],10:[function(require,module,exports){
var logger_1 = require("./../helpers/logger");
var util = require("./../helpers/util");
var ActivityMy = (function () {
    function ActivityMy(manager) {
        var _this = this;
        this._myActivityJoinedCallbacks = [];
        this._myActivityRemovedCallbacks = [];
        this._myContextUpdateCallbacks = [];
        this._logger = logger_1.Logger.Get(this);
        this._manager = manager;
        manager.ready()
            .then(function (am) {
            am.subscribeActivityContextChanged(_this._subscribeMyContextChanged.bind(_this));
            am.subscribeWindowEvents(_this._subscribeMyWindowEvent.bind(_this));
        });
    }
    Object.defineProperty(ActivityMy.prototype, "window", {
        get: function () {
            if (util.isUndefinedOrNull(this._window)) {
                var announcedWindows = this._manager.announcedWindows;
                if (announcedWindows.length > 0) {
                    this._window = announcedWindows[0];
                }
            }
            return this._window;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityMy.prototype, "activity", {
        get: function () {
            var myWin = this.window;
            if (util.isUndefinedOrNull(myWin)) {
                return undefined;
            }
            return myWin.activity;
        },
        enumerable: true,
        configurable: true
    });
    ActivityMy.prototype.createWindow = function (windowType) {
        return this._manager.createWindow(this.activity, windowType);
    };
    Object.defineProperty(ActivityMy.prototype, "context", {
        get: function () {
            var activity = this.activity;
            if (util.isUndefined(activity)) {
                return {};
            }
            return activity.context;
        },
        enumerable: true,
        configurable: true
    });
    ActivityMy.prototype.onActivityJoined = function (callback) {
        this._myActivityJoinedCallbacks.push(callback);
        var myWin = this.window;
        if (!util.isUndefinedOrNull(myWin) && !util.isUndefinedOrNull(myWin.activity)) {
            callback(myWin.activity);
        }
    };
    ActivityMy.prototype.onActivityLeft = function (callback) {
        this._myActivityRemovedCallbacks.push(callback);
    };
    ActivityMy.prototype.onContextChanged = function (callback) {
        this._myContextUpdateCallbacks.push(callback);
        var myWin = this.window;
        if (util.isUndefinedOrNull(myWin)) {
            return;
        }
        var activity = myWin.activity;
        if (util.isUndefinedOrNull(activity)) {
            return;
        }
        callback(activity.context, activity.context, [], activity);
    };
    ActivityMy.prototype._subscribeMyContextChanged = function (activity, context, delta, removed) {
        var myWin = this.window;
        if (util.isUndefinedOrNull(myWin)) {
            return;
        }
        var myActivity = myWin.activity;
        if (util.isUndefinedOrNull(myActivity)) {
            return;
        }
        if (activity.id !== myActivity.id) {
            return;
        }
        this._notifyMyContextChanged(activity, context, delta, removed);
    };
    ActivityMy.prototype._subscribeMyWindowEvent = function (activity, window, event) {
        if (util.isUndefinedOrNull(this.window)) {
            return;
        }
        if (this.window.id !== window.id) {
            return;
        }
        if (event === "joined") {
            this._notifyOnJoined(activity);
        }
        else {
            this._notifyMyWindowEvent(activity, this._myActivityRemovedCallbacks);
        }
    };
    ActivityMy.prototype._notifyMyWindowEvent = function (activity, callbackStore) {
        for (var index = 0; index < callbackStore.length; index++) {
            var element = callbackStore[index];
            element(activity, event);
        }
    };
    ActivityMy.prototype._notifyMyContextChanged = function (activity, context, delta, removed) {
        delta = delta || {};
        removed = removed || [];
        for (var index = 0; index < this._myContextUpdateCallbacks.length; index++) {
            var element = this._myContextUpdateCallbacks[index];
            element(context, delta, removed, activity);
        }
    };
    ActivityMy.prototype._notifyOnJoined = function (activity) {
        // when joined to activity notify for :
        // * joined
        // * context change
        this._notifyMyWindowEvent(activity, this._myActivityJoinedCallbacks);
        this._notifyMyContextChanged(activity, activity.context);
    };
    return ActivityMy;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityMy;

},{"./../helpers/logger":26,"./../helpers/util":29}],11:[function(require,module,exports){
var ActivityConfig = (function () {
    function ActivityConfig() {
    }
    return ActivityConfig;
})();
exports.ActivityConfig = ActivityConfig;

},{}],12:[function(require,module,exports){
/// <reference path="../typings/es6-promise/es6-promise.d.ts"/>
/// <reference path="../typings/tick42-agm/agm.d.ts"/>
/// <reference path="../typings/tick42-logger/logger.d.ts"/>
require("es6-promise");
var hcBridge_1 = require("./bridges/hcBridge");
var activityManager_1 = require("./core/activityManager");
var activityMyAPI_1 = require("./API/activityMyAPI");
var logger_1 = require("./helpers/logger");
var util = require("./helpers/util");
var activityConfig_1 = require("./activityConfig");
var activityAPI_1 = require("./API/activityAPI");
var activityAGM_1 = require("./core/activityAGM");
activity = function (config) {
    config = config || new activityConfig_1.ActivityConfig;
    if (!util.isUndefined(config.logLevel)) {
        logger_1.Logger.Level = config.logLevel;
    }
    if (!util.isUndefinedOrNull(config.logger)) {
        logger_1.Logger.GlueLogger = config.logger;
    }
    var bridge;
    if (!util.isUndefined(window.htmlContainer)) {
        bridge = new hcBridge_1['default']();
    }
    else {
        throw new Error("Activity not supported in in browser");
    }
    if (!bridge) {
        throw new Error("A bridge to native activity is needed to create activity lib.");
    }
    activityAGM_1.ActivityAGM.AGM = config.agm;
    var activityManager = new activityManager_1['default'](bridge, !config.disableAutoAnnounce);
    var my = new activityMyAPI_1['default'](activityManager);
    return new activityAPI_1.ActivityAPI(activityManager, my);
};
module.exports = activity;

},{"./API/activityAPI":8,"./API/activityMyAPI":10,"./activityConfig":11,"./bridges/hcBridge":13,"./core/activityAGM":16,"./core/activityManager":17,"./helpers/logger":26,"./helpers/util":29,"es6-promise":6}],13:[function(require,module,exports){
var entityEvent_1 = require("../contracts/entityEvent");
var activityStatus_1 = require("../contracts/activityStatus");
var activityType_1 = require("../entities/activityType");
var windowType_1 = require("../entities/windowType");
var activity_1 = require("../entities/activity");
var activityWindow_1 = require("../entities/activityWindow");
var proxyWindowFactory_1 = require("../core/proxyWindowFactory");
var logger_1 = require("../helpers/logger");
var entityEvent_2 = require("../contracts/entityEvent");
var readyMarker_1 = require("../helpers/readyMarker");
var util = require("../helpers/util");
var entityEvent_3 = require("../contracts/entityEvent");
var HCBridge = (function () {
    function HCBridge(agm) {
        this._activityTypeEntityName = "activityType";
        this._windowTypeEntityName = "windowType";
        this._activityEntityName = "activity";
        this._windowEntityName = "activityWindow";
        this._logger = logger_1.Logger.Get(this);
        this._lastSeq = 0;
        this._eventQueue = [];
        this._activityTypeCallbacks = [];
        this._windowTypeCallbacks = [];
        this._activityCallbacks = [];
        this._windowCallbacks = [];
        this._agm = agm;
    }
    HCBridge.prototype.init = function () {
        var _this = this;
        this._readyMarker = new readyMarker_1.ReadyMarker("HC Bridge", 1);
        this._htmlContainer = window.htmlContainer.activityFacade;
        this._htmlContainer.init(this._agm ? this._agm.instance : undefined, this._hcEventHandler.bind(this), function () {
            _this._readyMarker.signal("Init done from HC");
        }, function (error) {
            _this._readyMarker.error(error);
        });
    };
    HCBridge.prototype.ready = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._readyMarker.setCallback(function (err) {
                if (!err) {
                    resolve(_this);
                }
                else {
                    _this._logger.error("Error initializing HC bridge - " + err);
                    reject(_this._readyMarker.getError());
                }
            });
        });
    };
    HCBridge.prototype._hcEventHandler = function (eventJson) {
        this._logger.trace(eventJson);
        var event = JSON.parse(eventJson);
        this._processEventBySeq(event);
    };
    HCBridge.prototype._processEventBySeq = function (event) {
        var seq = event.sequence;
        if (seq === this._lastSeq + 1) {
            this._processEvent(event);
            this._lastSeq++;
            var nextEvent = this._eventQueue[seq + 1];
            if (!util.isUndefined(nextEvent)) {
                this._logger.debug("replaying message number " + seq);
                this._processEventBySeq(nextEvent);
                delete this._eventQueue[seq + 1];
            }
        }
        else {
            this._eventQueue[seq] = event;
            this._logger.debug("Got out of order event with number " + seq + ". Will wait for previous event(s) before replaying.");
        }
    };
    HCBridge.prototype._processEvent = function (event) {
        var entityType = event.entityType;
        var eventContext = this._convertContext(event.context);
        var entity;
        switch (entityType) {
            case this._activityTypeEntityName:
                entity = HCBridge._hcToJsActivityType(event.entity);
                this._publishActivityTypeStatusChange(entity, eventContext);
                break;
            case this._windowTypeEntityName:
                entity = this._hcToJsWindowType(event.entity);
                this._publishWindowTypeStatusChange(entity, eventContext);
                break;
            case this._activityEntityName:
                entity = this._hcToJsActivity(event.entity);
                this._publishActivityStatusChange(entity, eventContext);
                break;
            case this._windowEntityName:
                entity = HCBridge._hcToJsWindow(event.entity);
                this._publishActivityWindowEvent(entity, eventContext);
                break;
        }
    };
    HCBridge.prototype._convertContext = function (hcContext) {
        if (hcContext.type === entityEvent_1.EntityEventType.StatusChange) {
            var oldStatus = new activityStatus_1.ActivityStatus(hcContext.oldStatus.state, hcContext.oldStatus.statusMessage, hcContext.oldStatus.statusTime);
            var newStatus = new activityStatus_1.ActivityStatus(hcContext.newStatus.state, hcContext.newStatus.statusMessage, hcContext.newStatus.statusTime);
            return new entityEvent_1.EntityStatusChangeEventContext(newStatus, oldStatus);
        }
        else if (hcContext.type === entityEvent_1.EntityEventType.ActivityWindowEvent) {
            var act = this._hcToJsActivity(hcContext.activity);
            return new entityEvent_1.EntityActivityWindowEventContext(act, hcContext.event);
        }
        else if (hcContext.type === entityEvent_1.EntityEventType.ActivityContextChange) {
            return new entityEvent_3.ActivityContextChangedContext(hcContext.newContext, hcContext.updated, hcContext.removed);
        }
        return new entityEvent_1.EntityEventContext(hcContext.type);
    };
    HCBridge._hcToJsWindow = function (hcWindow) {
        return new activityWindow_1['default'](hcWindow.id, hcWindow.name, hcWindow.type, hcWindow.activityId, hcWindow.instance, hcWindow.isIndependent);
    };
    HCBridge.prototype._hcToJsActivity = function (hcAct) {
        var window = hcAct.owner ? HCBridge._hcToJsWindow(hcAct.owner) : null;
        var status = new activityStatus_1.ActivityStatus(hcAct.status.state, hcAct.status.statusMessage, hcAct.status.statusTime);
        var helperWindows = hcAct.windows ? hcAct.windows.map(function (w) { return HCBridge._hcToJsWindow(w); }) : [];
        var context = JSON.parse(hcAct.context);
        return new activity_1['default'](hcAct.id, hcAct.type.name, status, context, window, helperWindows);
    };
    HCBridge._hcToJsActivityType = function (hcActType) {
        return new activityType_1['default'](hcActType.name, hcActType.ownerWindowType, hcActType.helperWindowTypes, hcActType.description);
    };
    HCBridge.prototype._hcToJsWindowType = function (hcWinType) {
        if (util.isUndefined(hcWinType.factories)) {
            hcWinType.factories = [];
        }
        var factories = hcWinType.factories.map(function (f) {
            return HCBridge._hcToJsWindowTypeFactory(f);
        });
        return new windowType_1['default'](hcWinType.name, factories);
    };
    HCBridge._hcToJsWindowTypeFactory = function (hcWinTypeFactory) {
        return new proxyWindowFactory_1.ProxyWindowFactory(hcWinTypeFactory.description);
    };
    HCBridge._getURLParameter = function (name) {
        return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [, ""])[1].replace(/\+/g, '%20')) || null;
    };
    HCBridge.prototype.getActivityTypes = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.getActivityTypes(function (infos) {
                var result = [];
                for (var index = 0; index < infos.length; index++) {
                    var info = infos[index];
                    var newActivityType = HCBridge._hcToJsActivityType(info);
                    result.push(newActivityType);
                }
                resolve(result);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.registerActivityType = function (activityTypeName, ownerWindow, helperWindows, layoutConfig, description) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (helperWindows === undefined) {
                helperWindows = [];
            }
            var config = {
                name: activityTypeName,
                ownerWindowType: ownerWindow,
                helperWindowTypes: helperWindows,
                description: description,
                layoutConfig: JSON.stringify(layoutConfig)
            };
            _this._htmlContainer.registerActivityType(JSON.stringify(config), function (info) {
                var newActivityType = HCBridge._hcToJsActivityType(info);
                resolve(newActivityType);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.unregisterActivityType = function (activityTypeName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.unregisterActivityType(activityTypeName, function (info) {
                resolve(true);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.getWindowTypes = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.getWindowTypes(function (infos) {
                var result = [];
                for (var index = 0; index < infos.length; index++) {
                    var info = infos[index];
                    var newWindowType = _this._hcToJsWindowType(info);
                    result.push(newWindowType);
                }
                resolve(result);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.registerWindowFactory = function (windowTypeName, factory) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(windowTypeName)) {
                reject("windowTypeName should be provided");
                return;
            }
            _this._htmlContainer.registerWindowFactory(windowTypeName, factory.create.bind(factory), function (info) {
                resolve(true);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.initiateActivity = function (activityType, context, callback) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activityType)) {
                reject("windowTypeName should be provided");
                return;
            }
            if (util.isUndefinedOrNull(context)) {
                context = {};
            }
            _this._htmlContainer.initiate(activityType, JSON.stringify(context), function (activityId) {
                resolve(activityId);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.getAnnouncementInfo = function () {
        var hc = window.htmlContainer;
        var context = hc.getContext();
        var result = { activityWindowId: "", activityWindowType: "", activityWindowIndependent: false, activityWindowName: "" };
        result.activityWindowType = context.activityWindowType;
        if (util.isUndefined(result.activityWindowType)) {
            result.activityWindowType = HCBridge._getURLParameter("activityWindowType");
        }
        result.activityWindowId = context.activityWindowId;
        if (util.isUndefined(result.activityWindowId)) {
            result.activityWindowId = HCBridge._getURLParameter("activityWindowId");
        }
        result.activityWindowIndependent = context.activityWindowIndependent;
        if (util.isUndefined(result.activityWindowIndependent)) {
        }
        result.activityWindowName = context.activityWindowName;
        if (util.isUndefined(result.activityWindowName)) {
            result.activityWindowName = HCBridge._getURLParameter("activityWindowName");
        }
        return result;
    };
    HCBridge.prototype.announceWindow = function (windowType, activityWindowId) {
        var _this = this;
        if (util.isUndefined(windowType)) {
            throw new Error("can not determine window type");
        }
        if (util.isUndefined(windowType)) {
            throw new Error("can not determine window activityWindowId");
        }
        this._htmlContainer.announceWindow(windowType, activityWindowId, function (error) {
            _this._logger.error("Error announcing activity window with id '" + activityWindowId + "'. " + error);
        });
    };
    HCBridge.prototype.getActivities = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._logger.trace("Executing getActivities()");
            _this._htmlContainer.getActivities(function (activitiesStr) {
                _this._logger.trace("Got getActivities() :" + activitiesStr);
                var activities = JSON.parse(activitiesStr);
                var result = activities.map(function (act) { return _this._hcToJsActivity(act); });
                resolve(result);
            }, function (error) {
                _this._logger.trace("Error in getActivities() :" + error);
                reject(error);
            });
        });
    };
    HCBridge.prototype.updateActivityContext = function (activity, context, fullReplace, removedKeys) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (util.isUndefined(removedKeys)) {
                removedKeys = [];
            }
            var options = {
                fullReplace: fullReplace,
                removedKeys: removedKeys
            };
            _this._htmlContainer.setActivityContext(activity.id, JSON.stringify(context), JSON.stringify(options), function (newContextString) {
                var newContext = JSON.parse(newContextString);
                resolve(newContext);
            }, function (error) { return reject(error); });
        });
    };
    HCBridge.prototype.getActivityWindows = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.getWindows(function (windows) {
                var result = windows.map(function (wind) { return HCBridge._hcToJsWindow(wind); });
                resolve(result);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.stopActivity = function (activity) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.stopActivity(activity.id, function (result) {
                resolve(result);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.unregisterWindowFactory = function (windowTypeName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.registerWindowFactory(windowTypeName, function (info) {
                resolve(true);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.createWindow = function (id, windowDefinition) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.createWindow(id, JSON.stringify(windowDefinition), function (id) {
                resolve(id);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.onActivityTypeStatusChange = function (callback) {
        this._activityTypeCallbacks.push(callback);
    };
    HCBridge.prototype.onWindowTypeStatusChange = function (callback) {
        this._windowTypeCallbacks.push(callback);
    };
    HCBridge.prototype.onActivityStatusChange = function (callback) {
        this._activityCallbacks.push(callback);
    };
    HCBridge.prototype.onActivityWindowChange = function (callback) {
        this._windowCallbacks.push(callback);
    };
    HCBridge.prototype.getWindowBounds = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.getWindowBounds(id, function (bounds) {
                resolve(bounds);
            }, function (err) {
                reject(err);
            });
        });
    };
    HCBridge.prototype.setWindowBounds = function (id, bounds) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.setWindowBounds(id, JSON.stringify(bounds), function () {
                resolve();
            }, function (err) {
                reject(err);
            });
        });
    };
    HCBridge.prototype.registerWindow = function (type, name, independent) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.registerWindow(type, name, independent, function (id) {
                resolve(id);
            }, function (error) {
                reject(error);
            });
        });
    };
    HCBridge.prototype.closeWindow = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._htmlContainer.closeWindow(id, function () {
                resolve();
            }, function (err) {
                reject(err);
            });
        });
    };
    HCBridge.prototype._publishStatusChange = function (entity, context, callbacks) {
        var entityEvent = new entityEvent_2.EntityEvent(entity, context);
        callbacks.forEach(function (callback) {
            callback(entityEvent);
        });
    };
    HCBridge.prototype._publishActivityTypeStatusChange = function (at, context) {
        this._publishStatusChange(at, context, this._activityTypeCallbacks);
    };
    HCBridge.prototype._publishWindowTypeStatusChange = function (wt, context) {
        this._publishStatusChange(wt, context, this._windowTypeCallbacks);
    };
    HCBridge.prototype._publishActivityStatusChange = function (act, context) {
        this._publishStatusChange(act, context, this._activityCallbacks);
    };
    HCBridge.prototype._publishActivityWindowEvent = function (w, context) {
        this._publishStatusChange(w, context, this._windowCallbacks);
    };
    return HCBridge;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= HCBridge;

},{"../contracts/activityStatus":14,"../contracts/entityEvent":15,"../core/proxyWindowFactory":19,"../entities/activity":20,"../entities/activityType":22,"../entities/activityWindow":23,"../entities/windowType":24,"../helpers/logger":26,"../helpers/readyMarker":28,"../helpers/util":29}],14:[function(require,module,exports){
var ActivityStatus = (function () {
    function ActivityStatus(state, message, time) {
        this.state = state;
        this.message = message;
        this.time = time;
    }
    ActivityStatus.prototype.getState = function () {
        return this.state;
    };
    ActivityStatus.prototype.getMessage = function () {
        return this.message;
    };
    ActivityStatus.prototype.getTime = function () {
        return this.time;
    };
    return ActivityStatus;
})();
exports.ActivityStatus = ActivityStatus;

},{}],15:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EntityEvent = (function () {
    function EntityEvent(entitiy, context) {
        this.entity = entitiy;
        this.context = context;
    }
    return EntityEvent;
})();
exports.EntityEvent = EntityEvent;
var EntityEventContext = (function () {
    function EntityEventContext(eventType) {
        this.type = eventType;
    }
    return EntityEventContext;
})();
exports.EntityEventContext = EntityEventContext;
var EntityStatusChangeEventContext = (function (_super) {
    __extends(EntityStatusChangeEventContext, _super);
    function EntityStatusChangeEventContext(newStatus, oldStatus) {
        _super.call(this, EntityEventType.StatusChange);
        this.newStatus = newStatus;
        this.oldStatus = oldStatus;
    }
    return EntityStatusChangeEventContext;
})(EntityEventContext);
exports.EntityStatusChangeEventContext = EntityStatusChangeEventContext;
var EntityActivityWindowEventContext = (function (_super) {
    __extends(EntityActivityWindowEventContext, _super);
    function EntityActivityWindowEventContext(activity, event) {
        _super.call(this, EntityEventType.ActivityWindowEvent);
        this.activity = activity;
        this.event = event;
    }
    return EntityActivityWindowEventContext;
})(EntityEventContext);
exports.EntityActivityWindowEventContext = EntityActivityWindowEventContext;
var ActivityContextChangedContext = (function (_super) {
    __extends(ActivityContextChangedContext, _super);
    function ActivityContextChangedContext(context, updated, removed) {
        _super.call(this, EntityEventType.ActivityContextChange);
        this.updated = updated;
        this.removed = removed;
        this.context = JSON.parse(context);
    }
    return ActivityContextChangedContext;
})(EntityEventContext);
exports.ActivityContextChangedContext = ActivityContextChangedContext;
var EntityEventType = (function () {
    function EntityEventType() {
    }
    EntityEventType.Added = "added";
    EntityEventType.Removed = "removed";
    EntityEventType.Updated = "updated";
    EntityEventType.FactoryRegistered = "factoryRegistered";
    EntityEventType.FactoryUnregistered = "factoryUnregistered";
    EntityEventType.StatusChange = "statusChange";
    EntityEventType.ActivityContextChange = "activityContextUpdate";
    EntityEventType.ActivityWindowEvent = "activityWindowEvent";
    return EntityEventType;
})();
exports.EntityEventType = EntityEventType;

},{}],16:[function(require,module,exports){
var util = require("../helpers/util");
var ActivityAGM = (function () {
    function ActivityAGM(activity) {
        this._activity = activity;
    }
    ActivityAGM.prototype.register = function (definition, handler) {
        this._ensureHasAgm();
        ActivityAGM.AGM.register(definition, handler);
    };
    ActivityAGM.prototype.servers = function () {
        this._ensureHasAgm();
        if (util.isUndefinedOrNull(this._activity)) {
            return [];
        }
        return this._activity.windows.map(function (w) {
            return w.instance;
        });
    };
    ActivityAGM.prototype.methods = function () {
        this._ensureHasAgm();
        if (util.isUndefinedOrNull(this._activity)) {
            return [];
        }
        var windows = this._activity.windows;
        var methodNames = [];
        var methods = [];
        for (var index = 0; index < windows.length; index++) {
            var window_1 = windows[index];
            var windowMethods = this.methodsForWindow(window_1);
            for (var methodIndex = 0; methodIndex < windowMethods.length; methodIndex++) {
                var currentWindowMethod = windowMethods[methodIndex];
                if (methodNames.indexOf(currentWindowMethod.name) === -1) {
                    methodNames.push(currentWindowMethod.name);
                    methods.push(currentWindowMethod);
                }
            }
        }
        return methods;
    };
    ActivityAGM.prototype.methodsForWindow = function (window) {
        this._ensureHasAgm();
        if (!window.instance) {
            return [];
        }
        return ActivityAGM.AGM.methodsForInstance(window.instance);
    };
    ActivityAGM.prototype.invoke = function (methodName, arg, target, options, success, error) {
        this._ensureHasAgm();
        var activityServers = this.servers();
        var serversToInvokeAgainst = [];
        if (util.isUndefinedOrNull(target)) {
            target = "activity.all";
        }
        if (util.isString(target)) {
            if (target === "activity.all") {
                serversToInvokeAgainst = activityServers;
            }
            else if (target === "activity.best") {
                var potentialTargets = activityServers.filter(function (server) {
                    var methods = ActivityAGM.AGM.methodsForInstance(server);
                    return methods.filter(function (m) {
                        return m.name === methodName;
                    }).length > 0;
                });
                if (potentialTargets.length > 0) {
                    serversToInvokeAgainst = [potentialTargets[0]];
                }
            }
            else if (target === "all" || target === "best") {
                return ActivityAGM.AGM.invoke(methodName, arg, target, options, success, error);
            }
            else {
                throw new Error("Invalid invoke target " + target);
            }
        }
        else if (util.isArray(target)) {
            if (target.length >= 0) {
                var firstElem = target[0];
                if (this._isAgmInstance(firstElem)) {
                    serversToInvokeAgainst = target.map(function (instance) { return instance; });
                }
                else if (this._isActivityWindow(firstElem)) {
                    serversToInvokeAgainst = target.map(function (win) { return win.instance; });
                }
                else {
                    throw new Error("Unknown target object");
                }
            }
        }
        else {
            if (this._isAgmInstance(target)) {
                serversToInvokeAgainst = [target];
            }
            else if (this._isActivityWindow(target)) {
                serversToInvokeAgainst = [target.instance];
            }
            else {
                throw new Error("Unknown target object");
            }
        }
        return ActivityAGM.AGM.invoke(methodName, arg, serversToInvokeAgainst, options, success, error);
    };
    ActivityAGM.prototype.unregister = function (definition) {
        this._ensureHasAgm();
        return ActivityAGM.AGM.unregister(definition);
    };
    ActivityAGM.prototype.createStream = function (methodDefinition, subscriberAddedHandler, subscriberRemovedFunction) {
        this._ensureHasAgm();
        ActivityAGM.AGM.createStream(methodDefinition, subscriberAddedHandler, subscriberRemovedFunction);
    };
    ActivityAGM.prototype.subscribe = function (methodDefinition, parameters, target) {
        this._ensureHasAgm();
        var servers = this.servers();
        return ActivityAGM.AGM.subscribe(methodDefinition, parameters, servers);
    };
    ActivityAGM.prototype._ensureHasAgm = function () {
        if (util.isUndefinedOrNull(ActivityAGM.AGM)) {
            throw new Error("Agm should be configured to be used in activity");
        }
    };
    ActivityAGM.prototype._isAgmInstance = function (obj) {
        return obj.application != undefined;
    };
    ActivityAGM.prototype._isActivityWindow = function (obj) {
        return obj.instance !== undefined;
    };
    return ActivityAGM;
})();
exports.ActivityAGM = ActivityAGM;

},{"../helpers/util":29}],17:[function(require,module,exports){
/// <reference path="../../typings/es6-promise/es6-promise.d.ts"/>
var entityEvent_1 = require("../contracts/entityEvent");
var activityType_1 = require("../entities/activityType");
var promiseExtensions_1 = require("../helpers/promiseExtensions");
var readyMarker_1 = require("../helpers/readyMarker");
var entityObservableCollection_1 = require("../helpers/entityObservableCollection");
var logger_1 = require("../helpers/logger");
var util = require("../helpers/util");
var localWindowFactory_1 = require("./localWindowFactory");
var ActivityManager = (function () {
    function ActivityManager(bridge, autoAnnounce) {
        var _this = this;
        this._logger = logger_1.Logger.Get(this);
        this._announcedWindows = [];
        this._bridge = bridge;
        this._activityTypes = new entityObservableCollection_1.EntityObservableCollection(function (e) { return _this._grabEntity(e); });
        this._windowTypes = new entityObservableCollection_1.EntityObservableCollection(function (e) { return _this._grabEntity(e); });
        this._activities = new entityObservableCollection_1.EntityObservableCollection(function (e) { return _this._grabEntity(e); });
        this._windows = new entityObservableCollection_1.EntityObservableCollection(function (e) { return _this._grabEntity(e); });
        this._dataReadyMarker = new readyMarker_1.ReadyMarker("Activity Manager Data", ["GetActivityTypes", "GetWindowTypes", "GetActivities", "GetWindows"].length);
        if (autoAnnounce) {
            var announceMaker = new readyMarker_1.ReadyMarker("Activity Manager Announce", ["Announcement"].length);
            this._readyMarker = announceMaker;
            this._dataReadyMarker.setCallback(function (err) {
                if (err) {
                    _this._readyMarker.error(err);
                }
                _this._logger.debug("Auto announcing window");
                _this.announceWindow()
                    .then(function (w) {
                    _this._announcedWindows.push(w);
                    _this._readyMarker.signal("Successfully announced window with id '" + w.id + "'");
                })['catch'](function (err) {
                    _this._logger.debug("Will not announce window - " + err);
                    _this._readyMarker.signal();
                });
            });
        }
        else {
            this._readyMarker = this._dataReadyMarker;
        }
        this._bridge.init();
        this._bridge
            .ready()
            .then(function (aw) {
            _this._subscribeForData();
        })['catch'](function (error) {
            console.log(error);
        });
    }
    Object.defineProperty(ActivityManager.prototype, "announcedWindows", {
        get: function () {
            return this._announcedWindows;
        },
        set: function (v) {
            throw new Error("not allowed");
        },
        enumerable: true,
        configurable: true
    });
    ActivityManager.prototype.ready = function (callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            _this._readyMarker.setCallback(function (err) {
                if (!err) {
                    resolve(_this);
                }
                else {
                    reject(_this._readyMarker.getError());
                }
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.getActivityTypes = function () {
        return this._activityTypes.get();
    };
    ActivityManager.prototype.getActivityType = function (name) {
        return this._activityTypes.getByName(name);
    };
    ActivityManager.prototype.registerActivityType = function (activityTypeName, ownerWindowType, helperWindowTypes, layoutConfig, description, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activityTypeName)) {
                reject("activityTypeName argument can not be undefined");
            }
            if (!util.isString(activityTypeName)) {
                reject("activityTypeName should be string");
            }
            var actType = _this.getActivityType(activityTypeName);
            if (!util.isUndefinedOrNull(actType)) {
                reject("Activity type '" + activityTypeName + "' already exists");
            }
            var ownerDefinition;
            if (util.isUndefined(ownerWindowType)) {
                reject("Owner window type can not be undefined");
            }
            if (util.isString(ownerWindowType)) {
                ownerDefinition = { type: ownerWindowType, name: "", isIndependent: false, arguments: {} };
            }
            else {
                ownerDefinition = ownerWindowType;
            }
            var helperDefinitions = [];
            if (!util.isUndefined(helperWindowTypes) && util.isArray(helperWindowTypes)) {
                for (var index in helperWindowTypes) {
                    var item = helperWindowTypes[index];
                    if (util.isString(item)) {
                        var definition = { type: item, name: "", isIndependent: false, arguments: {}, relativeTo: "", relativeDirection: "", windowStyleAttributes: {} };
                        helperDefinitions.push(definition);
                    }
                    else {
                        helperDefinitions.push(item);
                    }
                }
            }
            _this._bridge
                .registerActivityType(activityTypeName, ownerDefinition, helperDefinitions, layoutConfig, description)
                .then(function (activityType) {
                _this._grabEntity(activityType);
                resolve(activityType);
            })['catch'](function (error) {
                reject(error);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.unregisterActivityType = function (type, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            var actType = _this.getActivityType(type);
            if (util.isUndefined(actType)) {
                reject("Activity type '" + type + "' does not exists");
            }
            return _this._bridge.unregisterActivityType(type);
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.initiate = function (activityType, context, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            var actType = _this.getActivityType(activityType);
            if (util.isUndefined(actType)) {
                reject("Activity type '" + activityType + "' does not exists");
            }
            _this._bridge
                .initiateActivity(activityType, context)
                .then(function (actId) {
                _this._activities
                    .getOrWait(actId)
                    .then(function (act) {
                    resolve(act);
                })['catch'](function (err) { return reject(err); });
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.subscribeActivityTypeEvents = function (handler) {
        this._activityTypes.subscribe(function (at, context) {
            handler(at, context.type);
        });
    };
    ActivityManager.prototype.getWindowTypes = function () {
        return this._windowTypes.get();
    };
    ActivityManager.prototype.getWindowType = function (name) {
        return this._windowTypes.getByName(name);
    };
    ActivityManager.prototype.registerWindowFactory = function (windowType, factoryMethod, description, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(windowType)) {
                reject("no windowType specified");
                return;
            }
            if (util.isObject(windowType)) {
                windowType = windowType.getName();
            }
            else if (!util.isString(windowType)) {
                reject("windowType should be string or object that has getName method");
                return;
            }
            var factory = new localWindowFactory_1.LocalWindowFactory(factoryMethod, description);
            _this._bridge
                .registerWindowFactory(windowType, factory)
                .then(function (v) {
                resolve(v);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.unregisterWindowFactory = function (windowType, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(windowType)) {
                reject("no windowType specified");
                return;
            }
            if (!util.isString(windowType)) {
                reject("windowType should be a string");
                return;
            }
            _this._bridge
                .unregisterWindowFactory(windowType)
                .then(function (v) {
                resolve(v);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.getActivities = function (activityType) {
        var act = this._activities.get();
        if (!activityType) {
            return act;
        }
        var types = activityType;
        if (util.isString(activityType)) {
            types = [activityType];
        }
        else if (activityType instanceof activityType_1['default']) {
            types = [activityType.name];
        }
        else if (activityType instanceof Array) {
        }
        else {
            throw new Error("Invalid input argument 'activityType' = " + activityType);
        }
        return act.filter(function (act) {
            var type = act.type;
            return util.some(types, function (t) {
                return type.id == t.id;
            });
        });
    };
    ActivityManager.prototype.getActivityById = function (id) {
        return this._activities.getByName(id);
    };
    ActivityManager.prototype.announceWindow = function (activityWindowId, windowType) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            var announcementInfo = _this._bridge.getAnnouncementInfo();
            if (util.isUndefined(activityWindowId)) {
                activityWindowId = announcementInfo.activityWindowId;
            }
            if (util.isUndefined(windowType)) {
                windowType = announcementInfo.activityWindowType;
            }
            if (util.isUndefinedOrNull(windowType)) {
                throw new Error("Can not announce - unknown windowType");
            }
            if (util.isUndefinedOrNull(activityWindowId)) {
                _this._logger.debug("Registering window with type:'" + windowType + "', name:'" + announcementInfo.activityWindowName + "', ind.:'" + announcementInfo.activityWindowIndependent + "'");
                _this._bridge.registerWindow(windowType, announcementInfo.activityWindowName, announcementInfo.activityWindowIndependent)
                    .then(_this._windows.getOrWait.bind(_this._windows))
                    .then(function (w) {
                    resolve(w);
                })['catch'](function (err) {
                    _this._logger.error(err);
                });
            }
            else {
                _this._logger.debug("Announcing window with id '" + activityWindowId + "' and type '" + windowType + "'");
                var currentWindow = _this._windows.getByName(activityWindowId);
                if (!util.isUndefinedOrNull(currentWindow)) {
                    _this._logger.debug("Window with id '" + activityWindowId + "' already announced - reusing the window");
                    resolve(currentWindow);
                    return;
                }
                var windowEventHandler = function (a, w, e) {
                    if (activityWindowId === w.id) {
                        if (e === "joined") {
                            var activity = w.activity;
                            if (util.isUndefined(activity)) {
                                reject("UNDEFINED ACTIVITY");
                            }
                            _this._logger.trace("Got joined event for id '" + activityWindowId + "'");
                            resolve(w);
                            _this.unsubscribeWindowEvents(windowEventHandler);
                        }
                    }
                };
                _this.subscribeWindowEvents(windowEventHandler);
                _this._logger.trace("Waiting for joined event for id '" + activityWindowId + "'");
                _this._bridge.announceWindow(windowType, activityWindowId);
            }
        });
        return promise;
    };
    ActivityManager.prototype.subscribeWindowTypeEvents = function (handler) {
        this._windowTypes.subscribe(function (wt, context) {
            handler(wt, context.type);
        });
    };
    ActivityManager.prototype.subscribeActivityEvents = function (handler) {
        this._activities.subscribe(function (act, context) {
            if (context.type === entityEvent_1.EntityEventType.StatusChange) {
                var p = context;
                handler(act, p.newStatus, p.oldStatus);
            }
        });
    };
    ActivityManager.prototype.subscribeWindowEvents = function (handler) {
        this._windows.subscribe(function (window, context) {
            if (context.type === entityEvent_1.EntityEventType.ActivityWindowEvent) {
                var p = context;
                handler(window.activity, window, p.event);
            }
        });
    };
    ActivityManager.prototype.unsubscribeWindowEvents = function (handler) {
    };
    ActivityManager.prototype.createWindow = function (activity, windowType, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activity)) {
                reject("activity is undefined");
            }
            if (util.isUndefinedOrNull(windowType)) {
                reject("windowType is undefined");
            }
            var windowDefinition;
            if (util.isString(windowType)) {
                windowDefinition = { type: windowType, name: "", isIndependent: false, arguments: {} };
            }
            else {
                windowDefinition = windowType;
            }
            var relativeToWindow;
            if (!util.isUndefinedOrNull(windowDefinition.relativeTo)) {
                relativeToWindow = windowDefinition.relativeTo;
                if (util.isString(relativeToWindow)) {
                    var windows = _this.getWindows({ type: relativeToWindow });
                    if (!util.isUndefinedOrNull(windows) && windows.length > 0) {
                        windowDefinition.relativeTo = windows[0].id;
                    }
                }
                else if (!util.isUndefinedOrNull(relativeToWindow.type)) {
                    var windows = _this.getWindows({ type: relativeToWindow.type });
                    if (!util.isUndefinedOrNull(windows) && windows.length > 0) {
                        windowDefinition.relativeTo = windows[0].id;
                    }
                }
                else if (!util.isUndefinedOrNull(relativeToWindow.windowId)) {
                    windowDefinition.relativeTo = relativeToWindow.windowId;
                }
            }
            _this._bridge.createWindow(activity.id, windowDefinition)
                .then(function (wid) {
                var window = _this._windows.getByName(wid);
                if (!util.isUndefined(window)) {
                    resolve(window);
                }
                _this._logger.debug("Window created, waiting for window entity with id " + wid);
                var handler = function (window, context) {
                    if (window.id === wid) {
                        this._logger.debug("Got entity window with id " + wid);
                        resolve(window);
                        this._windows.unsubscribe(handler);
                    }
                }.bind(_this);
                _this._windows.subscribe(handler);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.joinWindowToActivity = function (activity, window, callback) {
        return undefined;
    };
    ActivityManager.prototype.leaveWindowFromActivity = function (activity, window, callback) {
        return undefined;
    };
    ActivityManager.prototype.setActivityContext = function (activity, context, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activity)) {
                reject("activity can not be null");
            }
            _this._bridge
                .updateActivityContext(activity, context, true)
                .then(function (obj) {
                resolve(obj);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.updateActivityContext = function (activity, context, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (util.isUndefinedOrNull(activity)) {
                reject("activity can not be null");
            }
            var removedKeys = [];
            for (var key in context) {
                if (context.hasOwnProperty(key) && context[key] === null) {
                    removedKeys.push(key);
                }
            }
            _this._bridge
                .updateActivityContext(activity, context, false, removedKeys)
                .then(function (obj) {
                resolve(obj);
            })['catch'](function (err) {
                reject(err);
            });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.subscribeActivityContextChanged = function (handler) {
        this._activities.subscribe(function (act, context) {
            if (context.type === entityEvent_1.EntityEventType.ActivityContextChange) {
                var updateContext = context;
                handler(act, updateContext.context, updateContext.updated, updateContext.removed);
            }
        });
    };
    ActivityManager.prototype.stopActivity = function (activity, callback) {
        var promise = this._bridge.stopActivity(activity);
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.getWindows = function (filter) {
        if (util.isUndefined(filter)) {
            return this._windows.get();
        }
        if (!util.isUndefined(filter.id)) {
            return [this._windows.getByName(filter.id)];
        }
        var allWindows = this._windows.get();
        return allWindows.filter(function (w) {
            if (!util.isUndefined(filter.type) && w.type.id !== filter.type) {
                return false;
            }
            if (!util.isUndefined(filter.name) && w.name !== filter.name) {
                return false;
            }
            if (!util.isUndefined(filter.activityId)) {
                if (util.isUndefinedOrNull(w.activity)) {
                    return false;
                }
                if (w.activity.id !== filter.activityId) {
                    return false;
                }
            }
            return true;
        });
    };
    ActivityManager.prototype._grabEntity = function (entity) {
        entity.manager = this;
    };
    ActivityManager.prototype._subscribeForData = function () {
        var _this = this;
        this._logger.debug("Start getting initial data...");
        this._bridge.onActivityTypeStatusChange(function (event) {
            _this._activityTypes.process(event);
        });
        this._bridge.getActivityTypes()
            .then(function (at) {
            _this._activityTypes.add(at);
            _this._dataReadyMarker.signal("Got act types");
        })['catch'](function (error) {
            _this._logger.error(error);
            _this._dataReadyMarker.error("Can not initialize ActivityManager - error getting activity types -" + error);
        });
        this._bridge.onWindowTypeStatusChange(function (event) {
            _this._windowTypes.process(event);
        });
        this._bridge.getWindowTypes()
            .then(function (wt) {
            _this._windowTypes.add(wt);
            _this._dataReadyMarker.signal("Got window types");
        })['catch'](function (error) {
            _this._logger.error(error);
            _this._dataReadyMarker.error("Can not initialize ActivityManager - error getting window types  " + error);
        });
        this._bridge.onActivityStatusChange(function (event) {
            _this._activities.process(event);
        });
        this._bridge.getActivities()
            .then(function (ac) {
            _this._activities.add(ac);
            _this._dataReadyMarker.signal("Got activities");
        })['catch'](function (error) {
            _this._logger.error(error);
            _this._dataReadyMarker.error("Can not initialize ActivityManager - error getting activity instances -" + error);
        });
        this._bridge.onActivityWindowChange(function (event) {
            _this._windows.process(event);
        });
        this._bridge.getActivityWindows()
            .then(function (aw) {
            _this._windows.add(aw);
            _this._dataReadyMarker.signal("Got windows");
        })['catch'](function (error) {
            _this._logger.error(error);
            _this._dataReadyMarker.error("Can not initialize ActivityManager - error getting activity windows -" + error);
        });
    };
    ActivityManager.prototype.getWindowBounds = function (id) {
        return this._bridge.getWindowBounds(id);
    };
    ActivityManager.prototype.setWindowBounds = function (id, bounds, callback) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            _this._bridge.setWindowBounds(id, bounds)
                .then(function () { return resolve(); })['catch'](function (err) { return reject(err); });
        });
        return promiseExtensions_1.nodeify(promise, callback);
    };
    ActivityManager.prototype.closeWindow = function (id) {
        return this._bridge.closeWindow(id);
    };
    return ActivityManager;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityManager;

},{"../contracts/entityEvent":15,"../entities/activityType":22,"../helpers/entityObservableCollection":25,"../helpers/logger":26,"../helpers/promiseExtensions":27,"../helpers/readyMarker":28,"../helpers/util":29,"./localWindowFactory":18}],18:[function(require,module,exports){
var LocalWindowFactory = (function () {
    function LocalWindowFactory(createFunction, description) {
        this._createFunction = createFunction;
        this._description = description;
    }
    LocalWindowFactory.prototype.create = function (activityWindowId, context, layout) {
        return this._createFunction(activityWindowId, context, layout);
    };
    LocalWindowFactory.prototype.description = function () {
        return this._description;
    };
    return LocalWindowFactory;
})();
exports.LocalWindowFactory = LocalWindowFactory;

},{}],19:[function(require,module,exports){
var ProxyWindowFactory = (function () {
    function ProxyWindowFactory(description) {
        this._description = description;
    }
    ProxyWindowFactory.prototype.create = function (activityWindowId, context) {
        return undefined;
    };
    ProxyWindowFactory.prototype.description = function () {
        return this._description;
    };
    return ProxyWindowFactory;
})();
exports.ProxyWindowFactory = ProxyWindowFactory;

},{}],20:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activityEntity_1 = require("./activityEntity");
var activityAGM_1 = require("../core/activityAGM");
var Activity = (function (_super) {
    __extends(Activity, _super);
    function Activity(id, actType, status, context, owner, helperWindows) {
        _super.call(this, id);
        this._id = id;
        this._actType = actType;
        this._status = status;
        this._context = context;
        this._owner = owner;
        this._helperWindows = helperWindows;
        this._agm = new activityAGM_1.ActivityAGM(this);
    }
    Object.defineProperty(Activity.prototype, "type", {
        get: function () {
            if (this.manager) {
                return this.manager.getActivityType(this._actType);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "status", {
        get: function () {
            return this._status;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "owner", {
        get: function () {
            return this._owner;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "windows", {
        get: function () {
            return this.manager.getWindows({ activityId: this._id });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "agm", {
        get: function () {
            return this._agm;
        },
        enumerable: true,
        configurable: true
    });
    Activity.prototype.join = function (window, callback) {
        return this.manager.joinWindowToActivity(this, window, callback);
    };
    Activity.prototype.createWindow = function (windowType, callback) {
        return this.manager.createWindow(this, windowType, callback);
    };
    Activity.prototype.leave = function (window, callback) {
        return this.manager.leaveWindowFromActivity(this, window, callback);
    };
    Activity.prototype.getWindowsByType = function (windowType) {
        var filter = { activityId: this._id, type: windowType };
        return this.manager.getWindows(filter);
    };
    Activity.prototype.setContext = function (context, callback) {
        return this.manager.setActivityContext(this, context, callback);
    };
    Activity.prototype.updateContext = function (context, callback) {
        return this.manager.updateActivityContext(this, context, callback);
    };
    Activity.prototype.onStatusChange = function (handler) {
        var _this = this;
        this.manager.subscribeActivityEvents(function (a, ns, os) {
            if (a.id === _this.id) {
                handler(a, ns, os);
            }
        });
    };
    Activity.prototype.onWindowEvent = function (handler) {
        var _this = this;
        this.manager.subscribeWindowEvents(function (a, w, e) {
            if (a.id === _this.id) {
                handler(a, w, e);
            }
        });
    };
    Activity.prototype.onContextChanged = function (handler) {
        var _this = this;
        this.manager.subscribeActivityContextChanged(function (act, context, delta, removed) {
            if (act.id === _this.id) {
                handler(context, delta, removed, act);
            }
        });
        handler(this.context, this.context, [], this);
    };
    Activity.prototype.stop = function () {
        this.manager.stopActivity(this);
    };
    Activity.prototype.updateCore = function (activity) {
        _super.prototype.updateCore.call(this, activity);
        this._actType = activity._actType;
        this._context = activity._context;
        this._status = activity._status;
        this._helperWindows = activity._helperWindows;
        this._owner = activity._owner;
    };
    return Activity;
})(activityEntity_1['default']);
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= Activity;

},{"../core/activityAGM":16,"./activityEntity":21}],21:[function(require,module,exports){
var ActivityEntity = (function () {
    function ActivityEntity(id) {
        this.listeners = [];
        this._id = id;
    }
    Object.defineProperty(ActivityEntity.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    ActivityEntity.prototype.onUpdated = function (handler) {
        this.listeners.push(handler);
    };
    ActivityEntity.prototype.update = function (other) {
        if (other._id != this._id) {
            throw Error("Can not update from entity with different id.");
        }
        this.updateCore(other);
        this.notify();
    };
    ActivityEntity.prototype.updateCore = function (other) {
    };
    ActivityEntity.prototype.notify = function () {
        for (var index = 0; index < this.listeners.length; index++) {
            var listener = this.listeners[index];
            listener(this);
        }
    };
    return ActivityEntity;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityEntity;

},{}],22:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activityEntity_1 = require("./activityEntity");
var ActivityType = (function (_super) {
    __extends(ActivityType, _super);
    function ActivityType(name, ownerWindow, helperWindows, description) {
        _super.call(this, name);
        this._name = name;
        this._description = description;
        this._ownerWindow = ownerWindow;
        this._helperWindows = helperWindows || [];
    }
    Object.defineProperty(ActivityType.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityType.prototype, "description", {
        get: function () {
            return this._description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityType.prototype, "helperWindows", {
        get: function () {
            return this._helperWindows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityType.prototype, "ownerWindow", {
        get: function () {
            return this._ownerWindow;
        },
        enumerable: true,
        configurable: true
    });
    ActivityType.prototype.subscribeActivityStatusChange = function (handler) {
        return undefined;
    };
    ActivityType.prototype.initiate = function (context, callback) {
        return this.manager.initiate(this._name, context, callback);
    };
    ActivityType.prototype.updateCore = function (type) {
        _super.prototype.updateCore.call(this, type);
        this._description = type._description;
        this._ownerWindow = type._ownerWindow;
        this._helperWindows = type._helperWindows;
    };
    return ActivityType;
})(activityEntity_1['default']);
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityType;

},{"./activityEntity":21}],23:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activityEntity_1 = require("./activityEntity");
var logger_1 = require("../helpers/logger");
var util = require("../helpers/util");
var ActivityWindow = (function (_super) {
    __extends(ActivityWindow, _super);
    function ActivityWindow(id, name, type, activityId, instance, isIndependent) {
        _super.call(this, id);
        this._logger = logger_1.Logger.Get(this);
        this._type = type;
        this._activityId = activityId;
        this._name = name;
        this._instance = instance;
        this._isIndependent = isIndependent;
    }
    ActivityWindow.prototype.getBounds = function () {
        return this.manager.getWindowBounds(this.id);
    };
    Object.defineProperty(ActivityWindow.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityWindow.prototype, "isIndependent", {
        get: function () {
            return this._isIndependent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityWindow.prototype, "type", {
        get: function () {
            if (this.manager) {
                return this.manager.getWindowType(this._type);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityWindow.prototype, "activity", {
        get: function () {
            if (util.isUndefined(this._activityId)) {
                return undefined;
            }
            return this.manager.getActivityById(this._activityId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityWindow.prototype, "isOwner", {
        get: function () {
            var act = this.activity;
            if (util.isUndefined(act)) {
                return false;
            }
            return act.owner.id === this.id;
        },
        enumerable: true,
        configurable: true
    });
    ActivityWindow.prototype.setVisible = function (isVisible, callback) {
        return undefined;
    };
    ActivityWindow.prototype.setTitle = function (title, callback) {
        return undefined;
    };
    ActivityWindow.prototype.setBounds = function (bounds, callback) {
        return this.manager.setWindowBounds(this.id, bounds, callback);
    };
    ActivityWindow.prototype.setState = function (state, callback) {
        return undefined;
    };
    ActivityWindow.prototype.close = function () {
        return this.manager.closeWindow(this.id);
    };
    Object.defineProperty(ActivityWindow.prototype, "instance", {
        get: function () {
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    ActivityWindow.prototype.onActivityJoined = function (callback) {
        this._subscribeForActivityWindowEvent("joined", callback);
    };
    ActivityWindow.prototype.onActivityRemoved = function (callback) {
        this._subscribeForActivityWindowEvent("removed", callback);
    };
    ActivityWindow.prototype.updateCore = function (other) {
        this._activityId = other._activityId;
        this._isIndependent = other._isIndependent;
        if (!util.isUndefinedOrNull(other._instance)) {
            this._instance = other._instance;
        }
    };
    ActivityWindow.prototype._subscribeForActivityWindowEvent = function (eventName, callback) {
        var _this = this;
        this.manager.subscribeWindowEvents(function (activity, window, event) {
            if (window.id !== _this.id) {
                return;
            }
            if (event === eventName) {
                callback(activity);
            }
        });
    };
    return ActivityWindow;
})(activityEntity_1['default']);
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= ActivityWindow;

},{"../helpers/logger":26,"../helpers/util":29,"./activityEntity":21}],24:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var activityEntity_1 = require("./activityEntity");
var WindowType = (function (_super) {
    __extends(WindowType, _super);
    function WindowType(name, factories) {
        _super.call(this, name);
        this._name = name;
        this._factories = factories;
    }
    Object.defineProperty(WindowType.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WindowType.prototype, "factories", {
        get: function () {
            return this._factories;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WindowType.prototype, "windows", {
        get: function () {
            return this.manager.getWindows({ type: this._name });
        },
        enumerable: true,
        configurable: true
    });
    WindowType.prototype.registerFactory = function (factory, factoryMethod, description, callback) {
        return this.manager.registerWindowFactory(this, factoryMethod, description);
    };
    return WindowType;
})(activityEntity_1['default']);
Object.defineProperty(exports, "__esModule", { value: true });
exports['default']= WindowType;

},{"./activityEntity":21}],25:[function(require,module,exports){
var entityEvent_1 = require("../contracts/entityEvent");
var EntityObservableCollection = (function () {
    function EntityObservableCollection(processNew) {
        this._items = {};
        this._listeners = [];
        this._processNew = processNew;
    }
    EntityObservableCollection.prototype.addOne = function (item) {
        this.add([item]);
    };
    EntityObservableCollection.prototype.add = function (items) {
        for (var index = 0; index < items.length; index++) {
            var element = items[index];
            this.process(new entityEvent_1.EntityEvent(element, new entityEvent_1.EntityEventContext(entityEvent_1.EntityEventType.Added)));
        }
    };
    EntityObservableCollection.prototype.process = function (event) {
        var context = event.context;
        var type = context.type;
        var entity = event.entity;
        var internalEntity = this._updateInternalCollections(entity, type);
        this._notifyListeners(internalEntity, context);
    };
    EntityObservableCollection.prototype.get = function () {
        var result = [];
        for (var key in this._items) {
            if (this._items.hasOwnProperty(key)) {
                var element = this._items[key];
                result.push(element);
            }
        }
        return result;
    };
    EntityObservableCollection.prototype.getByName = function (name) {
        for (var key in this._items) {
            if (key === name) {
                return this._items[key];
            }
        }
        return undefined;
    };
    EntityObservableCollection.prototype.getOrWait = function (name) {
        var _this = this;
        return new Promise(function (resolve) {
            var entityAddedHandler = function (entity) {
                if (entity.id !== name) {
                    return;
                }
                resolve(entity);
                _this.unsubscribe(entityAddedHandler);
            };
            _this.subscribe(entityAddedHandler);
            var window = _this.getByName(name);
            if (window) {
                resolve(window);
                return;
            }
        });
    };
    EntityObservableCollection.prototype.subscribe = function (handler) {
        this._listeners.push(handler);
        for (var key in this._items) {
            var element = this._items[key];
            handler(element, new entityEvent_1.EntityEventContext(entityEvent_1.EntityEventType.Added.toString()));
        }
    };
    EntityObservableCollection.prototype.unsubscribe = function (handler) {
        var index = this._listeners.indexOf(handler);
        if (index != -1) {
            this._listeners.splice(index, 1);
        }
    };
    EntityObservableCollection.prototype._notifyListeners = function (entity, context) {
        for (var index = 0; index < this._listeners.length; index++) {
            var listener = this._listeners[index];
            listener(entity, context);
        }
    };
    EntityObservableCollection.prototype._updateInternalCollections = function (entity, type) {
        if (type === entityEvent_1.EntityEventType.Removed) {
            delete this._items[entity.id];
            return entity;
        }
        else {
            var key = entity.id;
            if (!this._items.hasOwnProperty(key)) {
                this._processNew(entity);
                this._items[entity.id] = entity;
            }
            else {
                this._items[entity.id].update(entity);
            }
        }
        return this._items[entity.id];
    };
    return EntityObservableCollection;
})();
exports.EntityObservableCollection = EntityObservableCollection;

},{"../contracts/entityEvent":15}],26:[function(require,module,exports){
var util = require("./util");
var LogLevel = (function () {
    function LogLevel() {
    }
    LogLevel.Trace = "trace";
    LogLevel.Debug = "debug";
    LogLevel.Info = "info";
    LogLevel.Warn = "warn";
    LogLevel.Error = "error";
    return LogLevel;
})();
exports.LogLevel = LogLevel;
var Logger = (function () {
    function Logger(name) {
        this._name = name;
        if (!util.isUndefinedOrNull(Logger.GlueLogger)) {
            this._glueLogger = Logger.GlueLogger.subLogger(name);
        }
    }
    Logger.GetNamed = function (name) {
        return new Logger(name);
    };
    Logger.Get = function (owner) {
        return new Logger(Logger.GetTypeName(owner));
    };
    Logger.prototype.trace = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.trace(message);
        }
        else {
            if (Logger.Level === LogLevel.Trace) {
                console.info(this._getMessage(message, LogLevel.Trace));
            }
        }
    };
    Logger.prototype.debug = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.debug(message);
        }
        else {
            if (Logger.Level === LogLevel.Debug ||
                Logger.Level === LogLevel.Trace) {
                console.info(this._getMessage(message, LogLevel.Debug));
            }
        }
    };
    Logger.prototype.info = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.info(message);
        }
        else {
            if (Logger.Level === LogLevel.Debug ||
                Logger.Level === LogLevel.Trace ||
                Logger.Level === LogLevel.Info) {
                console.info(this._getMessage(message, LogLevel.Info));
            }
        }
    };
    Logger.prototype.warn = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.warn(message);
        }
        else {
            if (Logger.Level === LogLevel.Debug ||
                Logger.Level === LogLevel.Trace ||
                Logger.Level === LogLevel.Info ||
                Logger.Level === LogLevel.Warn) {
                console.info(this._getMessage(message, LogLevel.Info));
            }
        }
    };
    Logger.prototype.error = function (message) {
        if (!util.isUndefinedOrNull(this._glueLogger)) {
            this._glueLogger.error(message);
        }
        else {
            console.error(this._getMessage(message, LogLevel.Error));
            console.trace();
        }
    };
    Logger.prototype._getMessage = function (message, level) {
        return "[" + level + "] " + this._name + " - " + message;
    };
    Logger.GetTypeName = function (object) {
        var funcNameRegex = /function (.{1,})\(/;
        var results = (funcNameRegex).exec(object.constructor.toString());
        return (results && results.length > 1) ? results[1] : "";
    };
    Logger.Level = LogLevel.Info;
    return Logger;
})();
exports.Logger = Logger;

},{"./util":29}],27:[function(require,module,exports){
var util = require("../helpers/util");
var nextTick = function (cb) { setTimeout(cb, 0); };
function nodeify(promise, callback) {
    if (!util.isFunction(callback)) {
        return promise;
    }
    promise.then(function (resp) {
        nextTick(function () {
            callback(null, resp);
        });
    }, function (err) {
        nextTick(function () {
            callback(err, null);
        });
    });
}
exports.nodeify = nodeify;
;

},{"../helpers/util":29}],28:[function(require,module,exports){
var logger_1 = require("./logger");
var util = require("../helpers/util");
var ReadyMarker = (function () {
    function ReadyMarker(name, signalsToWait) {
        this._logger = logger_1.Logger.GetNamed("ReadyMarker [" + name + "]");
        this._logger.debug("Initializing ready marker for '" + name + "' with " + signalsToWait + " signals to wait");
        if (signalsToWait <= 0) {
            throw new Error("Invalid signal number. Should be > 0");
        }
        this._signals = signalsToWait;
        this._callbacks = [];
        this._name = name;
    }
    ReadyMarker.prototype.setCallback = function (callback) {
        if (this.isSet()) {
            callback(undefined);
            return;
        }
        else if (this.isError()) {
            callback(this._error);
            return;
        }
        this._callbacks.push(callback);
    };
    ReadyMarker.prototype.signal = function (message) {
        this._logger.debug("Signaled - " + message + " - signals left " + (this._signals - 1));
        this._signals--;
        if (this._signals < 0) {
            throw new Error("Error in ready marker '" + this._name + " - signals are " + this._signals);
        }
        if (this.isSet()) {
            this._callbacks.forEach(function (callback) {
                callback(undefined);
            });
        }
    };
    ReadyMarker.prototype.error = function (error) {
        this._error = error;
        this._callbacks.forEach(function (errorCallback) {
            errorCallback(error);
        });
    };
    ReadyMarker.prototype.isSet = function () {
        if (this.isError()) {
            return false;
        }
        return this._signals === 0;
    };
    ReadyMarker.prototype.isError = function () {
        return !util.isUndefined(this._error);
    };
    ReadyMarker.prototype.getError = function () {
        return this._error;
    };
    return ReadyMarker;
})();
exports.ReadyMarker = ReadyMarker;

},{"../helpers/util":29,"./logger":26}],29:[function(require,module,exports){
// some small useful functions (so we don't reference underscore or lodash)
function isNumber(arg) {
    return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === 'string';
}
exports.isString = isString;
function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isArray(arg) {
    if (Array.isArray) {
        return Array.isArray(arg);
    }
    return toString.call(arg) === '[object Array]';
}
exports.isArray = isArray;
function isUndefined(arg) {
    return typeof arg === 'undefined';
}
exports.isUndefined = isUndefined;
function isUndefinedOrNull(arg) {
    return !arg || typeof arg === 'undefined';
}
exports.isUndefinedOrNull = isUndefinedOrNull;
function isEmpty(arg) {
    for (var prop in arg) {
        if (arg.hasOwnProperty(prop))
            return false;
    }
    return true;
}
exports.isEmpty = isEmpty;
function isFunction(arg) {
    return !!(arg && arg.constructor && arg.call && arg.apply);
}
exports.isFunction = isFunction;
;
function some(array, predicate) {
    for (var index = 0; index < array.length; index++) {
        if (predicate(array[index], index)) {
            return true;
        }
    }
    return false;
}
exports.some = some;
function first(array, predicate) {
    for (var index = 0; index < array.length; index++) {
        if (predicate(array[index], index)) {
            return array[index];
        }
    }
    return undefined;
}
exports.first = first;

},{}],30:[function(require,module,exports){
(function (global){
var connection = require("tick42-gateway-connection");
var client = require("./agm_client");
var server = require("./agm_server"); 
var instance = require("./agm_instance");
var native_agm = require("./agm_native");
//var add_sugar= require("./agm_sugar");
//Init namespace if not already there 



//Add a global function that makes an AGM instance
agm = function(configuration){
	"use strict";
	
	//We will store the library here
	var agm = {};
    
	agm.version = "2.1.3";
	
	//Init debug
	if(typeof configuration!=="object"){configuration = {};}
   
   	//Init child configuration if it is not already passed by user
   	var child_configurations = ["connection", "client", "server"];
	child_configurations.forEach(function(conf){
		if(typeof configuration[conf]!=="object"){configuration[conf] = {};}
		//Set debug if global debug is not set:
		if(configuration.debug){configuration[conf].debug = true;}
	});
	
	//Init connection
	var c = configuration.connection;
  	//Determine if we are given a connection object. If not, create it ourselves:
	agm.connection =(typeof c==="object"&&typeof c.send==="function"&&typeof c.on ==="function")?c:connection(configuration.connection);
	
	//Create a connection proxy which sets the product name automatically
	var product_name = "agm";
	var agm_enabled_connection = {
    send:function(type, message){
        agm.connection.send(product_name, type, message);
    },
    on:function(type, handler){
        agm.connection.on(product_name, type, handler);
    }
	
	};
	 
	//Save a reference to the root system object that we are given
	var metrics_root = configuration.metrics;
	
	//Create subsystems for our modules and save them in their configuration.
	if(metrics_root !== undefined){
		configuration.client.metrics = metrics_root.subSystem("Client");
		configuration.server.metrics = metrics_root.subSystem("Server");
	} 
	
    //Initialize our modules
  	agm.instance = instance(configuration.instance, agm_enabled_connection);
	agm.client = client(agm_enabled_connection, agm.instance, configuration.client);
	agm.server = server(agm_enabled_connection, agm.instance, configuration.server);

	//Add method aliases
	agm.invoke=agm.client.invoke;
	agm.register=agm.server.register;
	agm.unregister=agm.server.unregister;
	agm.servers=agm.client.servers;
	agm.methods=agm.client.methods;
	agm.methods_for_instance=agm.client.methods_for_instance;
	agm.methodsForInstance=agm.client.methods_for_instance;
    agm.method=agm.client.method;
	agm.method_added=agm.client.method_added;
	agm.methodAdded=agm.client.method_added;
	agm.method_removed=agm.client.method_removed;
	agm.methodRemoved=agm.client.method_removed;

	agm.server_method_added=agm.client.server_method_added;
	agm.serverMethodAdded=agm.client.server_method_added;
	agm.server_method_removed=agm.client.server_method_removed;
	agm.serverMethodRemoved=agm.client.server_method_removed;

	agm.server_added=agm.client.server_added;
	agm.serverAdded=agm.client.server_added;
	agm.server_removed=agm.client.server_removed;
	agm.serverRemoved=agm.client.server_removed;

	agm.start = agm.server.start;
	agm.stop = agm.server.stop;
	
    if(global.console!==undefined && agm.debug===true){
	    console.log("AGM started.");
    }
	
	return agm;
    //return add_sugar(agm);

};

agm = global.htmlContainer!==undefined?native_agm:agm;

//Export for browsers
if(global.tick42===undefined){global.tick42 = {};}
global.tick42.agm = agm;

module.exports = agm;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./agm_client":31,"./agm_instance":36,"./agm_native":37,"./agm_server":38,"tick42-gateway-connection":50}],31:[function(require,module,exports){
(function (global){
/*
 The AGM Client analyses server presences, collects information about their methods and allows users to invoke these methods.
 */
var client_serverstate = require('./agm_client_serverstate');
var client_invocationsstate = require('./agm_client_invocationsstate');
var helpers = require('./agm_helpers');
module.exports = function (connection, instance, configuration) {
    //Validate configuration
    if (typeof configuration !== 'object') {
        configuration = {};
        if (global.console !== undefined && configuration.debug === true) {
            console.log('Creating an AGM client with default configuration.');
        }
    }
    if (typeof configuration.remove_server_on_n_missing_heartbeats !== 'number') {
        configuration.remove_server_on_n_missing_heartbeats = 3;
    }
    if (typeof configuration.method_response_timeout !== 'number') {
        configuration.method_response_timeout = 3000;
    }
    if (typeof configuration.wait_for_method_timeout !== 'number') {
        configuration.wait_for_method_timeout = 3000;
    }
    //Instantiate the module which keeps track of all available servers and methods
    var servers = client_serverstate(configuration, instance);
    //..and when you receive a heartbeat/presence from a server, delegate its processing to the module:
    connection.on('ServerPresenceMessage', function(msg){servers.process_presence(msg, true);});
    connection.on('ServerHeartbeatMessage', function(msg){servers.process_presence(msg, false);});
    //Instantiate the module that handles method execution and responses
    var response = client_invocationsstate(configuration, instance, function (m) {
        connection.send('MethodInvocationRequestMessage', m);
    });
    //..and delegate responses to it.
    connection.on('MethodInvocationResultMessage', response.process_method_response);




//   //Adds client callbacks which are executed when a new method is added or stops being available
//   function method_added(callback) {
//     if (typeof callback === 'function') {
//       //Add the callback
//       configuration.on_method_added = callback;
//       //Call the callback for all the method which were added before the callback was registered.
//       servers.get_methods().forEach(function (method) {
//         callback(method);
//       });
//     } else {
//       throw '\'method_added\' must be called with a function as an argument';
//     }
//   }
//   function method_removed(callback) {
//     if (typeof callback === 'function') {
//       //Add the callback
//       configuration.on_method_removed = callback;
//     } else {
//       throw '\'method_removed\' must be called with a function as an argument';
//     }
//   }

//   //Adds client callbacks which are executed when a new method is added or stops being available
//   function server_added(callback) {
//     if (typeof callback === 'function') {
//       //Add the callback
//       configuration.on_server_added = callback;
//       //Call the callback for all the method which were added before the callback was registered.
//       servers.get_servers().forEach(function (server) {
//         callback(server);
//       });
//     } else {
//       throw '\'server_added\' must be called with a function as an argument';
//     }
//   }
//   function server_removed(callback) {
//     if (typeof callback === 'function') {
//       //Add the callback
//       configuration.on_server_removed = callback;
//     } else {
//       throw '\'server_removed\' must be called with a function as an argument';
//     }
//   }
    //Abstract get_method and get_servers functions
    //They rely on  get_method and get_servers from the "servers" module
    //In those ones you don't need to specify all of the method's props to find it.
    function get_method(method_filter) {
        if (typeof method_filter === 'string') {
            method_filter = { name: method_filter };
        }
        //Do not execute for empty filter
        if (method_filter === undefined) {
            return;
        }
        var exact_match = servers.get_method(method_filter);
        //Try calling the original "get_method" function (it will work if all method properties are specified):
        if (exact_match !== undefined) {
            return exact_match  //Take all available methods and iterate them until we find a match
              ;
        } else {
            return takeWhile(servers.get_methods(), function (method) {
                return method_match(method_filter, method);
            });
        }
    }
    function get_methods(method_filter) {
        if (method_filter === undefined) {
            return servers.get_methods();
        }
        if (typeof method_filter === 'string') {
            method_filter = { name: method_filter };
        }
        return servers.get_methods().filter(function (method) {
            return method_match(method_filter, method);
        });
    }

    //Retrieves all servers that support any of several methods, listed as an array
    function get_methods_for_instance(instance_filter) {
        var exact_match = servers.get_methods(instance_filter);
        //Try calling the original "get_methods" function (it will work if all instance properties are specified):
        if (exact_match.length !== 0) {
            return exact_match;
        } else {
            var method_ids = get_servers().filter(function (server) {
                return instance_match(instance_filter, server);
            }).reduce(function (methods, server) {
                servers.get_method_ids(server).forEach(function (method_id) {
                    methods[method_id] = true;
                });
                return methods;
            }, {});
            return Object.keys(method_ids).map(function (method_id) {
                return servers.get_method(method_id);
            });
        }
    }

    //Retrieves all servers that support a given method
    function get_servers(method_filter) {
        //No method - get all servers
        if (method_filter === undefined) {
            return servers.get_servers();
        }
        //Non-existing method - return an empty array
        var method = get_method(method_filter);
        if (method === undefined) {
            return [];
        }
        //Else, return servers for method
        return servers.get_servers(method);
    }


    //Retrieves all servers that support any of several methods, listed as an array
    function servers_for_methods(methods){
        return methods.reduce(function (so_far, method) {
            return so_far.concat(servers.get_servers(method, true));//(the second argument is there because we also need the request subject)
        }, []).sort(servers.compare_servers);
    }

    function servers_for_method_and_target(method_filter, target){
        //Get the methods which match the filter
        var methods = get_methods(method_filter);
        //Determine where to execute the method(s) (the "target" argument)
        //Get all servers that support the method(s) and get the ones that match the target criteria
        return filter_by_target(target, servers_for_methods(methods));
    }





    //Invokes an AGM method (mostly it does input checking), the actual job is done by "request.invoke"
    function invoke(method_filter, argument_obj, target, additional_options, success, error) {
        var promise = new Promise(function (resolve, reject) {
            var successProxy, errorProxy;

            successProxy = function (args) {
                //var parsed = JSON.parse(args);
                resolve(args);
            };
            errorProxy = function (args) {
                //var parsed = JSON.parse(args);
                reject(args);
            };
            //Add default params
            if (argument_obj === undefined) {
                argument_obj = {};
            }
            if (target === undefined) {
                target = 'best';
            }
            if (typeof target === "string" && target !== "all" && target !== "best") {
                reject({message: '"' + target + '" is not a valid target. Valid targets are "all" and "best".'});
            }
            if (additional_options === undefined) {
                additional_options = {};
            }

            if (additional_options.method_response_timeout === undefined) {
                additional_options.method_response_timeout = configuration.method_response_timeout;
            }
            if (additional_options.wait_for_method_timeout === undefined) {
                additional_options.wait_for_method_timeout = configuration.wait_for_method_timeout;
            }


            //Check if the arguments are an object
            if (typeof argument_obj !== 'object') {
                reject({message: 'The method arguments must be an object.'});
            }

            if (typeof method_filter === 'string') {
                method_filter = {name: method_filter};
            }

            var servers = servers_for_method_and_target(method_filter, target);

            if (servers.length === 0) {

                invoke_unexisting(method_filter, argument_obj, target, additional_options, successProxy, errorProxy);

            } else if (servers.length === 1) {
                if (global.console !== undefined && configuration.debug === true) {
                    console.log('>>> Invoking "' + method_filter.name + '" on 1 server');
                }

                response.invoke(method_filter, argument_obj, servers[0], additional_options, successProxy, errorProxy);

            } else {
                if (global.console !== undefined && configuration.debug === true) {
                    console.log('>>> Invoking "' + method_filter.name + '" on ' + servers.length + ' servers');
                }

                invoke_on_all(method_filter, argument_obj, servers, additional_options, successProxy, errorProxy);
            }
        });

        return helpers.promisify(promise, success, error);
    }


    //Called when the user tries to invoke a method which does not exist
    function invoke_unexisting(method_filter, argument_obj, target, additional_options, success, error){
        var server_found = false;

        if(additional_options.wait_for_method_timeout === 0){
            call_error();
        }else{
            setTimeout(function(){
                configuration.server_method_added = configuration.server_method_added.filter(function(callback){return callback !== new_server;});
                if(!server_found){call_error();}
            },additional_options.wait_for_method_timeout);

            register_callback("server_method_added", identity, new_server);
        }



        function new_server(){
            if(server_found){return;}
            var server = servers_for_method_and_target(method_filter, target)[0];
            if(server !== undefined){
                server_found = true;
                response.invoke(method_filter, argument_obj, server, additional_options, success, error);
            }
        }



        function call_error(){
            //Check if the method exists and if it doesnt', return an error
            if (get_methods(method_filter).length === 0) {
                error({
                    method: method_filter,
                    called_with: argument_obj,
                    message: 'I could not find a method with those properties: ' + JSON.stringify(method_filter)
                });
            } else {
                error({
                    method: method_filter,
                    called_with: argument_obj,
                    message: 'I could not find servers with these properties: ' + JSON.stringify(target)
                });
                return;
            }
        }

    }


    //Called when the invokes a method with multiple targets
    //Calls a method for all servers and unifies the results they return into one:
    function invoke_on_all(method, argument_obj, servers, additional_options, success, error){
        //Here we will store the results that the servers return
        var successes = [];
        var errors = [];
        //These are the callbacks
        var success_callback = function (result) {
            successes.push(result);
            send_response(successes, errors);
        };
        var error_callback = function (result) {
            errors.push(result);
            send_response(successes, errors);
        };
        //Call the method for all targets
        servers.forEach(function (server) {
            response.invoke(method, argument_obj, server, additional_options, success_callback, error_callback);
        });


        //Calls the main success and error callbacks with the aggregated results
        function send_response() {
            //wait till everybody is finished
            if (successes.length + errors.length < servers.length) {
                return;
            }
            //Execute the "success" callback
            if (successes.length !== 0) {
                var result = successes.reduce(function (obj, success) {
                    obj.method = success.method;
                    obj.called_with = success.called_with;
                    obj.returned = success.returned;
                    obj.all_return_values.push({
                        executed_by: success.executed_by,
                        returned: success.returned
                    });
                    obj.executed_by = success.executed_by;
                    return obj;
                }, { all_return_values: [] });

                //If we get errors from one of the servers add them to the success object that will be resolved.
                if (errors.length !== 0) {
                    result.all_errors = [];
                    errors.forEach(function (obj) {
                        result.all_errors.push({
                            //executed_by : obj.executed_by, // we don't get executed_by object from the error response
                            name : obj.method.name,
                            message : obj.message
                        });
                    });
                }

                success(result);

            }else if (errors.length !== 0) { //Execute the "error" callback
                error(errors.reduce(function (obj, error) {
                    obj.method = error.method;
                    obj.called_with = error.called_with;
                    obj.message = error.message;
                    obj.all_errors.push({
                        executed_by: error.executed_by,
                        message: error.message
                    });
                    //obj.executed_by = success.executed_by;
                    return obj;
                }, { all_errors: [] }));
            }
        }
    }





    var register_callback = helpers.save_callback_in.bind(this, configuration);

    var apply_on_servers = apply_on.bind(null, servers.get_servers);
    var apply_on_methods = apply_on.bind(null, servers.get_methods);
    var identity = function(a){return a;};

    return {
        invoke: invoke,
        method: get_method,
        servers: get_servers,
        methods: get_methods,
        methods_for_instance: get_methods_for_instance,
        method_added: register_callback.bind(null, "method_added", apply_on_methods),
        method_removed: register_callback.bind(null, "method_removed", identity),
        server_added: register_callback.bind(null, "server_added", apply_on_servers),
        server_removed: register_callback.bind(null, "server_removed", identity),
        server_method_added: register_callback.bind(null, "server_method_added", identity),
        server_method_removed: register_callback.bind(null, "server_method_removed", identity),
        parse_signature: helpers.signature_parse_friendly
    };
};




//Filters an array of servers and returns the ones which match the target criteria
function filter_by_target(target, servers){
    //If the user specified target as string:
    if (typeof target === 'string') {
        if (target === 'all') {
            target = servers;
        } else if (target === 'best') {
            target = servers[0]!==undefined?[servers[0]]:[];  //If the user specified the target as server filter
        }
    } else {
        if (target.constructor.name !== 'Array') {
            target = [target];
        }
        var unexisting_servers = [];
        //Retrieve all servers that match the filters
        target = target.reduce(function (matches, filter) {
            //Add matches for each filter
            var my_matches = servers.filter(function (server) {
                return instance_match(filter, server);
            });
            return matches.concat(my_matches);
        }, []);
    }
    return target;
}




//Matches a server definition against a server filter
function instance_match(instance_filter, instance_definition) {
    return contains_props(instance_filter, instance_definition);
}


//Matches a method definition against a method filter
function method_match(method_filter, method_definition) {
    [
        'accepts',
        'returns'
    ].forEach(function (prop) {
        if (method_filter[prop] !== undefined) {
            method_filter[prop] = helpers.signature_normalize(method_filter[prop]);
        }
    });
    return contains_props(method_filter, method_definition);
}


//Helpers

/*
 function contains_props(filter, object) {
 var match = true;
 Object.keys(filter).forEach(function (prop) {
 if (String(filter[prop]).toLowerCase() !== String(object[prop]).toLowerCase()) {
 match = false;
 }
 });
 return match;
 }
 */

function contains_props(filter, object) {
    return Object.keys(filter).reduce(function (match, prop) {
        if (filter[prop].constructor === RegExp){
            if(!filter[prop].test(object[prop])) {return false;}
            else{return match;}
        } else {
            if(String(filter[prop]).toLowerCase() !== String(object[prop]).toLowerCase()){return false;}
            else{return match;}
        }
    }, true);
}



function takeWhile(array, pred) {
    var sz = array.length;
    for (var index = 0; index < sz; index++) {
        if (pred(array[index]) === true) {
            break;
        }
    }
    return array[index];
}


function apply_on(objects, func){
    return objects().map(func);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./agm_client_invocationsstate":32,"./agm_client_serverstate":34,"./agm_helpers":35}],32:[function(require,module,exports){
(function (global){
/*
The Invcationsstate module handles AGM method invocations. via the 'invoke' method
It sends and receives all invocation-related messages, via the "process_response" method
that it exposes and via the "send_request" callback

*/

var helpers = require("./agm_helpers");

module.exports = function(configuration, instance, send_request){
    "use strict";

	//Here we store all pending callbacks
    var pending_callbacks = {};


	//Invokes an AGM method to a single AGM server, given valid input.
	function invoke(method, argument_obj, target, stuff, success, error){
		 //Generate a unique invocation ID, for this invocation
         var invocation_id = Math.floor(Math.random()*10000000000);

        //Register the user's callbacks
        register_invocation(invocation_id, {method:method, called_with:argument_obj},success, error, stuff.method_response_timeout);

        //Get a response subject for this invocation
        instance.response_subject(method, function(response_subject){

             //Construct a message
             var message = {
                     MethodRequestSubject:target.request_subject,
                     MethodResponseSubject:response_subject,
                     Client:instance.info(),
                     Context:{
                         ArgumentsJson: argument_obj,
                         InvocationId:invocation_id,
                         ObjectType:stuff.object_type,
                         DisplayContext:stuff.display_context,
                         MethodName:method.name,
                         ExecutionServer:target,
                         Timeout:stuff.method_response_timeout
                     }
                 };
             //Send it

             send_request(message);
			 if(global.console!==undefined&& configuration.debug===true){
				console.debug("%c>>> sending MethodInvocationRequestMessage", "background-color:hsla(198, 51%, 79%, 0.5)");
				console.debug("%c"+JSON.stringify(message), "background-color:hsla(198, 51%, 79%, 0.5)");
			}

        });
	}



	//Adds callbacks for a given invocation ID
    function register_invocation(invocation_id, response, success, error, timeout){
        //Adds the callbacks
        pending_callbacks[invocation_id] = {response:response, success:success, error:error};
        //Schedules to throw a timeout if nobody answers
        setTimeout(function(){
            if(pending_callbacks[invocation_id]===undefined){return;}
            error({
                method:response.method, called_with:response.argument_obj,
                message:"Timeout reached"
            });
            delete pending_callbacks[invocation_id];
        }, timeout);
    }

	function process_method_response(message){
		//Finds the appropriate callback
        var callback = pending_callbacks[message.InvocationId];
        if(callback!==undefined){
            if(global.console!==undefined&& configuration.debug===true){
                console.debug("%c<<< receiving MethodInvocationResultMessage", "background-color:hsla(118, 51%, 79%, 0.5)");
                console.debug("%c"+JSON.stringify(message), "background-color:hsla(118, 51%, 79%, 0.5)");
            }
            //If the server returned success, execute the success callback
            if(message.Status === 0&&typeof callback.success==="function"){
                //parse the result
                var result = message.ResultContextJson;
				//If the result is an empty object, there is no result
                if(Object.keys(result).length===0){result = undefined;}

                //Log that we received a result
                if(global.console!==undefined && configuration.debug===true){
                    console.log('<<<  "'+callback.response.method.name+'" was executed by '+JSON.stringify(helpers.preprocess_server(message.Server)));
                }
                //Execute the success callback
                callback.success({
                    method:callback.response.method,
                    called_with:callback.response.called_with,
                    executed_by:helpers.preprocess_server(message.Server),
                    returned:result,
                    message:message.ResultMessage,
                    log_details:message.ResultLogDetails
                });
             //Else, return an error
            }else if(typeof callback.error==="function"){
               if(global.console!==undefined && configuration.debug===true){
                   console.log('<<<  "'+callback.response.method.name+'" was executed with error by '+JSON.stringify(helpers.preprocess_server(message.Server)));
               }
               callback.error({
                   method:callback.response.method,
                   called_with:callback.response.called_with,
                   message:message.ResultMessage,
                   log_details:message.ResultLogDetails,
                   status:message.status
               });
            }
			//Finally, remove the callbacks
            delete pending_callbacks[message.InvocationId];
        }
    }

    return {process_method_response:process_method_response, invoke:invoke};
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./agm_helpers":35}],33:[function(require,module,exports){
(function (global){
/*
The Methodstate module, keeps the state of available AGM methods in the network.
*/

var helpers = require("./agm_helpers");

module.exports = function(configuration){
	//A list of all available AGM methods
	var methods = {};

	//Save the reference to the metric function if it exists
	var objectMetric = (configuration.metrics!==undefined)?configuration.metrics.numberMetric.bind(configuration.metrics):function(){};

    //Adds a new server to a method. Creates the method if it is not created previously.
    function add_server_to_method(method_info, server_id, server_info){
        //Get the method ID
        var method_id = get_method_id(method_info);

        

        //One method can have several request subjects per server.
        //So the request subject is actually not a property of the method
        var request_subject = method_info.request_subject;
        delete  method_info.request_subject;


		//Copy the method and server objects to a format suitable for sending to users
        var method_info_friendly = helpers.clone_object(method_info);
    	var server_info_friendly = helpers.clone_object(server_info);



        var method = methods[method_id];

        //If the method does not exist, create it
        if(method ===undefined){
            //Save the info
            method = methods[method_id] = {info:method_info, servers:{}};
			//Add request_subject
          	method = add_request_subject(method, server_id, request_subject);

             //Execute user callbacks
            helpers.execute_all_with(configuration.method_added, method_info_friendly);
            //Log and publish metrics
            if(global.console!==undefined && console.table!==undefined && configuration.debug===true){
                console.log(">>>>>> New method detected: "+JSON.stringify(method_info_friendly));
                console.table(get_methods());
            }
			objectMetric("Methods total count", Object.keys(methods).length);
        }else{
			//Else, just add the request subject
        	method = add_request_subject(method, server_id, request_subject);
        }
        //Execute user callbacks
        helpers.execute_all_with(configuration.server_method_added, {method:method_info_friendly, server:server_info_friendly});
    }

	//Adds request subject for server and method
    function add_request_subject(method, server_id, request_subject){
    	method.servers[server_id] = request_subject;
    	return method;
    }


    //Removes a server from a method. Deletes the method if there are no more servers left.
    function remove_server_from_method(method_id, server_id, server_info) {
      //Obtain info about the method before removing it.
      var method_info_friendly = get_method(method_id);
      var server_info_friendly = helpers.clone_object(server_info);


      //Remove the server from the list
      var servers = methods[method_id].servers;
      delete servers[server_id];
      //Remove the method if there aren't any servers left
      if (Object.keys(servers).length === 0) {
        var callback = configuration.on_method_removed;
        helpers.execute_all_with(configuration.method_removed, method_info_friendly);
        //remove method
        delete methods[method_id];
        //Log and metrics
        if (global.console !== undefined && console.table !== undefined && configuration.debug === true) {
          console.log("<<<<<< Method stopped being available: " + JSON.stringify(method_info_friendly));
          console.table(get_methods());
        }
        objectMetric("Methods total count", Object.keys(methods).length);
      }
      //Execute user callbacks
      helpers.execute_all_with(configuration.server_method_removed, {
        method: method_info_friendly,
        server: server_info_friendly
      });

    }

	//Generates a unique if for a method
    function get_method_id(m){
		//Setting properies to defaults:
		var accepts = m.accepts !==undefined?m.accepts:"";
		var returns = m.returns !==undefined?m.returns:"";
		var version =  m.version !==undefined?m.version:0;
		return (m.name+accepts+returns+version).toLowerCase();
    }


    //Retrieve all methods
    function get_methods(){
        return Object.keys(methods).map(function(method){
            return helpers.clone_object(methods[method].info);
        });
    }
    //Retrieve an array of the ID's of the servers for a method
    function get_servers_for_method(method_info){
        var method = methods[get_method_id(method_info)];
        if(method !==undefined){return method.servers;}
        else{return {};}
    }

    //Retrieves a copy of the method, by its ID
    function get_method(method_id){
        if(typeof method_id === "object"){method_id = get_method_id(method_id);}
        if(methods[method_id]!==undefined)
        //We clone the method definition so it can be mutated without affecting the original
        return helpers.clone_object(methods[method_id].info);
    }


    return {
            get_methods:get_methods,
            get_method:get_method,
            get_method_id:get_method_id,
            add_server_to_method:add_server_to_method,
            remove_server_from_method:remove_server_from_method,
            get_servers_for_method:get_servers_for_method
            };

};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./agm_helpers":35}],34:[function(require,module,exports){
(function (global){
/*
The Serverstate module processes server presences and keeps the state of available AGM servers in the network.
*/
var helpers = require("./agm_helpers");

var get_server_id = helpers.get_server_id;

var client_methodstate = require("./agm_client_methodstate");

module.exports = function(configuration, instance){
    "use strict";

	//A list of all the servers in the network
	var servers = {};

	//Instantiates the "methodstate" module
    var methods = client_methodstate(configuration);


	//Processes a presence message from a server
    function process_presence(presence, is_presence){
        //console.log(presence.Instance)
		//Get server info.
		var serverinfo = helpers.preprocess_server(presence.Instance);

        //If it is a new server, register it.
		if(!exists(serverinfo)){
			add_server(serverinfo);
		}


		if(!(is_presence && presence.PublishingInterval === 0)){
			//Do nothing for presence messages with interval 0
			//Take care of the timeouts
			set_timeout(serverinfo, presence.PublishingInterval);
        }


		//Finally, update the methods
		if(presence.MethodDefinitions!==undefined){
			update_methods(serverinfo, presence.MethodDefinitions);
		}

	}

	//This function sets a timeout which removes the server unless
	//the function is called again before the timeout is over
    function set_timeout(serverinfo, duration){

		if(duration ===-1) return;
		 //Retrieve the server
         var server_id = get_server_id(serverinfo);
         var server = servers[server_id];
         //Stop the previous timeout
         if(server.bomb !==undefined){
			clearTimeout(server.bomb);
         }
		 //Set a new one
		 server.bomb = setTimeout(function(){
			remove_server(serverinfo);
		 }, duration*configuration.remove_server_on_n_missing_heartbeats+1);

    }
    //Checks if a servers exists
    function exists(serverinfo){
        var server_id = get_server_id(serverinfo);
        return servers[server_id]!==undefined;
    }
	//Register a server
	function add_server(serverinfo){
        //Obtain a server ID and store the new server
        var server_id = get_server_id(serverinfo);
		servers[server_id] = {info:serverinfo, methods:[], bomb:undefined};

		//Log in console
        if(global.console!==undefined && console.table!==undefined && configuration.debug===true){
        	console.log(">>>>>> New server detected: "+JSON.stringify(serverinfo));
            console.table(get_servers());
        }

        //Execute user callbacks
        helpers.execute_all_with(configuration.server_added, serverinfo);

		return server_id;
	}
	//Unregisters a server
	function remove_server(serverinfo){
		//Obtain a server ID
        var server_id = get_server_id(serverinfo);
        //Remove the server's methods
        servers[server_id].methods.forEach(function(method_id){
            methods.remove_server_from_method(method_id, server_id, serverinfo);
        });
        //Remove the server itself
        delete servers[server_id];
        //Log in console
         if(global.console!==undefined && console.table!==undefined && configuration.debug===true){
            console.log("<<<<<< Server stopped being available:"+JSON.stringify(serverinfo));
            console.table(get_servers());
        }

         //Execute user callbacks
        helpers.execute_all_with(configuration.server_removed, serverinfo);
	}

    //Updates the methods of a server
	function update_methods(serverinfo, new_methods){
        var server_id = get_server_id(serverinfo);
        //Get an array of the methods the server had before we started this
		var old_methods_ids = servers[server_id].methods;
        //Get an array of the methods that the server has now
        new_methods = new_methods.map(helpers.preprocess_method).reduce(function(obj, method){
           obj[methods.get_method_id(method)] = method;
           return obj;
        }, {});
        //For each of the old methods
        old_methods_ids.forEach(function(method_id){
            //Check if it is still there
            if(new_methods[method_id]===undefined){
               //If it isn't, remove it
               methods.remove_server_from_method(method_id, server_id, serverinfo);
            }else{
                //If it is there in both the old array and the new one, we don't need to add it again
                new_methods[method_id] = undefined;
            }
        });
        //Now add the new methods
        var new_methods_ids = Object.keys(new_methods);
        new_methods_ids.forEach(function(id){
            if(new_methods[id]!==undefined){
                methods.add_server_to_method(new_methods[id], server_id, serverinfo);
            }
        });
        //Now all we have to do is replace the list of methods the server has
        servers[server_id].methods = new_methods_ids;

    }

    //Get all servers for a given method
    function get_servers(method, include_request_subject){
        var server_ids;
		//If there isn't a method get the ID's of all servers
        if(method ===undefined){
           server_ids = Object.keys(servers);
		//Else, get a list of the servers that have the method
        }else{
           var ids_to_request_subjects = methods.get_servers_for_method(method);
           server_ids = Object.keys(ids_to_request_subjects);
        }
		//Format the list
        return server_ids.map(function(server_id){
            var server =  helpers.clone_object(servers[server_id].info);
            //Include the request subject for each server for each method:
            if(include_request_subject){server.request_subject = ids_to_request_subjects[server_id];}
            return server;
        }).sort(compare_servers);
    }
    //A comparer function. Sorts the servers based on availability
    function compare_servers(server1, server2){
		var s1 = 0;
		var s2 = 0;
		//+2 if the server is on the same machine
		if(server1.machine ===instance.machine){s1 = s1+2;}
		if(server2.machine ===instance.machine){s2 = s2+2;}
		//+1 if it runs under the same user
		if(server1.user === instance.user){s1 = s1+1;}
		if(server2.user === instance.user){s2 = s2+1;}
		return s2 - s1;
	}

    function get_method_ids(server){
        return servers[get_server_id(server)].methods;
    }


    //Get all methods for a given server
	function get_methods(server){
        //If there is no server specified, return all
        if(server ===undefined){
            return methods.get_methods();
        //Else, get the methods from the server object
        }else if(exists(server)){
             return get_method_ids(server).map(function(method_id){
                return methods.get_method(method_id);
            });
        //If the server is specified, but it does not exist, return an empty array
        }else{
            return [];
        }
	}

    return {process_presence:process_presence,
            get_methods:get_methods,
            get_method_ids:get_method_ids,
            get_servers:get_servers,
           	get_method:methods.get_method,
            exists:exists,
			compare_servers:compare_servers
            };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./agm_client_methodstate":33,"./agm_helpers":35}],35:[function(require,module,exports){
(function (global){
var datatypes=["Bool", "Int", "Double", "Long", "String", "DateTime"];

function signature_stringify(array){
	//No signature - return undefined (the default undefined value in AGM for this property is empty string)
	if(array===undefined||array ===""){return "";}
	try {
		return array.sort(function(a, b){
			if (a.Name > b.Name)
				return 1;
			if (a.Name < b.Name)
				return -1;

			return 0;
		})
		.map(function(par){
			var req ="?";
			if(par.IsRequired){req ="";}
			var arr ="";
			if(par.isArray){arr ="[]";}

			var data_type = datatypes[parseInt(par.Type)];
			if(data_type===undefined){throw "Invalid datatype "+par.Type;}

			return data_type+req+arr+" "+par.Name;
		}).join(", ");
	} catch(e) {
		return "";
	}

}

function signature_parse(string){
	 if(string===undefined||string ===""){return undefined;}
	 return string.split(",").map(function(argument){
		 var arg = {};
		 var p = argument.trim().split(" ");
		 if (p.length!==2){throw "Invalid argument: "+argument+".";}

		 arg.Name = p[1];

		 var data = p[0];

		 arg.isArray = false;

		 if(data.indexOf("[]")!==-1){
			 data = data.replace("[]", "");
			 arg.isArray = true;
		 }

		 arg.IsRequired = true;
		 if(data.indexOf("?")!==-1){
			 data = data.replace("?", "");
			 arg.IsRequired = false;
		 }

		 var arg_type = datatypes.indexOf(data);
		 if(arg_type!==-1){
			arg.Type = arg_type+"";
		 }else{
			 throw "Invalid datatype: "+data+". The accepted datatypes are Int, Double, Long, DateTime, Bool and String";
		 }

		 return arg;

	 });
}

function signature_parse_friendly(string){
	return signature_parse(string).reduce(function(obj, arg){
		obj[arg.Name] = {type:datatypes[parseInt(arg.Type)], is_array:arg.isArray, is_required:arg.IsRequired};
		return obj;
	},{});
}

function signature_normalize(string){
	return signature_stringify(signature_parse(string));
}


//Converts server properties from camel to snake case
function preprocess_server(m){
	return{
		machine:m.MachineName,
		pid:m.ProcessId,
		started:m.ProcessStartTime,
		user:m.UserName,
		application:m.ApplicationName,
		environment:m.Environment,
		region:m.Region,
		service_name:m.ServiceName,
		metrics_repository_id:m.MetricsRepositoryId,
		state:m.State
	};
}

function clone_object(method){
	var new_method ={};
	for(var i in method){
		//Remove undefined values from object before passing it to the user
		if(method[i]!==undefined&&method[i]!==""&&method[i]!==0){
			new_method[i] = method[i];
		}
	}
	return new_method;
}

	//Helper: preprocesses the method definition
function preprocess_method(method_info){
	var method = method_info.Method;
	return{
		name:method.Name,
		accepts:method.InputSignature,
		returns:method.ResultSignature,
		request_subject:method_info.MethodRequestSubject,
		description:method.Description,
		display_name:method.DisplayName,
		version:method.Version,
		object_types:method.ObjectTypeRestrictions
	};
}


  function save_callback_in(callback_obj, event, on_callback_add, callback){
		if (typeof callback === 'function'){
			callback_obj[event] = callback_obj[event]||[];
			callback_obj[event].push(callback);
			on_callback_add(callback);
		}else{
			throw '"'+event+'" must be called with a function as an argument';
		}
  }

  function execute_all_with(callbacks, input){
	if(typeof callbacks ==="object"){
		callbacks.forEach(function(callback){
			callback(input);
		});
	}
}

//Generates a unique ID for a server
function get_server_id(serverinfo){
	if(serverinfo===undefined){return undefined;}
	//The matching is case-insensitive
	return (serverinfo.application+serverinfo.user).toLowerCase();
}

function promisify(promise, successCallback, errorCallback){
    if (typeof successCallback !== 'function' && typeof errorCallback !== 'function') {
        return promise;
    }

    if(typeof successCallback !== 'function'){
        successCallback = function(args){
            if(global.console!==undefined && agm.debug===true){
                console.log("Success!");
            }
        };
    }else if(typeof errorCallback !== 'function'){
        errorCallback = function(args){
            if(global.console!==undefined && agm.debug===true){
                console.log("An error occurred.");
            }
        };
    }

    promise.then(successCallback, errorCallback);
}

module.exports = {
	get_server_id:get_server_id,
	execute_all_with:execute_all_with,
	save_callback_in:save_callback_in,
	signature_stringify:signature_stringify,
	signature_parse:signature_parse,
	signature_parse_friendly:signature_parse_friendly,
	signature_normalize:signature_normalize,
	preprocess_server:preprocess_server,
	preprocess_method:preprocess_method,
	clone_object:clone_object,
	promisify:promisify
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],36:[function(require,module,exports){
(function (global){
/*
The AGM instance collects information about the machine we are in, 
and interacts with the .NET gateway in other ways, 
to deliver full AGM compatibility to AGM.JS.

To do so, it relies on the default AGM client.
*/

var document = global.document || global.process;

module.exports = function(c, connection){
	var instance = {};
	//Generate default instance properties
	instance.ApplicationName = document.title+Math.floor(Math.random()*1000000000);
	instance.ProcessId = Math.floor(Math.random()*1000000000);
	instance.ProcessStartTime = new Date().getTime(); 
    
	//Apply user-submitted instance properties 
	if(typeof c === "object"){
        if(c.application!==undefined){instance.ApplicationName = c.application;}
		instance.MachineName=c.machine;
		instance.UserName=c.user;
		instance.Environment=c.environment;
		instance.Region=c.region;
		instance.ServiceName=c.service_name;
		instance.MetricsRepositoryId=c.metrics_repository_id;
		instance.State=1;
	}
    var identity_updated = false;
    connection.on("Instance", function(i){
		if(identity_updated){return;}
        if(instance.MachineName===undefined){instance.MachineName = i.MachineName;}
        if(instance.UserName===undefined){instance.UserName = i.UserName;}
        if(instance.Environment===undefined){instance.Environment = i.Environment;}
        if(instance.Region===undefined){instance.Region = i.Region;}
        if(instance.ServiceName===undefined){instance.ServiceName = i.ServiceName;}
        if(instance.MetricsRepositoryId===undefined){instance.MetricsRepositoryId = i.MetricsRepositoryId;}
        if(instance.State===undefined){instance.State = i.State;}
        if(global.console!==undefined&& global.console.table!==undefined  && agm.debug===true){
            console.log("Received instance with info from Gateway.");
        }
		identity_updated = true;
    });
	//Create a method for accessing a property
    function create_getter(property){
        return instance[property];
    }
	//Generates a request subject for a method
	//Delegates it to the .NET gateway if it is online, 
	//to create subjects which are valid in the scope of the transport that is being used.
    var req_subject = 0;
	function request_subject(method_identifier, callback){
        callback("req"+(req_subject++)+instance.ProcessId);
	}
    //Generates a response subject subject for a method invocation
	//Delegates it to the .NET gateway if it is online, 
	//to create subjects which are valid in the scope of the transport that is being used.
    var resp_subject = 0;
	function response_subject(method_identifier, callback){
        callback("resp"+(resp_subject++)+instance.ProcessId);	
	}
	//Returns all instance properties
    function info(){
        return instance;
    }

    return {request_subject:request_subject, 
            response_subject:response_subject,
            info:info,
            application:create_getter("ApplicationName"),
            pid:create_getter("ProcessId"),
			user:create_getter("UserName"),
			machine:create_getter("MachineName")

          };   

};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],37:[function(require,module,exports){
(function (global){
var Promise = require('es6-promise').Promise;
var h = require("./agm_helpers");

module.exports = function (configuration) {
    function paramToJson(param, stringPropName, objectPropName) {
        var obj = {};
        if (typeof param == 'string') {
            obj[stringPropName] = param;
            return JSON.stringify(obj);
        }
        else {
            if (objectPropName === undefined) {
                return JSON.stringify(param);
            }
            obj[objectPropName] = param;
            return JSON.stringify(obj);
        }
    }

    // helper function for parsing dates properly
    function agmParse(str) {
        return JSON.parse(str, function (k, v) {
            if (typeof v !== 'string') {
                return v;
            }

            // pre-seed - this should be a bit faster than indexOf
            if (v[0] !== dateTimeIdentifier[0]) {
                return v;
            }

            if (v.indexOf(dateTimeIdentifier) !== 0) {
                return v;
            }

            var unixTimestampMs = v.substr(lenOfIdentitifier);
            return new Date(parseFloat(unixTimestampMs));
        });
    }

    /**
     * Converts a target argument to object ready to be passed to Agm facade
     * @param target
     */
    function targetArgToObject(target){

        target = target || 'best';

        if (typeof target === "string") {
            if (target !== "all" && target !== "best") {
                throw new Error('"' + target + '" is not a valid target. Valid targets are "all" and "best".');
            }
            return {target : target};
        } else {
            if (target.constructor.name !== 'Array') {
                target = [target];
            }

            target = target.map(function (e) {
                return convertInstanceToRegex(e);
            });

            return {serverFilter: target};
        }
    }

    function convertInstanceToRegex(instance) {
        var instance_converted = {};

        Object.keys(instance).forEach(function (key) {
            var propValue = instance[key];
            instance_converted[key] = propValue;

            if (typeof propValue === "undefined" || propValue === null) {
                return;
            }

            if (typeof propValue === "string") {
                // do exact matching if user passed a string
                instance_converted[key] = "^" + instance[key] + "$";
            }
            else if (instance[key].constructor === RegExp) {
                instance_converted[key] = instance[key].source;
            }
            else {
                instance_converted[key] = instance[key];
            }
        });
        return instance_converted;
    }

    var result = {

        // Registers a JavaScript function as an AGM method, thus making it available other AGM instances on the same transport.
        register: function (methodInfo, callback) {

            this.agmFacade.register(paramToJson(methodInfo, "name"),
                function (arg) {
                    var result = callback(JSON.parse(arg));
                    return JSON.stringify(result);
                });
        },

        unregister: function (methodFilter) {
            this.agmFacade.unregister(paramToJson(methodFilter, "name"));
        },

        // Invokes an AGM method asynchronously.
        invoke: function (methodFilter, args, target, options, successCallback, errorCallback) {

            var promise = new Promise(function (resolve, reject) {
                var successProxy, errorProxy;

                successProxy = function (args) {
                    var parsed = JSON.parse(args);
                    resolve(parsed);
                };
                errorProxy = function (args) {
                    var parsed = JSON.parse(args);
                    reject(parsed);
                };

                if (args === undefined) {
                    args = {};
                }

                if (typeof args !== 'object') {
                    reject({message: 'The method arguments must be an object.'});
                }

                if (options === undefined) {
                    options = {};
                }

                target = targetArgToObject(target);

                this.agmFacade.invoke(
                    paramToJson(methodFilter, "name"),
                    JSON.stringify(args),
                    JSON.stringify(target),
                    JSON.stringify(options),
                    successProxy,
                    errorProxy
                );
            }.bind(this));

            return h.promisify(promise, successCallback, errorCallback);
        },

        // Registers a handler which notifies you when a new AGM method is available.
        methodAdded: function (callback) {
            this.agmFacade.methodAdded(callback);
        },

        // Registers a handler which notifies you when an AGM method stops being available.
        methodRemoved: function (callback) {
            this.agmFacade.methodRemoved(callback);
        },

        serverAdded: function (callback) {
            this.agmFacade.serverAdded(callback);
        },

        serverRemoved: function (callback) {
            this.agmFacade.serverRemoved(callback);
        },

        serverMethodAdded: function (callback) {
            this.agmFacade.serverMethodAdded(callback);
        },

        serverMethodRemoved: function (callback) {
            this.agmFacade.serverMethodRemoved(callback);
        },

        // Retrieves a list of AGM servers (instances) optionally filtered by method.
        servers: function (methodFilter) {
            var jsonResult = this.agmFacade.servers(JSON.stringify(methodFilter));
            return agmParse(jsonResult);
        },

        // Retrieves a list of methods that matches a given filter. You can use this to check if a given method exists.
        methods: function (methodFilter) {
            var jsonResult = this.agmFacade.methods(JSON.stringify(methodFilter));
            return agmParse(jsonResult);
        },

        methodsForInstance: function (instanceFilter) {
            var jsonResult = this.agmFacade.methodsForInstance(JSON.stringify(instanceFilter));
            return agmParse(jsonResult);
        },

        // streaming support
        subscribe: function (name, options, successCallback, errorCallback) {
            var promise = new Promise(function (resolve, reject) {
                if (options === undefined) {
                    options = {};
                }
                options.args = JSON.stringify(options.arguments || {});
                options.target = targetArgToObject(options.target);

                this.agmFacade.subscribe2(name,
                    JSON.stringify(options),
                    function(stream){
                        resolve(stream);
                    },
                    function(error){
                        reject(error);
                    }
                );
            }.bind(this));

            return h.promisify(promise, successCallback, errorCallback);
        },

        createStream: function(streamDef, callbacks, successCallback, errorCallback){
            var promise = new Promise(function (resolve, reject) {
                if (typeof streamDef === "string") {
                    streamDef = {name: streamDef};
                }

                if (!callbacks){
                    callbacks = {};
                }

                this.agmFacade.createStream2(
                    JSON.stringify(streamDef),
                    // TODO - wrap to transform params
                    callbacks.subscriptionRequestHandler,
                    // TODO - wrap to transform params
                    callbacks.subscriptionAddedHandler,
                    // TODO - wrap to transform params
                    callbacks.subscriptionRemovedHandler,
                    // success handler
                    function (stream) {
                        resolve(stream);
                    },
                    // error handler
                    function (error) {
                        reject(error);
                    }
                );
            }.bind(this));

            return h.promisify(promise, successCallback, errorCallback);
        }
    };

    result.version = "2.1.3";

    // add metrics
    if (configuration !== undefined && configuration.metrics !== undefined) {
        configuration.metrics.metricsIdentity = configuration.metrics.identity;


        // quick and dirty - we need to stringify the configuration so we need to replace the metrics object (which has circular references)
        // with an object that holds only the properties needed
        var metricsConfig = {
            metricsIdentity: configuration.metrics.metricsIdentity,
            path: configuration.metrics.path
        };
        configuration.metrics = metricsConfig;
    }


    //create new AGM façade for this instance
    var facade = global.htmlContainer.jsAgmFacade;
    result.instance = facade.init(JSON.stringify(configuration));
    result.agmFacade = facade;

    // date parsing
    var dateTimeIdentifier = result.agmFacade.jsonValueDatePrefix;
    var lenOfIdentitifier = dateTimeIdentifier.length;

    // deprecated API
    result.create_stream = result.createStream;
    result.methods_for_instance = result.methodsForInstance;
    result.method_added = result.methodAdded;
    result.method_removed = result.methodRemoved;
    result.server_added = result.serverAdded;
    result.server_removed = result.serverRemoved;
    result.server_method_added = result.serverMethodAdded;
    result.server_method_removed = result.serverMethodRemoved;

    return result;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./agm_helpers":35,"es6-promise":6}],38:[function(require,module,exports){
(function (global){
/*
The AGM Server allows users register AGM methods.
It exposes these methods to AGM clients (using presence messages) and listens for their invocation
*/

var helpers = require("./agm_helpers");

module.exports = function(connection, instance, configuration){

    //Validate configuration
    if(typeof configuration!=="object"){
		configuration = {};

	    if(global.console!==undefined && configuration.debug===true){
            console.log('Creating an AGM server with default configuration.');
        }
	}
    //Add defaults
    if(typeof configuration.hearbeat_interval!=="number"){
        configuration.hearbeat_interval = 5000;
    }

    if(typeof configuration.presence_interval!=="number"){
        configuration.presence_interval = 10000;
    }

    //Save the reference to the metric function if it exists
    var metric = (configuration.metrics!==undefined)?configuration.metrics.numberMetric.bind(configuration.metrics):function(){};
    //An array of the server's methods
    var methods = [];

    var presence_timer;

    var heartbeat_timer;

    if(heartbeat_timer===undefined){
        heartbeat_timer = setInterval(send_heartbeat, configuration.hearbeat_interval);
    }

	//Registers a new method in AGM
	function register(method_definition, the_function){
		if(typeof method_definition === "string"){method_definition = {name:method_definition};}
		//Get a request subject for this method
		instance.request_subject(method_definition, function(request_subject){
            var method = convert_method(method_definition);
            method.MethodRequestSubject = request_subject;
            //Add the method (store the unformatted definition in order to do checkups in the unregister method)
            methods.push({method:method, definition:method_definition, the_function:the_function});
            //Send presence so the clients know we have it
            send_presence();
            //Start sending presence regularily (if we aren't already doing it)
            if(presence_timer===undefined){
                presence_timer = setInterval(send_presence, configuration.presence_interval);
            }
						metric("Registered methods", methods.length);

        });

	}
	var invocations = 0;

	//Listens for method invocations
	connection.on("MethodInvocationRequestMessage",function(message){
        //Find the method
        var method;
		methods.forEach(function(m){
            if(m.method.MethodRequestSubject ===message.MethodRequestSubject){
                method = m;
            }
        });
	if(method===undefined){return;}
        if(global.console!==undefined&& configuration.debug===true){
            console.debug("%c<<< receiving MethodInvocationRequestMessage", "background-color:hsla(198, 51%, 79%, 0.5)");
            console.debug("%c"+JSON.stringify(message), "background-color:hsla(198, 51%, 79%, 0.5)");
        }
				metric("Invocations count", invocations++);

        var result;
        var error;
        try{
        	//Execute it and save the result
        	result = method.the_function(message.Context.ArgumentsJson);
		}catch(e){
			if(typeof e ==="string"){
				error = e;
			}
			else if(typeof e.message == 'string'){
				error = e.message;
			}else{
				error = null;
			}
		}
		//The AGM library only transfers objects. If the result is not an object, put it in one
        if(typeof result!=="object"||result.constructor === Array){
            result = {_result:result};
        }
		//Don't send result if the client does not require it
		if(message.MethodResponseSubject==="null"){return;}

		var result_message = {
			MethodRequestSubject:message.MethodRequestSubject,
			MethodResponseSubject:message.MethodResponseSubject,
			MethodName:method.method.Method.Name,
            InvocationId:message.Context.InvocationId,
            ResultContextJson:result,
			Server:instance.info(),
			ResultMessage:error,
			Status:(error === undefined)?0:1
		};
		//Send result
        connection.send("MethodInvocationResultMessage", result_message);

		if(global.console!==undefined&& configuration.debug===true){
			console.debug("%c>>> sending MethodInvocationResultMessage", "background-color:hsla(118, 51%, 79%, 0.5)");
			console.debug("%c"+JSON.stringify(result_message), "background-color:hsla(118, 51%, 79%, 0.5)");
		}

	});



	//Constructs a heartbeat message
	function construct_heartbeat(){
		return{
			PublishingInterval:configuration.hearbeat_interval,
			Instance:instance.info()
		};
	}
	//Constructs a presence message
	function construct_presence(){
		var p = {
            PublishingInterval:configuration.presence_interval,
            Instance:instance.info()
        };
		p.MethodDefinitions = methods.map(function(method){
			return method.method;
		});
		return p;
	}

    //True if we should be broadcasting presences and heartbeats, false otherwise
    var broadcasting = true;

    function start(){
        broadcasting = true;
    }

    function stop(){
        broadcasting = false;
    }

    //Sends a presence
    function send_presence(){
        if(broadcasting) {connection.send("ServerPresenceMessage", construct_presence());}
    }

    //Sends a heartbeat
    function send_heartbeat(){
        if(broadcasting){connection.send("ServerHeartbeatMessage", construct_heartbeat());}
    }




	//Converts the method definition from camel case to snake case
    function convert_method(method_identifier){
        //If we are given a string instead of an object, we presume that is the method's name:
        if(typeof method_identifier === "string"){method_identifier = {name:method_identifier};}

        //Set default values
        if(typeof method_identifier.version!=="number"){method_identifier.version=0;}


        //Convert the method definition to the format that AGM requires
       return {
            Method: {
              Name: method_identifier.name,
              InputSignature: method_identifier.accepts,
              ResultSignature: method_identifier.returns,
              Description: method_identifier.description,
              DisplayName: method_identifier.display_name,
              Version: method_identifier.version,
              ObjectTypeRestrictions: method_identifier.object_types
            }
        };
    }

    function contains_props(filter, object){
        var match = true;
        Object.keys(filter).forEach(function(prop){
            if(filter[prop]!==object[prop]){match = false;}
        });
        return match;
	}

    //Unregisters a previously registered AGM method
    function unregister(method_filter){
    	if(typeof method_filter === "string"){method_filter = {name:method_filter};}
        methods = methods.filter(function(method){
             return !contains_props(method_filter, method.definition);
        });
				metric("Registered methods", methods.length);
    }


	return {register:register, unregister:unregister, start:start, stop:stop};
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./agm_helpers":35}],39:[function(require,module,exports){
(function (global){
var application = require("./application");
var instance = require("./instance");
var helpers = require("./helpers");

module.exports = global.app_manager = function app_manager(agm, windows) {
	var apps = application(agm, function () {
		return instances;
	});
	var instances = instance(agm, apps);
	var manager = {
		applications: apps.all,
		application: apps.get_by_id,
		on_app_added: helpers.add_callback("added").bind(apps),
		on_app_available: helpers.add_callback("available").bind(apps),
		on_app_removed: helpers.add_callback("removed").bind(apps),
		on_app_unavailable: helpers.add_callback("unavailable").bind(apps),

		instances: instances.all,
		on_instance_started: helpers.add_callback("started").bind(instances),
		on_instance_stopped: helpers.add_callback("stopped").bind(instances),

		get_branches: function (success, error) {
			agm.invoke("T42.ACS.GetBranches", {}, "best", {}, function (e) {
				if (success) {
					success(helpers.vals(e.returned.Branches));
				}
			}, error);
		},
		get_current_branch: function (success, error) {
			agm.invoke("T42.ACS.GetCurrentBranch", {}, "best", {}, function (e) {
				if (success) {
					success(e.returned.Branch);
				}
			}, error);
		},
		set_current_branch: function (branch, success, error) {
			agm.invoke("T42.ACS.SetCurrentBranch", {Branch: branch}, "best", {}, success, error);
		},
		current_user: function (success, error) {
			agm.invoke("T42.ACS.GetUser", {}, "best", {}, success, error);
		},
		get_functional_entitlement: function (fn, success, error) {
			agm.invoke("T42.ACS.GetFunctionalEntitlement", {Function: fn}, "best", {}, function (e) {
				if (success) {
					success(e.returned.Entitlement);
				}
			}, error);
		},
		get_functional_entitlement_branch: function (fn, br, success, error) {
			agm.invoke("T42.ACS.GetFunctionalEntitlement", {Function: fn, Branch: br}, "best", {}, function (e) {
				if (success) {
					success(e.returned.Entitlement);
				}
			}, error);
		},
		can_i: function (fn, success, error) {
			agm.invoke("T42.ACS.CanI", {Function: fn}, "best", {}, success, error);
		},

		can_i_branch: function(fn, branch, success, error) {
			agm.invoke("T42.ACS.CanI", {Function: fn, Branch: branch}, "best", {}, success, error);
		},

		exit: function () {
			agm.invoke("T42.ACS.Shutdown", {}, "all", {},
				function (a) {
					console.log(a);
				},
				function (e) {
					console.log(e);
				});
		},

		_trigger_app_event: apps._trigger,
		_trigger_instance_event: instances._trigger

	};

	function call_with(prop, func) {
		return function (result) {
			func(result[prop]);
		};

	}

	//Create event bindings

	//Tell the app when its instances are added/removed

	manager.on_instance_started(function (instance) {
		if (instance.application) {
			//Trigger "instance_started" event on application
			manager._trigger_app_event("instance_started", instance, instance.application.name);

			//Trigger "window_opened" event on instance
			var container;
			if (windows) {
				var id = (instance.context && instance.context.guid) ? instance.context.guid : instance.id;
				container = instance.application.configuration.container.split(".")[1];
				glue.agm.invoke("T42.Wnd.FindById", {windowId: instance.id}, {application: instance.application.configuration.container}, {}, window_opened);
			}

		}
		function window_opened(a) {
			//Wrap the window in a window object, using the glue windows lib
			var w = a.returned [Object.keys(a.returned)[0]];
			var win = glue.windows._from_event(w.windowName, container, w.url, w.windowId);

			//Trigger the window opened event
			manager._trigger_instance_event("window_added", win, id);

		}


	});

	manager.on_instance_stopped(function (instance) {
		if (instance.application) {
			manager._trigger_app_event("instance_stopped", instance, instance.application.name);

			var id = (instance.context && instance.context.guid) ? instance.context.guid : instance.id;
			manager._trigger_instance_event("window_removed", {}, id);

		}


	});

	//When an app is removed, remove also its instances

	manager.on_app_removed(function (app) {
		app.instances.forEach(function (instance) {
			var id = (instance.context && instance.context.guid) ? instance.context.guid : instance.id;
			manager._trigger_instance_event("stopped", {}, id);
		});
	});
	var branch_changed_callback;
	manager.on_branches_changed = function (callback) {
		branch_changed_callback = callback;
	};

	function on_branch_changed(e) {
		if (typeof branch_changed_callback === "function") {
			branch_changed_callback(helpers.vals(e));
		}
	}

	function handle_app_ready(app) {
		if (app.IsReady) {
			manager._trigger_app_event("available", app);
		} else {

			manager._trigger_app_event("unavailable", app);
		}
	}

	function app_failed(e) {
		manager._trigger_instance_event("error", e, e.Context.guid);
	}


	if (agm && agm.subscribe) {

		manager.agm = agm;
		var handlers = [
			{event: "OnApplicationAdded", trigger: "added", on: apps},
			{event: "OnApplicationRemoved", trigger: "removed", on: apps},
			{event: "OnApplicationChanged", trigger: "changed", on: apps},
			{event: "OnApplicationStarted", trigger: "started", on: instances},
			{event: "OnApplicationStopped", trigger: "stopped", on: instances},
			{event: "OnApplicationAgmServerReady", trigger: "agm_ready", on: instances},
			{event: "OnApplicationReady", func: handle_app_ready},
			{event: "OnBranchesModified", func: on_branch_changed},
			{event: "OnApplicationStartFailed", raw_func: app_failed}
		];


		agm.subscribe("T42.ACS.OnEvent", {target: "all"})
			.then(function (subscription) {

				subscription.onData(function (streamData) {
					var events = streamData.data;
					handlers.forEach(function (handler) {
						var objects = events[handler.event];
						if (objects) {

							if (handler.raw_func !== undefined) {
								handler.raw_func(objects);
								return;
							}

							helpers.vals(objects).forEach(function (object) {
								if (handler.on !== undefined) {
									handler.on._trigger(handler.trigger, object);
								} else {
									handler.func(object);
								}
							});
						}
					});
				})
			});
	}

	manager.version = "2.1.0";

	return manager;
};

global.tick42 = global.tick42 ||{};
global.tick42.app_manager = global.app_manager;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./application":40,"./helpers":42,"./instance":43}],40:[function(require,module,exports){
var event_manager = require("./event_manager");
var helpers = require("./helpers");

module.exports = function(agm, instances) {
	var app_proto = helpers.add_callbacks({

		start: function (params, success, error) {
			params = params || {};
			params.guid = params.guid || Math.floor(Math.random() * 10000000);
			if (agm) {
				agm.invoke("T42.ACS.StartApplication", {Name: this.name, Context: params}, "best", {}, function (e) {
				}, error);
			}
			return instances()._trigger("create", {Context: params});

		}

	}, ["added", "removed", "available", "unavailable", "instance_started", "instance_stopped", "changed"], "on_");

//constructor, init_event, id_field


	function update_app(props, obj) {
		obj.name = props.Name;
		obj.title = props.Title;
		obj.version = props.Version;
		obj.instances = [];
		obj.configuration = {};
		obj.configuration.auto_start = props.AutoStart;
		obj.configuration.caption = props.Caption;
		obj.configuration.hidden = props.IsHidden;
		obj.configuration.container = props.ApplicationName;
		//obj.disabled = props.IsDisabled;
		obj.configuration.allow_multiple = props.AllowMultiple;
		obj.available = props.IsReady || false;
		obj.icon = props.Icon;
		return obj;
	}

	return event_manager({
		create: function create_app(props) {
			return update_app(props, Object.create(app_proto));
		},
		update: update_app,
		init_event: "added",
		exit_event: "removed",
		id_field: "Name",
		callbacks: {
			available: function () {
				this.available = true;
			},
			changed: function (props) {
				this.icon = props.Icon;
				this.title = props.Title;
				this.configuration.caption = props.Caption;
			},
			unavailable: function () {
				this.available = false;
			},
			instance_started: function (instance) {
				this.instances.push(instance);
			},
			instance_stopped: function (instance) {
				this.instances = this.instances.filter(function (my_instance) {
					return my_instance !== instance;
				});
			}
		}
	});

};

},{"./event_manager":41,"./helpers":42}],41:[function(require,module,exports){
var helpers = require("./helpers");

function exec_callbacks(obj, arr, val) {
	if (arr !== undefined) {
		arr.forEach(function (callback) {
			callback.call(obj, val);
		});
	}
}

module.exports = function create_environment(settings) {
	var objects = {};
	var global_callbacks = {};
	return {
		all: function () {
			return helpers.vals(objects);
		},
		get_by_id: function (id) {
			return objects[id];
		},
		_trigger: function (type, props, id) {
			id = id || ( typeof settings.id_field === "function" ? settings.id_field(props) : props[settings.id_field]);

			//Quit if we receive an event for an object before initiating it.
			if (objects[id] === undefined && ( type !== settings.init_event && type !== settings.create_event)) {
				//console.log ("Received '"+type+"' event before '"+settings.init_event+"'");
				return;
			}


			//Create or retrieve an object, representing the entity
			var obj = objects[id] = objects[id] || init_object(settings.create(props));

			if (type === settings.init_event) {
				//Quit if we receive a init event for an object that is already active
				if (obj.active) {
					//console.log ("Received second '"+settings.init_event+"' for app "+id);
					return;
					//Else, make it active
				} else {
					obj.active = true;
					settings.update(props, obj);
				}
				//When the entity is removed, set it to non-active
			} else if (type === settings.exit_event) {
				obj.active = false;

				//When a create event is received, just return the object without doing anything else
			} else if (type === settings.create_event) {
				return obj;

			}

			//Execute system callbacks
			if (settings.callbacks[type] !== undefined) {
				settings.callbacks[type].call(obj, props);
			}

			// make sure that errors in user specified callbacks does not
			// break our library
			try {
				//Execute global callbacks
				exec_callbacks(undefined, global_callbacks[type], obj);

				//Execute user-defined callbacks that are attached to the object
				exec_callbacks(obj, obj.callbacks[type], props);
			}
			catch (e){
				console.error(e);
			}
			//When the entity is removed, remove all callbacks (after you execute them)
			if (type === settings.exit_event) {
				obj.callbacks = {};
			}
			return obj;

		},
		//Expose the global callbacks object so that user can register some
		callbacks: global_callbacks
	};
};



function init_object(object) {
	object.callbacks = {};
	object.active = false;
	return object;
}

},{"./helpers":42}],42:[function(require,module,exports){
function noop(){}

function exec_if(condition) {
	return function (app, callback) {
		if (condition(app)) {
			callback.call(app);
		}
	};
}

exports.add_callbacks = function add_callbacks(object, events, prefix) {
	events.forEach(function (event) {
		if (typeof event === "string") {
			event = {name: event, trigger_when: noop};
		}

		object[prefix + event.name] = exports.add_callback(event.name, exec_if(event.trigger_when));
	});
	return object;

};

exports.add_callback = function add_callback( key, on_add ){
	return function(callback){
		var obj = this.callbacks;
		if(obj[key]===undefined){obj[key] = [callback];}
		else {obj[key].push(callback);}
		if(typeof on_add === "function"){on_add(this, callback);}
		return this;
	};
};

exports.vals = function vals(obj) {
	return Object.keys(obj).reduce(function (arr, key) {
		arr.push(obj[key]);
		return arr;
	}, []);
};

},{}],43:[function(require,module,exports){
var event_manager = require("./event_manager");
var helpers = require("./helpers");

module.exports = function(agm, apps) {
	var instance_proto = helpers.add_callbacks({
		stop: function (params, success, error) {
			agm.invoke("T42.ACS.StopApplication", {Name: this.application.name, Id: this.id}, "best", {}, function (e) {
				console.log(e);
			}, error);
		},
		activate: function (params, success, error) {
			agm.invoke("T42.ACS.ActivateApplication", {Name: this.application.name, Id: this.id}, "best", {}, function (e) {
				console.log(e);
			}, error);
		}
	}, [
		{
			name: "window_added", trigger_when: function (app) {
			return app.active && app.main_window !== undefined;
		}
		},
		{
			name: "window_removed", trigger_when: function (app) {
			return app.main_window === undefined;
		}
		},
		{
			name: "started", trigger_when: function (app) {
			return app.id !== undefined && app.active;
		}
		},
		{
			name: "stopped", trigger_when: function (app) {
			return app.id !== undefined && !app.active;
		}
		},
		{
			name: "agm_ready", trigger_when: function (app) {
			return app.active && app.agm !== undefined;
		}
		},
		{
			name: "error", trigger_when: function (app) {
			return app.error !== undefined;
		}
		},
	], "on_");

	function update_instance(props, obj) {
		obj.id = props.Id;
		obj.application = apps.get_by_id(props.Name);
		obj.context = props.Context;
		return obj;

	}

	return event_manager({
		create: function (props) {
			return update_instance(props, Object.create(instance_proto));
		},
		update: update_instance,
		create_event: "create",
		init_event: "started",
		exit_event: "stopped",
		id_field: function (e) {
			return e.Context !== undefined && e.Context.guid !== undefined ? e.Context.guid : e.Id;
		},
		callbacks: {
			agm_ready: function (e) {
				//get the first AGM
				var server_name = Object.keys(e.AgmServers)[0];
				//Attach it to the object
				this.agm = convert_agm_instance(e.AgmServers[server_name]);
			},
			error: function (e) {
				this.error = e;
			},
			window_added: function (win) {
				this.main_window = win;
				this.windows = this.windows || [];
				this.windows.push(win);
			},
			window_removed: function () {
				this.main_window = undefined;
				this.windows = [];
			}
		}
	});
};


function convert_agm_instance(agm) {
	return {
		machine: agm.machineName,
		user: agm.userName,
		environment: agm.environment,
		application: agm.applicationName

	};
}

},{"./event_manager":41,"./helpers":42}],44:[function(require,module,exports){
/**
 * @module appconfig
 */
'use strict';

var _ = require('./util');
var Model = require('./model');
var helpers = require('./helpers');

var events = {
  connect: 'connect',
  disconnect: 'disconnect',
  update: 'update',
  status: 'status'
};

var EventBus = function () {
  var subscriptionsByType;
  var on = function (type, once, callback, scope) {
    if (!_.isFunction(callback)) {
      return;
    }

    var subscription = {
      type: type,
      once: once,
      callback: callback,
      scope: scope
    };

    var subscriptions = subscriptionsByType[type];
    if (typeof subscriptions === 'undefined') {
      subscriptions = subscriptionsByType[type] = [];
    }
    subscription.id = subscriptions.push(subscription) - 1;
    return subscription;
  };

  var emit = function () {
    var args = [].slice.call(arguments);
    var type = args.splice(0, 1)[0];
    var subscriptions = subscriptionsByType[type];
    if (typeof subscriptions === 'undefined') {
      subscriptions = subscriptionsByType[type] = [];
    }
    subscriptions.forEach(function (subscription) {
      if (!subscription) {
        return;
      }

      try {
        subscription.callback.apply(subscription.scope, args);
      } catch (x) {
        _.warn('Exception during execution of callback', subscription, args, x);
      }
      if (subscription.once) {
        off(subscription);
      }
    });
  };
  var off = function (subscription) {
    var subscriptions = subscriptionsByType[subscription.type];
    if (typeof subscriptions !== 'undefined') {
      delete subscriptions[subscription.id];
    }
  };

  var resume = function (subscription) {
    if (typeof subscription.id === 'undefined') {
      return on(subscription.type, subscription.once, subscription.callback, subscription.scope);
    } else {
      var subscriptions = subscriptionsByType[subscription.type];
      if (typeof subscriptions === 'undefined') {
        subscriptions = subscriptionsByType[subscription.type] = [];
      }
      subscriptions[subscription.id] = subscription;
      return subscription;
    }
  };

  var reset = function () {
    if (typeof subscriptionsByType !== 'undefined') {
      Object.keys(subscriptionsByType).forEach(function (type) {
        var subscriptions = subscriptionsByType[type];
        if (typeof subscriptions !== 'undefined') {
          subscriptions.forEach(function (subscription) {
            delete subscription.id;
          });
        }
      });
    }
    subscriptionsByType = {};
  };
  reset();
  return {
    on: on,
    emit: emit,
    off: off,
    resume: resume,
    reset: reset

  };
};

var AppConfig = function () {

  var defaultListen  = true;
  var gateway;
  var initGateway;
  var bus = new EventBus();
  var model = new Model(bus);

  var root = require('./props')(model.root);
  var self = this;

  var gatewayConnection;
  var pollingIntervalId;
  var clearPollingInterval = function () {
    if (typeof pollingIntervalId !== 'undefined') {
      clearInterval(pollingIntervalId);
    }
  };

  // Public API
  self.init = function (settings) {
    settings = settings || {};
    var isIdentityValid = typeof settings.identity === 'object' &&
      Object.keys(settings.identity).length > 0;

    if (isIdentityValid) {
      self.identity = settings.identity;
    }
    defaultListen = settings.defaultListen || defaultListen;
    if (!self.identity) {
      throw new TypeError('identity must be non empty object.');
    }

    model.separator = settings.defaultSeparator || model.separator;

    self.schema = settings.schema || self.schema || 'ApplicationConfiguration';

    initGateway = _.isFunction(settings.gateway) ?
      settings.gateway :
      function () {
        if (typeof settings.gateway === 'undefined') {
          settings.gateway = {};
        }
        if (typeof settings.gateway.instance === 'undefined') {
          settings.gateway.instance = _.uuid();
        }
        return require('./gateway')(settings.gateway);
      };
  };

  self.connect = function (listen, callback, scope) {
    clearPollingInterval();
    var subscription;
    if (arguments.length > 0) {
      if (_.isFunction(listen)) {
        callback = listen;
        scope = callback;
        listen = defaultListen;
      }
      subscription = bus.on(events.connect, true, callback, scope);
    }

    var error;
    if (!self.identity) {
      error = 'identity is not specified. did you forget to call init()?';
    } else {
      if (!gateway) {
        gateway = initGateway();
      }
      if (!listen) {
        gatewayConnection =
          gateway.connect(
            self.schema,
            self.identity,
            false,
            function (error, snapshot, updates) {
              if (typeof error === 'undefined') {
                model.applySnapshot(snapshot);
              }
              bus.emit(events.connect, error);
            },
            function (error, status) {
              bus.emit(events.status, error, status);
            });
      } else {
        var connectEmitted = false;
        gatewayConnection = gateway.connect(
          self.schema,
          self.identity,
          true,
          function (error, snapshot, updates) {
            if (typeof snapshot !== 'undefined') {
              model.applySnapshot(snapshot);
            }
            if (typeof updates !== 'undefined') {
              model.applyUpdates(updates);
            }
            if (!connectEmitted) {
              connectEmitted = true;
              bus.emit(events.connect, error);
            }
          },
          function (error, status) {
            var LISTEN_NOT_SUPPORTED = 8;
            if (status.code === LISTEN_NOT_SUPPORTED) {
              pollingIntervalId = setInterval(function () {
                gateway.disconnect(gatewayConnection);
                gatewayConnection = gateway.connect(self.schema, self.identity, false, function (error, snapshot) {
                  model.applySnapshot(snapshot, false);
                });
              }, 2000);
            }
          });
      }
    }

    if (error) {
      setTimeout(bus.emit, 0, events.connect, error);
      throw new Error(error);
    }

    return subscription;

  };

  self.props = function (section, separator) {
    return root.props(section, separator);
  };

  self.modify = function (modifications, callback, scope) {
    if (typeof modifications === 'object') {
      modifications = [modifications];
    }
    var subscription = bus.on(events.update, true, callback, scope);

    return subscription;
  };

  self.onConnect = function (callback, scope) {
    return bus.on(events.connect, false, callback, scope);

  };

  self.onDisconnect = function (callback, scope) {
    return bus.on(events.disconnect, false, callback, scope);
  };

  self.off = function (subscription) {
    if (subscription) {
      bus.off(subscription);
    }
  };

  self.on = function (subscription) {
    if (subscription) {
      bus.resume(subscription);
    }
  };

  self.disconnect = function (callback, scope) {
    if (_.isFunction(callback)) {
      bus.on(events.disconnect, true, callback, scope);
    }
    clearPollingInterval();
    if (typeof gateway !== 'undefined') {
      gateway.disconnect(gatewayConnection, function (error) {
        bus.emit(events.disconnect, error);
      });
      gateway = undefined;
    } else {
      bus.emit(events.disconnect, 'not connected');
    }
  };
};

AppConfig.prototype.identityEqual = helpers.identityEqual;
AppConfig.prototype.identityToString = helpers.identityToString;

module.exports = function () {
  return new AppConfig();
};

},{"./gateway":45,"./helpers":46,"./model":47,"./props":48,"./util":49}],45:[function(require,module,exports){
'use strict';

var gatewayConnection = require('tick42-gateway-connection');
var helpers = require('./helpers');
var identityToString = helpers.identityToString;
var PRODUCT = 'appconfig';

var GatewayTransport = function (options) {
  var connection;
  var dataHandlers = {};
  var statusHandlers = {};
  options = options || {};

  function handleStatusMessage(msg) {
    var handler = statusHandlers[msg.instance];
    if (handler) {
      handler(msg.error, msg.status);
    }
  }
  function handleDataMessage(msg) {
    var schema = msg.schema;
    var schemaHandlers = dataHandlers[schema];
    if (typeof schemaHandlers === 'undefined') {
      return;
    }
    var identityKey = identityToString(msg.identity, true);
    var identityHandlers = schemaHandlers[identityKey];
    if (typeof identityHandlers === 'undefined') {
      return;
    }
    identityHandlers.forEach(function (handler) {
      if (handler) {
        handler(msg.error, msg.snapshot, msg.updates);
      }
    });
  }
  function ensureConnection() {
    if (typeof(connection) === 'undefined') {
      if (typeof options.connection !== 'undefined')
      {
        connection = options.connection;
      }
      else {
        connection = gatewayConnection(options.settings, options.custom_connection);
      }
    }
  }
  var dataSubscription;
  var statusSubscription;
  var connect = function (schema, identity, listen, handler, statusHandler) {
    ensureConnection();
    var schemaHandlers = dataHandlers[schema];
    if (typeof schemaHandlers === 'undefined') {
      schemaHandlers = dataHandlers[schema] = {};
    }
    var identityKey = identityToString(identity, true);
    var identityHandlers = schemaHandlers[identityKey];
    if (typeof identityHandlers === 'undefined') {
      identityHandlers = schemaHandlers[identityKey] = [];
    }
    var handlerToRegister;
    var index;
    if (listen) {
      handlerToRegister = handler;
    } else {
      handlerToRegister = function (error, snapshot, updates) {
        handler(error, snapshot, updates);
        delete identityHandlers[index];
      };
    }

    index = identityHandlers.push(handlerToRegister) - 1;

    if (typeof (dataSubscription) === 'undefined') {
      dataSubscription = connection.on(PRODUCT, GatewayTransport.MessageType.DATA, function (msg) {
        handleDataMessage(msg);
      });
    }
    var instance = options.instance;
    statusHandlers[instance] = statusHandler;
    if (typeof (statusSubscription) === 'undefined') {
      statusSubscription = connection.on(PRODUCT, GatewayTransport.MessageType.STATUS, function (msg) {
        handleStatusMessage(msg);
      });
    }

    var msg = {
      schema: schema,
      identity: identity,
      instance: instance,
      listen: listen
    };
    connection.send(PRODUCT, GatewayTransport.MessageType.CONNECT, msg);
    return {
      schema: schema,
      identity: identity,
      listen: listen,
      handler: handler,
      index : index
    };
  };

  var modify = function (schema, identity, modifications) {
    ensureConnection();
    connection.send(PRODUCT, GatewayTransport.MessageType.MODIFY, modifications);
  };
  var disconnect = function (descriptor) {
    var schemaHandlers = dataHandlers[descriptor.schema];
    if (typeof schemaHandlers !== 'undefined') {
      var identityKey = identityToString(descriptor.identity, true);
      var identityHandlers = schemaHandlers[identityKey];
      if (typeof identityHandlers !== 'undefined') {
        var handler = identityHandlers[descriptor.index];
        if (typeof handler !== 'undefined') {
          var msg = {
            schema: descriptor.schema,
            identity: descriptor.identity,
            instance: options.instance
          };
          connection.send(GatewayTransport.MessageType.DISCONNECT, msg);
          delete identityHandlers[descriptor.index];
        }
        if (identityHandlers.length === 0) {
          delete schemaHandlers[identityKey];
        }
      }
      if (Object.keys(schemaHandlers).length === 0) {
        delete dataHandlers[descriptor.schema];
      }
    }
    if (Object.keys(dataHandlers).length === 0) {
      if (typeof (dataSubscription) !== 'undefined') {
        connection.off(dataSubscription);
      }
    }
    delete statusHandlers[descriptor.instance];
    if (Object.keys(statusHandlers).length === 0) {
      if (typeof statusSubscription !== 'undefined') {
        connection.off(statusSubscription);
      }
    }
  };
  return {
    connect: connect,
    modify: modify,
    disconnect: disconnect
  };
};

GatewayTransport.MessageType = {
  // { schema: 'ApplicationConfiguration', identity: {}, listen: true, instance: '' }
  CONNECT: 'connect',
  // { schema: 'ApplicationConfiguration', identity: {}, instance: '' }
  DISCONNECT: 'disconnect',
  // { schema: 'ApplicationConfiguration', identity: {}, updates: [], instance: '' }
  MODIFY: 'modify',
  // { schema: 'ApplicationConfiguration', identity: {}, error: '', snapshot: {defaultKeyValue: '', keys: [], props: {}}, updates: [] }
  DATA: 'data',
  // { schema: 'ApplicationConfiguration', identity: {}, instance: '', status: '', error: '' }
  STATUS: 'status'
};

module.exports = GatewayTransport;

},{"./helpers":46,"tick42-gateway-connection":50}],46:[function(require,module,exports){
'use strict';

function escapeIdentityText(text) {
  if (typeof text === 'string') {
    return text.replace(/[\\]/g, '\\\\').replace(/[:]/g, '\\:');
  } else {
    return text;
  }
}

function identityToString(identity, includeKeys, separator, order) {
  if (typeof(identity) === 'undefined') {
    return null;
  }
  separator = separator || '/';
  var keys = Object.keys(identity);
  if (typeof(order) === 'function') {
    keys.sort(order);
  } else {
    keys.sort();
  }
  return keys.map(function (key) {
    return includeKeys ? (escapeIdentityText(key) + ':' + escapeIdentityText(identity[key])) : identity[key];
  }).join(separator);
}

function identityEqual(identity1, identity2) {
  return identityToString(identity1, true) === identityToString(identity2, true);
}

function flatten(props, separator, name) {
  separator = separator || '.';
  var prefix = name ? name + separator : '';
  var val = {};
  Object.keys(props).forEach(function (key) {
    if (key.indexOf(prefix) !== 0) {
      return;
    }
    var path = key.substring(prefix.length);
    var target = val;
    var parts = path.split(separator);
    var i;
    for (i = 0; i < parts.length - 1; i++) {
      if (!target[parts[i]]) {
        target[parts[i]] = {};
      }
      target = target[parts[i]];
    }
    target[parts[i]] = props[key].value;
  });
  return val;
}

function propEqual(lhs, rhs) {
  if (lhs.value !== rhs.value) {
    return false;
  }
  for (var i = 0; i < lhs.underlying.length; i++) {
    var lhsUnderlying = lhs.underlying[i];
    var rhsUnderlying = rhs.underlying[i] || {};
    if (lhsUnderlying.value !== rhsUnderlying.value || !identityEqual(lhsUnderlying.parent, rhsUnderlying.parent)) {
      return false;
    }
  }
  return true;
}

module.exports = {
  flatten: flatten,
  propEqual: propEqual,
  identityToString: identityToString,
  identityEqual: identityEqual
};

},{}],47:[function(require,module,exports){
'use strict';

var propEqual = require('./helpers').propEqual;

var UpdateType = {
  Added: 'Added',
  Changed: 'Changed',
  Removed: 'Removed'
};

var Model = function (bus, separator) {
  this.bus = bus;
  this.root = new ViewModel(this, '', separator || '.');
  this.views = {};
};

var ViewModel = function (model, path, separator) {
  var self = this;
  self.model = model;
  self.props = {};
  self.separator = separator || model.separator;
  self.path = path;
};

ViewModel.prototype.getViewModel = function (name, separator) {
  var path = this.path + name + (separator ? separator : '.');
  var model = this.model;
  if (path === '') {
    return model.root;
  }
  if (!model.views[path]) {
    var bestParent = '';
    // fill subview references and choose best parent props to copy from.
    Object.keys(model.views).forEach(function (key) {
      if (path.indexOf(key) === 0) {
        if (bestParent.length < key.length) {
          bestParent = key;
        }
        // keep subviews sorted.
        var subviews = model.views[key].subviews;
        for (var i = 0; i < subviews.length; i++) {
          if (subviews[i].indexOf(path)) {
            subviews.splice(i, 0, path);
            return;
          }
        }
        subviews.push(path);
      }
    });
    var viewModel = new ViewModel(model, path, separator);

    var parentProps = bestParent === '' ? model.root.props : model.views[bestParent].model.props;
    Object.keys(parentProps).forEach(function (key) {
      var prop = parentProps[key];
      if (prop.name.indexOf(path) === 0) {
        var name = prop.name.substring(path.length);
        viewModel.props[name] = prop;
      }
    });

    model.views[path] = {
      subviews: [],
      model: viewModel
    };
  }
  return model.views[path].model;
};

ViewModel.prototype.on = function (callback, scope) {
  return this.model.on(this.path, callback, scope);
};

Model.prototype.on = function (path, callback, scope) {
  var type = updateTypeForPath(path);
  return this.bus.on(type, false, callback, scope);
};

Model.prototype.applySnapshot = function (snapshot, isSnapshot) {
  isSnapshot = typeof isSnapshot === 'undefined' ? true : isSnapshot;

  var updates = toUpdates(isSnapshot ? {} : this.root.props, snapshot.props);
  applyUpdatesAndEmitEvents(this, updates, isSnapshot);
};

function updateTypeForPath(path) {
  var type = 'update';
  if (path !== '') {
    type = type + '|' + path;
  }
  return type;
}

// shallow copy
function cloneUpdateForPath(update, path) {
  var clone = {
    type: update.type,
    name: update.name.substring(path.length)
  };

  switch (update.type) {
    case UpdateType.Changed:
      clone.oldValue = update.oldValue;
      /* falls through */
    case UpdateType.Added:
      clone.value = update.value;
      break;
    case UpdateType.Removed:
      /* falls through */
    default:
      break;
  }
  return clone;
}

function applyUpdatesAndEmitEvents(model, updates, isSnapshot) {
  var views = Object.keys(model.views);
  var effectiveUpdates = {
    '': updates
  };
  if (views.length > 0) {
    // sort views for prefix search
    if (views.length > 1) {
      views.sort();
    }
    updates.forEach(function (update) {
      for (var i = 0; i < views.length; views++) {
        if (update.name.indexOf(views[i]) === 0) {
          break;
        }
      }
      var view = views[i];
      if (typeof view === 'undefined') {
        return;
      }
      effectiveUpdates[view].push(cloneUpdateForPath(update, view));
    });
  }

  var affectedPaths = Object.keys(effectiveUpdates);
  if (affectedPaths.length > 1) {
    affectedPaths.sort();
  }
  affectedPaths.forEach(function (path) {
    var viewModel = path === '' ? model.root : model.views[path].model;
    if (isSnapshot) {
      viewModel.props = {};
    }
    effectiveUpdates[path].forEach(function (update) {
      switch (update.type) {
        case UpdateType.Added:
          // fall-through
        case UpdateType.Changed:
          // changed works even for missing properties
          viewModel.props[update.name] = update.value;
          break;
        case UpdateType.Removed:
          delete viewModel.props[update.name];
          break;
        default:
          // do nothing
          break;
      }
    });
  });
  affectedPaths.forEach(function (path) {
    var type = updateTypeForPath(path);
    model.bus.emit(type, isSnapshot, updates);
  });
}
Model.prototype.applyUpdates = function (updates) {
  applyUpdatesAndEmitEvents(this, updates, false);
};

function toUpdates(image, snapshot) {
  snapshot = snapshot || {};
  var updates = [];
  var toDelete = Object.keys(image);
  Object.keys(snapshot).forEach(function (key) {
    var update = {};
    if (typeof image[key] === 'undefined') {
      update.type = UpdateType.Added;
    } else {
      if (!propEqual(image[key], snapshot[key])) {
        update.type = UpdateType.Changed;
        update.oldValue = image[key];
      }
      for (var i = 0; i < toDelete.length; toDelete++) {
        if (toDelete[i] === key) {
          break;
        }
      }
      if (typeof toDelete[i] !== 'undefined') {
        toDelete.splice(i, 1);
      }
    }
    if (update.type) {
      update.value = snapshot[key];
      update.name = key;
      updates.push(update);
    }
  });
  toDelete.forEach(function (key) {
    updates.push({
      type: UpdateType.Removed,
      name: key
    });
  });
  return updates;
}

module.exports = Model;

},{"./helpers":46}],48:[function(require,module,exports){
'use strict';
var flatten = require('./helpers').flatten;

var Props = function (model) {
  var prop = function (name) {
    return model.props[name];
  };
  var val = function val(name) {
    if (typeof name === 'undefined' || typeof model.props[name] === 'undefined') {
      return flatten(model.props, model.separator, name);
    }
    return model.props[name].value;
  };

  var props = function (section, separator) {
    section = section || '';
    if (section === '') {
      // TODO: support separator change for '' (same) section.
      return self;
    }
    separator = separator || model.separator;
    return new Props(model.getViewModel(section, separator));
  };
  var forEach = function (callback, scope) {
    Object.keys(model.props).forEach(function (key) {
      callback.call(scope, model.props[key]);
    });
  };
  var onUpdate = function (callback, scope) {
    model.on(callback, scope);
  };
  var self = {
    prop: prop,
    val: val,
    props: props,
    forEach: forEach,
    onUpdate: onUpdate
  };
  return self;
};

module.exports = Props;

},{"./helpers":46}],49:[function(require,module,exports){
'use strict';

var uuid = function () {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0;
    var v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
};
var isFunction = function (value) {
  if (value === undefined || value === null) {
    return false;
  }
  return typeof value === 'function';
};

var isString = function (value) {
  return typeof value === 'string';
};

var levels = {
  debug: 'debug',
  info: 'info',
  warn: 'warn',
  error: 'error'
};
var log = function (level, args) {
  if (console) {
    var logger = console[level];
    if (isFunction(logger)) {
      var now = new Date();
      [].splice.call(args, 0, 0, now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds());
      logger.apply(console, args);
    }
  }
};
var info = function () {
  log(levels.info, arguments);
};

var warn = function () {
  log(levels.warn, arguments);
};

var debug = function () {
  log(levels.debug, arguments);
};

module.exports = {
  uuid: uuid,
  isFunction: isFunction,
  isString: isString,
  log: log,
  warn: warn,
  info: info,
  debug: debug
};

},{}],50:[function(require,module,exports){
(function (global){
var connection = function (settings, custom_connection){
	settings = settings||{};
	//The message handlers that have to be executed for each received message
	var message_handlers = {};
	
	var ids = 0;
	
	var connection = {
		//Executes appropriate message handlers for the message type.
		_handle_message: function (message){
			 //Retrieve handlers for the message type
			 var handlers = message_handlers[message.type];
			 if(handlers !==undefined){
				 //Execute them
				 Object.keys(handlers).forEach(function(handler_id){
					var handler = handlers[handler_id];
					if(handler!==undefined){handler(message.message);}
				 });
			 }
		},
		//Attaches a handler
		on: function(product, type, message_handler){
		   if(message_handlers[type] === undefined){message_handlers[type] = {};}
		   var id = ids++;
		   message_handlers[type][id]= message_handler;
		   return {type:type, id:id};
		},
		
		//Remove a handler 
		off: function(info){
			delete message_handlers[info.type][info.id];
		},
		//Dummy functions for transports that are always connected
		connected:function(a){a();},
		disconnected:function(){},
		version: "1.3.1"
	};

	function create_custom_connection(connection){
		connection.send = function(product, type, message){
			custom_connection.publish({type:type, message:message});
		};
		custom_connection.subscribe(connection._handle_message);
		return connection;
	}

	if(settings.websocket_url!==undefined){
		return require("./ws")(connection, settings);
  }else if(settings.http_url !== undefined){
    return require("./http")(connection, settings);
  }else if(global.fin !==undefined){
		return require("./fin")(connection, settings);
	}else if(custom_connection!==undefined){
		return create_custom_connection(connection, settings);
	//Connect via HTML Container facade
	}else if (global.htmlContainer!==undefined){
		return require("./cont")(connection, settings);
	}else {
		throw "No connection. Make sure you are running the application from OpenFin, or Tick42 HTML Container or fill the 'connection.websocket_url' property.";
	}
};

if(global.tick42===undefined){global.tick42 = {};}
global.tick42.connection = connection;

module.exports = connection;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./cont":51,"./fin":52,"./http":53,"./ws":54}],51:[function(require,module,exports){
(function (global){
module.exports = function(connection){
	var connection_id =  Math.floor(1e10 * Math.random()).toString();
	//Route messages to facade(s)
	connection.send = function (product, type, message){
		if(product ==="metrics"){
			global.htmlContainer.metricsFacade.send(type, JSON.stringify(message));
		}else if(product ==="log"){
			global.htmlContainer.loggingFacade.send(type, JSON.stringify(message));
		}else if (product == "appconfig") {
            global.htmlContainer.appConfigFacade.send(type, JSON.stringify(message), connection_id);
        }
	};
	if (global.htmlContainer.appConfigFacade !== undefined) {
        global.htmlContainer.appConfigFacade.initConnection(
            connection_id,
            function (messageAsJson) {
                return connection._handle_message(JSON.parse(messageAsJson));
            });
    }
	global.connections = global.connections||{}; 
	//Expose function for sending messages:
	global.connections['connection'+connection_id] = connection._handle_message;

	return connection;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],52:[function(require,module,exports){
(function (global){
module.exports = function(connection, settings){
	if(global.console!==undefined&& settings.debug===true){
		console.log("Attemping to connect to Gateway via OpenFin Inter Application Bus.");
	}

	//A function for sending a message 
	connection.send = function(product, type, message){
		fin.desktop.InterApplicationBus.publish("AGM", {type:type, message:message});
	};
	//A function that receives messages
	fin.desktop.InterApplicationBus.subscribe('*','AGM', connection._handle_message);
	if(global.console!==undefined&& settings.debug===true){
		console.log("Connected to OpenFin transport.");
	}
	
	return connection;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],53:[function(require,module,exports){
(function (global){
module.exports = function (connection, settings) {
  var url = settings.http_url;
  // polling interval in ms, default is 1 second
  var interval = settings.http_interval_ms;
  if (!interval) interval = 1000;

  function log_debug(message) {
    if (global.console !== undefined && (settings.debug === true || settings.trace === true)) {
      console.log(message);
    }
  }

  function log_trace(message) {
    if (global.console !== undefined && settings.trace === true) {
      console.log(message);
    }
  }

  log_debug("Attemping to connect to Gateway via HTTP with url '" + url + "' and polling interval " + interval + " ms");

  poll(url, interval, 0, function (items) {
    for (var index = 0; index < items.length; index++) {
      connection._handle_message(items[index]);
    }
  });

  connection.send = function (product, type, message, id) {
    var msg = JSON.stringify({ type: type, message: message, id: id });
    http_post(url, msg);
  };

  /**
   * Polls data from a given url on some interval
   * @param url       Base server url. A sequence url param may be added based on the seq param
   * @param interval  Interval (in ms) between polling requestts
   * @param seq       Next sequence number we should ask for (if 0 the server will return the last known message)
   * @param ondata    Data callback    
   */
  function poll(url, interval, seq, ondata) {
    // construct the get Url - if seq != 0 add as url param to get 
    // only messages after this sequence
    var getUrl = url;

    if (seq !== 0) {
      getUrl = url + "?sequence=" + seq + "&no-cache=" + new Date().getTime();
    }    
        
    // create a request    
    var xmlhttp = createCORSRequest("GET", getUrl, function () {
      if (seq === 0){
        log_debug("Connected to Gateway on " + url);
      }
      log_trace("Response from '" + getUrl + "' is " + xmlhttp.responseText);
      var message = JSON.parse(xmlhttp.responseText);
      // the server returns the number of the next sequence that we must query for
      var nextSeq = message.nextSequence;
      // call user callbacke    
      ondata(message.data);
      // re-schedule
      setTimeout(function () {
        poll(url, interval, nextSeq, ondata);
      }, interval);
    });

    xmlhttp.onerror = function (ev) {
      console.log("Error polling data from http server '" + getUrl + "' - " + ev);
      // re-schedule
      setTimeout(function () {
        poll(url, interval, seq, ondata);
      }, interval);
    };

    log_trace("Sending GET to '" + getUrl + "'");
    xmlhttp.send();
  }

  /** 
   * POSTs a message to a given url 
   */
  function http_post(url, message) {
    // create a request    
    var xmlhttp = createCORSRequest("POST", url);
    log_trace("Sending POST to '" + url + "' : " + message);
    xmlhttp.send(message);
  }

  /** 
   * Creates CORS request (cross domain requests) for different browsers - XMLHttpRequest withCredentials
   * for Chrome and FF and XDomainRequest for IE
   */
  function createCORSRequest(method, url, result_callback) {
    var xhr = new XMLHttpRequest();    
    
    if ("withCredentials" in xhr) {
      // Check if the XMLHttpRequest object has a "withCredentials" property.
      // "withCredentials" only exists on XMLHTTPRequest2 objects.
      xhr.open(method, url, true);
      if (typeof result_callback !== "undefined"){
        xhr.onreadystatechange = function () {
          if (xhr.readyState == 4 && xhr.status == 200) {
            result_callback();
          }
        };
      }
    } else if (typeof XDomainRequest != "undefined") {
      // Otherwise, check if XDomainRequest.
      // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
      xhr = new XDomainRequest();
      xhr.open(method, url);
      if (typeof result_callback !== "undefined"){
        xhr.onload = result_callback;
      }
    } else {
      // Otherwise, CORS is not supported by the browser.
      xhr = null;
    }
    return xhr;
  }
 
  return connection;
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],54:[function(require,module,exports){
(function (global){
module.exports = function(connection, settings){
	var connected = false;
	
	//Load the 'ws' library, but only if we are running under node js
	var WebSocket = require("detect-node")?require("ws"):global.WebSocket;
	
	function initiate_socket(){
		if(global.console!==undefined&& settings.debug===true){
			console.log("Attemping to connect to Gateway via WebSocket.");
		}

		var ws = new WebSocket(settings.websocket_url);
		//Add user callbacks
		ws.onclose = function(event){
			if(typeof settings.disconnected==="function"){settings.disconnected(settings.websocket_url, event);}
			connected = false;
		};
		//Log on connection
		ws.onopen = function(){
			if(typeof settings.connected==="function"){settings.connected(settings.websocket_url);}
			if(global.console!==undefined && settings.debug===true){
				console.log("Connected to WS URL "+settings.websocket_url);
			}
			connected = true;
		};
		//Attach handler
		ws.onmessage = function(message){
			connection._handle_message(JSON.parse(message.data));
		};
		return ws;
	}
	
	//Initiate a new socket (this gets re-executed on reconnect)
	var socket = initiate_socket();
	
	//Create a function for sending a message
	connection.send = function(product, type, message, id){
		//If we are connected send the message
		if(socket.readyState ===1){
			socket.send(JSON.stringify({type:type, message:message, id:id}));
		//If we are not connected and we are not attempting to connect right now, attempt to connect
		}else if (socket.readyState !==0){
			socket = initiate_socket();
		}
	};
	connection.websocket_url = function(a){
		settings.websocket_url = a;
		socket.close();
		socket = initiate_socket();
	};
	
	connection.connected = function(a){
		if(connected){a(settings.websocket_url);}
		settings.connected = a;
	};
	connection.disconnected = function(a){
		settings.disconnected = a;
	};
	
	return connection;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"detect-node":55,"ws":56}],55:[function(require,module,exports){
(function (global){
module.exports = false;

// Only Node.JS has a process variable that is of [[Class]] process
try {
 module.exports = Object.prototype.toString.call(global.process) === '[object process]' 
} catch(e) {}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],56:[function(require,module,exports){

/**
 * Module dependencies.
 */

var global = (function() { return this; })();

/**
 * WebSocket constructor.
 */

var WebSocket = global.WebSocket || global.MozWebSocket;

/**
 * Module exports.
 */

module.exports = WebSocket ? ws : null;

/**
 * WebSocket constructor.
 *
 * The third `opts` options object gets ignored in web browsers, since it's
 * non-standard, and throws a TypeError if passed to the constructor.
 * See: https://github.com/einaros/ws/issues/227
 *
 * @param {String} uri
 * @param {Array} protocols (optional)
 * @param {Object) opts (optional)
 * @api public
 */

function ws(uri, protocols, opts) {
  var instance;
  if (protocols) {
    instance = new WebSocket(uri, protocols);
  } else {
    instance = new WebSocket(uri);
  }
  return instance;
}

if (WebSocket) ws.prototype = WebSocket.prototype;

},{}],57:[function(require,module,exports){
var asciiTable = require("ascii-table");
var tick42Connection = require("tick42-gateway-connection");

var levels = [ 'trace', 'debug', 'info', 'warn', 'error', 'off' ];

function serializePath(path) {
	return path.length === 0 ? "" : path.join(".");
}

var isConnection = function(c) {
	return typeof c === "object" && typeof c.send === "function" && typeof c.on === "function";
};

function getLevel(logger, level) {
	//Retrieves the console or publish level of a logger
	//logger - the logger for which to retrieve the level
	//level - a string which can either be "publishLevel" for retrieving the publish level or "c_level" for retrieving the console level.
	if (logger[level] !== undefined) {
		return logger[level];
	} else if (logger.parent !== undefined) {
		return getLevel(logger.parent, level);
	}
}

function messageToTable(title, rows) {
	//Display message as table in file
	var keys = getAllKeys(rows);
	//fill rows with message properties
	var tableRows = rows.map(function (obj) {
		return keys.map(function (key) {
			return obj[key];
		});
	});

	var table_message = asciiTable.factory({
		title: title,
		heading: keys,
		rows: tableRows
	});
	return table_message.toString();
}

function getAllKeys(data) {
	//Accepts an array of objects and returns an array of all the keys from all objects
	var allKeys = [];

	data.forEach(function (obj) {
		Object.keys(obj).forEach(function (key) {
			if (allKeys.indexOf(key) === -1) {
				allKeys.push(key);
			}
		});
	});
	return allKeys;
}

function logger(configuration) {
	if (typeof configuration.connection !== "object") {
		configuration.connection = {};
	}

	//Set debug for the connection module if global debug is set
	configuration.connection.debug = configuration.debug;

	//Init connection
	//Determine if we are given a ready 'connection' object or a configuration.
	var connection = isConnection(configuration.connection) ? configuration.connection : tick42Connection(configuration.connection);

	var idKeys = ["system", "service", "instance"];

	//Convert instance to string, throw exceptions if it is not full
	var instance_str = idKeys.map(function (key) {
		var prop = configuration.identity[key];
		if (typeof prop !== "string") {
			throw 'Please specify "' + key + '" in your identity';
		}
		return prop;
	}).join("/");

	var loggerProto = {
		subLogger: function (name) {
			//Check if the sublogger is already created
			var existingSublogger = this.subloggers.filter(function (subLogger) {
				return subLogger.name === name;
			})[0];

			if (existingSublogger !== undefined) {
				return existingSublogger;
			}

			//Check if the name isn't the same as one of the parent properties
			Object.keys(this).forEach(function (key) {
				if (key === name) {
					throw 'This sub logger name is not allowed.';
				}
			});
			//Check if the name isn't the same as one of the parent methods
			Object.keys(loggerProto).forEach(function (key) {
				if (key === name) {
					throw 'This sub logger name is not allowed.';
				}
			});

			var path = this.path.slice(0);
			path.push(this.name);
			return createLogger(name, path, this);
		},

		publishLevel: function (level) {
			if (level !== null && level !== undefined) {
				this._publishLevel = level;
			}
			return getLevel(this, "_publishLevel");
		},

		consoleLevel: function (level) {
			if (level !== null && level !== undefined) {
				this._consoleLevel = level;
			}
			return getLevel(this, "_consoleLevel");
		},

		metricsLevel: function (level, metricsSystem) {
			if (level !== null && level !== undefined) {
				this._metricLevel = level;
			}

			if (metricsSystem !== undefined) {
				if (typeof metricsSystem === "object" && typeof metricsSystem.objectMetric === "function") {
					this.metricSystem = metricsSystem;
				} else {
					throw "Please specify metric system ";
				}
			}
		},

		table: function (message) {
			//message must be in an array, to be displayed as table
			if (!Array.isArray(message)) {
				throw 'The message must be in an array';
			}

			//Retrieve logger name and levels
			var loggerName = getLoggerName(this);

			//Publish in console
			if (shouldPublish(getLevel(this, '_consoleLevel'), 'info')) {
				console.info(loggerName + ':');
				console.table(message);
			}
			//Publish in file
			if (shouldPublish(getLevel(this, '_publishLevel'), 'info')) {
				connection.send('log', 'LogMessage', {
					instance: instance_str,
					level: levels.indexOf('info'),
					logger: loggerName,
					message: messageToTable(loggerName, message)
				});
			}
		},

		log: function (message, level) {
			publishMessage(this, level || "info", message);
		}
	};

	function createLogger(name, path, parent) {
		var logger = Object.create(loggerProto);
		logger.name = name;
		logger.path = path;
		logger.subloggers = [];
		logger.parent = parent;
		if (parent !== undefined) {
			//add sublogger to subloggers array
			parent.subloggers.push(logger);
			//add easy access to sublogger
			parent[logger.name] = logger;
			//create metric system
			if (parent.metricSystem !== undefined) {
				logger.metricsLevel('warn', parent.metricSystem.subSystem(logger.name));
			}
		}
		levels.forEach(function (level) {
			logger[level] = function (message) {
				publishMessage(logger, level, message);
			};
		});

		logger.off = function(){};

		logger.version = "2.0.1";

		return logger;
	}

	function publishMessage(logger, level, message) {
		//Retrieve logger name and levels
		var logger_name = getLoggerName(logger);

		//Add stack trace if the message is an error
		if (level === 'error') {
			var e = new Error();
			if (e.stack) {
				message = message + "\n" + (e.stack.split("\n").slice(3).join("\n"));
			}
		}

		//Publish in console
		if (shouldPublish(getLevel(logger, '_consoleLevel'), level)) {
			console[level](logger_name + ": " + message);
		}
		//Publish in file
		if (shouldPublish(getLevel(logger, '_publishLevel'), level)) {
			connection.send('log', 'LogMessage', {
				instance: instance_str,
				level: levels.indexOf(level),
				logger: logger_name,
				message: message
			});
		}

		//Publish in metrics
		if (shouldPublish(getLevel(logger, '_metricLevel'), level)) {
			if (logger.metricSystem !== undefined) {
				logger.metricSystem.objectMetric('LogMessage', {
					Time: new Date(),
					Logger: logger_name,
					Level: level,
					Message: message
				});
			}
		}
	}

	var shouldPublish = function (publishLevel, messageLevel) {
		return (!publishLevel || levels.indexOf(publishLevel) <= levels.indexOf(messageLevel));
	};

	var getLoggerName = function (logger) {
		var loggerPathAndName = logger.path.slice();
		loggerPathAndName.push(logger.name);
		return "[" + serializePath(loggerPathAndName) + "]";
	};

	var mainLogger = createLogger("main", [], undefined);
	mainLogger.publishLevel("warn");
	mainLogger.consoleLevel("info");
	mainLogger.metricsLevel("warn");

	return mainLogger;
}

if(window.tick42===undefined){ window.tick42 = {}; }
window.tick42.log = logger;

module.exports = logger;

},{"ascii-table":3,"tick42-gateway-connection":50}],58:[function(require,module,exports){
var objectMetric_1 = require("../metrics/objectMetric");
var stringMetric_1 = require("../metrics/stringMetric");
var numberMetric_1 = require("../metrics/numberMetric");
var timestampMetric_1 = require("../metrics/timestampMetric");
var MetricSerializer = (function () {
    function MetricSerializer() {
    }
    MetricSerializer.metricToMessage = function (metric) {
        var def = MetricSerializer._getMetricDefinition(metric.name, metric.value, metric.path, metric.type, metric.description, metric.period, metric.resolution);
        return {
            id: metric.id,
            instance: metric.repo.instance,
            definition: def,
            value: MetricSerializer._serializeValue(metric.value, metric),
        };
    };
    MetricSerializer._getMetricDefinition = function (name, value, path, type, description, resolution, period) {
        var def = {
            name: name,
            description: description,
            type: type ? type : MetricSerializer._getTypeFromValue(value),
            path: path,
            resolution: resolution,
            period: period
        };
        if (def.type === objectMetric_1.ObjectMetric.type) {
            def.Composite = Object.keys(value).reduce(function (arr, key) {
                var val = value[key];
                arr.push(MetricSerializer._getMetricDefinition(key, val, path));
                return arr;
            }, []);
        }
        return def;
    };
    MetricSerializer._serializeValue = function (value, metric) {
        if (value && value.constructor === Date) {
            return {
                value: {
                    type: this._valueTypes.indexOf("date"),
                    value: value.valueOf(),
                    isArray: false
                }
            };
        }
        else if (typeof value === "object") {
            return {
                CompositeValue: Object.keys(value).reduce(function (arr, key) {
                    var val = MetricSerializer._serializeValue(value[key]);
                    val.InnerMetricName = key;
                    arr.push(val);
                    return arr;
                }, [])
            };
        }
        else {
            var valueType = metric ? metric.getValueType() : undefined;
            valueType = valueType | this._valueTypes.indexOf(typeof value);
            return { value: { type: valueType, value: value, isArray: false } };
        }
    };
    MetricSerializer._getTypeFromValue = function (value) {
        var typeAsString = value.constructor === Date ? 'timestamp' : typeof value;
        switch (typeAsString) {
            case 'string':
                return stringMetric_1.StringMetric.type;
            case 'number':
                return numberMetric_1.NumberMetric.type;
            case 'timestamp':
                return timestampMetric_1.TimestampMetric.type;
            case 'object':
                return objectMetric_1.ObjectMetric.type;
        }
        return 0;
    };
    MetricSerializer._valueTypes = [
        "boolean",
        "int",
        "number",
        "long",
        "string",
        "date",
        "object"];
    return MetricSerializer;
})();
exports.MetricSerializer = MetricSerializer;

},{"../metrics/numberMetric":63,"../metrics/objectMetric":64,"../metrics/stringMetric":67,"../metrics/timestampMetric":69}],59:[function(require,module,exports){
var metricSerializer_1 = require("./metricSerializer");
var MetricsBridge = (function () {
    function MetricsBridge(repo, connection) {
        var _this = this;
        this._repo = repo;
        this._connection = connection;
        connection.on('metrics', "MetricsSnapshotRequest", function (instanceInfo) {
            if (instanceInfo.Instance !== repo.instance) {
                return;
            }
            _this.sendFull(_this._repo);
        });
    }
    MetricsBridge.prototype.sendFull = function (repo) {
        var rootSystem = repo.root;
        if (!rootSystem) {
            return;
        }
        if (rootSystem.subSystems.length == 0) {
            return;
        }
        this.sendFullSystem(rootSystem);
    };
    MetricsBridge.prototype.sendFullSystem = function (s) {
        var _this = this;
        this.createSystem(s);
        s.subSystems.forEach(function (sub) {
            _this.sendFullSystem((sub));
        });
        s.metrics.forEach(function (m) {
            _this.createMetric(m);
        });
    };
    MetricsBridge.prototype.createMetric = function (metric) {
        this._send("CreateMetric", metricSerializer_1.MetricSerializer.metricToMessage(metric));
    };
    MetricsBridge.prototype.updateMetric = function (metric) {
        this._send("UpdateMetric", metricSerializer_1.MetricSerializer.metricToMessage(metric));
    };
    MetricsBridge.prototype.createSystem = function (system) {
        if (system.parent !== undefined) {
            this._send("CreateMetricSystem", {
                id: system.id,
                instance: system.repo.instance,
                definition: { name: system.name, description: system.description, path: system.path }
            });
        }
    };
    MetricsBridge.prototype.updateSystem = function (system, state) {
        this._send("UpdateMetricSystem", {
            id: system.id,
            instance: system.repo.instance,
            state: state
        });
    };
    MetricsBridge.prototype.heartbeat = function (repo, interval) {
        this._send("HeartbeatMetrics", { publishingInterval: interval, instance: repo.instance });
    };
    MetricsBridge.prototype._send = function (type, message) {
        this._connection.send("metrics", type, message);
    };
    return MetricsBridge;
})();
exports.MetricsBridge = MetricsBridge;

},{"./metricSerializer":58}],60:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var AddressMetric = (function (_super) {
    __extends(AddressMetric, _super);
    function AddressMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, AddressMetric.type, value || '');
    }
    AddressMetric.type = 8;
    return AddressMetric;
})(metric_1.Metric);
exports.AddressMetric = AddressMetric;

},{"./metric":62}],61:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var CountMetric = (function (_super) {
    __extends(CountMetric, _super);
    function CountMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, CountMetric.type, value || 0);
    }
    CountMetric.prototype.increment = function () {
        this.incrementBy(1);
    };
    CountMetric.prototype.decrement = function () {
        this.decrementBy(1);
    };
    CountMetric.prototype.incrementBy = function (n) {
        this.update((this.value || 0) + n);
    };
    CountMetric.prototype.decrementBy = function (n) {
        this.update((this.value || 0) - n);
    };
    CountMetric.prototype.getValueType = function () {
        return 3;
    };
    CountMetric.type = 3;
    return CountMetric;
})(metric_1.Metric);
exports.CountMetric = CountMetric;

},{"./metric":62}],62:[function(require,module,exports){
var Metric = (function () {
    function Metric(def, parent, transport, type, value) {
        this.name = def.name;
        this.description = def.description;
        this.system = parent;
        this.repo = parent.repo;
        this.id = parent.path + "/" + this.name;
        this.value = value;
        this.type = type;
        this.path = parent.path.slice(0);
        this.path.push(parent.name);
        this._transport = transport;
        this._transport.createMetric(this);
    }
    Metric.prototype.update = function (value) {
        this.value = value;
        this._transport.updateMetric(this);
    };
    Metric.prototype.getValueType = function () {
        return undefined;
    };
    Metric.type = 0;
    return Metric;
})();
exports.Metric = Metric;

},{}],63:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var NumberMetric = (function (_super) {
    __extends(NumberMetric, _super);
    function NumberMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, NumberMetric.type, value || 0);
    }
    NumberMetric.prototype.increment = function () {
        this.incrementBy(1);
    };
    NumberMetric.prototype.decrement = function () {
        this.decrementBy(1);
    };
    NumberMetric.prototype.incrementBy = function (n) {
        this.update((this.value || 0) + n);
    };
    NumberMetric.prototype.decrementBy = function (n) {
        this.update((this.value || 0) - n);
    };
    NumberMetric.type = 2;
    return NumberMetric;
})(metric_1.Metric);
exports.NumberMetric = NumberMetric;

},{"./metric":62}],64:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var ObjectMetric = (function (_super) {
    __extends(ObjectMetric, _super);
    function ObjectMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, ObjectMetric.type, value);
    }
    ObjectMetric.prototype.update = function (value) {
        _super.prototype.update.call(this, value);
    };
    ObjectMetric.type = 11;
    return ObjectMetric;
})(metric_1.Metric);
exports.ObjectMetric = ObjectMetric;

},{"./metric":62}],65:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var RateMetric = (function (_super) {
    __extends(RateMetric, _super);
    function RateMetric(def, parent, transport, value) {
        this.period = def.period;
        this.resolution = def.resolution;
        _super.call(this, def, parent, transport, RateMetric.type, value || 0);
    }
    RateMetric.type = 4;
    return RateMetric;
})(metric_1.Metric);
exports.RateMetric = RateMetric;

},{"./metric":62}],66:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var StatisticsMetric = (function (_super) {
    __extends(StatisticsMetric, _super);
    function StatisticsMetric(def, parent, transport, value) {
        this.period = def.period;
        this.resolution = def.resolution;
        _super.call(this, def, parent, transport, StatisticsMetric.type, value || 0);
    }
    StatisticsMetric.type = 6;
    return StatisticsMetric;
})(metric_1.Metric);
exports.StatisticsMetric = StatisticsMetric;

},{"./metric":62}],67:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var StringMetric = (function (_super) {
    __extends(StringMetric, _super);
    function StringMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, StringMetric.type, value || '');
    }
    StringMetric.type = 1;
    return StringMetric;
})(metric_1.Metric);
exports.StringMetric = StringMetric;

},{"./metric":62}],68:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var TimespanMetric = (function (_super) {
    __extends(TimespanMetric, _super);
    function TimespanMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, TimespanMetric.type, value || false);
    }
    TimespanMetric.prototype.start = function () {
        this.update(true);
    };
    TimespanMetric.prototype.stop = function () {
        this.update(false);
    };
    TimespanMetric.type = 10;
    return TimespanMetric;
})(metric_1.Metric);
exports.TimespanMetric = TimespanMetric;

},{"./metric":62}],69:[function(require,module,exports){
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var metric_1 = require("./metric");
var TimestampMetric = (function (_super) {
    __extends(TimestampMetric, _super);
    function TimestampMetric(def, parent, transport, value) {
        _super.call(this, def, parent, transport, TimestampMetric.type, value || new Date());
    }
    TimestampMetric.prototype.now = function () {
        this.update(new Date());
    };
    TimestampMetric.type = 7;
    return TimestampMetric;
})(metric_1.Metric);
exports.TimestampMetric = TimestampMetric;

},{"./metric":62}],70:[function(require,module,exports){
var system_1 = require("./system");
var transport_1 = require("./bridge/transport");
var Repository = (function () {
    function Repository(config) {
        this._config = config;
        this._transport = new transport_1.MetricsBridge(this, config.connection);
        this.instance = config.identity.system + '/' + config.identity.service + '/' + config.identity.instance;
        this.identity = config.identity;
        this._startHeartbeating();
        this.root = new system_1.System('', this, this._transport);
        this._initSystemMetrics(this.root, config.clickStream || config.clickStream === undefined);
    }
    Repository.prototype._startHeartbeating = function () {
        var _this = this;
        this._transport.heartbeat(this, this._config.settings.heartbeatInterval);
        setInterval(function () {
            _this._transport.heartbeat(_this, _this._config.settings.heartbeatInterval);
        }, this._config.settings.heartbeatInterval);
    };
    Repository.prototype._initSystemMetrics = function (rootSystem, useClickStream) {
        if (navigator) {
            rootSystem.stringMetric('UserAgent', navigator.userAgent);
        }
        if (useClickStream && document) {
            var clickStream = rootSystem.subSystem("ClickStream");
            var documentClickHandler = function (e) {
                if (!e.target) {
                    return;
                }
                clickStream.objectMetric("LastBrowserEvent", {
                    type: "click",
                    timestamp: new Date(),
                    target: {
                        className: e.target ? e.target.className : '',
                        id: e.target.id,
                        type: '<' + e.target.tagName.toLowerCase() + '>',
                        href: e.target.href || ""
                    }
                });
            };
            clickStream.objectMetric("Page", {
                title: document.title,
                page: window.location.href
            });
            if (document.addEventListener) {
                document.addEventListener('click', documentClickHandler);
            }
            else {
                document.attachEvent('onclick', documentClickHandler);
            }
        }
    };
    return Repository;
})();
exports.Repository = Repository;

},{"./bridge/transport":59,"./system":71}],71:[function(require,module,exports){
var numberMetric_1 = require("./metrics/numberMetric");
var timespanMetric_1 = require("./metrics/timespanMetric");
var stringMetric_1 = require("./metrics/stringMetric");
var addressMetric_1 = require("./metrics/addressMetric");
var objectMetric_1 = require("./metrics/objectMetric");
var timestampMetric_1 = require("./metrics/timestampMetric");
var countMetric_1 = require("./metrics/countMetric");
var statisticsMetric_1 = require("./metrics/statisticsMetric");
var rateMetric_1 = require("./metrics/rateMetric");
var System = (function () {
    function System(name, repo, transport, parent, description) {
        this.metrics = [];
        this.subSystems = [];
        this.name = name;
        this.description = description || '';
        this.repo = repo;
        this.parent = parent;
        this._transport = transport;
        this.path = this._buildPath(this.parent);
        this.id = (this.path.length > 0 ? this.path.join('/') + '/' : '') + this.name;
        this.identity = repo.identity;
        this.root = repo.root;
        this._transport.createSystem(this);
    }
    System.prototype.subSystem = function (name, description) {
        if (!name || name.length === 0) {
            throw new Error('name is required');
        }
        var matchingSystems = this.subSystems.filter(function (s) { return s.name === name; });
        if (matchingSystems.length > 0) {
            return matchingSystems[0];
        }
        var system = new System(name, this.repo, this._transport, this, description);
        this.subSystems.push(system);
        return system;
    };
    System.prototype.setState = function (state, description) {
        this._transport.updateSystem(this, { state: state, description: description });
    };
    System.prototype.stringMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, stringMetric_1.StringMetric.type, value, function (metricDef) {
            return new stringMetric_1.StringMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.numberMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, numberMetric_1.NumberMetric.type, value, function (metricDef) {
            return new numberMetric_1.NumberMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.countMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, countMetric_1.CountMetric.type, value, function (metricDef) {
            return new countMetric_1.CountMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.addressMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, addressMetric_1.AddressMetric.type, value, function (metricDef) {
            return new addressMetric_1.AddressMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.objectMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, objectMetric_1.ObjectMetric.type, value, function (metricDef) {
            return new objectMetric_1.ObjectMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.timespanMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, timespanMetric_1.TimespanMetric.type, value, function (metricDef) {
            return new timespanMetric_1.TimespanMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.timestampMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, timestampMetric_1.TimestampMetric.type, value, function (metricDef) {
            return new timestampMetric_1.TimestampMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.rateMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, rateMetric_1.RateMetric.type, value, function (metricDef) {
            return new rateMetric_1.RateMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype.statiticsMetric = function (definition, value) {
        var _this = this;
        return this._getOrCreateMetric(definition, statisticsMetric_1.StatisticsMetric.type, value, function (metricDef) {
            return new statisticsMetric_1.StatisticsMetric(metricDef, _this, _this._transport, value);
        });
    };
    System.prototype._unionToMetricDef = function (definition) {
        var metricDef;
        if (typeof definition === 'string') {
            metricDef = { name: definition };
        }
        else {
            metricDef = definition;
        }
        if (metricDef.name === undefined) {
            throw new Error('Metric name is required.');
        }
        return metricDef;
    };
    System.prototype._getOrCreateMetric = function (definition, expectedType, value, createFunc) {
        var metricDef = this._unionToMetricDef(definition);
        var matchingMetrics = this.metrics.filter(function (m) { return m.name === metricDef.name; });
        if (matchingMetrics.length > 0) {
            var existingMetric = matchingMetrics[0];
            if (existingMetric.type !== expectedType) {
                throw new Error('A metric named ' + metricDef.name + ' is already defined with different type');
            }
            if (typeof value !== 'undefined') {
                existingMetric.update(value);
            }
            return existingMetric;
        }
        var newMetric = createFunc(metricDef);
        this.metrics.push(newMetric);
        return newMetric;
    };
    System.prototype._buildPath = function (system) {
        if (!system || !system.parent) {
            return [];
        }
        var path = this._buildPath(system.parent);
        path.push(system.name);
        return path;
    };
    return System;
})();
exports.System = System;

},{"./metrics/addressMetric":60,"./metrics/countMetric":61,"./metrics/numberMetric":63,"./metrics/objectMetric":64,"./metrics/rateMetric":65,"./metrics/statisticsMetric":66,"./metrics/stringMetric":67,"./metrics/timespanMetric":68,"./metrics/timestampMetric":69}],72:[function(require,module,exports){
var repository_1 = require("./core/repository");
var tick42_gateway_connection_1 = require('tick42-gateway-connection');
var windowAsAny = window;
windowAsAny.tick42 = windowAsAny.tick42 || {};
windowAsAny.tick42.metrics = windowAsAny.tick42.metrics || function (config) {
    if (!config.identity) {
        throw new Error('Identity missing from metrics configuration');
    }
    if (!config.identity.service || typeof config.identity.service !== 'string') {
        throw new Error('Service missing or invalid in metrics identity configuration');
    }
    if (!config.identity.system || typeof config.identity.system !== 'string') {
        throw new Error('System missing or invalid in metrics identity configuration');
    }
    if (!config.identity.instance || typeof config.identity.instance !== 'string') {
        throw new Error('Instancemissing or invalid in metrics identity configuration');
    }
    config.settings = config.settings || {};
    config.settings.heartbeatInterval = config.settings.heartbeatInterval || 15000;
    if (typeof config.connection !== "object") {
        config.connection = {};
    }
    if (!(typeof config.connection === "object" && typeof config.connection.send === "function" && typeof config.connection.on === "function")) {
        config.connection = tick42_gateway_connection_1.connection(config.connection);
    }
    var repo = new repository_1.Repository(config);
    repo['version'] = repo.root['version'] = '2.0.11';
    return repo.root;
};
module.exports = windowAsAny.tick42.metrics;

},{"./core/repository":70,"tick42-gateway-connection":50}],73:[function(require,module,exports){
var windows = function(agm){
	
	if(agm.subscribe){
		agm.subscribe("T42.Wnd.WindowStateChanged", {target:"all"}).then(function(stream){
			stream.onData(function (streamData) {
				update_window(streamData.data, container_from_filter(streamData.server));
			});

			// attach callbacks
			//stream.on("end", handleStreamClosed);
			//stream.on("close", handleStreamClosed);

		});

	}
	//Store windows that are tracked by ID and receive updates	
	var windows = {};	

	function update_window (window_info, container_name){
		
		var window_id = container_name+"."+window_info.windowName;

		var the_window = windows[window_id];
		 
		if (the_window === undefined) {
			//If the user is subscribed for the global events, create the window object.
			if( get_callbacks(window_added_callbacks, container_name).length > 0 || get_callbacks(window_removed_callbacks, container_name).length > 0 ) {
				the_window = a_window_from(window_info.windowName, container_name, window_info.url, window_info.windowId);
			} else {
				return;
			}
		}
		
		if(the_window.id === undefined){
			the_window.id = window_info.windowId;
			exec_callbacks(the_window.callbacks.on_available, the_window);
		} 
		
		if (the_window.url !== window_info.url){
			the_window.url = window_info.url;
			exec_callbacks(the_window.callbacks.on_url_changed, window_info.url);
		}
		
		if(window_info.state ==="Created"){
			//Execute global "window_added" callbacks
			exec_callbacks(get_callbacks(window_added_callbacks, container_name), the_window);
		} 
			
		//Clear the window on close event
		if(window_info.state ==="Closed"){
			//Execute global "window_removed" callbacks
			exec_callbacks(get_callbacks(window_removed_callbacks, container_name), the_window);
			//Execute window-specific "window_removed" callbacks
			exec_callbacks(the_window.callbacks.on_close);
			//Refresh the window object state
			the_window.id = undefined;
			the_window.callbacks = {};
			return;
		}
	}
	
	//Create a dictionary to store the callbacks for the method "window_added".
	var window_added_callbacks = {
		containers_callbacks: {}, 
		all_containers_callbacks: []
	};	
	
	//Create a dictionary to store the callbacks for the method "window_removed".
	var window_removed_callbacks = {
		containers_callbacks: {},
		all_containers_callbacks: []
	};
	
	//Creates a new window object or returns an existing one
	//Accepts window name, container and URL
	//Returns a window object.
	
	//It is not guaranteed to return the window with the same URL and ID
	function a_window_from(name, container, url, id){
		
		//By default we are using our own container
		container = container||(window.htmlContainer !== undefined?htmlContainer.containerName:undefined);
		
		//Throw if we don't know the container, throw
		if(container === undefined){throw "Please specify a container.";}

		var window_id = container+"."+name;
		
		var existing_window = windows[window_id] ;

		if(existing_window!==undefined){
			
			//If the window is closed, update the URL in the reference
			if(!existing_window.opened()){
				existing_window.url = url;
			}
			return existing_window;
		}else{

			//Init object
			var window_obj = Object.create(window_proto);
			window_obj.name = name;
			window_obj.container = container;
			window_obj.url = url;
            window_obj.id = id;
			window_obj.callbacks = {};			

			//Insert AGM server properties
			window_obj.application = window_id;
			
			windows[window_id] = window_obj;

			return window_obj;
		}
	}
	
	//Binds a given window object to an actual window
	function bind_window(the_window, success, error){
		
		//Typically the binding occurs when we receive an event, so we will retrieve some info about the window
		//and if it exists we will trigger an artificial event with it. 

		//Check if the window isn't already bound
		if(the_window.id===undefined){
			
			//Retrieve window parameters 	
			agm.invoke("T42.Wnd.FindByName", {windowName:the_window.name}, container_filter(the_window.container), {}, bind_from_info, error);
		
		}else{
			invoke_agm_success_callback(success, the_window);
		}
		return the_window;

		function bind_from_info(e){
			//Retrieve window info (a bit hacky because the response format is weird)
			var window_info = vals(e.returned)[0];
			
			if(window_info===undefined){
				if(typeof error === "function"){error("we cound not open/find this window");}
			}else{
				//Trigger an event
				window_info.state = "Attached";
				update_window(window_info, the_window.container);
				
				//Exec user callback
				invoke_agm_success_callback(success, the_window);
			}
		}
	}

	//Functions for opening, closing, resizing windows
	var window_proto = {
		
		open:function(dimensions, style, success, error){
			

			//A wrapper for the standard AGM "open" function 
			
			var the_window = this;
			
			//Init style objects if they are null
			dimensions=dimensions||{};
            		style=style||{};
			
			//Take out the sticky-windows related properties from the style object
			
			var isSticky = style.isSticky;
			delete style.isSticky;

			var stickyGroup = style.stickyGroup;
			delete style.stickyGroup;



			
			agm.invoke("T42.Html.CreateWindow", 
                       {
			//Window name and url
		       	windowName:the_window.name, url:the_window.url, 
			//dimensions
		       	top:dimensions.top, left:dimensions.left, width:dimensions.width, height:dimensions.height, 
			//Stickywindows - related props
			isSticky: isSticky, stickyGroup:stickyGroup, 
			//Style attributes
                   	windowStyleAttributes:JSON.stringify(style)
			
			}, 
                       container_filter(the_window.container), 
                       {}, 
                       opened,
                       cannot_open);
			
			function opened(message){
				//Add id to the current windows because the current HTML Container
				//doesn't support tracking the updates of the window				
				if(message.returned !== undefined) {
					the_window.id = message.returned.id;
				}
				invoke_agm_success_callback(success, the_window);
			}

			function cannot_open(e){
				//Call the error callback
				if(typeof error === "function") {error(e);}
				
				//Try to bind the returned object in case...
				bind_window(the_window);
			}
			
			return the_window;
		},
        set_style:function(style, success, error){ return agm_action("T42.Wnd.SetWindowStyle").call(this, success, error,{windowStyleAttributes:JSON.stringify(style)});},
       
	    opened:function(){return this.id!==undefined;},

		on_available:add_callback("on_available", function(the_window, callback){if(the_window.opened()){callback(the_window);}}),

		close:agm_action("T42.Wnd.Close"),

		on_close:add_callback("on_close"),

		navigate:function(url, success, error){ return agm_action("T42.Html.OpenUrl").call(this, success, error,{url:url});},

		on_url_changed:add_callback("on_url_changed"),

		focus:agm_action("T42.Wnd.Activate"),
		
		set_title:function(title, success, error){
			//Invoke the AGM method
			agm.invoke("T42.Wnd.SetWindowTitle", {windowId: this.id, title:title}, container_filter(this.container), {}, title_is_set, title_cannot_be_set);
			
			function title_is_set() {
				invoke_agm_success_callback(success, this);
			}
			
			function title_cannot_be_set(e) {
				invoke_agm_error_callback(error, e);
			}
		},
		
		get_details:function(success, error) {
			var window_id = this.id;
			agm.invoke("T42.Wnd.FindById", {windowId: this.id}, container_filter(this.container), {}, returned_dimensions, cannot_return_dimensions);

			function returned_dimensions(value) {
				invoke_agm_success_callback(success, value.returned[window_id]);
			}
			
			function cannot_return_dimensions(e) {
				invoke_agm_error_callback(error, e);
			}
		},
		
		move_resize:function(dimensions, success, error){ return agm_action("T42.Wnd.resizeAndMove").call(this, success, error, dimensions);},
		
		maximize:agm_action("T42.Wnd.Maximize"),
		
		restore:agm_action("T42.Wnd.Restore"),

		minimize:agm_action("T42.Wnd.Minimize"),
		
		maximize_restore:agm_action("T42.Wnd.MaximizeOrRestoreDown")	
	};
	
	//Adds an alias of an AGM method in the Window prototype
	function agm_action(action){
		return function(success, error, args){

			//Stop if the window is closed
			if(this.url === undefined){
				if(typeof error === "function"){error("Cannot execute a command on a closed window.");}
			
			return;}

			//Add the window ID to the arguments
			args = args||{};
			args.windowId = this.id;

			//Invoke the AGM method
			agm.invoke(action, args, container_filter(this.container), {}, fulfilled, error);

			var the_window = this;
			function fulfilled(){
				invoke_agm_success_callback(success, the_window);
			}
			return this;
		};
	}
		
	//The API itself
	var api = {

		my:function(){
						
			var h = window.htmlContainer;			
			//Retrieve the current window (the onw in which your application currently resides).
			return h === undefined? undefined: a_window_from(h.browserWindowName, h.containerName, window.location.href, h.windowId);
		},
		
		open:function(name, url, container, dimensions, style, success, error){
			return a_window_from(name, container, url).open(dimensions, style, success, error);
		},

		find:function(name, container, success, error){
			return bind_window(a_window_from(name, container), success, error);
		},
		_from_event:a_window_from,

		list:function(container, success, error){            
            if (typeof success !== 'function'){return;}
            
			agm.invoke("T42.Wnd.ListWindows", {}, container_filter(container), {wait_for_method_timeout: 15000}, listed, cannot_list);
                    
            function listed(value) {
            	if(value.returned === undefined){success([]) ;return;}
                var result = vals(value.returned).map(function(opened_window){                                        
                    return a_window_from(opened_window.windowName, container, opened_window.url, opened_window.windowId);
                });
                success(result);
            }
             
			function cannot_list(e) {
				invoke_agm_error_callback(error, e);
			}
		},
		
		//Add callback for window added for the list of containers.
		window_added: function(callback, container) {
			//Add the current callback to the callback dictionary.
			put_callbacks(window_added_callbacks, callback, container);

			//Execute all the callbacks for already existing windows.
			
			//Get all existing html containers.
			api.container_added(function(server) {
				//If the user is subscribed to the container
				if(container === undefined || container === server) {
					//list all the windows in the container.
					api.list(server, 
						function(list_of_windows) {
							//execute the callback for each window.
							list_of_windows.forEach(function(existing_window) {
								callback(existing_window);
							});
						},
						//Error callback if the windows cannot be listed.
						function(e) {console.log('Unable to load existing windows. ' + e.message);}
					);
				}
			});
		},
		
		window_removed: function(callback, container) {
			//Add the current callback to the callback dictionary.
			put_callbacks(window_removed_callbacks, callback, container);
		},
				
		container_added: function(callback) {
            agm.server_added(function(server){
                if(server.application.indexOf('HtmlContainer.')!==-1) {
                	invoke_agm_success_callback(callback, container_from_filter(server));
                }
            });
        },

		container_removed: function(callback) {
            agm.server_removed(function(server){
                if(server.application.indexOf('HtmlContainer.')!==-1) {
                    invoke_agm_success_callback(callback, container_from_filter(server));
                }
            });
        }
	};
	
	api.version = "2.0.1";
	
	return api;
};

if(window.tick42 === undefined){window.tick42 = {};}
window.tick42.windows = windows;
module.exports = windows;
  
function add_callback(key, on_add){
	return function(callback){
		var obj = this.callbacks;
		if(obj[key]===undefined){obj[key] = [callback];}
		else {obj[key].push(callback);}
		if(typeof on_add === "function"){on_add(this, callback);}
	};
}

function exec_callbacks(arr, val){
	if(arr!==undefined){
		arr.forEach(function(callback){callback(val);});
	}
}

function eq(key,val){
	return function(obj){
		return key===undefined||val===undefined||obj[key]===val;
	};
}

function vals(obj){
	return Object.keys(obj).reduce(function(arr, key){arr.push(obj[key]);return arr;}, []);
}

function map_obj(obj, f){
	return Object.keys(obj).reduce(function(new_obj, key){new_obj[key] = f(obj[key]) ;return new_obj;}, {});
}

function container_filter(name){
  var containerFullName = "HtmlContainer.";

  if (htmlContainer.env.env !== undefined || htmlContainer.env.region !== undefined) {
    if(name.indexOf(htmlContainer.env.env) === -1 && name.indexOf(htmlContainer.env.region) === -1) {
      containerFullName += htmlContainer.env.env + '-' + htmlContainer.env.region + '.';
    }
  }

  containerFullName += name;

  return {application: containerFullName};
}

function container_from_filter(filter){
	return filter.application.match(/HtmlContainer\.(.*?)$/)[1];
}

function invoke_agm_success_callback(callback, callback_argument) {
	if(typeof callback === "function") {callback(callback_argument);}
}

function invoke_agm_error_callback(callback, error) {
	if(typeof callback === "function") {callback(error.message);}
}

function get_callbacks(callbacks, container_name) {
	if(callbacks.containers_callbacks[container_name] !== undefined) {
		return callbacks.all_containers_callbacks.concat(callbacks.containers_callbacks[container_name]);
	} else {
		return callbacks.all_containers_callbacks;
	}
}

function put_callbacks(global_callbacks, callback, container) {
	if(container === undefined) {
		global_callbacks.all_containers_callbacks.push(callback);
	} else {
		if(global_callbacks.containers_callbacks[container] === undefined) {
			global_callbacks.containers_callbacks[container] = [callback];
		} else {
			global_callbacks.containers_callbacks[container].push(callback);
		}
	}
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWJyYXJ5L2dsdWUuanMiLCJub2RlX21vZHVsZXMvYXNjaWktdGFibGUvYXNjaWktdGFibGUuanMiLCJub2RlX21vZHVsZXMvYXNjaWktdGFibGUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXM1LXNoaW0vZXM1LXNoYW0uanMiLCJub2RlX21vZHVsZXMvZXM1LXNoaW0vZXM1LXNoaW0uanMiLCJub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvQVBJL2FjdGl2aXR5QVBJLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL0FQSS9hY3Rpdml0eU1hbmFnZW1lbnRBUEkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvQVBJL2FjdGl2aXR5TXlBUEkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvYWN0aXZpdHlDb25maWcuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvYWN0aXZpdHlNb2R1bGUuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvYnJpZGdlcy9oY0JyaWRnZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWN0aXZpdHkvbGlicmFyeV9qcy9jb250cmFjdHMvYWN0aXZpdHlTdGF0dXMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvY29udHJhY3RzL2VudGl0eUV2ZW50LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2NvcmUvYWN0aXZpdHlBR00uanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvY29yZS9hY3Rpdml0eU1hbmFnZXIuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvY29yZS9sb2NhbFdpbmRvd0ZhY3RvcnkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvY29yZS9wcm94eVdpbmRvd0ZhY3RvcnkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvZW50aXRpZXMvYWN0aXZpdHkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvZW50aXRpZXMvYWN0aXZpdHlFbnRpdHkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvZW50aXRpZXMvYWN0aXZpdHlUeXBlLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2VudGl0aWVzL2FjdGl2aXR5V2luZG93LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2VudGl0aWVzL3dpbmRvd1R5cGUuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvaGVscGVycy9lbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWN0aXZpdHkvbGlicmFyeV9qcy9oZWxwZXJzL2xvZ2dlci5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWN0aXZpdHkvbGlicmFyeV9qcy9oZWxwZXJzL3Byb21pc2VFeHRlbnNpb25zLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hY3Rpdml0eS9saWJyYXJ5X2pzL2hlbHBlcnMvcmVhZHlNYXJrZXIuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFjdGl2aXR5L2xpYnJhcnlfanMvaGVscGVycy91dGlsLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hZ20vbGlicmFyeS9hZ20uanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L2FnbV9jbGllbnQuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L2FnbV9jbGllbnRfaW52b2NhdGlvbnNzdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvYWdtX2NsaWVudF9tZXRob2RzdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvYWdtX2NsaWVudF9zZXJ2ZXJzdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvYWdtX2hlbHBlcnMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFnbS9saWJyYXJ5L2FnbV9pbnN0YW5jZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvYWdtX25hdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYWdtL2xpYnJhcnkvYWdtX3NlcnZlci5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwLW1hbmFnZXIvbGlicmFyeS9hcHBfbWFuYWdlci5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwLW1hbmFnZXIvbGlicmFyeS9hcHBsaWNhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwLW1hbmFnZXIvbGlicmFyeS9ldmVudF9tYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hcHAtbWFuYWdlci9saWJyYXJ5L2hlbHBlcnMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFwcC1tYW5hZ2VyL2xpYnJhcnkvaW5zdGFuY2UuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFwcGNvbmZpZy9zcmMvanMvYXBwY29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1hcHBjb25maWcvc3JjL2pzL2dhdGV3YXkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWFwcGNvbmZpZy9zcmMvanMvaGVscGVycy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwY29uZmlnL3NyYy9qcy9tb2RlbC5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwY29uZmlnL3NyYy9qcy9wcm9wcy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItYXBwY29uZmlnL3NyYy9qcy91dGlsLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24vbGlicmFyeS9jb25uZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24vbGlicmFyeS9jb250LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24vbGlicmFyeS9maW4uanMiLCJub2RlX21vZHVsZXMvdGljazQyLWdhdGV3YXktY29ubmVjdGlvbi9saWJyYXJ5L2h0dHAuanMiLCJub2RlX21vZHVsZXMvdGljazQyLWdhdGV3YXktY29ubmVjdGlvbi9saWJyYXJ5L3dzLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL2RldGVjdC1ub2RlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL3dzL2xpYi9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1sb2dnZXIvbGlicmFyeS9sb2dnZXIuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL2JyaWRnZS9tZXRyaWNTZXJpYWxpemVyLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvY29yZS9icmlkZ2UvdHJhbnNwb3J0LmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvY29yZS9tZXRyaWNzL2FkZHJlc3NNZXRyaWMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL21ldHJpY3MvY291bnRNZXRyaWMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL21ldHJpY3MvbWV0cmljLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvY29yZS9tZXRyaWNzL251bWJlck1ldHJpYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvbWV0cmljcy9vYmplY3RNZXRyaWMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL21ldHJpY3MvcmF0ZU1ldHJpYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvbWV0cmljcy9zdGF0aXN0aWNzTWV0cmljLmpzIiwibm9kZV9tb2R1bGVzL3RpY2s0Mi1tZXRyaWNzL2xpYnJhcnlfanMvY29yZS9tZXRyaWNzL3N0cmluZ01ldHJpYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvbWV0cmljcy90aW1lc3Bhbk1ldHJpYy5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL2NvcmUvbWV0cmljcy90aW1lc3RhbXBNZXRyaWMuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL3JlcG9zaXRvcnkuanMiLCJub2RlX21vZHVsZXMvdGljazQyLW1ldHJpY3MvbGlicmFyeV9qcy9jb3JlL3N5c3RlbS5qcyIsIm5vZGVfbW9kdWxlcy90aWNrNDItbWV0cmljcy9saWJyYXJ5X2pzL21ldHJpY3NNb2R1bGUuanMiLCJub2RlX21vZHVsZXMvdGljazQyLXdpbmRvd3MvbGlicmFyeS93aW5kb3dzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6b0JBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNWlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDMy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDdjhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNySEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN6R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNqZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN0SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ3pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDeE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN0TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzlSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUMvTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ25OQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN4SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIihmdW5jdGlvbigpIHtcclxuICAvL0RvIG5vdCBkbyBhbnl0aGluZyBpZiB0aGVyZSBpcyBubyBzdXBwb3J0IG9mIEVDTUFTY3JpcHQgNVxyXG4gIGlmICh0eXBlb2YgW10uZm9yRWFjaCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgcmVxdWlyZShcImVzNS1zaGltXCIpO1xyXG4gICAgcmVxdWlyZShcImVzNS1zaGltL2VzNS1zaGFtXCIpO1xyXG4gIH1cclxuXHJcblx0dmFyIG1ldHJpY3MgPSByZXF1aXJlKFwidGljazQyLW1ldHJpY3NcIik7XHJcblx0dmFyIGFnbSA9IHJlcXVpcmUoXCJ0aWNrNDItYWdtXCIpO1xyXG5cdHZhciBnYXRld2F5Q29ubmVjdGlvbiA9IHJlcXVpcmUoXCJ0aWNrNDItZ2F0ZXdheS1jb25uZWN0aW9uXCIpO1xyXG5cdHZhciBsb2dnZXIgPSByZXF1aXJlKFwidGljazQyLWxvZ2dlclwiKTtcclxuXHR2YXIgYXBwY29uZmlnID0gcmVxdWlyZShcInRpY2s0Mi1hcHBjb25maWcvc3JjL2pzL2FwcGNvbmZpZ1wiKTtcclxuXHR2YXIgd2luZG93cyA9IHJlcXVpcmUoXCJ0aWNrNDItd2luZG93c1wiKTtcclxuXHR2YXIgYXBwTWFuYWdlciA9IHJlcXVpcmUoXCJ0aWNrNDItYXBwLW1hbmFnZXJcIik7XHJcblx0dmFyIGFjdGl2aXR5ID0gcmVxdWlyZShcInRpY2s0Mi1hY3Rpdml0eVwiKTtcclxuXHJcbiAgLy9EbyBub3QgZG8gYW55dGhpbmcgaWYgdGhlIHVzZXIgdHVybmVkIG9mZiB0aGUgYXV0byBpbml0aWFsaXphdGlvblxyXG5cdGlmICh3aW5kb3cuZ2x1ZV9hdXRvX2luaXRpYWxpemUgPT09IGZhbHNlKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuICAvL0luaXQgdGhlIEdMVUUgbmFtZXNwYWNlXHJcblx0dmFyIGdsdWUgPSB7fTtcclxuXHRnbHVlLnZlcnNpb24gPSBcIjIuNC4wXCI7XHJcblx0Ly9CYXNlIGNvbmZpZ3VyYXRpb25zLiBMYXRlciB0aGV5IGFyZSB1cGRhdGVkIGRlcGVuZGluZyBvbiB0aGUgcnVudGltZS5cclxuXHR2YXIgbG9nZ2VyQ29uZmlndXJhdGlvbiA9IHtpZGVudGl0eToge3N5c3RlbTogXCJUaWNrNDJcIn19O1xyXG5cdHZhciBtZXRyaWNzQ29uZmlndXJhdGlvbiA9IHtpZGVudGl0eToge3N5c3RlbTogXCJUaWNrNDJcIn19O1xyXG5cdHZhciBhZ21Db25maWd1cmF0aW9uID0ge2luc3RhbmNlOiB7fSwgc2VydmVyOiB7cHJlc2VuY2VfaW50ZXJ2YWw6IDMwMDB9fTtcclxuXHJcblx0Ly9IZXJlIHdlIHdpbGwgc3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIGNvbm5lY3Rpb24gd2l0aCB0aGUgU2VydmljZSBQcm92aWRlclxyXG5cdGdsdWUuY29ubmVjdGlvbiA9IHVuZGVmaW5lZDtcclxuXHR2YXIgYXBwX25hbWU7XHJcblxyXG5cdC8vSWYgd2UgYXJlIHJ1bm5pbmcgaW4gYW4gSFRNTCBDb250YWluZXIsIHVzZSB0aGUgSFRNTCBDb250YWluZXIgZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcblx0aWYgKHdpbmRvdy5odG1sQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdC8vR2VuZXJhdGUgQUdNIGFwcCBuYW1lXHJcblx0XHRhcHBfbmFtZSA9IHdpbmRvdy5hZ21fYXBwbGljYXRpb24gfHwgd2luZG93Lmh0bWxDb250YWluZXIuY29udGFpbmVyTmFtZSArIFwiLlwiICsgd2luZG93Lmh0bWxDb250YWluZXIuYnJvd3NlcldpbmRvd05hbWU7XHJcblxyXG5cdFx0Ly9GaWxsIGxvZ2dlciBjb25maWd1cmF0aW9ucyB3aXRoIGN1c3RvbSBwcm9wZXJ0aWVzXHJcblx0XHRhZ21Db25maWd1cmF0aW9uLmluc3RhbmNlLmFwcGxpY2F0aW9uID0gYXBwX25hbWU7XHJcblx0XHRsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5LnN5c3RlbSA9IFwiSHRtbENvbnRhaW5lci5cIiArIHdpbmRvdy5odG1sQ29udGFpbmVyLmNvbnRhaW5lck5hbWU7XHJcblx0XHRsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5LnNlcnZpY2UgPSBcIkpTLlwiICsgd2luZG93Lmh0bWxDb250YWluZXIuYnJvd3NlcldpbmRvd05hbWU7XHJcblx0XHRsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5Lmluc3RhbmNlID0gXCJ+XCIgKyB3aW5kb3cuaHRtbENvbnRhaW5lci5tYWNoaW5lTmFtZTtcclxuXHJcblx0XHRpZiAod2luZG93Lmh0bWxDb250YWluZXIuYXBwQ29uZmlnRmFjYWRlICE9PSB1bmRlZmluZWQgJiYgd2luZG93Lmh0bWxDb250YWluZXIuYXBwQ29uZmlnRmFjYWRlLmNvbmZpZyAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdC8vIEluaXRpYWxpemUgQXBwQ29uZmlnXHJcblx0XHRcdGdsdWUuYXBwY29uZmlnID0gYXBwY29uZmlnKCk7XHJcblx0XHRcdGdsdWUuYXBwY29uZmlnLmluaXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGZ1bmN0aW9uIHN1cHBsYW50KHRlbXBsYXRlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFx7KFtee31dKilcXH0vZywgZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHZhbHVlID0gdGhpcztcclxuXHRcdFx0XHRcdFx0a2V5LnNwbGl0KCcuJykuZm9yRWFjaChmdW5jdGlvbiAocGFydCkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICh2YWx1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiBtYXRjaDtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyIHNldHRpbmdzID0gd2luZG93Lmh0bWxDb250YWluZXIuYXBwQ29uZmlnRmFjYWRlLmNvbmZpZztcclxuXHRcdFx0XHR2YXIgaWRlbnRpdHkgPSB7fTtcclxuXHRcdFx0XHRPYmplY3Qua2V5cyhzZXR0aW5ncy5pZGVudGl0eSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcblx0XHRcdFx0XHR2YXIgdmFsdWUgPSBzdXBwbGFudChzZXR0aW5ncy5pZGVudGl0eVtrZXldKTtcclxuXHRcdFx0XHRcdGlkZW50aXR5W2tleV0gPSB2YWx1ZTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRzZXR0aW5ncy5pZGVudGl0eSA9IGlkZW50aXR5O1xyXG5cdFx0XHRcdHJldHVybiBzZXR0aW5ncztcclxuXHRcdFx0fSgpKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL0luaXQgdGhlIENvbm5lY3Rpb25cclxuXHRcdGdsdWUuY29ubmVjdGlvbiA9IGdhdGV3YXlDb25uZWN0aW9uKCk7XHJcblxyXG5cdFx0Ly9JZiB3ZSBhcmUgcnVubmluZyBpbiBub3JtYWwgYnJvd3NlciwgY29ubmVjdCB2aWEgV2Vic29ja2V0XHJcblx0fSBlbHNlIHtcclxuICAgIHZhciBjb25uZWN0aW9uX2NvbmZpZyA9IHt9O1xyXG4gICAgdmFyIHVpZF9wcmVmaXg7XHJcblxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuV2ViU29ja2V0ICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIC8vIGlmIG5vIHN1cHBvcnQgZm9yIFdlYlNvY2tldCB1c2UgSFRUUFxyXG4gICAgICB1aWRfcHJlZml4ID0gXCJIVFRQXCI7XHJcbiAgICAgIC8vIGRvbid0IG1ha2UgaW5zZWN1cmUgcmVxdWVzdHMgZnJvbSBzZWN1cmUgZW52XHJcbiAgICAgIHZhciBkZWZhdWx0X2h0dHBfdXJsID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cDonID8gXCJodHRwOi8vbG9jYWxob3N0OjIyMDM3XCIgOiBcImh0dHBzOi8vbG9jYWxob3N0OjIyMDM3XCI7XHJcbiAgICAgIGNvbm5lY3Rpb25fY29uZmlnLmh0dHBfdXJsID0gd2luZG93LmdsdWVfaHR0cF91cmwgfHwgZGVmYXVsdF9odHRwX3VybDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHVpZF9wcmVmaXggPSBcIldTXCI7XHJcbiAgICAgIC8vV2Vic29ja2V0IFVSTCAodGhpcyBpcyB0aGUgZGVmYXVsdCB0aGF0IGlzIHVzZWQgaW4gdGhlIGRlbW8gV1Mgc2VydmVyKVxyXG4gICAgICB2YXIgZGVmYXVsdF93c191cmwgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwOicgPyBcIndzOi8vbG9jYWxob3N0OjIyMDM3XCIgOiBcIndzczovL2xvY2FsaG9zdDoyMjAzN1wiO1xyXG4gICAgICBjb25uZWN0aW9uX2NvbmZpZy53ZWJzb2NrZXRfdXJsID0gd2luZG93LmdsdWVfd3NfdXJsIHx8IGRlZmF1bHRfd3NfdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vR2VuZXJhdGUgYXBwbGljYXRpb24gVUlEIHRvIGFsbG93IGZvciB0aGUgc2FtZSBhcHBsaWNhdGlvbiB0byBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXHJcbiAgICB2YXIgdWlkID0gdWlkX3ByZWZpeCArIE1hdGguZmxvb3IoMWUxMCAqIE1hdGgucmFuZG9tKCkpO1xyXG5cclxuICAgIC8vR2VuZXJhdGUgQUdNIGFwcCBuYW1lXHJcblx0XHRhcHBfbmFtZSA9IHdpbmRvdy5hZ21fYXBwbGljYXRpb24gfHwgZG9jdW1lbnQudGl0bGUgKyB1aWQ7XHJcblxyXG5cdFx0Ly9GaWxsIGNvbmZpZ3VyYXRpb25zIHdpdGggY3VzdG9tIHByb3BlcnRpZXNcclxuXHRcdGFnbUNvbmZpZ3VyYXRpb24uaW5zdGFuY2UuYXBwbGljYXRpb24gPSBhcHBfbmFtZTtcclxuXHRcdGxvZ2dlckNvbmZpZ3VyYXRpb24uaWRlbnRpdHkuc3lzdGVtID0gXCJCcm93c2VyXCI7XHJcblx0XHRsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5LnNlcnZpY2UgPSBkb2N1bWVudC50aXRsZSB8fCAndW5rbm93bic7XHJcblx0XHRsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5Lmluc3RhbmNlID0gXCJ+XCIgKyB1aWQ7XHJcblxyXG5cdFx0Ly8gSW5pdCB0aGUgQ29ubmVjdGlvbiBhbmQgc3BlY2lmeSB0aGUgVVJMIG9mIHRoZSBXZWIgU29ja2V0IHNlcnZlciB0aGF0IHdlIGFyZSBjb25uZWN0aW5nIHRvLlxyXG5cdFx0Z2x1ZS5jb25uZWN0aW9uID0gZ2F0ZXdheUNvbm5lY3Rpb24oY29ubmVjdGlvbl9jb25maWcpO1xyXG5cdH1cclxuXHJcblx0Ly9QbGFjZSB0aGUgQ29ubmVjdGlvbiwgYXMgcGFydCBvZiB0aGUgY29tcG9uZW50cycgY29uZmlndXJhdGlvblxyXG5cdGxvZ2dlckNvbmZpZ3VyYXRpb24uY29ubmVjdGlvbiA9IGdsdWUuY29ubmVjdGlvbjtcclxuXHRtZXRyaWNzQ29uZmlndXJhdGlvbi5jb25uZWN0aW9uID0gZ2x1ZS5jb25uZWN0aW9uO1xyXG5cdGFnbUNvbmZpZ3VyYXRpb24uY29ubmVjdGlvbiA9IGdsdWUuY29ubmVjdGlvbjtcclxuXHJcblx0Ly9PdmVycmlkZSBzb21lIHByb3BzIHdpdGggZW52aXJvbm1lbnQgdmFyaWFibGVzLCBpZiBwcm92aWRlZFxyXG5cdGxvZ2dlckNvbmZpZ3VyYXRpb24uaWRlbnRpdHkuc3lzdGVtID0gd2luZG93LmdsdWVfbWV0cmljX3N5c3RlbSB8fCBsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5LnN5c3RlbTtcclxuXHRsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5LnNlcnZpY2UgPSB3aW5kb3cuZ2x1ZV9tZXRyaWNfc2VydmljZSB8fCBsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5LnNlcnZpY2U7XHJcblx0bG9nZ2VyQ29uZmlndXJhdGlvbi5pZGVudGl0eS5pbnN0YW5jZSA9IHdpbmRvdy5nbHVlX21ldHJpY19pbnN0YW5jZSB8fCBsb2dnZXJDb25maWd1cmF0aW9uLmlkZW50aXR5Lmluc3RhbmNlO1xyXG5cclxuXHQvL0luaXRpYWxpemUgTG9nZ2VyICh1c2VzIHRoZSBzYW1lIGNvbmZpZ3VyYXRpb24gYXMgTWV0cmljcylcclxuXHRnbHVlLmxvZ2dlciA9IGxvZ2dlcihsb2dnZXJDb25maWd1cmF0aW9uKTtcclxuXHJcblx0Ly9GaWxsIG1ldHJpY3MgY29uZmlndXJhdGlvbiB3aXRoIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgbWV0cmljcyBjb25maWd1cmF0aW9uc1xyXG5cdG1ldHJpY3NDb25maWd1cmF0aW9uLmlkZW50aXR5ID0gbG9nZ2VyQ29uZmlndXJhdGlvbi5pZGVudGl0eTtcclxuXHRtZXRyaWNzQ29uZmlndXJhdGlvbi5sb2dnZXIgPSBnbHVlLmxvZ2dlci5zdWJMb2dnZXIoXCJtZXRyaWNzXCIpO1xyXG5cclxuXHQvL0luaXRpYWxpemUgTWV0cmljcyBhbmQgc2F2ZSBpbnRvIHRoZSAnZ2x1ZScgZ2xvYmFsIHZhcmlhYmxlXHJcblx0Z2x1ZS5tZXRyaWNzID0gbWV0cmljcyhtZXRyaWNzQ29uZmlndXJhdGlvbikuc3ViU3lzdGVtKFwiQXBwXCIpO1xyXG5cclxuXHQvL0luaXRpYWxpemUgdGhlIG1ldHJpY3Mgc3lzdGVtIGluIHRoZSBsb2dnZXIncyBcIm1ldHJpY3NfbGV2ZWxcIiBtZXRob2RcclxuXHRnbHVlLmxvZ2dlci5tZXRyaWNzTGV2ZWwoXCJ3YXJuXCIsIGdsdWUubWV0cmljcy5wYXJlbnQuc3ViU3lzdGVtKFwiTG9nRXZlbnRzXCIpKTtcclxuXHJcblx0YWdtQ29uZmlndXJhdGlvbi5pbnN0YW5jZS5hcHBsaWNhdGlvbiA9IHdpbmRvdy5nbHVlX2FnbV9hcHBsaWNhdGlvbiB8fCBhZ21Db25maWd1cmF0aW9uLmluc3RhbmNlLmFwcGxpY2F0aW9uO1xyXG5cclxuXHQvL0luY2x1ZGUgdGhlIG1ldHJpYyByZXBvIGluIHRoZSBBR00gY29uZmlndXJhdGlvbiAoc28gdGhhdCBBR00gY2FuIGJyb2FkY2FzdCBtZXRyaWNzKVxyXG5cdGFnbUNvbmZpZ3VyYXRpb24ubWV0cmljcyA9IGdsdWUubWV0cmljcy5zdWJTeXN0ZW0oXCJBR01cIik7XHJcblxyXG5cdC8vSW5pdGlhbGl6ZSBBR00gc2F2ZSBpbnRvIHRoZSAnZ2x1ZScgZ2xvYmFsIHZhcmlhYmxlXHJcblx0Z2x1ZS5hZ20gPSBhZ20oYWdtQ29uZmlndXJhdGlvbik7XHJcblxyXG5cdC8vIEFkZCBhY3Rpdml0eSBpbiB0aGUgY29udGFpbmVyIG9ubHlcclxuXHR2YXIgYWN0aXZpdGllc0ZhY2FkZSA9IHdpbmRvdy5odG1sQ29udGFpbmVyID8gd2luZG93Lmh0bWxDb250YWluZXIuYWN0aXZpdHlGYWNhZGUgOiB1bmRlZmluZWQ7XHJcblx0aWYgKHR5cGVvZiBhY3Rpdml0aWVzRmFjYWRlICE9PSBcInVuZGVmaW5lZFwiKXtcclxuXHRcdHZhciBhY3Rpdml0eUxvZ2dlciA9IGdsdWUubG9nZ2VyLnN1YkxvZ2dlcihcImFjdGl2aXR5XCIpO1xyXG5cdFx0YWN0aXZpdHlMb2dnZXIucHVibGlzaExldmVsKFwiZGVidWdcIik7XHJcblx0XHRhY3Rpdml0eUxvZ2dlci5jb25zb2xlTGV2ZWwoXCJpbmZvXCIpO1xyXG4gICAgYWN0aXZpdHlMb2dnZXIubWV0cmljc0xldmVsKFwib2ZmXCIpO1xyXG5cdFx0Z2x1ZS5hY3Rpdml0aWVzID0gYWN0aXZpdHkoe2FnbTogZ2x1ZS5hZ20sIGxvZ2dlcjogYWN0aXZpdHlMb2dnZXJ9KTtcclxuXHR9XHJcblxyXG5cdGdsdWUud2luZG93cyA9IHdpbmRvd3MoZ2x1ZS5hZ20pO1xyXG5cclxuXHQvLyBjYW1lbCBjYXNlIGZvciBBcHAgTWFuYWdlclxyXG5cdGdsdWUuYXBwTWFuYWdlciA9IGFwcE1hbmFnZXIoZ2x1ZS5hZ20sIGdsdWUud2luZG93cyk7XHJcblxyXG4gIGdsdWUuaW5mbyA9IHtcclxuICAgIGdsdWVWZXJzaW9uIDogJzIuNC4wJyxcclxuICAgIGFjdGl2aXRpZXMgOiBnbHVlLmFjdGl2aXRpZXMgPyBnbHVlLmFjdGl2aXRpZXMudmVyc2lvbiA6ICd1bmtub3duJywgXHJcbiAgICBtZXRyaWNzOiBnbHVlLm1ldHJpY3MucmVwby52ZXJzaW9uLFxyXG4gICAgYWdtOiBnbHVlLmFnbS52ZXJzaW9uLFxyXG4gICAgd2luZG93czogZ2x1ZS53aW5kb3dzLnZlcnNpb24sXHJcbiAgICBsb2dnZXI6IGdsdWUubG9nZ2VyLnZlcnNpb24sXHJcbiAgICBhcHBNYW5hZ2VyOiBnbHVlLmFwcE1hbmFnZXIudmVyc2lvbixcclxuICAgIGNvbm5lY3Rpb246IGdsdWUuY29ubmVjdGlvbi52ZXJzaW9uICAgIFxyXG4gIH07XHJcbiAgXHJcblx0Ly8gbm8gY29uZmxpY3QgZnVuY3Rpb25cclxuXHR2YXIgb3JpZ2luYWxHbHVlID0gd2luZG93LmdsdWU7XHJcblx0Z2x1ZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKXtcclxuXHRcdHdpbmRvdy5nbHVlID0gb3JpZ2luYWxHbHVlO1xyXG5cdFx0cmV0dXJuIGdsdWU7XHJcblx0fTtcclxuXHJcblx0Ly9FeHBvcnQgR0xVRVxyXG5cdHdpbmRvdy5nbHVlID0gZ2x1ZTtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGdsdWU7XHJcbn0oKSk7IiwiLyoqXG4gKiAoYykgMjAxMyBCZWF1IFNvcmVuc2VuXG4gKiBNSVQgTGljZW5zZWRcbiAqIEZvciBhbGwgZGV0YWlscyBhbmQgZG9jdW1lbnRhdGlvbjpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zb3JlbnNlbi9hc2NpaS10YWJsZVxuICovXG5cbjsoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxuICAsIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG4vKipcbiAqIEFzY2lpVGFibGUgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHRpdGxlIG9yIEpTT04gdGFibGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YWJsZSBvcHRpb25zXG4gKiAgLSBgcHJlZml4YCAtIHN0cmluZyBwcmVmaXggYWRkZWQgdG8gZWFjaCBsaW5lIG9uIHJlbmRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEFzY2lpVGFibGUobmFtZSwgb3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHRoaXMucmVzZXQobmFtZSlcbn1cblxuLyohXG4gKiBDdXJyZW50IGxpYnJhcnkgdmVyc2lvbiwgc2hvdWxkIG1hdGNoIGBwYWNrYWdlLmpzb25gXG4gKi9cblxuQXNjaWlUYWJsZS5WRVJTSU9OID0gJzAuMC44J1xuXG4vKiFcbiAqIEFsaWdubWVudCBjb25zdGFudHNcbiAqL1xuXG5Bc2NpaVRhYmxlLkxFRlQgPSAwXG5Bc2NpaVRhYmxlLkNFTlRFUiA9IDFcbkFzY2lpVGFibGUuUklHSFQgPSAyXG5cbi8qIVxuICogU3RhdGljIG1ldGhvZHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyB0YWJsZSBpbnN0YW5jZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdGl0bGUgb3IgSlNPTiB0YWJsZVxuICogQHBhcmFtIHtPYmplY3R9IHRhYmxlIG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5mYWN0b3J5ID0gZnVuY3Rpb24obmFtZSwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IEFzY2lpVGFibGUobmFtZSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBBbGlnbiB0aGUgYSBzdHJpbmcgYXQgdGhlIGdpdmVuIGxlbmd0aFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkaXJlY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgaW5wdXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpbmcgbGVuZ3RoXG4gKiBAcGFyYW0ge051bWJlcn0gcGFkZGluZyBjaGFyYWN0ZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5hbGlnbiA9IGZ1bmN0aW9uKGRpciwgc3RyLCBsZW4sIHBhZCkge1xuICBpZiAoZGlyID09PSBBc2NpaVRhYmxlLkxFRlQpIHJldHVybiBBc2NpaVRhYmxlLmFsaWduTGVmdChzdHIsIGxlbiwgcGFkKVxuICBpZiAoZGlyID09PSBBc2NpaVRhYmxlLlJJR0hUKSByZXR1cm4gQXNjaWlUYWJsZS5hbGlnblJpZ2h0KHN0ciwgbGVuLCBwYWQpXG4gIGlmIChkaXIgPT09IEFzY2lpVGFibGUuQ0VOVEVSKSByZXR1cm4gQXNjaWlUYWJsZS5hbGlnbkNlbnRlcihzdHIsIGxlbiwgcGFkKVxuICByZXR1cm4gQXNjaWlUYWJsZS5hbGlnbkF1dG8oc3RyLCBsZW4sIHBhZClcbn1cblxuLyoqXG4gKiBMZWZ0IGFsaWduIGEgc3RyaW5nIGJ5IHBhZGRpbmcgaXQgYXQgYSBnaXZlbiBsZW5ndGhcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaW5nIGxlbmd0aFxuICogQHBhcmFtIHtTdHJpbmd9IHBhZGRpbmcgY2hhcmFjdGVyIChvcHRpb25hbCwgZGVmYXVsdCAnJylcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5hbGlnbkxlZnQgPSBmdW5jdGlvbihzdHIsIGxlbiwgcGFkKSB7XG4gIGlmICghbGVuIHx8IGxlbiA8IDApIHJldHVybiAnJ1xuICBpZiAoc3RyID09PSB1bmRlZmluZWQgfHwgc3RyID09PSBudWxsKSBzdHIgPSAnJ1xuICBpZiAodHlwZW9mIHBhZCA9PT0gJ3VuZGVmaW5lZCcpIHBhZCA9ICcgJ1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHN0ciA9IHN0ci50b1N0cmluZygpXG4gIHZhciBhbGVuID0gbGVuICsgMSAtIHN0ci5sZW5ndGhcbiAgaWYgKGFsZW4gPD0gMCkgcmV0dXJuIHN0clxuICByZXR1cm4gc3RyICsgQXJyYXkobGVuICsgMSAtIHN0ci5sZW5ndGgpLmpvaW4ocGFkKVxufVxuXG4vKipcbiAqIENlbnRlciBhbGlnbiBhIHN0cmluZyBieSBwYWRkaW5nIGl0IGF0IGEgZ2l2ZW4gbGVuZ3RoXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmluZyBsZW5ndGhcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWRkaW5nIGNoYXJhY3RlciAob3B0aW9uYWwsIGRlZmF1bHQgJycpXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUuYWxpZ25DZW50ZXIgPSBmdW5jdGlvbihzdHIsIGxlbiwgcGFkKSB7XG4gIGlmICghbGVuIHx8IGxlbiA8IDApIHJldHVybiAnJ1xuICBpZiAoc3RyID09PSB1bmRlZmluZWQgfHwgc3RyID09PSBudWxsKSBzdHIgPSAnJ1xuICBpZiAodHlwZW9mIHBhZCA9PT0gJ3VuZGVmaW5lZCcpIHBhZCA9ICcgJ1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHN0ciA9IHN0ci50b1N0cmluZygpXG4gIHZhciBuTGVuID0gc3RyLmxlbmd0aFxuICAgICwgaGFsZiA9IE1hdGguZmxvb3IobGVuIC8gMiAtIG5MZW4gLyAyKVxuICAgICwgb2RkcyA9IE1hdGguYWJzKChuTGVuICUgMikgLSAobGVuICUgMikpXG4gICAgLCBsZW4gPSBzdHIubGVuZ3RoXG5cbiAgcmV0dXJuIEFzY2lpVGFibGUuYWxpZ25SaWdodCgnJywgaGFsZiwgcGFkKSBcbiAgICArIHN0clxuICAgICsgQXNjaWlUYWJsZS5hbGlnbkxlZnQoJycsIGhhbGYgKyBvZGRzLCBwYWQpXG59XG5cbi8qKlxuICogUmlnaHQgYWxpZ24gYSBzdHJpbmcgYnkgcGFkZGluZyBpdCBhdCBhIGdpdmVuIGxlbmd0aFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpbmcgbGVuZ3RoXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFkZGluZyBjaGFyYWN0ZXIgKG9wdGlvbmFsLCBkZWZhdWx0ICcnKVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLmFsaWduUmlnaHQgPSBmdW5jdGlvbihzdHIsIGxlbiwgcGFkKSB7XG4gIGlmICghbGVuIHx8IGxlbiA8IDApIHJldHVybiAnJ1xuICBpZiAoc3RyID09PSB1bmRlZmluZWQgfHwgc3RyID09PSBudWxsKSBzdHIgPSAnJ1xuICBpZiAodHlwZW9mIHBhZCA9PT0gJ3VuZGVmaW5lZCcpIHBhZCA9ICcgJ1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHN0ciA9IHN0ci50b1N0cmluZygpXG4gIHZhciBhbGVuID0gbGVuICsgMSAtIHN0ci5sZW5ndGhcbiAgaWYgKGFsZW4gPD0gMCkgcmV0dXJuIHN0clxuICByZXR1cm4gQXJyYXkobGVuICsgMSAtIHN0ci5sZW5ndGgpLmpvaW4ocGFkKSArIHN0clxufVxuXG4vKipcbiAqIEF1dG8gYWxpZ24gc3RyaW5nIHZhbHVlIGJhc2VkIG9uIG9iamVjdCB0eXBlXG4gKlxuICogQHBhcmFtIHtBbnl9IG9iamVjdCB0byBzdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpbmcgbGVuZ3RoXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFkZGluZyBjaGFyYWN0ZXIgKG9wdGlvbmFsLCBkZWZhdWx0ICcnKVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLmFsaWduQXV0byA9IGZ1bmN0aW9uKHN0ciwgbGVuLCBwYWQpIHtcbiAgaWYgKHN0ciA9PT0gdW5kZWZpbmVkIHx8IHN0ciA9PT0gbnVsbCkgc3RyID0gJydcbiAgdmFyIHR5cGUgPSB0b1N0cmluZy5jYWxsKHN0cilcbiAgcGFkIHx8IChwYWQgPSAnICcpXG4gIGxlbiA9ICtsZW5cbiAgaWYgKHR5cGUgIT09ICdbb2JqZWN0IFN0cmluZ10nKSB7XG4gICAgc3RyID0gc3RyLnRvU3RyaW5nKClcbiAgfVxuICBpZiAoc3RyLmxlbmd0aCA8IGxlbikge1xuICAgIHN3aXRjaCh0eXBlKSB7XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOiByZXR1cm4gQXNjaWlUYWJsZS5hbGlnblJpZ2h0KHN0ciwgbGVuLCBwYWQpXG4gICAgICBkZWZhdWx0OiByZXR1cm4gQXNjaWlUYWJsZS5hbGlnbkxlZnQoc3RyLCBsZW4sIHBhZClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG4vKipcbiAqIEZpbGwgYW4gYXJyYXkgYXQgYSBnaXZlbiBzaXplIHdpdGggdGhlIGdpdmVuIHZhbHVlXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGFycmF5IHNpemVcbiAqIEBwYXJhbSB7QW55fSBmaWxsIHZhbHVlXG4gKiBAcmV0dXJuIHtBcnJheX0gZmlsbGVkIGFycmF5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUuYXJyYXlGaWxsID0gZnVuY3Rpb24obGVuLCBmaWxsKSB7XG4gIHZhciBhcnIgPSBuZXcgQXJyYXkobGVuKVxuICBmb3IgKHZhciBpID0gMDsgaSAhPT0gbGVuOyBpKyspIHtcbiAgICBhcnJbaV0gPSBmaWxsO1xuICB9XG4gIHJldHVybiBhcnJcbn1cblxuLyohXG4gKiBJbnN0YW5jZSBtZXRob2RzXG4gKi9cblxuLyoqXG4gKiBSZXNldCB0aGUgdGFibGUgc3RhdGUgYmFjayB0byBkZWZhdWx0c1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdGl0bGUgb3IgSlNPTiB0YWJsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5yZXNldCA9IFxuQXNjaWlUYWJsZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHRoaXMuX19uYW1lID0gJydcbiAgdGhpcy5fX25hbWVBbGlnbiA9IEFzY2lpVGFibGUuQ0VOVEVSXG4gIHRoaXMuX19yb3dzID0gW11cbiAgdGhpcy5fX21heENlbGxzID0gMFxuICB0aGlzLl9fYWxpZ25zID0gW11cbiAgdGhpcy5fX2NvbE1heGVzID0gW11cbiAgdGhpcy5fX3NwYWNpbmcgPSAxXG4gIHRoaXMuX19oZWFkaW5nID0gbnVsbFxuICB0aGlzLl9faGVhZGluZ0FsaWduID0gQXNjaWlUYWJsZS5DRU5URVJcbiAgdGhpcy5zZXRCb3JkZXIoKVxuXG4gIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSAnW29iamVjdCBTdHJpbmddJykge1xuICAgIHRoaXMuX19uYW1lID0gbmFtZVxuICB9IGVsc2UgaWYgKHRvU3RyaW5nLmNhbGwobmFtZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgdGhpcy5mcm9tSlNPTihuYW1lKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogU2V0IHRoZSB0YWJsZSBib3JkZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaG9yaXpvbnRhbCBlZGdlcyAob3B0aW9uYWwsIGRlZmF1bHQgYHxgKVxuICogQHBhcmFtIHtTdHJpbmd9IHZlcnRpY2FsIGVkZ2VzIChvcHRpb25hbCwgZGVmYXVsdCBgLWApXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9wIGNvcm5lcnMgKG9wdGlvbmFsLCBkZWZhdWx0IGAuYClcbiAqIEBwYXJhbSB7U3RyaW5nfSBib3R0b20gY29ybmVycyAob3B0aW9uYWwsIGRlZmF1bHQgYCdgKVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5zZXRCb3JkZXIgPSBmdW5jdGlvbihlZGdlLCBmaWxsLCB0b3AsIGJvdHRvbSkge1xuICB0aGlzLl9fYm9yZGVyID0gdHJ1ZVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGZpbGwgPSB0b3AgPSBib3R0b20gPSBlZGdlXG4gIH1cbiAgdGhpcy5fX2VkZ2UgPSBlZGdlIHx8ICd8J1xuICB0aGlzLl9fZmlsbCA9IGZpbGwgfHwgJy0nXG4gIHRoaXMuX190b3AgPSB0b3AgfHwgJy4nXG4gIHRoaXMuX19ib3R0b20gPSBib3R0b20gfHwgXCInXCJcbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBSZW1vdmUgYWxsIHRhYmxlIGJvcmRlcnNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnJlbW92ZUJvcmRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9fYm9yZGVyID0gZmFsc2VcbiAgdGhpcy5fX2VkZ2UgPSAnICdcbiAgdGhpcy5fX2ZpbGwgPSAnICdcbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbHVtbiBhbGlnbm1lbnQgYXQgYSBnaXZlbiBpbmRleFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW4gaW5kZXhcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbGlnbm1lbnQgZGlyZWN0aW9uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnNldEFsaWduID0gZnVuY3Rpb24oaWR4LCBkaXIpIHtcbiAgdGhpcy5fX2FsaWduc1tpZHhdID0gZGlyXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogU2V0IHRoZSB0aXRsZSBvZiB0aGUgdGFibGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGl0bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuc2V0VGl0bGUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHRoaXMuX19uYW1lID0gbmFtZVxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIEdldCB0aGUgdGl0bGUgb2YgdGhlIHRhYmxlXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSB0aXRsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fX25hbWVcbn1cblxuLyoqXG4gKiBTZXQgdGFibGUgdGl0bGUgYWxpZ25tZW50XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRpcmVjdGlvblxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5zZXRUaXRsZUFsaWduID0gZnVuY3Rpb24oZGlyKSB7XG4gIHRoaXMuX19uYW1lQWxpZ24gPSBkaXJcbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBBc2NpaVRhYmxlIHNvcnRpbmcgc2hvcnRjdXQgdG8gc29ydCByb3dzXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc29ydGluZyBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICB0aGlzLl9fcm93cy5zb3J0KG1ldGhvZClcbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBTb3J0IHJvd3MgYmFzZWQgb24gc29ydCBtZXRob2QgZm9yIGdpdmVuIGNvbHVtblxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW4gaW5kZXhcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNvcnRpbmcgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnNvcnRDb2x1bW4gPSBmdW5jdGlvbihpZHgsIG1ldGhvZCkge1xuICB0aGlzLl9fcm93cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gbWV0aG9kKGFbaWR4XSwgYltpZHhdKVxuICB9KVxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIFNldCB0YWJsZSBoZWFkaW5nIGZvciBjb2x1bW5zXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5zZXRIZWFkaW5nID0gZnVuY3Rpb24ocm93KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSB8fCB0b1N0cmluZy5jYWxsKHJvdykgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICByb3cgPSBzbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgfVxuICB0aGlzLl9faGVhZGluZyA9IHJvd1xuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIEdldCB0YWJsZSBoZWFkaW5nIGZvciBjb2x1bW5zXG4gKlxuICogQHJldHVybiB7QXJyYXl9IGNvcHkgb2YgaGVhZGluZ3NcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuZ2V0SGVhZGluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fX2hlYWRpbmcuc2xpY2UoKVxufVxuXG4vKipcbiAqIFNldCBoZWFkaW5nIGFsaWdubWVudFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBkaXJlY3Rpb25cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuc2V0SGVhZGluZ0FsaWduID0gZnVuY3Rpb24oZGlyKSB7XG4gIHRoaXMuX19oZWFkaW5nQWxpZ24gPSBkaXJcbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBBZGQgYSByb3cgb2YgaW5mb3JtYXRpb24gdG8gdGhlIHRhYmxlXG4gKiBcbiAqIEBwYXJhbSB7Li4ufEFycmF5fSBhcmd1bWVudCB2YWx1ZXMgaW4gb3JkZXIgb2YgY29sdW1uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5hZGRSb3cgPSBmdW5jdGlvbihyb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxIHx8IHRvU3RyaW5nLmNhbGwocm93KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIHJvdyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICB9XG4gIHRoaXMuX19tYXhDZWxscyA9IE1hdGgubWF4KHRoaXMuX19tYXhDZWxscywgcm93Lmxlbmd0aClcbiAgdGhpcy5fX3Jvd3MucHVzaChyb3cpXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogR2V0IGEgY29weSBvZiBhbGwgcm93cyBvZiB0aGUgdGFibGVcbiAqXG4gKiBAcmV0dXJuIHtBcnJheX0gY29weSBvZiByb3dzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLmdldFJvd3MgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX19yb3dzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgIHJldHVybiByb3cuc2xpY2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEFkZCByb3dzIGluIHRoZSBmb3JtYXQgb2YgYSByb3cgbWF0cml4XG4gKlxuICogQHBhcmFtIHtBcnJheX0gcm93IG1hdHJpeFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5hZGRSb3dNYXRyaXggPSBmdW5jdGlvbihyb3dzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuYWRkUm93KHJvd3NbaV0pXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBBZGQgcm93cyBmcm9tIHRoZSBnaXZlbiBkYXRhIGFycmF5LCBwcm9jZXNzZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHJvd0NhbGxiYWNrLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGFcbiAqIEBwYXJhbSAoRnVuY3Rpb24pIHJvd0NhbGxiYWNrXG4gKiBAcGFyYW0gKEJvb2xlYW4pIGFzTWF0cml4IC0gY29udHJvbHMgaWYgdGhlIHJvdyBjcmVhdGVkIGJ5IHJvd0NhbGxiYWNrIHNob3VsZCBiZSBhc3NpZ25lZCBhcyByb3cgbWF0cml4XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLmFkZERhdGEgPSBmdW5jdGlvbihkYXRhLCByb3dDYWxsYmFjaywgYXNNYXRyaXgpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmb3IgKHZhciBpbmRleCA9IDAsIGxpbWl0ID0gZGF0YS5sZW5ndGg7IGluZGV4IDwgbGltaXQ7IGluZGV4KyspIHtcbiAgICB2YXIgcm93ID0gcm93Q2FsbGJhY2soZGF0YVtpbmRleF0pO1xuICAgIGlmKGFzTWF0cml4KSB7XG4gICAgICB0aGlzLmFkZFJvd01hdHJpeChyb3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZFJvdyhyb3cpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG4gIC8qKlxuICogUmVzZXQgdGhlIGN1cnJlbnQgcm93IHN0YXRlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5jbGVhclJvd3MgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fX3Jvd3MgPSBbXVxuICB0aGlzLl9fbWF4Q2VsbHMgPSAwXG4gIHRoaXMuX19jb2xNYXhlcyA9IFtdXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogQXBwbHkgYW4gZXZlbiBzcGFjZWQgY29sdW1uIGp1c3RpZmljYXRpb25cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uIC8gb2ZmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnNldEp1c3RpZnkgPSBmdW5jdGlvbih2YWwpIHtcbiAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMCAmJiAodmFsID0gdHJ1ZSlcbiAgdGhpcy5fX2p1c3RpZnkgPSAhIXZhbFxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIENvbnZlcnQgdGhlIGN1cnJlbnQgaW5zdGFuY2UgdG8gYSBKU09OIHN0cnVjdHVyZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0ganNvbiByZXByZXNlbnRhdGlvblxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB0aXRsZTogdGhpcy5nZXRUaXRsZSgpXG4gICwgaGVhZGluZzogdGhpcy5nZXRIZWFkaW5nKClcbiAgLCByb3dzOiB0aGlzLmdldFJvd3MoKVxuICB9XG59XG5cbi8qKlxuICogUG9wdWxhdGUgdGhlIHRhYmxlIGZyb20gYSBKU09OIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIHJlcHJlc2VudGF0aW9uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnBhcnNlID0gXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gdGhpc1xuICAgIC5jbGVhcigpXG4gICAgLnNldFRpdGxlKG9iai50aXRsZSlcbiAgICAuc2V0SGVhZGluZyhvYmouaGVhZGluZylcbiAgICAuYWRkUm93TWF0cml4KG9iai5yb3dzKVxufVxuXG4vKipcbiAqIFJlbmRlciB0aGUgdGFibGUgd2l0aCB0aGUgY3VycmVudCBpbmZvcm1hdGlvblxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gZm9ybWF0dGVkIHRhYmxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLnJlbmRlciA9XG5Bc2NpaVRhYmxlLnByb3RvdHlwZS52YWx1ZU9mID1cbkFzY2lpVGFibGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICAgICwgYm9keSA9IFtdXG4gICAgLCBtTGVuID0gdGhpcy5fX21heENlbGxzXG4gICAgLCBtYXggPSBBc2NpaVRhYmxlLmFycmF5RmlsbChtTGVuLCAwKVxuICAgICwgdG90YWwgPSBtTGVuICogM1xuICAgICwgcm93cyA9IHRoaXMuX19yb3dzXG4gICAgLCBqdXN0aWZ5XG4gICAgLCBib3JkZXIgPSB0aGlzLl9fYm9yZGVyXG4gICAgLCBhbGwgPSB0aGlzLl9faGVhZGluZyBcbiAgICAgICAgPyBbdGhpcy5fX2hlYWRpbmddLmNvbmNhdChyb3dzKVxuICAgICAgICA6IHJvd3NcblxuICAvLyBDYWxjdWxhdGUgbWF4IHRhYmxlIGNlbGwgbGVuZ3RocyBhY3Jvc3MgYWxsIHJvd3NcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGwubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcm93ID0gYWxsW2ldXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBtTGVuOyBrKyspIHtcbiAgICAgIHZhciBjZWxsID0gcm93W2tdXG4gICAgICBtYXhba10gPSBNYXRoLm1heChtYXhba10sIGNlbGwgPyBjZWxsLnRvU3RyaW5nKCkubGVuZ3RoIDogMClcbiAgICB9XG4gIH1cbiAgdGhpcy5fX2NvbE1heGVzID0gbWF4XG4gIGp1c3RpZnkgPSB0aGlzLl9fanVzdGlmeSA/IE1hdGgubWF4LmFwcGx5KG51bGwsIG1heCkgOiAwXG5cbiAgLy8gR2V0IFxuICBtYXguZm9yRWFjaChmdW5jdGlvbih4KSB7XG4gICAgdG90YWwgKz0ganVzdGlmeSA/IGp1c3RpZnkgOiB4ICsgc2VsZi5fX3NwYWNpbmdcbiAgfSlcbiAganVzdGlmeSAmJiAodG90YWwgKz0gbWF4Lmxlbmd0aClcbiAgdG90YWwgLT0gdGhpcy5fX3NwYWNpbmdcblxuICAvLyBIZWFkaW5nXG4gIGJvcmRlciAmJiBib2R5LnB1c2godGhpcy5fc2VwZXJhdG9yKHRvdGFsIC0gbUxlbiArIDEsIHRoaXMuX190b3ApKVxuICBpZiAodGhpcy5fX25hbWUpIHtcbiAgICBib2R5LnB1c2godGhpcy5fcmVuZGVyVGl0bGUodG90YWwgLSBtTGVuICsgMSkpXG4gICAgYm9yZGVyICYmIGJvZHkucHVzaCh0aGlzLl9zZXBlcmF0b3IodG90YWwgLSBtTGVuICsgMSkpXG4gIH1cbiAgaWYgKHRoaXMuX19oZWFkaW5nKSB7XG4gICAgYm9keS5wdXNoKHRoaXMuX3JlbmRlclJvdyh0aGlzLl9faGVhZGluZywgJyAnLCB0aGlzLl9faGVhZGluZ0FsaWduKSlcbiAgICBib2R5LnB1c2godGhpcy5fcm93U2VwZXJhdG9yKG1MZW4sIHRoaXMuX19maWxsKSlcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX19yb3dzLmxlbmd0aDsgaSsrKSB7XG4gICAgYm9keS5wdXNoKHRoaXMuX3JlbmRlclJvdyh0aGlzLl9fcm93c1tpXSwgJyAnKSlcbiAgfVxuICBib3JkZXIgJiYgYm9keS5wdXNoKHRoaXMuX3NlcGVyYXRvcih0b3RhbCAtIG1MZW4gKyAxLCB0aGlzLl9fYm90dG9tKSlcblxuICB2YXIgcHJlZml4ID0gdGhpcy5vcHRpb25zLnByZWZpeCB8fCAnJ1xuICByZXR1cm4gcHJlZml4ICsgYm9keS5qb2luKCdcXG4nICsgcHJlZml4KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGxpbmUgc2VwZXJhdG9yXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmluZyBzaXplXG4gKiBAcGFyYW0ge1N0cmluZ30gc2lkZSB2YWx1ZXMgKGRlZmF1bHQgJ3wnKVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuX3NlcGVyYXRvciA9IGZ1bmN0aW9uKGxlbiwgc2VwKSB7XG4gIHNlcCB8fCAoc2VwID0gdGhpcy5fX2VkZ2UpXG4gIHJldHVybiBzZXAgKyBBc2NpaVRhYmxlLmFsaWduUmlnaHQoc2VwLCBsZW4sIHRoaXMuX19maWxsKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHJvdyBzZXBlcmF0b3JcbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHNlcGVyYXRvclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQXNjaWlUYWJsZS5wcm90b3R5cGUuX3Jvd1NlcGVyYXRvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYmxhbmtzID0gQXNjaWlUYWJsZS5hcnJheUZpbGwodGhpcy5fX21heENlbGxzLCB0aGlzLl9fZmlsbClcbiAgcmV0dXJuIHRoaXMuX3JlbmRlclJvdyhibGFua3MsIHRoaXMuX19maWxsKVxufVxuXG4vKipcbiAqIFJlbmRlciB0aGUgdGFibGUgdGl0bGUgaW4gYSBjZW50ZXJlZCBib3hcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaW5nIHNpemVcbiAqIEByZXR1cm4ge1N0cmluZ30gZm9ybWF0dGVkIHRpdGxlXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Bc2NpaVRhYmxlLnByb3RvdHlwZS5fcmVuZGVyVGl0bGUgPSBmdW5jdGlvbihsZW4pIHtcbiAgdmFyIG5hbWUgPSAnICcgKyB0aGlzLl9fbmFtZSArICcgJ1xuICAgICwgc3RyID0gQXNjaWlUYWJsZS5hbGlnbih0aGlzLl9fbmFtZUFsaWduLCBuYW1lLCBsZW4gLSAxLCAnICcpXG4gIHJldHVybiB0aGlzLl9fZWRnZSArIHN0ciArIHRoaXMuX19lZGdlXG59XG5cbi8qKlxuICogUmVuZGVyIGFuIGludmRpdmlkdWFsIHJvd1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHJvd1xuICogQHBhcmFtIHtTdHJpbmd9IGNvbHVtbiBzZXBlcmF0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB0b3RhbCByb3cgYWxpZ25tZW50IChvcHRpb25hbCwgZGVmYXVsdCBgYXV0b2ApXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGZvcm1hdHRlZCByb3dcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkFzY2lpVGFibGUucHJvdG90eXBlLl9yZW5kZXJSb3cgPSBmdW5jdGlvbihyb3csIHN0ciwgYWxpZ24pIHtcbiAgdmFyIHRtcCA9IFsnJ11cbiAgICAsIG1heCA9IHRoaXMuX19jb2xNYXhlc1xuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5fX21heENlbGxzOyBrKyspIHtcbiAgICB2YXIgY2VsbCA9IHJvd1trXVxuICAgICAgLCBqdXN0ID0gdGhpcy5fX2p1c3RpZnkgPyBNYXRoLm1heC5hcHBseShudWxsLCBtYXgpIDogbWF4W2tdXG4gICAgICAvLyAsIHBhZCA9IGsgPT09IHRoaXMuX19tYXhDZWxscyAtIDEgPyBqdXN0IDoganVzdCArIHRoaXMuX19zcGFjaW5nXG4gICAgICAsIHBhZCA9IGp1c3RcbiAgICAgICwgY0FsaWduID0gdGhpcy5fX2FsaWduc1trXVxuICAgICAgLCB1c2UgPSBhbGlnblxuICAgICAgLCBtZXRob2QgPSAnYWxpZ25BdXRvJ1xuICBcbiAgICBpZiAodHlwZW9mIGFsaWduID09PSAndW5kZWZpbmVkJykgdXNlID0gY0FsaWduXG5cbiAgICBpZiAodXNlID09PSBBc2NpaVRhYmxlLkxFRlQpIG1ldGhvZCA9ICdhbGlnbkxlZnQnXG4gICAgaWYgKHVzZSA9PT0gQXNjaWlUYWJsZS5DRU5URVIpIG1ldGhvZCA9ICdhbGlnbkNlbnRlcidcbiAgICBpZiAodXNlID09PSBBc2NpaVRhYmxlLlJJR0hUKSBtZXRob2QgPSAnYWxpZ25SaWdodCdcblxuICAgIHRtcC5wdXNoKEFzY2lpVGFibGVbbWV0aG9kXShjZWxsLCBwYWQsIHN0cikpXG4gIH1cbiAgdmFyIGZyb250ID0gdG1wLmpvaW4oc3RyICsgdGhpcy5fX2VkZ2UgKyBzdHIpXG4gIGZyb250ID0gZnJvbnQuc3Vic3RyKDEsIGZyb250Lmxlbmd0aClcbiAgcmV0dXJuIGZyb250ICsgc3RyICsgdGhpcy5fX2VkZ2Vcbn1cblxuLyohXG4gKiBBbGlhc2VzXG4gKi9cblxuLy8gQ3JlYXRlIG1ldGhvZCBzaG9ydGN1dHMgdG8gYWxsIGFsaWdubWVudCBtZXRob2RzIGZvciBlYWNoIGRpcmVjdGlvblxuO1snTGVmdCcsICdSaWdodCcsICdDZW50ZXInXS5mb3JFYWNoKGZ1bmN0aW9uKGRpcikge1xuICB2YXIgY29uc3RhbnQgPSBBc2NpaVRhYmxlW2Rpci50b1VwcGVyQ2FzZSgpXVxuXG4gIDtbJ3NldEFsaWduJywgJ3NldFRpdGxlQWxpZ24nLCAnc2V0SGVhZGluZ0FsaWduJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAvLyBDYWxsIHRoZSBiYXNlIG1ldGhvZCB3aXRoIHRoZSBkaXJlY3Rpb24gY29uc3RhbnQgYXMgdGhlIGxhc3QgYXJndW1lbnRcbiAgICBBc2NpaVRhYmxlLnByb3RvdHlwZVttZXRob2QgKyBkaXJdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKS5jb25jYXQoY29uc3RhbnQpXG4gICAgICByZXR1cm4gdGhpc1ttZXRob2RdLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgfVxuICB9KVxufSlcblxuLyohXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5pZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gQXNjaWlUYWJsZVxufSBlbHNlIHtcbiAgdGhpcy5Bc2NpaVRhYmxlID0gQXNjaWlUYWJsZVxufVxuXG59KS5jYWxsKHRoaXMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2FzY2lpLXRhYmxlJykiLCIvKiFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuICogQGxpY2Vuc2UgZXM1LXNoaW0gQ29weXJpZ2h0IDIwMDktMjAxNSBieSBjb250cmlidXRvcnMsIE1JVCBMaWNlbnNlXG4gKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG4vLyB2aW06IHRzPTQgc3RzPTQgc3c9NCBleHBhbmR0YWJcblxuLy8gQWRkIHNlbWljb2xvbiB0byBwcmV2ZW50IElJRkUgZnJvbSBiZWluZyBwYXNzZWQgYXMgYXJndW1lbnQgdG8gY29uY2F0ZW5hdGVkIGNvZGUuXG47XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvdGVtcGxhdGVzL3JldHVybkV4cG9ydHMuanNcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qIGdsb2JhbCBkZWZpbmUsIGV4cG9ydHMsIG1vZHVsZSAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSgpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5jYWxsO1xudmFyIHByb3RvdHlwZU9mT2JqZWN0ID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBvd25zID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Lmhhc093blByb3BlcnR5KTtcbnZhciBpc0VudW1lcmFibGUgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUpO1xudmFyIHRvU3RyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0LnRvU3RyaW5nKTtcblxuLy8gSWYgSlMgZW5naW5lIHN1cHBvcnRzIGFjY2Vzc29ycyBjcmVhdGluZyBzaG9ydGN1dHMuXG52YXIgZGVmaW5lR2V0dGVyO1xudmFyIGRlZmluZVNldHRlcjtcbnZhciBsb29rdXBHZXR0ZXI7XG52YXIgbG9va3VwU2V0dGVyO1xudmFyIHN1cHBvcnRzQWNjZXNzb3JzID0gb3ducyhwcm90b3R5cGVPZk9iamVjdCwgJ19fZGVmaW5lR2V0dGVyX18nKTtcbmlmIChzdXBwb3J0c0FjY2Vzc29ycykge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4gICAgZGVmaW5lR2V0dGVyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Ll9fZGVmaW5lR2V0dGVyX18pO1xuICAgIGRlZmluZVNldHRlciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5fX2RlZmluZVNldHRlcl9fKTtcbiAgICBsb29rdXBHZXR0ZXIgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QuX19sb29rdXBHZXR0ZXJfXyk7XG4gICAgbG9va3VwU2V0dGVyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Ll9fbG9va3VwU2V0dGVyX18pO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbn1cblxuLy8gRVM1IDE1LjIuMy4yXG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMlxuaWYgKCFPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzI2lzc3VlLzJcbiAgICAvLyBodHRwOi8vZWpvaG4ub3JnL2Jsb2cvb2JqZWN0Z2V0cHJvdG90eXBlb2YvXG4gICAgLy8gcmVjb21tZW5kZWQgYnkgZnNjaGFlZmVyIG9uIGdpdGh1YlxuICAgIC8vXG4gICAgLy8gc3VyZSwgYW5kIHdlYnJlZmxlY3Rpb24gc2F5cyBeX15cbiAgICAvLyAuLi4gdGhpcyB3aWxsIG5lcmV2ZXIgcG9zc2libHkgcmV0dXJuIG51bGxcbiAgICAvLyAuLi4gT3BlcmEgTWluaSBicmVha3MgaGVyZSB3aXRoIGluZmluaXRlIGxvb3BzXG4gICAgT2JqZWN0LmdldFByb3RvdHlwZU9mID0gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2Yob2JqZWN0KSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gICAgICAgIHZhciBwcm90byA9IG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbiAgICAgICAgaWYgKHByb3RvIHx8IHByb3RvID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgIH0gZWxzZSBpZiAodG9TdHIob2JqZWN0LmNvbnN0cnVjdG9yKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIHByb3RvdHlwZU9mT2JqZWN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIENvcnJlY3RseSByZXR1cm4gbnVsbCBmb3IgT2JqZWN0cyBjcmVhdGVkIHdpdGggYE9iamVjdC5jcmVhdGUobnVsbClgXG4gICAgICAgICAgLy8gKHNoYW1tZWQgb3IgbmF0aXZlKSBvciBgeyBfX3Byb3RvX186IG51bGx9YC4gIEFsc28gcmV0dXJucyBudWxsIGZvclxuICAgICAgICAgIC8vIGNyb3NzLXJlYWxtIG9iamVjdHMgb24gYnJvd3NlcnMgdGhhdCBsYWNrIGBfX3Byb3RvX19gIHN1cHBvcnQgKGxpa2VcbiAgICAgICAgICAvLyBJRSA8MTEpLCBidXQgdGhhdCdzIHRoZSBiZXN0IHdlIGNhbiBkby5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8vIEVTNSAxNS4yLjMuM1xuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjNcblxudmFyIGRvZXNHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3JrID0gZnVuY3Rpb24gZG9lc0dldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmsob2JqZWN0KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgb2JqZWN0LnNlbnRpbmVsID0gMDtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCAnc2VudGluZWwnKS52YWx1ZSA9PT0gMDtcbiAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbi8vIGNoZWNrIHdoZXRoZXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIHdvcmtzIGlmIGl0J3MgZ2l2ZW4uIE90aGVyd2lzZSwgc2hpbSBwYXJ0aWFsbHkuXG5pZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25PYmplY3QgPSBkb2VzR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29yayh7fSk7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25Eb20gPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgZG9lc0dldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmsoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgIGlmICghZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29ya3NPbkRvbSB8fCAhZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29ya3NPbk9iamVjdCkge1xuICAgICAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yRmFsbGJhY2sgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIH1cbn1cblxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIHx8IGdldE93blByb3BlcnR5RGVzY3JpcHRvckZhbGxiYWNrKSB7XG4gICAgdmFyIEVSUl9OT05fT0JKRUNUID0gJ09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgY2FsbGVkIG9uIGEgbm9uLW9iamVjdDogJztcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdCAhPT0gJ2Z1bmN0aW9uJykgfHwgb2JqZWN0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUl9OT05fT0JKRUNUICsgb2JqZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1ha2UgYSB2YWxpYW50IGF0dGVtcHQgdG8gdXNlIHRoZSByZWFsIGdldE93blByb3BlcnR5RGVzY3JpcHRvclxuICAgICAgICAvLyBmb3IgSTgncyBET00gZWxlbWVudHMuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yRmFsbGJhY2suY2FsbChPYmplY3QsIG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJ5IHRoZSBzaGltIGlmIHRoZSByZWFsIG9uZSBkb2Vzbid0IHdvcmtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZXNjcmlwdG9yO1xuXG4gICAgICAgIC8vIElmIG9iamVjdCBkb2VzIG5vdCBvd25zIHByb3BlcnR5IHJldHVybiB1bmRlZmluZWQgaW1tZWRpYXRlbHkuXG4gICAgICAgIGlmICghb3ducyhvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBvYmplY3QgaGFzIGEgcHJvcGVydHkgdGhlbiBpdCdzIGZvciBzdXJlIGBjb25maWd1cmFibGVgLCBhbmRcbiAgICAgICAgLy8gcHJvYmFibHkgYGVudW1lcmFibGVgLiBEZXRlY3QgZW51bWVyYWJpbGl0eSB0aG91Z2guXG4gICAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBpc0VudW1lcmFibGUob2JqZWN0LCBwcm9wZXJ0eSksXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJZiBKUyBlbmdpbmUgc3VwcG9ydHMgYWNjZXNzb3IgcHJvcGVydGllcyB0aGVuIHByb3BlcnR5IG1heSBiZSBhXG4gICAgICAgIC8vIGdldHRlciBvciBzZXR0ZXIuXG4gICAgICAgIGlmIChzdXBwb3J0c0FjY2Vzc29ycykge1xuICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSBgX19sb29rdXBHZXR0ZXJfX2Agd2lsbCByZXR1cm4gYSBnZXR0ZXIgZXZlblxuICAgICAgICAgICAgLy8gaWYgb2JqZWN0IGhhcyBvd24gbm9uIGdldHRlciBwcm9wZXJ0eSBhbG9uZyB3aXRoIGEgc2FtZSBuYW1lZFxuICAgICAgICAgICAgLy8gaW5oZXJpdGVkIGdldHRlci4gVG8gYXZvaWQgbWlzYmVoYXZpb3Igd2UgdGVtcG9yYXJ5IHJlbW92ZVxuICAgICAgICAgICAgLy8gYF9fcHJvdG9fX2Agc28gdGhhdCBgX19sb29rdXBHZXR0ZXJfX2Agd2lsbCByZXR1cm4gZ2V0dGVyIG9ubHlcbiAgICAgICAgICAgIC8vIGlmIGl0J3Mgb3duZWQgYnkgYW4gb2JqZWN0LlxuICAgICAgICAgICAgdmFyIHByb3RvdHlwZSA9IG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICB2YXIgbm90UHJvdG90eXBlT2ZPYmplY3QgPSBvYmplY3QgIT09IHByb3RvdHlwZU9mT2JqZWN0O1xuICAgICAgICAgICAgLy8gYXZvaWQgcmVjdXJzaW9uIHByb2JsZW0sIGJyZWFraW5nIGluIE9wZXJhIE1pbmkgd2hlblxuICAgICAgICAgICAgLy8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnKVxuICAgICAgICAgICAgLy8gb3IgYW55IG90aGVyIE9iamVjdC5wcm90b3R5cGUgYWNjZXNzb3JcbiAgICAgICAgICAgIGlmIChub3RQcm90b3R5cGVPZk9iamVjdCkge1xuICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGVPZk9iamVjdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGdldHRlciA9IGxvb2t1cEdldHRlcihvYmplY3QsIHByb3BlcnR5KTtcbiAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBsb29rdXBTZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgICAgICAgICAgIGlmIChub3RQcm90b3R5cGVPZk9iamVjdCkge1xuICAgICAgICAgICAgICAgIC8vIE9uY2Ugd2UgaGF2ZSBnZXR0ZXIgYW5kIHNldHRlciB3ZSBjYW4gcHV0IHZhbHVlcyBiYWNrLlxuICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChnZXR0ZXIgfHwgc2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldHRlcikge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGdldHRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9IHNldHRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQgd2FzIGFjY2Vzc29yIHByb3BlcnR5IHdlJ3JlIGRvbmUgYW5kIHJldHVybiBoZXJlXG4gICAgICAgICAgICAgICAgLy8gaW4gb3JkZXIgdG8gYXZvaWQgYWRkaW5nIGB2YWx1ZWAgdG8gdGhlIGRlc2NyaXB0b3IuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgd2Uga25vdyB0aGF0IG9iamVjdCBoYXMgYW4gb3duIHByb3BlcnR5IHRoYXQgaXNcbiAgICAgICAgLy8gbm90IGFuIGFjY2Vzc29yIHNvIHdlIHNldCBpdCBhcyBhIHZhbHVlIGFuZCByZXR1cm4gZGVzY3JpcHRvci5cbiAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICB9O1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbn1cblxuLy8gRVM1IDE1LjIuMy40XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuNFxuaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCk7XG4gICAgfTtcbn1cblxuLy8gRVM1IDE1LjIuMy41XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuNVxuaWYgKCFPYmplY3QuY3JlYXRlKSB7XG5cbiAgICAvLyBDb250cmlidXRlZCBieSBCcmFuZG9uIEJlbnZpZSwgT2N0b2JlciwgMjAxMlxuICAgIHZhciBjcmVhdGVFbXB0eTtcbiAgICB2YXIgc3VwcG9ydHNQcm90byA9ICEoeyBfX3Byb3RvX186IG51bGwgfSBpbnN0YW5jZW9mIE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIHByb2R1Y2VzIGZhbHNlIHBvc2l0aXZlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gT3BlcmEgTWluaSA9PiBub3QgYSByZWxpYWJsZSBjaGVja1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2JqZWN0LnByb3RvdHlwZS5fX3Byb3RvX18gPT09IG51bGxcblxuICAgIC8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbiAgICAvLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4gICAgLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIHZhciBzaG91bGRVc2VBY3RpdmVYID0gZnVuY3Rpb24gc2hvdWxkVXNlQWN0aXZlWCgpIHtcbiAgICAgICAgLy8gcmV0dXJuIGVhcmx5IGlmIGRvY3VtZW50LmRvbWFpbiBub3Qgc2V0XG4gICAgICAgIGlmICghZG9jdW1lbnQuZG9tYWluKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuICEhbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRoaXMgc3VwcG9ydHMgSUU4IHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIHVzZWRcbiAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbiAgICAvLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuICAgIHZhciBnZXRFbXB0eVZpYUFjdGl2ZVggPSBmdW5jdGlvbiBnZXRFbXB0eVZpYUFjdGl2ZVgoKSB7XG4gICAgICAgIHZhciBlbXB0eTtcbiAgICAgICAgdmFyIHhEb2M7XG5cbiAgICAgICAgeERvYyA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuXG4gICAgICAgIHhEb2Mud3JpdGUoJzxzY3JpcHQ+PFxcL3NjcmlwdD4nKTtcbiAgICAgICAgeERvYy5jbG9zZSgpO1xuXG4gICAgICAgIGVtcHR5ID0geERvYy5wYXJlbnRXaW5kb3cuT2JqZWN0LnByb3RvdHlwZTtcbiAgICAgICAgeERvYyA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH07XG5cbiAgICAvLyBUaGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb24gdXNpbmcgYW4gaWZyYW1lXG4gICAgLy8gYmVmb3JlIHRoZSBhY3RpdmV4IGFwcHJvYWNoIHdhcyBhZGRlZFxuICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuICAgIHZhciBnZXRFbXB0eVZpYUlGcmFtZSA9IGZ1bmN0aW9uIGdldEVtcHR5VmlhSUZyYW1lKCkge1xuICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgIHZhciBwYXJlbnQgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIGVtcHR5O1xuXG4gICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2NyaXB0LXVybCAqL1xuICAgICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JztcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zY3JpcHQtdXJsICovXG5cbiAgICAgICAgZW1wdHkgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3QucHJvdG90eXBlO1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgaWZyYW1lID0gbnVsbDtcblxuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfTtcblxuICAgIC8qIGdsb2JhbCBkb2N1bWVudCAqL1xuICAgIGlmIChzdXBwb3J0c1Byb3RvIHx8IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geyBfX3Byb3RvX186IG51bGwgfTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbiBvbGQgSUUgX19wcm90b19fIGNhbid0IGJlIHVzZWQgdG8gbWFudWFsbHkgc2V0IGBudWxsYCwgbm9yIGRvZXNcbiAgICAgICAgLy8gYW55IG90aGVyIG1ldGhvZCBleGlzdCB0byBtYWtlIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gbm90aGluZyxcbiAgICAgICAgLy8gYXNpZGUgZnJvbSBPYmplY3QucHJvdG90eXBlIGl0c2VsZi4gSW5zdGVhZCwgY3JlYXRlIGEgbmV3IGdsb2JhbFxuICAgICAgICAvLyBvYmplY3QgYW5kICpzdGVhbCogaXRzIE9iamVjdC5wcm90b3R5cGUgYW5kIHN0cmlwIGl0IGJhcmUuIFRoaXMgaXNcbiAgICAgICAgLy8gdXNlZCBhcyB0aGUgcHJvdG90eXBlIHRvIGNyZWF0ZSBudWxsYXJ5IG9iamVjdHMuXG4gICAgICAgIGNyZWF0ZUVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGFwcHJvYWNoIHRvIHVzZVxuICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4gICAgICAgICAgICB2YXIgZW1wdHkgPSBzaG91bGRVc2VBY3RpdmVYKCkgPyBnZXRFbXB0eVZpYUFjdGl2ZVgoKSA6IGdldEVtcHR5VmlhSUZyYW1lKCk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5oYXNPd25Qcm9wZXJ0eTtcbiAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5pc1Byb3RvdHlwZU9mO1xuICAgICAgICAgICAgZGVsZXRlIGVtcHR5LnRvTG9jYWxlU3RyaW5nO1xuICAgICAgICAgICAgZGVsZXRlIGVtcHR5LnRvU3RyaW5nO1xuICAgICAgICAgICAgZGVsZXRlIGVtcHR5LnZhbHVlT2Y7XG5cbiAgICAgICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBlbXB0eTtcbiAgICAgICAgICAgIC8vIHNob3J0LWNpcmN1aXQgZnV0dXJlIGNhbGxzXG4gICAgICAgICAgICBjcmVhdGVFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbXB0eSgpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIE9iamVjdC5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG5cbiAgICAgICAgdmFyIG9iamVjdDtcbiAgICAgICAgdmFyIFR5cGUgPSBmdW5jdGlvbiBUeXBlKCkge307IC8vIEFuIGVtcHR5IGNvbnN0cnVjdG9yLlxuXG4gICAgICAgIGlmIChwcm90b3R5cGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG9iamVjdCA9IGNyZWF0ZUVtcHR5KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3RvdHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHByb3RvdHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vIEluIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24gYHBhcmVudGAgY2FuIGJlIGBudWxsYFxuICAgICAgICAgICAgICAgIC8vIE9SICphbnkqIGBpbnN0YW5jZW9mIE9iamVjdGAgIChPYmplY3R8RnVuY3Rpb258QXJyYXl8UmVnRXhwfGV0YylcbiAgICAgICAgICAgICAgICAvLyBVc2UgYHR5cGVvZmAgdGhvLCBiL2MgaW4gb2xkIElFLCBET00gZWxlbWVudHMgYXJlIG5vdCBgaW5zdGFuY2VvZiBPYmplY3RgXG4gICAgICAgICAgICAgICAgLy8gbGlrZSB0aGV5IGFyZSBpbiBtb2Rlcm4gYnJvd3NlcnMuIFVzaW5nIGBPYmplY3QuY3JlYXRlYCBvbiBET00gZWxlbWVudHNcbiAgICAgICAgICAgICAgICAvLyBpcy4uLmVyci4uLnByb2JhYmx5IGluYXBwcm9wcmlhdGUsIGJ1dCB0aGUgbmF0aXZlIHZlcnNpb24gYWxsb3dzIGZvciBpdC5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QgcHJvdG90eXBlIG1heSBvbmx5IGJlIGFuIE9iamVjdCBvciBudWxsJyk7IC8vIHNhbWUgbXNnIGFzIENocm9tZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVHlwZS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgICAgICAgICBvYmplY3QgPSBuZXcgVHlwZSgpO1xuICAgICAgICAgICAgLy8gSUUgaGFzIG5vIGJ1aWx0LWluIGltcGxlbWVudGF0aW9uIG9mIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgXG4gICAgICAgICAgICAvLyBuZWl0aGVyIGBfX3Byb3RvX19gLCBidXQgdGhpcyBtYW51YWxseSBzZXR0aW5nIGBfX3Byb3RvX19gIHdpbGxcbiAgICAgICAgICAgIC8vIGd1YXJhbnRlZSB0aGF0IGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIHdpbGwgd29yayBhcyBleHBlY3RlZCB3aXRoXG4gICAgICAgICAgICAvLyBvYmplY3RzIGNyZWF0ZWQgdXNpbmcgYE9iamVjdC5jcmVhdGVgXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iamVjdCwgcHJvcGVydGllcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH07XG59XG5cbi8vIEVTNSAxNS4yLjMuNlxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjZcblxuLy8gUGF0Y2ggZm9yIFdlYktpdCBhbmQgSUU4IHN0YW5kYXJkIG1vZGVcbi8vIERlc2lnbmVkIGJ5IGhheCA8aGF4LmdpdGh1Yi5jb20+XG4vLyByZWxhdGVkIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzI2lzc3VlLzVcbi8vIElFOCBSZWZlcmVuY2U6XG4vLyAgICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2RkMjgyOTAwLmFzcHhcbi8vICAgICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvZGQyMjk5MTYuYXNweFxuLy8gV2ViS2l0IEJ1Z3M6XG4vLyAgICAgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTM2NDIzXG5cbnZhciBkb2VzRGVmaW5lUHJvcGVydHlXb3JrID0gZnVuY3Rpb24gZG9lc0RlZmluZVByb3BlcnR5V29yayhvYmplY3QpIHtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCAnc2VudGluZWwnLCB7fSk7XG4gICAgICAgIHJldHVybiAnc2VudGluZWwnIGluIG9iamVjdDtcbiAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbi8vIGNoZWNrIHdoZXRoZXIgZGVmaW5lUHJvcGVydHkgd29ya3MgaWYgaXQncyBnaXZlbi4gT3RoZXJ3aXNlLFxuLy8gc2hpbSBwYXJ0aWFsbHkuXG5pZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgdmFyIGRlZmluZVByb3BlcnR5V29ya3NPbk9iamVjdCA9IGRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsoe30pO1xuICAgIHZhciBkZWZpbmVQcm9wZXJ0eVdvcmtzT25Eb20gPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgIGlmICghZGVmaW5lUHJvcGVydHlXb3Jrc09uT2JqZWN0IHx8ICFkZWZpbmVQcm9wZXJ0eVdvcmtzT25Eb20pIHtcbiAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5RmFsbGJhY2sgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzRmFsbGJhY2sgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbiAgICB9XG59XG5cbmlmICghT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGRlZmluZVByb3BlcnR5RmFsbGJhY2spIHtcbiAgICB2YXIgRVJSX05PTl9PQkpFQ1RfREVTQ1JJUFRPUiA9ICdQcm9wZXJ0eSBkZXNjcmlwdGlvbiBtdXN0IGJlIGFuIG9iamVjdDogJztcbiAgICB2YXIgRVJSX05PTl9PQkpFQ1RfVEFSR0VUID0gJ09iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxsZWQgb24gbm9uLW9iamVjdDogJztcbiAgICB2YXIgRVJSX0FDQ0VTU09SU19OT1RfU1VQUE9SVEVEID0gJ2dldHRlcnMgJiBzZXR0ZXJzIGNhbiBub3QgYmUgZGVmaW5lZCBvbiB0aGlzIGphdmFzY3JpcHQgZW5naW5lJztcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgaWYgKCh0eXBlb2Ygb2JqZWN0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0ICE9PSAnZnVuY3Rpb24nKSB8fCBvYmplY3QgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJSX05PTl9PQkpFQ1RfVEFSR0VUICsgb2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHR5cGVvZiBkZXNjcmlwdG9yICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgZGVzY3JpcHRvciAhPT0gJ2Z1bmN0aW9uJykgfHwgZGVzY3JpcHRvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJfTk9OX09CSkVDVF9ERVNDUklQVE9SICsgZGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWFrZSBhIHZhbGlhbnQgYXR0ZW1wdCB0byB1c2UgdGhlIHJlYWwgZGVmaW5lUHJvcGVydHlcbiAgICAgICAgLy8gZm9yIEk4J3MgRE9NIGVsZW1lbnRzLlxuICAgICAgICBpZiAoZGVmaW5lUHJvcGVydHlGYWxsYmFjaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHlGYWxsYmFjay5jYWxsKE9iamVjdCwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAvLyB0cnkgdGhlIHNoaW0gaWYgdGhlIHJlYWwgb25lIGRvZXNuJ3Qgd29ya1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgaXQncyBhIGRhdGEgcHJvcGVydHkuXG4gICAgICAgIGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIC8vIGZhaWwgc2lsZW50bHkgaWYgJ3dyaXRhYmxlJywgJ2VudW1lcmFibGUnLCBvciAnY29uZmlndXJhYmxlJ1xuICAgICAgICAgICAgLy8gYXJlIHJlcXVlc3RlZCBidXQgbm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIC8vIGFsdGVybmF0ZSBhcHByb2FjaDpcbiAgICAgICAgICAgIGlmICggLy8gY2FuJ3QgaW1wbGVtZW50IHRoZXNlIGZlYXR1cmVzOyBhbGxvdyBmYWxzZSBidXQgbm90IHRydWVcbiAgICAgICAgICAgICAgICAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlKSB8fFxuICAgICAgICAgICAgICAgICgnZW51bWVyYWJsZScgaW4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB8fFxuICAgICAgICAgICAgICAgICgnY29uZmlndXJhYmxlJyBpbiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSlcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdUaGlzIGltcGxlbWVudGF0aW9uIG9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBkb2VzIG5vdCBzdXBwb3J0IGNvbmZpZ3VyYWJsZSwgZW51bWVyYWJsZSwgb3Igd3JpdGFibGUuJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICBpZiAoc3VwcG9ydHNBY2Nlc3NvcnMgJiYgKGxvb2t1cEdldHRlcihvYmplY3QsIHByb3BlcnR5KSB8fCBsb29rdXBTZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSkpKSB7XG4gICAgICAgICAgICAgICAgLy8gQXMgYWNjZXNzb3JzIGFyZSBzdXBwb3J0ZWQgb25seSBvbiBlbmdpbmVzIGltcGxlbWVudGluZ1xuICAgICAgICAgICAgICAgIC8vIGBfX3Byb3RvX19gIHdlIGNhbiBzYWZlbHkgb3ZlcnJpZGUgYF9fcHJvdG9fX2Agd2hpbGUgZGVmaW5pbmdcbiAgICAgICAgICAgICAgICAvLyBhIHByb3BlcnR5IHRvIG1ha2Ugc3VyZSB0aGF0IHdlIGRvbid0IGhpdCBhbiBpbmhlcml0ZWRcbiAgICAgICAgICAgICAgICAvLyBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICAgICAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBvYmplY3QuX19wcm90b19fO1xuICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGVPZk9iamVjdDtcbiAgICAgICAgICAgICAgICAvLyBEZWxldGluZyBhIHByb3BlcnR5IGFueXdheSBzaW5jZSBnZXR0ZXIgLyBzZXR0ZXIgbWF5IGJlXG4gICAgICAgICAgICAgICAgLy8gZGVmaW5lZCBvbiBvYmplY3QgaXRzZWxmLlxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIFNldHRpbmcgb3JpZ2luYWwgYF9fcHJvdG9fX2AgYmFjayBub3cuXG4gICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFzdXBwb3J0c0FjY2Vzc29ycyAmJiAoKCdnZXQnIGluIGRlc2NyaXB0b3IpIHx8ICgnc2V0JyBpbiBkZXNjcmlwdG9yKSkpIHtcbiAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgd2UgZ290IHRoYXQgZmFyIHRoZW4gZ2V0dGVycyBhbmQgc2V0dGVycyBjYW4gYmUgZGVmaW5lZCAhIVxuICAgICAgICAgICAgaWYgKCdnZXQnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVHZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvci5nZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdzZXQnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVTZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvci5zZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfTtcbn1cblxuLy8gRVM1IDE1LjIuMy43XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuN1xuaWYgKCFPYmplY3QuZGVmaW5lUHJvcGVydGllcyB8fCBkZWZpbmVQcm9wZXJ0aWVzRmFsbGJhY2spIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMob2JqZWN0LCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIG1ha2UgYSB2YWxpYW50IGF0dGVtcHQgdG8gdXNlIHRoZSByZWFsIGRlZmluZVByb3BlcnRpZXNcbiAgICAgICAgaWYgKGRlZmluZVByb3BlcnRpZXNGYWxsYmFjaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydGllc0ZhbGxiYWNrLmNhbGwoT2JqZWN0LCBvYmplY3QsIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJ5IHRoZSBzaGltIGlmIHRoZSByZWFsIG9uZSBkb2Vzbid0IHdvcmtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydHkgIT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIHByb3BlcnRpZXNbcHJvcGVydHldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfTtcbn1cblxuLy8gRVM1IDE1LjIuMy44XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuOFxuaWYgKCFPYmplY3Quc2VhbCkge1xuICAgIE9iamVjdC5zZWFsID0gZnVuY3Rpb24gc2VhbChvYmplY3QpIHtcbiAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5zZWFsIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaXMgbWlzbGVhZGluZyBhbmQgYnJlYWtzIGZlYXR1cmUtZGV0ZWN0aW9uLCBidXRcbiAgICAgICAgLy8gYWxsb3dzIFwic2VjdXJhYmxlXCIgY29kZSB0byBcImdyYWNlZnVsbHlcIiBkZWdyYWRlIHRvIHdvcmtpbmdcbiAgICAgICAgLy8gYnV0IGluc2VjdXJlIGNvZGUuXG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfTtcbn1cblxuLy8gRVM1IDE1LjIuMy45XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuOVxuaWYgKCFPYmplY3QuZnJlZXplKSB7XG4gICAgT2JqZWN0LmZyZWV6ZSA9IGZ1bmN0aW9uIGZyZWV6ZShvYmplY3QpIHtcbiAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5mcmVlemUgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBpcyBtaXNsZWFkaW5nIGFuZCBicmVha3MgZmVhdHVyZS1kZXRlY3Rpb24sIGJ1dFxuICAgICAgICAvLyBhbGxvd3MgXCJzZWN1cmFibGVcIiBjb2RlIHRvIFwiZ3JhY2VmdWxseVwiIGRlZ3JhZGUgdG8gd29ya2luZ1xuICAgICAgICAvLyBidXQgaW5zZWN1cmUgY29kZS5cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9O1xufVxuXG4vLyBkZXRlY3QgYSBSaGlubyBidWcgYW5kIHBhdGNoIGl0XG50cnkge1xuICAgIE9iamVjdC5mcmVlemUoZnVuY3Rpb24gKCkge30pO1xufSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgT2JqZWN0LmZyZWV6ZSA9IChmdW5jdGlvbiAoZnJlZXplT2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBmcmVlemUob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmcmVlemVPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KE9iamVjdC5mcmVlemUpKTtcbn1cblxuLy8gRVM1IDE1LjIuMy4xMFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjEwXG5pZiAoIU9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykge1xuICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKG9iamVjdCkge1xuICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaXMgbWlzbGVhZGluZyBhbmQgYnJlYWtzIGZlYXR1cmUtZGV0ZWN0aW9uLCBidXRcbiAgICAgICAgLy8gYWxsb3dzIFwic2VjdXJhYmxlXCIgY29kZSB0byBcImdyYWNlZnVsbHlcIiBkZWdyYWRlIHRvIHdvcmtpbmdcbiAgICAgICAgLy8gYnV0IGluc2VjdXJlIGNvZGUuXG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfTtcbn1cblxuLy8gRVM1IDE1LjIuMy4xMVxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjExXG5pZiAoIU9iamVjdC5pc1NlYWxlZCkge1xuICAgIE9iamVjdC5pc1NlYWxlZCA9IGZ1bmN0aW9uIGlzU2VhbGVkKG9iamVjdCkge1xuICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmlzU2VhbGVkIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxuXG4vLyBFUzUgMTUuMi4zLjEyXG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTJcbmlmICghT2JqZWN0LmlzRnJvemVuKSB7XG4gICAgT2JqZWN0LmlzRnJvemVuID0gZnVuY3Rpb24gaXNGcm96ZW4ob2JqZWN0KSB7XG4gICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuaXNGcm96ZW4gY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG5cbi8vIEVTNSAxNS4yLjMuMTNcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4xM1xuaWYgKCFPYmplY3QuaXNFeHRlbnNpYmxlKSB7XG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSA9IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShvYmplY3QpIHtcbiAgICAgICAgLy8gMS4gSWYgVHlwZShPKSBpcyBub3QgT2JqZWN0IHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5pc0V4dGVuc2libGUgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMi4gUmV0dXJuIHRoZSBCb29sZWFuIHZhbHVlIG9mIHRoZSBbW0V4dGVuc2libGVdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBPLlxuICAgICAgICB2YXIgbmFtZSA9ICcnO1xuICAgICAgICB3aGlsZSAob3ducyhvYmplY3QsIG5hbWUpKSB7XG4gICAgICAgICAgICBuYW1lICs9ICc/JztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3RbbmFtZV0gPSB0cnVlO1xuICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBvd25zKG9iamVjdCwgbmFtZSk7XG4gICAgICAgIGRlbGV0ZSBvYmplY3RbbmFtZV07XG4gICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9O1xufVxuXG59KSk7XG4iLCIvKiFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuICogQGxpY2Vuc2UgZXM1LXNoaW0gQ29weXJpZ2h0IDIwMDktMjAxNSBieSBjb250cmlidXRvcnMsIE1JVCBMaWNlbnNlXG4gKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG4vLyB2aW06IHRzPTQgc3RzPTQgc3c9NCBleHBhbmR0YWJcblxuLy8gQWRkIHNlbWljb2xvbiB0byBwcmV2ZW50IElJRkUgZnJvbSBiZWluZyBwYXNzZWQgYXMgYXJndW1lbnQgdG8gY29uY2F0ZW5hdGVkIGNvZGUuXG47XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvdGVtcGxhdGVzL3JldHVybkV4cG9ydHMuanNcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qIGdsb2JhbCBkZWZpbmUsIGV4cG9ydHMsIG1vZHVsZSAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG4vKipcbiAqIEJyaW5ncyBhbiBlbnZpcm9ubWVudCBhcyBjbG9zZSB0byBFQ01BU2NyaXB0IDUgY29tcGxpYW5jZVxuICogYXMgaXMgcG9zc2libGUgd2l0aCB0aGUgZmFjaWxpdGllcyBvZiBlcnN0d2hpbGUgZW5naW5lcy5cbiAqXG4gKiBBbm5vdGF0ZWQgRVM1OiBodHRwOi8vZXM1LmdpdGh1Yi5jb20vIChzcGVjaWZpYyBsaW5rcyBiZWxvdylcbiAqIEVTNSBTcGVjOiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvcHVibGljYXRpb25zL2ZpbGVzL0VDTUEtU1QvRWNtYS0yNjIucGRmXG4gKiBSZXF1aXJlZCByZWFkaW5nOiBodHRwOi8vamF2YXNjcmlwdHdlYmxvZy53b3JkcHJlc3MuY29tLzIwMTEvMTIvMDUvZXh0ZW5kaW5nLWphdmFzY3JpcHQtbmF0aXZlcy9cbiAqL1xuXG4vLyBTaG9ydGN1dCB0byBhbiBvZnRlbiBhY2Nlc3NlZCBwcm9wZXJ0aWVzLCBpbiBvcmRlciB0byBhdm9pZCBtdWx0aXBsZVxuLy8gZGVyZWZlcmVuY2UgdGhhdCBjb3N0cyB1bml2ZXJzYWxseS4gVGhpcyBhbHNvIGhvbGRzIGEgcmVmZXJlbmNlIHRvIGtub3duLWdvb2Rcbi8vIGZ1bmN0aW9ucy5cbnZhciAkQXJyYXkgPSBBcnJheTtcbnZhciBBcnJheVByb3RvdHlwZSA9ICRBcnJheS5wcm90b3R5cGU7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciBPYmplY3RQcm90b3R5cGUgPSAkT2JqZWN0LnByb3RvdHlwZTtcbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciBGdW5jdGlvblByb3RvdHlwZSA9ICRGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciBTdHJpbmdQcm90b3R5cGUgPSAkU3RyaW5nLnByb3RvdHlwZTtcbnZhciAkTnVtYmVyID0gTnVtYmVyO1xudmFyIE51bWJlclByb3RvdHlwZSA9ICROdW1iZXIucHJvdG90eXBlO1xudmFyIGFycmF5X3NsaWNlID0gQXJyYXlQcm90b3R5cGUuc2xpY2U7XG52YXIgYXJyYXlfc3BsaWNlID0gQXJyYXlQcm90b3R5cGUuc3BsaWNlO1xudmFyIGFycmF5X3B1c2ggPSBBcnJheVByb3RvdHlwZS5wdXNoO1xudmFyIGFycmF5X3Vuc2hpZnQgPSBBcnJheVByb3RvdHlwZS51bnNoaWZ0O1xudmFyIGFycmF5X2NvbmNhdCA9IEFycmF5UHJvdG90eXBlLmNvbmNhdDtcbnZhciBhcnJheV9qb2luID0gQXJyYXlQcm90b3R5cGUuam9pbjtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIYXZpbmcgYSB0b1N0cmluZyBsb2NhbCB2YXJpYWJsZSBuYW1lIGJyZWFrcyBpbiBPcGVyYSBzbyB1c2UgdG9fc3RyaW5nLlxudmFyIHRvX3N0cmluZyA9IE9iamVjdFByb3RvdHlwZS50b1N0cmluZztcblxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLyogZXNsaW50LWRpc2FibGUgb25lLXZhci1kZWNsYXJhdGlvbi1wZXItbGluZSwgbm8tcmVkZWNsYXJlICovXG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xudmFyIGlzQ2FsbGFibGU7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1jYWxsYWJsZSAqLyB2YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzIC8sIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGbih2YWx1ZSkgeyB0cnkgeyB2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpOyB2YXIgc2luZ2xlU3RyaXBwZWQgPSBmblN0ci5yZXBsYWNlKC9cXC9cXC8uKlxcbi9nLCAnJyk7IHZhciBtdWx0aVN0cmlwcGVkID0gc2luZ2xlU3RyaXBwZWQucmVwbGFjZSgvXFwvXFwqWy5cXHNcXFNdKlxcKlxcLy9nLCAnJyk7IHZhciBzcGFjZVN0cmlwcGVkID0gbXVsdGlTdHJpcHBlZC5yZXBsYWNlKC9cXG4vbWcsICcgJykucmVwbGFjZSgvIHsyfS9nLCAnICcpOyByZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KHNwYWNlU3RyaXBwZWQpOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgLyogbm90IGEgZnVuY3Rpb24gKi8gfSB9LCB0cnlGdW5jdGlvbk9iamVjdCA9IGZ1bmN0aW9uIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKSB7IHRyeSB7IGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfSBmblRvU3RyLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsIGdlbkNsYXNzID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJywgaXNDYWxsYWJsZSA9IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHsgaWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH0gaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfSBpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfSBpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH0gdmFyIHN0ckNsYXNzID0gdG9fc3RyaW5nLmNhbGwodmFsdWUpOyByZXR1cm4gc3RyQ2xhc3MgPT09IGZuQ2xhc3MgfHwgc3RyQ2xhc3MgPT09IGdlbkNsYXNzOyB9O1xuXG52YXIgaXNSZWdleDsgLyogaW5saW5lZCBmcm9tIGh0dHBzOi8vbnBtanMuY29tL2lzLXJlZ2V4ICovIHZhciByZWdleEV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWMsIHRyeVJlZ2V4RXhlYyA9IGZ1bmN0aW9uIHRyeVJlZ2V4RXhlYyh2YWx1ZSkgeyB0cnkgeyByZWdleEV4ZWMuY2FsbCh2YWx1ZSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9LCByZWdleENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXSc7IGlzUmVnZXggPSBmdW5jdGlvbiBpc1JlZ2V4KHZhbHVlKSB7IGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfSByZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlSZWdleEV4ZWModmFsdWUpIDogdG9fc3RyaW5nLmNhbGwodmFsdWUpID09PSByZWdleENsYXNzOyB9O1xudmFyIGlzU3RyaW5nOyAvKiBpbmxpbmVkIGZyb20gaHR0cHM6Ly9ucG1qcy5jb20vaXMtc3RyaW5nICovIHZhciBzdHJWYWx1ZSA9IFN0cmluZy5wcm90b3R5cGUudmFsdWVPZiwgdHJ5U3RyaW5nT2JqZWN0ID0gZnVuY3Rpb24gdHJ5U3RyaW5nT2JqZWN0KHZhbHVlKSB7IHRyeSB7IHN0clZhbHVlLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgc3RyaW5nQ2xhc3MgPSAnW29iamVjdCBTdHJpbmddJzsgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkgeyBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgeyByZXR1cm4gdHJ1ZTsgfSBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH0gcmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5U3RyaW5nT2JqZWN0KHZhbHVlKSA6IHRvX3N0cmluZy5jYWxsKHZhbHVlKSA9PT0gc3RyaW5nQ2xhc3M7IH07XG4vKiBlc2xpbnQtZW5hYmxlIG9uZS12YXItZGVjbGFyYXRpb24tcGVyLWxpbmUsIG5vLXJlZGVjbGFyZSAqL1xuXG4vKiBpbmxpbmVkIGZyb20gaHR0cDovL25wbWpzLmNvbS9kZWZpbmUtcHJvcGVydGllcyAqL1xudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSAkT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICAkT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuICAgICAgICBmb3IgKHZhciBfIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIG9iai54ID09PSBvYmo7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIEVTMyAqL1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufSgpKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gKGZ1bmN0aW9uIChoYXMpIHtcbiAgLy8gRGVmaW5lIGNvbmZpZ3VyYWJsZSwgd3JpdGFibGUsIGFuZCBub24tZW51bWVyYWJsZSBwcm9wc1xuICAvLyBpZiB0aGV5IGRvbid0IGV4aXN0LlxuICB2YXIgZGVmaW5lUHJvcGVydHk7XG4gIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgICBpZiAoIWZvcmNlQXNzaWduICYmIChuYW1lIGluIG9iamVjdCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgIHZhbHVlOiBtZXRob2RcbiAgICAgICAgICB9KTtcbiAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgICBpZiAoIWZvcmNlQXNzaWduICYmIChuYW1lIGluIG9iamVjdCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgb2JqZWN0W25hbWVdID0gbWV0aG9kO1xuICAgICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhvYmplY3QsIG1hcCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgIGZvciAodmFyIG5hbWUgaW4gbWFwKSB7XG4gICAgICAgICAgaWYgKGhhcy5jYWxsKG1hcCwgbmFtZSkpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwgbWFwW25hbWVdLCBmb3JjZUFzc2lnbik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICB9O1xufShPYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkpKTtcblxuLy9cbi8vIFV0aWxcbi8vID09PT09PVxuLy9cblxuLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IC9oZWxwZXJzL2lzUHJpbWl0aXZlICovXG52YXIgaXNQcmltaXRpdmUgPSBmdW5jdGlvbiBpc1ByaW1pdGl2ZShpbnB1dCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgIHJldHVybiBpbnB1dCA9PT0gbnVsbCB8fCAodHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gJ2Z1bmN0aW9uJyk7XG59O1xuXG52YXIgaXNBY3R1YWxOYU4gPSAkTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICE9PSB4OyB9O1xuXG52YXIgRVMgPSB7XG4gICAgLy8gRVM1IDkuNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDkuNFxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL3RvLWludGVnZXJcbiAgICAvKiByZXBsYWNlYWJsZSB3aXRoIGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZXMtYWJzdHJhY3QgRVM1LlRvSW50ZWdlciAqL1xuICAgIFRvSW50ZWdlcjogZnVuY3Rpb24gVG9JbnRlZ2VyKG51bSkge1xuICAgICAgICB2YXIgbiA9ICtudW07XG4gICAgICAgIGlmIChpc0FjdHVhbE5hTihuKSkge1xuICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAobiAhPT0gMCAmJiBuICE9PSAoMSAvIDApICYmIG4gIT09IC0oMSAvIDApKSB7XG4gICAgICAgICAgICBuID0gKG4gPiAwIHx8IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH0sXG5cbiAgICAvKiByZXBsYWNlYWJsZSB3aXRoIGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZXMtYWJzdHJhY3QgRVM1LlRvUHJpbWl0aXZlICovXG4gICAgVG9QcmltaXRpdmU6IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0KSB7XG4gICAgICAgIHZhciB2YWwsIHZhbHVlT2YsIHRvU3RyO1xuICAgICAgICBpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWVPZiA9IGlucHV0LnZhbHVlT2Y7XG4gICAgICAgIGlmIChpc0NhbGxhYmxlKHZhbHVlT2YpKSB7XG4gICAgICAgICAgICB2YWwgPSB2YWx1ZU9mLmNhbGwoaW5wdXQpO1xuICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRvU3RyID0gaW5wdXQudG9TdHJpbmc7XG4gICAgICAgIGlmIChpc0NhbGxhYmxlKHRvU3RyKSkge1xuICAgICAgICAgICAgdmFsID0gdG9TdHIuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUodmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgIH0sXG5cbiAgICAvLyBFUzUgOS45XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4OS45XG4gICAgLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IEVTNS5Ub09iamVjdCAqL1xuICAgIFRvT2JqZWN0OiBmdW5jdGlvbiAobykge1xuICAgICAgICBpZiAobyA9PSBudWxsKSB7IC8vIHRoaXMgbWF0Y2hlcyBib3RoIG51bGwgYW5kIHVuZGVmaW5lZFxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyBvICsgJyB0byBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJE9iamVjdChvKTtcbiAgICB9LFxuXG4gICAgLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IEVTNS5Ub1VpbnQzMiAqL1xuICAgIFRvVWludDMyOiBmdW5jdGlvbiBUb1VpbnQzMih4KSB7XG4gICAgICAgIHJldHVybiB4ID4+PiAwO1xuICAgIH1cbn07XG5cbi8vXG4vLyBGdW5jdGlvblxuLy8gPT09PT09PT1cbi8vXG5cbi8vIEVTLTUgMTUuMy40LjVcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjMuNC41XG5cbnZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG5cbmRlZmluZVByb3BlcnRpZXMoRnVuY3Rpb25Qcm90b3R5cGUsIHtcbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKHRoYXQpIHsgLy8gLmxlbmd0aCBpcyAxXG4gICAgICAgIC8vIDEuIExldCBUYXJnZXQgYmUgdGhlIHRoaXMgdmFsdWUuXG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgICAgICAvLyAyLiBJZiBJc0NhbGxhYmxlKFRhcmdldCkgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgaWYgKCFpc0NhbGxhYmxlKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJyArIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4gTGV0IEEgYmUgYSBuZXcgKHBvc3NpYmx5IGVtcHR5KSBpbnRlcm5hbCBsaXN0IG9mIGFsbCBvZiB0aGVcbiAgICAgICAgLy8gICBhcmd1bWVudCB2YWx1ZXMgcHJvdmlkZWQgYWZ0ZXIgdGhpc0FyZyAoYXJnMSwgYXJnMiBldGMpLCBpbiBvcmRlci5cbiAgICAgICAgLy8gWFhYIHNsaWNlZEFyZ3Mgd2lsbCBzdGFuZCBpbiBmb3IgXCJBXCIgaWYgdXNlZFxuICAgICAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsgLy8gZm9yIG5vcm1hbCBjYWxsXG4gICAgICAgIC8vIDQuIExldCBGIGJlIGEgbmV3IG5hdGl2ZSBFQ01BU2NyaXB0IG9iamVjdC5cbiAgICAgICAgLy8gMTEuIFNldCB0aGUgW1tQcm90b3R5cGVdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIHRvIHRoZSBzdGFuZGFyZFxuICAgICAgICAvLyAgIGJ1aWx0LWluIEZ1bmN0aW9uIHByb3RvdHlwZSBvYmplY3QgYXMgc3BlY2lmaWVkIGluIDE1LjMuMy4xLlxuICAgICAgICAvLyAxMi4gU2V0IHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjEuXG4gICAgICAgIC8vIDEzLiBTZXQgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgLy8gICAxNS4zLjQuNS4yLlxuICAgICAgICAvLyAxNC4gU2V0IHRoZSBbW0hhc0luc3RhbmNlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgLy8gICAxNS4zLjQuNS4zLlxuICAgICAgICB2YXIgYm91bmQ7XG4gICAgICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4yIFtbQ29uc3RydWN0XV1cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCxcbiAgICAgICAgICAgICAgICAvLyBGIHRoYXQgd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZyBzdGVwcyBhcmUgdGFrZW46XG4gICAgICAgICAgICAgICAgLy8gMS4gTGV0IHRhcmdldCBiZSB0aGUgdmFsdWUgb2YgRidzIFtbVGFyZ2V0RnVuY3Rpb25dXVxuICAgICAgICAgICAgICAgIC8vICAgaW50ZXJuYWwgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gSWYgdGFyZ2V0IGhhcyBubyBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCwgYVxuICAgICAgICAgICAgICAgIC8vICAgVHlwZUVycm9yIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICAgICAgICAgICAgLy8gMy4gTGV0IGJvdW5kQXJncyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRBcmdzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgLy8gICBtZXRob2Qgb2YgdGFyZ2V0IHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYXBwbHkuY2FsbChcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhcnJheV9jb25jYXQuY2FsbChhcmdzLCBhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoJE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gMTUuMy40LjUuMSBbW0NhbGxdXVxuICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCwgRixcbiAgICAgICAgICAgICAgICAvLyB3aGljaCB3YXMgY3JlYXRlZCB1c2luZyB0aGUgYmluZCBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCBhXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB2YWx1ZSBhbmQgYSBsaXN0IG9mIGFyZ3VtZW50cyBFeHRyYUFyZ3MsIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICAvLyBzdGVwcyBhcmUgdGFrZW46XG4gICAgICAgICAgICAgICAgLy8gMS4gTGV0IGJvdW5kQXJncyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRBcmdzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDIuIExldCBib3VuZFRoaXMgYmUgdGhlIHZhbHVlIG9mIEYncyBbW0JvdW5kVGhpc11dIGludGVybmFsXG4gICAgICAgICAgICAgICAgLy8gICBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAvLyAzLiBMZXQgdGFyZ2V0IGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tUYXJnZXRGdW5jdGlvbl1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgLy8gICBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAvLyA0LiBMZXQgYXJncyBiZSBhIG5ldyBsaXN0IGNvbnRhaW5pbmcgdGhlIHNhbWUgdmFsdWVzIGFzIHRoZVxuICAgICAgICAgICAgICAgIC8vICAgbGlzdCBib3VuZEFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIgZm9sbG93ZWQgYnkgdGhlIHNhbWVcbiAgICAgICAgICAgICAgICAvLyAgIHZhbHVlcyBhcyB0aGUgbGlzdCBFeHRyYUFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICAgICAgICAgICAgLy8gNS4gUmV0dXJuIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgbWV0aG9kXG4gICAgICAgICAgICAgICAgLy8gICBvZiB0YXJnZXQgcHJvdmlkaW5nIGJvdW5kVGhpcyBhcyB0aGUgdGhpcyB2YWx1ZSBhbmRcbiAgICAgICAgICAgICAgICAvLyAgIHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICAvLyBlcXVpdjogdGFyZ2V0LmNhbGwodGhpcywgLi4uYm91bmRBcmdzLCAuLi5hcmdzKVxuICAgICAgICAgICAgICAgIHJldHVybiBhcHBseS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgICAgIGFycmF5X2NvbmNhdC5jYWxsKGFyZ3MsIGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyAxNS4gSWYgdGhlIFtbQ2xhc3NdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBUYXJnZXQgaXMgXCJGdW5jdGlvblwiLCB0aGVuXG4gICAgICAgIC8vICAgICBhLiBMZXQgTCBiZSB0aGUgbGVuZ3RoIHByb3BlcnR5IG9mIFRhcmdldCBtaW51cyB0aGUgbGVuZ3RoIG9mIEEuXG4gICAgICAgIC8vICAgICBiLiBTZXQgdGhlIGxlbmd0aCBvd24gcHJvcGVydHkgb2YgRiB0byBlaXRoZXIgMCBvciBMLCB3aGljaGV2ZXIgaXNcbiAgICAgICAgLy8gICAgICAgbGFyZ2VyLlxuICAgICAgICAvLyAxNi4gRWxzZSBzZXQgdGhlIGxlbmd0aCBvd24gcHJvcGVydHkgb2YgRiB0byAwLlxuXG4gICAgICAgIHZhciBib3VuZExlbmd0aCA9IG1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuXG4gICAgICAgIC8vIDE3LiBTZXQgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIGxlbmd0aCBvd24gcHJvcGVydHkgb2YgRiB0byB0aGUgdmFsdWVzXG4gICAgICAgIC8vICAgc3BlY2lmaWVkIGluIDE1LjMuNS4xLlxuICAgICAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJyYXlfcHVzaC5jYWxsKGJvdW5kQXJncywgJyQnICsgaSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBYWFggQnVpbGQgYSBkeW5hbWljIGZ1bmN0aW9uIHdpdGggZGVzaXJlZCBhbW91bnQgb2YgYXJndW1lbnRzIGlzIHRoZSBvbmx5XG4gICAgICAgIC8vIHdheSB0byBzZXQgdGhlIGxlbmd0aCBwcm9wZXJ0eSBvZiBhIGZ1bmN0aW9uLlxuICAgICAgICAvLyBJbiBlbnZpcm9ubWVudHMgd2hlcmUgQ29udGVudCBTZWN1cml0eSBQb2xpY2llcyBlbmFibGVkIChDaHJvbWUgZXh0ZW5zaW9ucyxcbiAgICAgICAgLy8gZm9yIGV4LikgYWxsIHVzZSBvZiBldmFsIG9yIEZ1bmN0aW9uIGNvc3RydWN0b3IgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgLy8gSG93ZXZlciBpbiBhbGwgb2YgdGhlc2UgZW52aXJvbm1lbnRzIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGV4aXN0c1xuICAgICAgICAvLyBhbmQgc28gdGhpcyBjb2RlIHdpbGwgbmV2ZXIgYmUgZXhlY3V0ZWQuXG4gICAgICAgIGJvdW5kID0gJEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYXJyYXlfam9pbi5jYWxsKGJvdW5kQXJncywgJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBkYW5nbGluZyByZWZlcmVuY2VzLlxuICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gMTguIFNldCB0aGUgW1tFeHRlbnNpYmxlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiB0byB0cnVlLlxuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gMTkuIExldCB0aHJvd2VyIGJlIHRoZSBbW1Rocm93VHlwZUVycm9yXV0gZnVuY3Rpb24gT2JqZWN0ICgxMy4yLjMpLlxuICAgICAgICAvLyAyMC4gQ2FsbCB0aGUgW1tEZWZpbmVPd25Qcm9wZXJ0eV1dIGludGVybmFsIG1ldGhvZCBvZiBGIHdpdGhcbiAgICAgICAgLy8gICBhcmd1bWVudHMgXCJjYWxsZXJcIiwgUHJvcGVydHlEZXNjcmlwdG9yIHtbW0dldF1dOiB0aHJvd2VyLCBbW1NldF1dOlxuICAgICAgICAvLyAgIHRocm93ZXIsIFtbRW51bWVyYWJsZV1dOiBmYWxzZSwgW1tDb25maWd1cmFibGVdXTogZmFsc2V9LCBhbmRcbiAgICAgICAgLy8gICBmYWxzZS5cbiAgICAgICAgLy8gMjEuIENhbGwgdGhlIFtbRGVmaW5lT3duUHJvcGVydHldXSBpbnRlcm5hbCBtZXRob2Qgb2YgRiB3aXRoXG4gICAgICAgIC8vICAgYXJndW1lbnRzIFwiYXJndW1lbnRzXCIsIFByb3BlcnR5RGVzY3JpcHRvciB7W1tHZXRdXTogdGhyb3dlcixcbiAgICAgICAgLy8gICBbW1NldF1dOiB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSxcbiAgICAgICAgLy8gICBhbmQgZmFsc2UuXG5cbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvLyBOT1RFIEZ1bmN0aW9uIG9iamVjdHMgY3JlYXRlZCB1c2luZyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBkbyBub3RcbiAgICAgICAgLy8gaGF2ZSBhIHByb3RvdHlwZSBwcm9wZXJ0eSBvciB0aGUgW1tDb2RlXV0sIFtbRm9ybWFsUGFyYW1ldGVyc11dLCBhbmRcbiAgICAgICAgLy8gW1tTY29wZV1dIGludGVybmFsIHByb3BlcnRpZXMuXG4gICAgICAgIC8vIFhYWCBjYW4ndCBkZWxldGUgcHJvdG90eXBlIGluIHB1cmUtanMuXG5cbiAgICAgICAgLy8gMjIuIFJldHVybiBGLlxuICAgICAgICByZXR1cm4gYm91bmQ7XG4gICAgfVxufSk7XG5cbi8vIF9QbGVhc2Ugbm90ZTogU2hvcnRjdXRzIGFyZSBkZWZpbmVkIGFmdGVyIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgYXMgd2Vcbi8vIHVzZSBpdCBpbiBkZWZpbmluZyBzaG9ydGN1dHMuXG52YXIgb3ducyA9IGNhbGwuYmluZChPYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xudmFyIHRvU3RyID0gY2FsbC5iaW5kKE9iamVjdFByb3RvdHlwZS50b1N0cmluZyk7XG52YXIgYXJyYXlTbGljZSA9IGNhbGwuYmluZChhcnJheV9zbGljZSk7XG52YXIgYXJyYXlTbGljZUFwcGx5ID0gYXBwbHkuYmluZChhcnJheV9zbGljZSk7XG52YXIgc3RyU2xpY2UgPSBjYWxsLmJpbmQoU3RyaW5nUHJvdG90eXBlLnNsaWNlKTtcbnZhciBzdHJTcGxpdCA9IGNhbGwuYmluZChTdHJpbmdQcm90b3R5cGUuc3BsaXQpO1xudmFyIHN0ckluZGV4T2YgPSBjYWxsLmJpbmQoU3RyaW5nUHJvdG90eXBlLmluZGV4T2YpO1xudmFyIHB1c2hDYWxsID0gY2FsbC5iaW5kKGFycmF5X3B1c2gpO1xudmFyIGlzRW51bSA9IGNhbGwuYmluZChPYmplY3RQcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpO1xudmFyIGFycmF5U29ydCA9IGNhbGwuYmluZChBcnJheVByb3RvdHlwZS5zb3J0KTtcblxuLy9cbi8vIEFycmF5XG4vLyA9PT09PVxuLy9cblxudmFyIGlzQXJyYXkgPSAkQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KG9iaikge1xuICAgIHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLy8gRVM1IDE1LjQuNC4xMlxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjEzXG4vLyBSZXR1cm4gbGVuK2FyZ0NvdW50LlxuLy8gW2J1Z2ZpeCwgaWVsdDhdXG4vLyBJRSA8IDggYnVnOiBbXS51bnNoaWZ0KDApID09PSB1bmRlZmluZWQgYnV0IHNob3VsZCBiZSBcIjFcIlxudmFyIGhhc1Vuc2hpZnRSZXR1cm5WYWx1ZUJ1ZyA9IFtdLnVuc2hpZnQoMCkgIT09IDE7XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgdW5zaGlmdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBhcnJheV91bnNoaWZ0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG59LCBoYXNVbnNoaWZ0UmV0dXJuVmFsdWVCdWcpO1xuXG4vLyBFUzUgMTUuNC4zLjJcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuMy4yXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5XG5kZWZpbmVQcm9wZXJ0aWVzKCRBcnJheSwgeyBpc0FycmF5OiBpc0FycmF5IH0pO1xuXG4vLyBUaGUgSXNDYWxsYWJsZSgpIGNoZWNrIGluIHRoZSBBcnJheSBmdW5jdGlvbnNcbi8vIGhhcyBiZWVuIHJlcGxhY2VkIHdpdGggYSBzdHJpY3QgY2hlY2sgb24gdGhlXG4vLyBpbnRlcm5hbCBjbGFzcyBvZiB0aGUgb2JqZWN0IHRvIHRyYXAgY2FzZXMgd2hlcmVcbi8vIHRoZSBwcm92aWRlZCBmdW5jdGlvbiB3YXMgYWN0dWFsbHkgYSByZWd1bGFyXG4vLyBleHByZXNzaW9uIGxpdGVyYWwsIHdoaWNoIGluIFY4IGFuZFxuLy8gSmF2YVNjcmlwdENvcmUgaXMgYSB0eXBlb2YgXCJmdW5jdGlvblwiLiAgT25seSBpblxuLy8gVjggYXJlIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFscyBwZXJtaXR0ZWQgYXNcbi8vIHJlZHVjZSBwYXJhbWV0ZXJzLCBzbyBpdCBpcyBkZXNpcmFibGUgaW4gdGhlXG4vLyBnZW5lcmFsIGNhc2UgZm9yIHRoZSBzaGltIHRvIG1hdGNoIHRoZSBtb3JlXG4vLyBzdHJpY3QgYW5kIGNvbW1vbiBiZWhhdmlvciBvZiByZWplY3RpbmcgcmVndWxhclxuLy8gZXhwcmVzc2lvbnMuXG5cbi8vIEVTNSAxNS40LjQuMThcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xOFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvYXJyYXkvZm9yRWFjaFxuXG4vLyBDaGVjayBmYWlsdXJlIG9mIGJ5LWluZGV4IGFjY2VzcyBvZiBzdHJpbmcgY2hhcmFjdGVycyAoSUUgPCA5KVxuLy8gYW5kIGZhaWx1cmUgb2YgYDAgaW4gYm94ZWRTdHJpbmdgIChSaGlubylcbnZhciBib3hlZFN0cmluZyA9ICRPYmplY3QoJ2EnKTtcbnZhciBzcGxpdFN0cmluZyA9IGJveGVkU3RyaW5nWzBdICE9PSAnYScgfHwgISgwIGluIGJveGVkU3RyaW5nKTtcblxudmFyIHByb3Blcmx5Qm94ZXNDb250ZXh0ID0gZnVuY3Rpb24gcHJvcGVybHlCb3hlZChtZXRob2QpIHtcbiAgICAvLyBDaGVjayBub2RlIDAuNi4yMSBidWcgd2hlcmUgdGhpcmQgcGFyYW1ldGVyIGlzIG5vdCBib3hlZFxuICAgIHZhciBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gdHJ1ZTtcbiAgICB2YXIgcHJvcGVybHlCb3hlc1N0cmljdCA9IHRydWU7XG4gICAgdmFyIHRocmV3RXhjZXB0aW9uID0gZmFsc2U7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWV0aG9kLmNhbGwoJ2ZvbycsIGZ1bmN0aW9uIChfLCBfXywgY29udGV4dCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dCAhPT0gJ29iamVjdCcpIHsgcHJvcGVybHlCb3hlc05vblN0cmljdCA9IGZhbHNlOyB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWV0aG9kLmNhbGwoWzFdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICAgICAgICAgICAgcHJvcGVybHlCb3hlc1N0cmljdCA9IHR5cGVvZiB0aGlzID09PSAnc3RyaW5nJztcbiAgICAgICAgICAgIH0sICd4Jyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocmV3RXhjZXB0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gISFtZXRob2QgJiYgIXRocmV3RXhjZXB0aW9uICYmIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgJiYgcHJvcGVybHlCb3hlc1N0cmljdDtcbn07XG5cbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4vKiwgdGhpc0FyZyovKSB7XG4gICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgdmFyIFQ7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIFQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5mb3JFYWNoIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKCsraSA8IGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgIC8vIEludm9rZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBjYWxsLCBwYXNzaW5nIGFyZ3VtZW50czpcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0LCBwcm9wZXJ0eSB2YWx1ZSwgcHJvcGVydHkga2V5LCB0aGlzQXJnIG9iamVjdFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrZm4uY2FsbChULCBzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5mb3JFYWNoKSk7XG5cbi8vIEVTNSAxNS40LjQuMTlcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xOVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9tYXBcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgIHZhciByZXN1bHQgPSAkQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgdmFyIFQ7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLm1hcCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGNhbGxiYWNrZm4oc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBjYWxsYmFja2ZuLmNhbGwoVCwgc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUubWFwKSk7XG5cbi8vIEVTNSAxNS40LjQuMjBcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4yMFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9maWx0ZXJcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICB2YXIgVDtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBUID0gYXJndW1lbnRzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmlsdGVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gc2VsZltpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2tmbih2YWx1ZSwgaSwgb2JqZWN0KSA6IGNhbGxiYWNrZm4uY2FsbChULCB2YWx1ZSwgaSwgb2JqZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZmlsdGVyKSk7XG5cbi8vIEVTNSAxNS40LjQuMTZcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xNlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZXZlcnlcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbi8qLCB0aGlzQXJnKi8pIHtcbiAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuICAgICAgICB2YXIgVDtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBUID0gYXJndW1lbnRzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZXZlcnkgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmICEodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpIDogY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5ldmVyeSkpO1xuXG4vLyBFUzUgMTUuNC40LjE3XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTdcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NvbWVcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4vKiwgdGhpc0FyZyAqLykge1xuICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgIHZhciBUO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5zb21lIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgaW4gc2VsZiAmJiAodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnID8gY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpIDogY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5zb21lKSk7XG5cbi8vIEVTNSAxNS40LjQuMjFcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4yMVxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9yZWR1Y2VcbnZhciByZWR1Y2VDb2VyY2VzVG9PYmplY3QgPSBmYWxzZTtcbmlmIChBcnJheVByb3RvdHlwZS5yZWR1Y2UpIHtcbiAgICByZWR1Y2VDb2VyY2VzVG9PYmplY3QgPSB0eXBlb2YgQXJyYXlQcm90b3R5cGUucmVkdWNlLmNhbGwoJ2VzNScsIGZ1bmN0aW9uIChfLCBfXywgX19fLCBsaXN0KSB7IHJldHVybiBsaXN0OyB9KSA9PT0gJ29iamVjdCc7XG59XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbi8qLCBpbml0aWFsVmFsdWUqLykge1xuICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG5cbiAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUucmVkdWNlIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm8gdmFsdWUgdG8gcmV0dXJuIGlmIG5vIGluaXRpYWwgdmFsdWUgYW5kIGFuIGVtcHR5IGFycmF5XG4gICAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWxmW2krK107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGlmIGFycmF5IGNvbnRhaW5zIG5vIHZhbHVlcywgbm8gaW5pdGlhbCB2YWx1ZSB0byByZXR1cm5cbiAgICAgICAgICAgICAgICBpZiAoKytpID49IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2tmbihyZXN1bHQsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn0sICFyZWR1Y2VDb2VyY2VzVG9PYmplY3QpO1xuXG4vLyBFUzUgMTUuNC40LjIyXG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMjJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfUmVmZXJlbmNlL09iamVjdHMvQXJyYXkvcmVkdWNlUmlnaHRcbnZhciByZWR1Y2VSaWdodENvZXJjZXNUb09iamVjdCA9IGZhbHNlO1xuaWYgKEFycmF5UHJvdG90eXBlLnJlZHVjZVJpZ2h0KSB7XG4gICAgcmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QgPSB0eXBlb2YgQXJyYXlQcm90b3R5cGUucmVkdWNlUmlnaHQuY2FsbCgnZXM1JywgZnVuY3Rpb24gKF8sIF9fLCBfX18sIGxpc3QpIHsgcmV0dXJuIGxpc3Q7IH0pID09PSAnb2JqZWN0Jztcbn1cbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbi8qLCBpbml0aWFsKi8pIHtcbiAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0IGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm8gdmFsdWUgdG8gcmV0dXJuIGlmIG5vIGluaXRpYWwgdmFsdWUsIGVtcHR5IGFycmF5XG4gICAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVkdWNlUmlnaHQgb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB2YXIgaSA9IGxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGZbaS0tXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaWYgYXJyYXkgY29udGFpbnMgbm8gdmFsdWVzLCBubyBpbml0aWFsIHZhbHVlIHRvIHJldHVyblxuICAgICAgICAgICAgICAgIGlmICgtLWkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZVJpZ2h0IG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrZm4ocmVzdWx0LCBzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChpLS0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufSwgIXJlZHVjZVJpZ2h0Q29lcmNlc1RvT2JqZWN0KTtcblxuLy8gRVM1IDE1LjQuNC4xNFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjE0XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mXG52YXIgaGFzRmlyZWZveDJJbmRleE9mQnVnID0gQXJyYXlQcm90b3R5cGUuaW5kZXhPZiAmJiBbMCwgMV0uaW5kZXhPZigxLCAyKSAhPT0gLTE7XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50LyosIGZyb21JbmRleCAqLykge1xuICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGkgPSBFUy5Ub0ludGVnZXIoYXJndW1lbnRzWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgIGkgPSBpID49IDAgPyBpIDogbWF4KDAsIGxlbmd0aCArIGkpO1xuICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmIHNlbGZbaV0gPT09IHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxufSwgaGFzRmlyZWZveDJJbmRleE9mQnVnKTtcblxuLy8gRVM1IDE1LjQuNC4xNVxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjE1XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9sYXN0SW5kZXhPZlxudmFyIGhhc0ZpcmVmb3gyTGFzdEluZGV4T2ZCdWcgPSBBcnJheVByb3RvdHlwZS5sYXN0SW5kZXhPZiAmJiBbMCwgMV0ubGFzdEluZGV4T2YoMCwgLTMpICE9PSAtMTtcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudC8qLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaSA9IGxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaSA9IG1pbihpLCBFUy5Ub0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGFuZGxlIG5lZ2F0aXZlIGluZGljZXNcbiAgICAgICAgaSA9IGkgPj0gMCA/IGkgOiBsZW5ndGggLSBNYXRoLmFicyhpKTtcbiAgICAgICAgZm9yICg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmIHNlYXJjaEVsZW1lbnQgPT09IHNlbGZbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxufSwgaGFzRmlyZWZveDJMYXN0SW5kZXhPZkJ1Zyk7XG5cbi8vIEVTNSAxNS40LjQuMTJcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xMlxudmFyIHNwbGljZU5vb3BSZXR1cm5zRW1wdHlBcnJheSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGEgPSBbMSwgMl07XG4gICAgdmFyIHJlc3VsdCA9IGEuc3BsaWNlKCk7XG4gICAgcmV0dXJuIGEubGVuZ3RoID09PSAyICYmIGlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoID09PSAwO1xufSgpKTtcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAvLyBTYWZhcmkgNS4wIGJ1ZyB3aGVyZSAuc3BsaWNlKCkgcmV0dXJucyB1bmRlZmluZWRcbiAgICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheV9zcGxpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbn0sICFzcGxpY2VOb29wUmV0dXJuc0VtcHR5QXJyYXkpO1xuXG52YXIgc3BsaWNlV29ya3NXaXRoRW1wdHlPYmplY3QgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBBcnJheVByb3RvdHlwZS5zcGxpY2UuY2FsbChvYmosIDAsIDAsIDEpO1xuICAgIHJldHVybiBvYmoubGVuZ3RoID09PSAxO1xufSgpKTtcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIFtdOyB9XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IG1heChFUy5Ub0ludGVnZXIodGhpcy5sZW5ndGgpLCAwKTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHR5cGVvZiBkZWxldGVDb3VudCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgcHVzaENhbGwoYXJncywgdGhpcy5sZW5ndGggLSBzdGFydCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFyZ3NbMV0gPSBFUy5Ub0ludGVnZXIoZGVsZXRlQ291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheV9zcGxpY2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxufSwgIXNwbGljZVdvcmtzV2l0aEVtcHR5T2JqZWN0KTtcbnZhciBzcGxpY2VXb3Jrc1dpdGhMYXJnZVNwYXJzZUFycmF5cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gUGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMjk1XG4gICAgLy8gU2FmYXJpIDcvOCBicmVha3Mgd2l0aCBzcGFyc2UgYXJyYXlzIG9mIHNpemUgMWU1IG9yIGdyZWF0ZXJcbiAgICB2YXIgYXJyID0gbmV3ICRBcnJheSgxZTUpO1xuICAgIC8vIG5vdGU6IHRoZSBpbmRleCBNVVNUIGJlIDggb3IgbGFyZ2VyIG9yIHRoZSB0ZXN0IHdpbGwgZmFsc2UgcGFzc1xuICAgIGFycls4XSA9ICd4JztcbiAgICBhcnIuc3BsaWNlKDEsIDEpO1xuICAgIC8vIG5vdGU6IHRoaXMgdGVzdCBtdXN0IGJlIGRlZmluZWQgKmFmdGVyKiB0aGUgaW5kZXhPZiBzaGltXG4gICAgLy8gcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMzEzXG4gICAgcmV0dXJuIGFyci5pbmRleE9mKCd4JykgPT09IDc7XG59KCkpO1xudmFyIHNwbGljZVdvcmtzV2l0aFNtYWxsU3BhcnNlQXJyYXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBQZXIgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8yOTVcbiAgICAvLyBPcGVyYSAxMi4xNSBicmVha3Mgb24gdGhpcywgbm8gaWRlYSB3aHkuXG4gICAgdmFyIG4gPSAyNTY7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGFycltuXSA9ICdhJztcbiAgICBhcnIuc3BsaWNlKG4gKyAxLCAwLCAnYicpO1xuICAgIHJldHVybiBhcnJbbl0gPT09ICdhJztcbn0oKSk7XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KSB7XG4gICAgICAgIHZhciBPID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBBID0gW107XG4gICAgICAgIHZhciBsZW4gPSBFUy5Ub1VpbnQzMihPLmxlbmd0aCk7XG4gICAgICAgIHZhciByZWxhdGl2ZVN0YXJ0ID0gRVMuVG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgdmFyIGFjdHVhbFN0YXJ0ID0gcmVsYXRpdmVTdGFydCA8IDAgPyBtYXgoKGxlbiArIHJlbGF0aXZlU3RhcnQpLCAwKSA6IG1pbihyZWxhdGl2ZVN0YXJ0LCBsZW4pO1xuICAgICAgICB2YXIgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KEVTLlRvSW50ZWdlcihkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG5cbiAgICAgICAgdmFyIGsgPSAwO1xuICAgICAgICB2YXIgZnJvbTtcbiAgICAgICAgd2hpbGUgKGsgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoYWN0dWFsU3RhcnQgKyBrKTtcbiAgICAgICAgICAgIGlmIChvd25zKE8sIGZyb20pKSB7XG4gICAgICAgICAgICAgICAgQVtrXSA9IE9bZnJvbV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXRlbXMgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMik7XG4gICAgICAgIHZhciBpdGVtQ291bnQgPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIHZhciB0bztcbiAgICAgICAgaWYgKGl0ZW1Db3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICBrID0gYWN0dWFsU3RhcnQ7XG4gICAgICAgICAgICB2YXIgbWF4SyA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICAgICAgd2hpbGUgKGsgPCBtYXhLKSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoayArIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICAgICAgICAgICAgICB0byA9ICRTdHJpbmcoayArIGl0ZW1Db3VudCk7XG4gICAgICAgICAgICAgICAgaWYgKG93bnMoTywgZnJvbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBPW3RvXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgayArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgayA9IGxlbjtcbiAgICAgICAgICAgIHZhciBtaW5LID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpdGVtQ291bnQ7XG4gICAgICAgICAgICB3aGlsZSAoayA+IG1pbkspIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgT1trIC0gMV07XG4gICAgICAgICAgICAgICAgayAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW1Db3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICBrID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgICAgICB3aGlsZSAoayA+IGFjdHVhbFN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMSk7XG4gICAgICAgICAgICAgICAgdG8gPSAkU3RyaW5nKGsgKyBpdGVtQ291bnQgLSAxKTtcbiAgICAgICAgICAgICAgICBpZiAob3ducyhPLCBmcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE9bdG9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrIC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgayA9IGFjdHVhbFN0YXJ0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBPW2tdID0gaXRlbXNbaV07XG4gICAgICAgICAgICBrICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGl0ZW1Db3VudDtcblxuICAgICAgICByZXR1cm4gQTtcbiAgICB9XG59LCAhc3BsaWNlV29ya3NXaXRoTGFyZ2VTcGFyc2VBcnJheXMgfHwgIXNwbGljZVdvcmtzV2l0aFNtYWxsU3BhcnNlQXJyYXlzKTtcblxudmFyIG9yaWdpbmFsSm9pbiA9IEFycmF5UHJvdG90eXBlLmpvaW47XG52YXIgaGFzU3RyaW5nSm9pbkJ1ZztcbnRyeSB7XG4gICAgaGFzU3RyaW5nSm9pbkJ1ZyA9IEFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwoJzEyMycsICcsJykgIT09ICcxLDIsMyc7XG59IGNhdGNoIChlKSB7XG4gICAgaGFzU3RyaW5nSm9pbkJ1ZyA9IHRydWU7XG59XG5pZiAoaGFzU3RyaW5nSm9pbkJ1Zykge1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHZhciBzZXAgPSB0eXBlb2Ygc2VwYXJhdG9yID09PSAndW5kZWZpbmVkJyA/ICcsJyA6IHNlcGFyYXRvcjtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEpvaW4uY2FsbChpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IHRoaXMsIHNlcCk7XG4gICAgICAgIH1cbiAgICB9LCBoYXNTdHJpbmdKb2luQnVnKTtcbn1cblxudmFyIGhhc0pvaW5VbmRlZmluZWRCdWcgPSBbMSwgMl0uam9pbih1bmRlZmluZWQpICE9PSAnMSwyJztcbmlmIChoYXNKb2luVW5kZWZpbmVkQnVnKSB7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgdmFyIHNlcCA9IHR5cGVvZiBzZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnID8gJywnIDogc2VwYXJhdG9yO1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsSm9pbi5jYWxsKHRoaXMsIHNlcCk7XG4gICAgICAgIH1cbiAgICB9LCBoYXNKb2luVW5kZWZpbmVkQnVnKTtcbn1cblxudmFyIHB1c2hTaGltID0gZnVuY3Rpb24gcHVzaChpdGVtKSB7XG4gICAgdmFyIE8gPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICB2YXIgbiA9IEVTLlRvVWludDMyKE8ubGVuZ3RoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIE9bbiArIGldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBpICs9IDE7XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbiArIGk7XG4gICAgcmV0dXJuIG4gKyBpO1xufTtcblxudmFyIHB1c2hJc05vdEdlbmVyaWMgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIgcmVzdWx0ID0gQXJyYXkucHJvdG90eXBlLnB1c2guY2FsbChvYmosIHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIHJlc3VsdCAhPT0gMSB8fCBvYmoubGVuZ3RoICE9PSAxIHx8IHR5cGVvZiBvYmpbMF0gIT09ICd1bmRlZmluZWQnIHx8ICFvd25zKG9iaiwgMCk7XG59KCkpO1xuZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgIHB1c2g6IGZ1bmN0aW9uIHB1c2goaXRlbSkge1xuICAgICAgICBpZiAoaXNBcnJheSh0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5X3B1c2guYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHVzaFNoaW0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG59LCBwdXNoSXNOb3RHZW5lcmljKTtcblxuLy8gVGhpcyBmaXhlcyBhIHZlcnkgd2VpcmQgYnVnIGluIE9wZXJhIDEwLjYgd2hlbiBwdXNoaW5nIGB1bmRlZmluZWRcbnZhciBwdXNoVW5kZWZpbmVkSXNXZWlyZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIHZhciByZXN1bHQgPSBhcnIucHVzaCh1bmRlZmluZWQpO1xuICAgIHJldHVybiByZXN1bHQgIT09IDEgfHwgYXJyLmxlbmd0aCAhPT0gMSB8fCB0eXBlb2YgYXJyWzBdICE9PSAndW5kZWZpbmVkJyB8fCAhb3ducyhhcnIsIDApO1xufSgpKTtcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHsgcHVzaDogcHVzaFNoaW0gfSwgcHVzaFVuZGVmaW5lZElzV2VpcmQpO1xuXG4vLyBFUzUgMTUuMi4zLjE0XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjQuNC4xMFxuLy8gRml4IGJveGVkIHN0cmluZyBidWdcbmRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICBzbGljZTogZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIGFyciA9IGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogdGhpcztcbiAgICAgICAgcmV0dXJuIGFycmF5U2xpY2VBcHBseShhcnIsIGFyZ3VtZW50cyk7XG4gICAgfVxufSwgc3BsaXRTdHJpbmcpO1xuXG52YXIgc29ydElnbm9yZXNOb25GdW5jdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIFsxLCAyXS5zb3J0KG51bGwpO1xuICAgICAgICBbMSwgMl0uc29ydCh7fSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG4gICAgcmV0dXJuIGZhbHNlO1xufSgpKTtcbnZhciBzb3J0VGhyb3dzT25SZWdleCA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gdGhpcyBpcyBhIHByb2JsZW0gaW4gRmlyZWZveCA0LCBpbiB3aGljaCBgdHlwZW9mIC9hLyA9PT0gJ2Z1bmN0aW9uJ2BcbiAgICB0cnkge1xuICAgICAgICBbMSwgMl0uc29ydCgvYS8pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiovIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0oKSk7XG52YXIgc29ydElnbm9yZXNVbmRlZmluZWQgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIGFwcGxpZXMgaW4gSUUgOCwgZm9yIG9uZS5cbiAgICB0cnkge1xuICAgICAgICBbMSwgMl0uc29ydCh1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7IC8qKi8gfVxuICAgIHJldHVybiBmYWxzZTtcbn0oKSk7XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlRm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wYXJlRm4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlTb3J0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNDYWxsYWJsZShjb21wYXJlRm4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuc29ydCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlTb3J0KHRoaXMsIGNvbXBhcmVGbik7XG4gICAgfVxufSwgc29ydElnbm9yZXNOb25GdW5jdGlvbnMgfHwgIXNvcnRJZ25vcmVzVW5kZWZpbmVkIHx8ICFzb3J0VGhyb3dzT25SZWdleCk7XG5cbi8vXG4vLyBPYmplY3Rcbi8vID09PT09PVxuLy9cblxuLy8gRVM1IDE1LjIuMy4xNFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjE0XG5cbi8vIGh0dHA6Ly93aGF0dGhlaGVhZHNhaWQuY29tLzIwMTAvMTAvYS1zYWZlci1vYmplY3Qta2V5cy1jb21wYXRpYmlsaXR5LWltcGxlbWVudGF0aW9uXG52YXIgaGFzRG9udEVudW1CdWcgPSAhKHsgJ3RvU3RyaW5nJzogbnVsbCB9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbnZhciBoYXNQcm90b0VudW1CdWcgPSBmdW5jdGlvbiAoKSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgncHJvdG90eXBlJyk7XG52YXIgaGFzU3RyaW5nRW51bUJ1ZyA9ICFvd25zKCd4JywgJzAnKTtcbnZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG4gICAgdmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xufTtcbnZhciBibGFja2xpc3RlZEtleXMgPSB7XG4gICAgJHdpbmRvdzogdHJ1ZSxcbiAgICAkY29uc29sZTogdHJ1ZSxcbiAgICAkcGFyZW50OiB0cnVlLFxuICAgICRzZWxmOiB0cnVlLFxuICAgICRmcmFtZTogdHJ1ZSxcbiAgICAkZnJhbWVzOiB0cnVlLFxuICAgICRmcmFtZUVsZW1lbnQ6IHRydWUsXG4gICAgJHdlYmtpdEluZGV4ZWREQjogdHJ1ZSxcbiAgICAkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG4gICAgJGV4dGVybmFsOiB0cnVlXG59O1xudmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgLyogZ2xvYmFscyB3aW5kb3cgKi9cbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgZm9yICh2YXIgayBpbiB3aW5kb3cpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghYmxhY2tsaXN0ZWRLZXlzWyckJyArIGtdICYmIG93bnMod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59KCkpO1xudmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZykgeyByZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUob2JqZWN0KTsgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvYmplY3QpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG52YXIgZG9udEVudW1zID0gW1xuICAgICd0b1N0cmluZycsXG4gICAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgICAndmFsdWVPZicsXG4gICAgJ2hhc093blByb3BlcnR5JyxcbiAgICAnaXNQcm90b3R5cGVPZicsXG4gICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgICAnY29uc3RydWN0b3InXG5dO1xudmFyIGRvbnRFbnVtc0xlbmd0aCA9IGRvbnRFbnVtcy5sZW5ndGg7XG5cbi8vIHRha2VuIGRpcmVjdGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9pcy1hcmd1bWVudHMvYmxvYi9tYXN0ZXIvaW5kZXguanNcbi8vIGNhbiBiZSByZXBsYWNlZCB3aXRoIHJlcXVpcmUoJ2lzLWFyZ3VtZW50cycpIGlmIHdlIGV2ZXIgdXNlIGEgYnVpbGQgcHJvY2VzcyBpbnN0ZWFkXG52YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59O1xudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZS5sZW5ndGggPj0gMCAmJlxuICAgICAgICAhaXNBcnJheSh2YWx1ZSkgJiZcbiAgICAgICAgaXNDYWxsYWJsZSh2YWx1ZS5jYWxsZWUpO1xufTtcbnZhciBpc0FyZ3VtZW50cyA9IGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKSA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcblxuZGVmaW5lUHJvcGVydGllcygkT2JqZWN0LCB7XG4gICAga2V5czogZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgICAgdmFyIGlzRm4gPSBpc0NhbGxhYmxlKG9iamVjdCk7XG4gICAgICAgIHZhciBpc0FyZ3MgPSBpc0FyZ3VtZW50cyhvYmplY3QpO1xuICAgICAgICB2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG4gICAgICAgIHZhciBpc1N0ciA9IGlzT2JqZWN0ICYmIGlzU3RyaW5nKG9iamVjdCk7XG5cbiAgICAgICAgaWYgKCFpc09iamVjdCAmJiAhaXNGbiAmJiAhaXNBcmdzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGhlS2V5cyA9IFtdO1xuICAgICAgICB2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRm47XG4gICAgICAgIGlmICgoaXNTdHIgJiYgaGFzU3RyaW5nRW51bUJ1ZykgfHwgaXNBcmdzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHB1c2hDYWxsKHRoZUtleXMsICRTdHJpbmcoaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FyZ3MpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBvd25zKG9iamVjdCwgbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwodGhlS2V5cywgJFN0cmluZyhuYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0RvbnRFbnVtQnVnKSB7XG4gICAgICAgICAgICB2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbnRFbnVtc0xlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvbnRFbnVtID0gZG9udEVudW1zW2pdO1xuICAgICAgICAgICAgICAgIGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgb3ducyhvYmplY3QsIGRvbnRFbnVtKSkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbCh0aGVLZXlzLCBkb250RW51bSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGVLZXlzO1xuICAgIH1cbn0pO1xuXG52YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9ICRPYmplY3Qua2V5cyAmJiAoZnVuY3Rpb24gKCkge1xuICAgIC8vIFNhZmFyaSA1LjAgYnVnXG4gICAgcmV0dXJuICRPYmplY3Qua2V5cyhhcmd1bWVudHMpLmxlbmd0aCA9PT0gMjtcbn0oMSwgMikpO1xudmFyIGtleXNIYXNBcmd1bWVudHNMZW5ndGhCdWcgPSAkT2JqZWN0LmtleXMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJnS2V5cyA9ICRPYmplY3Qua2V5cyhhcmd1bWVudHMpO1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoICE9PSAxIHx8IGFyZ0tleXMubGVuZ3RoICE9PSAxIHx8IGFyZ0tleXNbMF0gIT09IDE7XG59KDEpKTtcbnZhciBvcmlnaW5hbEtleXMgPSAkT2JqZWN0LmtleXM7XG5kZWZpbmVQcm9wZXJ0aWVzKCRPYmplY3QsIHtcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsS2V5cyhhcnJheVNsaWNlKG9iamVjdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgfVxufSwgIWtleXNXb3Jrc1dpdGhBcmd1bWVudHMgfHwga2V5c0hhc0FyZ3VtZW50c0xlbmd0aEJ1Zyk7XG5cbi8vXG4vLyBEYXRlXG4vLyA9PT09XG4vL1xuXG52YXIgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgPSBuZXcgRGF0ZSgtMzUwOTgyNzMyOTYwMDI5MikuZ2V0VVRDTW9udGgoKSAhPT0gMDtcbnZhciBhTmVnYXRpdmVUZXN0RGF0ZSA9IG5ldyBEYXRlKC0xNTA5ODQyMjg5NjAwMjkyKTtcbnZhciBhUG9zaXRpdmVUZXN0RGF0ZSA9IG5ldyBEYXRlKDE0NDk2NjI0MDAwMDApO1xudmFyIGhhc1RvVVRDU3RyaW5nRm9ybWF0QnVnID0gYU5lZ2F0aXZlVGVzdERhdGUudG9VVENTdHJpbmcoKSAhPT0gJ01vbiwgMDEgSmFuIC00NTg3NSAxMTo1OTo1OSBHTVQnO1xudmFyIGhhc1RvRGF0ZVN0cmluZ0Zvcm1hdEJ1ZztcbnZhciBoYXNUb1N0cmluZ0Zvcm1hdEJ1ZztcbnZhciB0aW1lWm9uZU9mZnNldCA9IGFOZWdhdGl2ZVRlc3REYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5pZiAodGltZVpvbmVPZmZzZXQgPCAtNzIwKSB7XG4gICAgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnID0gYU5lZ2F0aXZlVGVzdERhdGUudG9EYXRlU3RyaW5nKCkgIT09ICdUdWUgSmFuIDAyIC00NTg3NSc7XG4gICAgaGFzVG9TdHJpbmdGb3JtYXRCdWcgPSAhKC9eVGh1IERlYyAxMCAyMDE1IFxcZFxcZDpcXGRcXGQ6XFxkXFxkIEdNVFstXFwrXVxcZFxcZFxcZFxcZCg/OiB8JCkvKS50ZXN0KGFQb3NpdGl2ZVRlc3REYXRlLnRvU3RyaW5nKCkpO1xufSBlbHNlIHtcbiAgICBoYXNUb0RhdGVTdHJpbmdGb3JtYXRCdWcgPSBhTmVnYXRpdmVUZXN0RGF0ZS50b0RhdGVTdHJpbmcoKSAhPT0gJ01vbiBKYW4gMDEgLTQ1ODc1JztcbiAgICBoYXNUb1N0cmluZ0Zvcm1hdEJ1ZyA9ICEoL15XZWQgRGVjIDA5IDIwMTUgXFxkXFxkOlxcZFxcZDpcXGRcXGQgR01UWy1cXCtdXFxkXFxkXFxkXFxkKD86IHwkKS8pLnRlc3QoYVBvc2l0aXZlVGVzdERhdGUudG9TdHJpbmcoKSk7XG59XG5cbnZhciBvcmlnaW5hbEdldEZ1bGxZZWFyID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldEZ1bGxZZWFyKTtcbnZhciBvcmlnaW5hbEdldE1vbnRoID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldE1vbnRoKTtcbnZhciBvcmlnaW5hbEdldERhdGUgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0RGF0ZSk7XG52YXIgb3JpZ2luYWxHZXRVVENGdWxsWWVhciA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENGdWxsWWVhcik7XG52YXIgb3JpZ2luYWxHZXRVVENNb250aCA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNb250aCk7XG52YXIgb3JpZ2luYWxHZXRVVENEYXRlID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ0RhdGUpO1xudmFyIG9yaWdpbmFsR2V0VVRDRGF5ID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ0RheSk7XG52YXIgb3JpZ2luYWxHZXRVVENIb3VycyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENIb3Vycyk7XG52YXIgb3JpZ2luYWxHZXRVVENNaW51dGVzID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ01pbnV0ZXMpO1xudmFyIG9yaWdpbmFsR2V0VVRDU2Vjb25kcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENTZWNvbmRzKTtcbnZhciBvcmlnaW5hbEdldFVUQ01pbGxpc2Vjb25kcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNaWxsaXNlY29uZHMpO1xudmFyIGRheU5hbWUgPSBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddO1xudmFyIG1vbnRoTmFtZSA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXTtcbnZhciBkYXlzSW5Nb250aCA9IGZ1bmN0aW9uIGRheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsR2V0RGF0ZShuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMCkpO1xufTtcblxuZGVmaW5lUHJvcGVydGllcyhEYXRlLnByb3RvdHlwZSwge1xuICAgIGdldEZ1bGxZZWFyOiBmdW5jdGlvbiBnZXRGdWxsWWVhcigpIHtcbiAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgaWYgKHllYXIgPCAwICYmIG9yaWdpbmFsR2V0TW9udGgodGhpcykgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIHllYXIgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH0sXG4gICAgZ2V0TW9udGg6IGZ1bmN0aW9uIGdldE1vbnRoKCkge1xuICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgaXMgbm90IGEgRGF0ZSBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICB2YXIgbW9udGggPSBvcmlnaW5hbEdldE1vbnRoKHRoaXMpO1xuICAgICAgICBpZiAoeWVhciA8IDAgJiYgbW9udGggPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vbnRoO1xuICAgIH0sXG4gICAgZ2V0RGF0ZTogZnVuY3Rpb24gZ2V0RGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRNb250aCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGUgPSBvcmlnaW5hbEdldERhdGUodGhpcyk7XG4gICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICBpZiAobW9udGggPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF5cyA9IGRheXNJbk1vbnRoKDAsIHllYXIgKyAxKTtcbiAgICAgICAgICAgIHJldHVybiAoZGF5cyAtIGRhdGUpICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGdldFVUQ0Z1bGxZZWFyOiBmdW5jdGlvbiBnZXRVVENGdWxsWWVhcigpIHtcbiAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgaWYgKHllYXIgPCAwICYmIG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcykgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIHllYXIgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH0sXG4gICAgZ2V0VVRDTW9udGg6IGZ1bmN0aW9uIGdldFVUQ01vbnRoKCkge1xuICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgaXMgbm90IGEgRGF0ZSBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyKHRoaXMpO1xuICAgICAgICB2YXIgbW9udGggPSBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpO1xuICAgICAgICBpZiAoeWVhciA8IDAgJiYgbW9udGggPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vbnRoO1xuICAgIH0sXG4gICAgZ2V0VVRDRGF0ZTogZnVuY3Rpb24gZ2V0VVRDRGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRVVENNb250aCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGUgPSBvcmlnaW5hbEdldFVUQ0RhdGUodGhpcyk7XG4gICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICBpZiAobW9udGggPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF5cyA9IGRheXNJbk1vbnRoKDAsIHllYXIgKyAxKTtcbiAgICAgICAgICAgIHJldHVybiAoZGF5cyAtIGRhdGUpICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG59LCBoYXNOZWdhdGl2ZU1vbnRoWWVhckJ1Zyk7XG5cbmRlZmluZVByb3BlcnRpZXMoRGF0ZS5wcm90b3R5cGUsIHtcbiAgICB0b1VUQ1N0cmluZzogZnVuY3Rpb24gdG9VVENTdHJpbmcoKSB7XG4gICAgICAgIGlmICghdGhpcyB8fCAhKHRoaXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5ID0gb3JpZ2luYWxHZXRVVENEYXkodGhpcyk7XG4gICAgICAgIHZhciBkYXRlID0gb3JpZ2luYWxHZXRVVENEYXRlKHRoaXMpO1xuICAgICAgICB2YXIgbW9udGggPSBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpO1xuICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG4gICAgICAgIHZhciBob3VyID0gb3JpZ2luYWxHZXRVVENIb3Vycyh0aGlzKTtcbiAgICAgICAgdmFyIG1pbnV0ZSA9IG9yaWdpbmFsR2V0VVRDTWludXRlcyh0aGlzKTtcbiAgICAgICAgdmFyIHNlY29uZCA9IG9yaWdpbmFsR2V0VVRDU2Vjb25kcyh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGRheU5hbWVbZGF5XSArICcsICcgK1xuICAgICAgICAgICAgKGRhdGUgPCAxMCA/ICcwJyArIGRhdGUgOiBkYXRlKSArICcgJyArXG4gICAgICAgICAgICBtb250aE5hbWVbbW9udGhdICsgJyAnICtcbiAgICAgICAgICAgIHllYXIgKyAnICcgK1xuICAgICAgICAgICAgKGhvdXIgPCAxMCA/ICcwJyArIGhvdXIgOiBob3VyKSArICc6JyArXG4gICAgICAgICAgICAobWludXRlIDwgMTAgPyAnMCcgKyBtaW51dGUgOiBtaW51dGUpICsgJzonICtcbiAgICAgICAgICAgIChzZWNvbmQgPCAxMCA/ICcwJyArIHNlY29uZCA6IHNlY29uZCkgKyAnIEdNVCc7XG4gICAgfVxufSwgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgfHwgaGFzVG9VVENTdHJpbmdGb3JtYXRCdWcpO1xuXG4vLyBPcGVyYSAxMiBoYXMgYCxgXG5kZWZpbmVQcm9wZXJ0aWVzKERhdGUucHJvdG90eXBlLCB7XG4gICAgdG9EYXRlU3RyaW5nOiBmdW5jdGlvbiB0b0RhdGVTdHJpbmcoKSB7XG4gICAgICAgIGlmICghdGhpcyB8fCAhKHRoaXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5ID0gdGhpcy5nZXREYXkoKTtcbiAgICAgICAgdmFyIGRhdGUgPSB0aGlzLmdldERhdGUoKTtcbiAgICAgICAgdmFyIG1vbnRoID0gdGhpcy5nZXRNb250aCgpO1xuICAgICAgICB2YXIgeWVhciA9IHRoaXMuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgcmV0dXJuIGRheU5hbWVbZGF5XSArICcgJyArXG4gICAgICAgICAgICBtb250aE5hbWVbbW9udGhdICsgJyAnICtcbiAgICAgICAgICAgIChkYXRlIDwgMTAgPyAnMCcgKyBkYXRlIDogZGF0ZSkgKyAnICcgK1xuICAgICAgICAgICAgeWVhcjtcbiAgICB9XG59LCBoYXNOZWdhdGl2ZU1vbnRoWWVhckJ1ZyB8fCBoYXNUb0RhdGVTdHJpbmdGb3JtYXRCdWcpO1xuXG4vLyBjYW4ndCB1c2UgZGVmaW5lUHJvcGVydGllcyBoZXJlIGJlY2F1c2Ugb2YgdG9TdHJpbmcgZW51bWVyYXRpb24gaXNzdWUgaW4gSUUgPD0gOFxuaWYgKGhhc05lZ2F0aXZlTW9udGhZZWFyQnVnIHx8IGhhc1RvU3RyaW5nRm9ybWF0QnVnKSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXkgPSB0aGlzLmdldERheSgpO1xuICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xuICAgICAgICB2YXIgbW9udGggPSB0aGlzLmdldE1vbnRoKCk7XG4gICAgICAgIHZhciB5ZWFyID0gdGhpcy5nZXRGdWxsWWVhcigpO1xuICAgICAgICB2YXIgaG91ciA9IHRoaXMuZ2V0SG91cnMoKTtcbiAgICAgICAgdmFyIG1pbnV0ZSA9IHRoaXMuZ2V0TWludXRlcygpO1xuICAgICAgICB2YXIgc2Vjb25kID0gdGhpcy5nZXRTZWNvbmRzKCk7XG4gICAgICAgIHZhciB0aW1lem9uZU9mZnNldCA9IHRoaXMuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgdmFyIGhvdXJzT2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLmFicyh0aW1lem9uZU9mZnNldCkgLyA2MCk7XG4gICAgICAgIHZhciBtaW51dGVzT2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLmFicyh0aW1lem9uZU9mZnNldCkgJSA2MCk7XG4gICAgICAgIHJldHVybiBkYXlOYW1lW2RheV0gKyAnICcgK1xuICAgICAgICAgICAgbW9udGhOYW1lW21vbnRoXSArICcgJyArXG4gICAgICAgICAgICAoZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGUpICsgJyAnICtcbiAgICAgICAgICAgIHllYXIgKyAnICcgK1xuICAgICAgICAgICAgKGhvdXIgPCAxMCA/ICcwJyArIGhvdXIgOiBob3VyKSArICc6JyArXG4gICAgICAgICAgICAobWludXRlIDwgMTAgPyAnMCcgKyBtaW51dGUgOiBtaW51dGUpICsgJzonICtcbiAgICAgICAgICAgIChzZWNvbmQgPCAxMCA/ICcwJyArIHNlY29uZCA6IHNlY29uZCkgKyAnIEdNVCcgK1xuICAgICAgICAgICAgKHRpbWV6b25lT2Zmc2V0ID4gMCA/ICctJyA6ICcrJykgK1xuICAgICAgICAgICAgKGhvdXJzT2Zmc2V0IDwgMTAgPyAnMCcgKyBob3Vyc09mZnNldCA6IGhvdXJzT2Zmc2V0KSArXG4gICAgICAgICAgICAobWludXRlc09mZnNldCA8IDEwID8gJzAnICsgbWludXRlc09mZnNldCA6IG1pbnV0ZXNPZmZzZXQpO1xuICAgIH07XG4gICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRlLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8vIEVTNSAxNS45LjUuNDNcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjkuNS40M1xuLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgU3RyaW5nIHZhbHVlIHJlcHJlc2VudCB0aGUgaW5zdGFuY2UgaW4gdGltZVxuLy8gcmVwcmVzZW50ZWQgYnkgdGhpcyBEYXRlIG9iamVjdC4gVGhlIGZvcm1hdCBvZiB0aGUgU3RyaW5nIGlzIHRoZSBEYXRlIFRpbWVcbi8vIHN0cmluZyBmb3JtYXQgZGVmaW5lZCBpbiAxNS45LjEuMTUuIEFsbCBmaWVsZHMgYXJlIHByZXNlbnQgaW4gdGhlIFN0cmluZy5cbi8vIFRoZSB0aW1lIHpvbmUgaXMgYWx3YXlzIFVUQywgZGVub3RlZCBieSB0aGUgc3VmZml4IFouIElmIHRoZSB0aW1lIHZhbHVlIG9mXG4vLyB0aGlzIG9iamVjdCBpcyBub3QgYSBmaW5pdGUgTnVtYmVyIGEgUmFuZ2VFcnJvciBleGNlcHRpb24gaXMgdGhyb3duLlxudmFyIG5lZ2F0aXZlRGF0ZSA9IC02MjE5ODc1NTIwMDAwMDtcbnZhciBuZWdhdGl2ZVllYXJTdHJpbmcgPSAnLTAwMDAwMSc7XG52YXIgaGFzTmVnYXRpdmVEYXRlQnVnID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgbmV3IERhdGUobmVnYXRpdmVEYXRlKS50b0lTT1N0cmluZygpLmluZGV4T2YobmVnYXRpdmVZZWFyU3RyaW5nKSA9PT0gLTE7XG52YXIgaGFzU2FmYXJpNTFEYXRlQnVnID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgbmV3IERhdGUoLTEpLnRvSVNPU3RyaW5nKCkgIT09ICcxOTY5LTEyLTMxVDIzOjU5OjU5Ljk5OVonO1xuXG52YXIgZ2V0VGltZSA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRUaW1lKTtcblxuZGVmaW5lUHJvcGVydGllcyhEYXRlLnByb3RvdHlwZSwge1xuICAgIHRvSVNPU3RyaW5nOiBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgICAgICAgaWYgKCFpc0Zpbml0ZSh0aGlzKSB8fCAhaXNGaW5pdGUoZ2V0VGltZSh0aGlzKSkpIHtcbiAgICAgICAgICAgIC8vIEFkb3BlIFBob3Rvc2hvcCByZXF1aXJlcyB0aGUgc2Vjb25kIGNoZWNrLlxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0RhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nIGNhbGxlZCBvbiBub24tZmluaXRlIHZhbHVlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyKHRoaXMpO1xuXG4gICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzExMVxuICAgICAgICB5ZWFyICs9IE1hdGguZmxvb3IobW9udGggLyAxMik7XG4gICAgICAgIG1vbnRoID0gKG1vbnRoICUgMTIgKyAxMikgJSAxMjtcblxuICAgICAgICAvLyB0aGUgZGF0ZSB0aW1lIHN0cmluZyBmb3JtYXQgaXMgc3BlY2lmaWVkIGluIDE1LjkuMS4xNS5cbiAgICAgICAgdmFyIHJlc3VsdCA9IFttb250aCArIDEsIG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKSwgb3JpZ2luYWxHZXRVVENIb3Vycyh0aGlzKSwgb3JpZ2luYWxHZXRVVENNaW51dGVzKHRoaXMpLCBvcmlnaW5hbEdldFVUQ1NlY29uZHModGhpcyldO1xuICAgICAgICB5ZWFyID0gKFxuICAgICAgICAgICAgKHllYXIgPCAwID8gJy0nIDogKHllYXIgPiA5OTk5ID8gJysnIDogJycpKSArXG4gICAgICAgICAgICBzdHJTbGljZSgnMDAwMDAnICsgTWF0aC5hYnMoeWVhciksICgwIDw9IHllYXIgJiYgeWVhciA8PSA5OTk5KSA/IC00IDogLTYpXG4gICAgICAgICk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAvLyBwYWQgbW9udGhzLCBkYXlzLCBob3VycywgbWludXRlcywgYW5kIHNlY29uZHMgdG8gaGF2ZSB0d28gZGlnaXRzLlxuICAgICAgICAgIHJlc3VsdFtpXSA9IHN0clNsaWNlKCcwMCcgKyByZXN1bHRbaV0sIC0yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwYWQgbWlsbGlzZWNvbmRzIHRvIGhhdmUgdGhyZWUgZGlnaXRzLlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgeWVhciArICctJyArIGFycmF5U2xpY2UocmVzdWx0LCAwLCAyKS5qb2luKCctJykgK1xuICAgICAgICAgICAgJ1QnICsgYXJyYXlTbGljZShyZXN1bHQsIDIpLmpvaW4oJzonKSArICcuJyArXG4gICAgICAgICAgICBzdHJTbGljZSgnMDAwJyArIG9yaWdpbmFsR2V0VVRDTWlsbGlzZWNvbmRzKHRoaXMpLCAtMykgKyAnWidcbiAgICAgICAgKTtcbiAgICB9XG59LCBoYXNOZWdhdGl2ZURhdGVCdWcgfHwgaGFzU2FmYXJpNTFEYXRlQnVnKTtcblxuLy8gRVM1IDE1LjkuNS40NFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS41LjQ0XG4vLyBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIGEgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgRGF0ZSBvYmplY3QgZm9yIHVzZSBieVxuLy8gSlNPTi5zdHJpbmdpZnkgKDE1LjEyLjMpLlxudmFyIGRhdGVUb0pTT05Jc1N1cHBvcnRlZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIERhdGUucHJvdG90eXBlLnRvSlNPTiAmJlxuICAgICAgICAgICAgbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgbmV3IERhdGUobmVnYXRpdmVEYXRlKS50b0pTT04oKS5pbmRleE9mKG5lZ2F0aXZlWWVhclN0cmluZykgIT09IC0xICYmXG4gICAgICAgICAgICBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IC8vIGdlbmVyaWNcbiAgICAgICAgICAgICAgICB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufSgpKTtcbmlmICghZGF0ZVRvSlNPTklzU3VwcG9ydGVkKSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgICAgICAvLyBXaGVuIHRoZSB0b0pTT04gbWV0aG9kIGlzIGNhbGxlZCB3aXRoIGFyZ3VtZW50IGtleSwgdGhlIGZvbGxvd2luZ1xuICAgICAgICAvLyBzdGVwcyBhcmUgdGFrZW46XG5cbiAgICAgICAgLy8gMS4gIExldCBPIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyBUb09iamVjdCwgZ2l2aW5nIGl0IHRoZSB0aGlzXG4gICAgICAgIC8vIHZhbHVlIGFzIGl0cyBhcmd1bWVudC5cbiAgICAgICAgLy8gMi4gTGV0IHR2IGJlIEVTLlRvUHJpbWl0aXZlKE8sIGhpbnQgTnVtYmVyKS5cbiAgICAgICAgdmFyIE8gPSAkT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgdHYgPSBFUy5Ub1ByaW1pdGl2ZShPKTtcbiAgICAgICAgLy8gMy4gSWYgdHYgaXMgYSBOdW1iZXIgYW5kIGlzIG5vdCBmaW5pdGUsIHJldHVybiBudWxsLlxuICAgICAgICBpZiAodHlwZW9mIHR2ID09PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUodHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyA0LiBMZXQgdG9JU08gYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0dldF1dIGludGVybmFsIG1ldGhvZCBvZlxuICAgICAgICAvLyBPIHdpdGggYXJndW1lbnQgXCJ0b0lTT1N0cmluZ1wiLlxuICAgICAgICB2YXIgdG9JU08gPSBPLnRvSVNPU3RyaW5nO1xuICAgICAgICAvLyA1LiBJZiBJc0NhbGxhYmxlKHRvSVNPKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICBpZiAoIWlzQ2FsbGFibGUodG9JU08pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b0lTT1N0cmluZyBwcm9wZXJ0eSBpcyBub3QgY2FsbGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyA2LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2Qgb2ZcbiAgICAgICAgLy8gIHRvSVNPIHdpdGggTyBhcyB0aGUgdGhpcyB2YWx1ZSBhbmQgYW4gZW1wdHkgYXJndW1lbnQgbGlzdC5cbiAgICAgICAgcmV0dXJuIHRvSVNPLmNhbGwoTyk7XG5cbiAgICAgICAgLy8gTk9URSAxIFRoZSBhcmd1bWVudCBpcyBpZ25vcmVkLlxuXG4gICAgICAgIC8vIE5PVEUgMiBUaGUgdG9KU09OIGZ1bmN0aW9uIGlzIGludGVudGlvbmFsbHkgZ2VuZXJpYzsgaXQgZG9lcyBub3RcbiAgICAgICAgLy8gcmVxdWlyZSB0aGF0IGl0cyB0aGlzIHZhbHVlIGJlIGEgRGF0ZSBvYmplY3QuIFRoZXJlZm9yZSwgaXQgY2FuIGJlXG4gICAgICAgIC8vIHRyYW5zZmVycmVkIHRvIG90aGVyIGtpbmRzIG9mIG9iamVjdHMgZm9yIHVzZSBhcyBhIG1ldGhvZC4gSG93ZXZlcixcbiAgICAgICAgLy8gaXQgZG9lcyByZXF1aXJlIHRoYXQgYW55IHN1Y2ggb2JqZWN0IGhhdmUgYSB0b0lTT1N0cmluZyBtZXRob2QuIEFuXG4gICAgICAgIC8vIG9iamVjdCBpcyBmcmVlIHRvIHVzZSB0aGUgYXJndW1lbnQga2V5IHRvIGZpbHRlciBpdHNcbiAgICAgICAgLy8gc3RyaW5naWZpY2F0aW9uLlxuICAgIH07XG59XG5cbi8vIEVTNSAxNS45LjQuMlxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS40LjJcbi8vIGJhc2VkIG9uIHdvcmsgc2hhcmVkIGJ5IERhbmllbCBGcmllc2VuIChkYW50bWFuKVxuLy8gaHR0cDovL2dpc3QuZ2l0aHViLmNvbS8zMDMyNDlcbnZhciBzdXBwb3J0c0V4dGVuZGVkWWVhcnMgPSBEYXRlLnBhcnNlKCcrMDMzNjU4LTA5LTI3VDAxOjQ2OjQwLjAwMFonKSA9PT0gMWUxNTtcbnZhciBhY2NlcHRzSW52YWxpZERhdGVzID0gIWlzTmFOKERhdGUucGFyc2UoJzIwMTItMDQtMDRUMjQ6MDA6MDAuNTAwWicpKSB8fCAhaXNOYU4oRGF0ZS5wYXJzZSgnMjAxMi0xMS0zMVQyMzo1OTo1OS4wMDBaJykpIHx8ICFpc05hTihEYXRlLnBhcnNlKCcyMDEyLTEyLTMxVDIzOjU5OjYwLjAwMFonKSk7XG52YXIgZG9lc05vdFBhcnNlWTJLTmV3WWVhciA9IGlzTmFOKERhdGUucGFyc2UoJzIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWicpKTtcbmlmIChkb2VzTm90UGFyc2VZMktOZXdZZWFyIHx8IGFjY2VwdHNJbnZhbGlkRGF0ZXMgfHwgIXN1cHBvcnRzRXh0ZW5kZWRZZWFycykge1xuICAgIC8vIFhYWCBnbG9iYWwgYXNzaWdubWVudCB3b24ndCB3b3JrIGluIGVtYmVkZGluZ3MgdGhhdCB1c2VcbiAgICAvLyBhbiBhbHRlcm5hdGUgb2JqZWN0IGZvciB0aGUgY29udGV4dC5cbiAgICAvKiBnbG9iYWwgRGF0ZTogdHJ1ZSAqL1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4gICAgdmFyIG1heFNhZmVVbnNpZ25lZDMyQml0ID0gTWF0aC5wb3coMiwgMzEpIC0gMTtcbiAgICB2YXIgaGFzU2FmYXJpU2lnbmVkSW50QnVnID0gaXNBY3R1YWxOYU4obmV3IERhdGUoMTk3MCwgMCwgMSwgMCwgMCwgMCwgbWF4U2FmZVVuc2lnbmVkMzJCaXQgKyAxKS5nZXRUaW1lKCkpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWltcGxpY2l0LWdsb2JhbHMgKi9cbiAgICBEYXRlID0gKGZ1bmN0aW9uIChOYXRpdmVEYXRlKSB7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1pbXBsaWNpdC1nbG9iYWxzICovXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZiAqL1xuICAgICAgICAvLyBEYXRlLmxlbmd0aCA9PT0gN1xuICAgICAgICB2YXIgRGF0ZVNoaW0gPSBmdW5jdGlvbiBEYXRlKFksIE0sIEQsIGgsIG0sIHMsIG1zKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBkYXRlO1xuICAgICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBOYXRpdmVEYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlY29uZHMgPSBzO1xuICAgICAgICAgICAgICAgIHZhciBtaWxsaXMgPSBtcztcbiAgICAgICAgICAgICAgICBpZiAoaGFzU2FmYXJpU2lnbmVkSW50QnVnICYmIGxlbmd0aCA+PSA3ICYmIG1zID4gbWF4U2FmZVVuc2lnbmVkMzJCaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd29yayBhcm91bmQgYSBTYWZhcmkgOC85IGJ1ZyB3aGVyZSBpdCB0cmVhdHMgdGhlIHNlY29uZHMgYXMgc2lnbmVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBtc1RvU2hpZnQgPSBNYXRoLmZsb29yKG1zIC8gbWF4U2FmZVVuc2lnbmVkMzJCaXQpICogbWF4U2FmZVVuc2lnbmVkMzJCaXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzVG9TaGlmdCA9IE1hdGguZmxvb3IobXNUb1NoaWZ0IC8gMWUzKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyArPSBzVG9TaGlmdDtcbiAgICAgICAgICAgICAgICAgICAgbWlsbGlzIC09IHNUb1NoaWZ0ICogMWUzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRlID0gbGVuZ3RoID09PSAxICYmICRTdHJpbmcoWSkgPT09IFkgPyAvLyBpc1N0cmluZyhZKVxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBleHBsaWNpdGx5IHBhc3MgaXQgdGhyb3VnaCBwYXJzZTpcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5hdGl2ZURhdGUoRGF0ZVNoaW0ucGFyc2UoWSkpIDpcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBtYWtlIGNhbGxzIGRlcGVuZGluZyBvbiBhcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBsZW5ndGggaGVyZVxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPj0gNyA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQsIGgsIG0sIHNlY29uZHMsIG1pbGxpcykgOlxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPj0gNiA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQsIGgsIG0sIHNlY29uZHMpIDpcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID49IDUgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBELCBoLCBtKSA6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA+PSA0ID8gbmV3IE5hdGl2ZURhdGUoWSwgTSwgRCwgaCkgOlxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPj0gMyA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQpIDpcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID49IDIgPyBuZXcgTmF0aXZlRGF0ZShZLCBNKSA6XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aCA+PSAxID8gbmV3IE5hdGl2ZURhdGUoWSBpbnN0YW5jZW9mIE5hdGl2ZURhdGUgPyArWSA6IFkpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTmF0aXZlRGF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRlID0gTmF0aXZlRGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1ByaW1pdGl2ZShkYXRlKSkge1xuICAgICAgICAgICAgICAvLyBQcmV2ZW50IG1peHVwcyB3aXRoIHVuZml4ZWQgRGF0ZSBvYmplY3RcbiAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllcyhkYXRlLCB7IGNvbnN0cnVjdG9yOiBEYXRlU2hpbSB9LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIDE1LjkuMS4xNSBEYXRlIFRpbWUgU3RyaW5nIEZvcm1hdC5cbiAgICAgICAgdmFyIGlzb0RhdGVFeHByZXNzaW9uID0gbmV3IFJlZ0V4cCgnXicgK1xuICAgICAgICAgICAgJyhcXFxcZHs0fXxbKy1dXFxcXGR7Nn0pJyArIC8vIGZvdXItZGlnaXQgeWVhciBjYXB0dXJlIG9yIHNpZ24gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA2LWRpZ2l0IGV4dGVuZGVkIHllYXJcbiAgICAgICAgICAgICcoPzotKFxcXFxkezJ9KScgKyAvLyBvcHRpb25hbCBtb250aCBjYXB0dXJlXG4gICAgICAgICAgICAnKD86LShcXFxcZHsyfSknICsgLy8gb3B0aW9uYWwgZGF5IGNhcHR1cmVcbiAgICAgICAgICAgICcoPzonICsgLy8gY2FwdHVyZSBob3VyczptaW51dGVzOnNlY29uZHMubWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgJ1QoXFxcXGR7Mn0pJyArIC8vIGhvdXJzIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAnOihcXFxcZHsyfSknICsgLy8gbWludXRlcyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgJyg/OicgKyAvLyBvcHRpb25hbCA6c2Vjb25kcy5taWxsaXNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgJzooXFxcXGR7Mn0pJyArIC8vIHNlY29uZHMgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAnKD86KFxcXFwuXFxcXGR7MSx9KSk/JyArIC8vIG1pbGxpc2Vjb25kcyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgJyk/JyArXG4gICAgICAgICAgICAnKCcgKyAvLyBjYXB0dXJlIFVUQyBvZmZzZXQgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgJ1p8JyArIC8vIFVUQyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgJyg/OicgKyAvLyBvZmZzZXQgc3BlY2lmaWVyICsvLWhvdXJzOm1pbnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgJyhbLStdKScgKyAvLyBzaWduIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgJyhcXFxcZHsyfSknICsgLy8gaG91cnMgb2Zmc2V0IGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgJzooXFxcXGR7Mn0pJyArIC8vIG1pbnV0ZXMgb2Zmc2V0IGNhcHR1cmVcbiAgICAgICAgICAgICAgICAnKScgK1xuICAgICAgICAgICAgJyk/KT8pPyk/JyArXG4gICAgICAgICckJyk7XG5cbiAgICAgICAgdmFyIG1vbnRocyA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNCwgMzY1XTtcblxuICAgICAgICB2YXIgZGF5RnJvbU1vbnRoID0gZnVuY3Rpb24gZGF5RnJvbU1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgICAgICB2YXIgdCA9IG1vbnRoID4gMSA/IDEgOiAwO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBtb250aHNbbW9udGhdICtcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKCh5ZWFyIC0gMTk2OSArIHQpIC8gNCkgLVxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoKHllYXIgLSAxOTAxICsgdCkgLyAxMDApICtcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKCh5ZWFyIC0gMTYwMSArIHQpIC8gNDAwKSArXG4gICAgICAgICAgICAgICAgMzY1ICogKHllYXIgLSAxOTcwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdG9VVEMgPSBmdW5jdGlvbiB0b1VUQyh0KSB7XG4gICAgICAgICAgICB2YXIgcyA9IDA7XG4gICAgICAgICAgICB2YXIgbXMgPSB0O1xuICAgICAgICAgICAgaWYgKGhhc1NhZmFyaVNpZ25lZEludEJ1ZyAmJiBtcyA+IG1heFNhZmVVbnNpZ25lZDMyQml0KSB7XG4gICAgICAgICAgICAgICAgLy8gd29yayBhcm91bmQgYSBTYWZhcmkgOC85IGJ1ZyB3aGVyZSBpdCB0cmVhdHMgdGhlIHNlY29uZHMgYXMgc2lnbmVkXG4gICAgICAgICAgICAgICAgdmFyIG1zVG9TaGlmdCA9IE1hdGguZmxvb3IobXMgLyBtYXhTYWZlVW5zaWduZWQzMkJpdCkgKiBtYXhTYWZlVW5zaWduZWQzMkJpdDtcbiAgICAgICAgICAgICAgICB2YXIgc1RvU2hpZnQgPSBNYXRoLmZsb29yKG1zVG9TaGlmdCAvIDFlMyk7XG4gICAgICAgICAgICAgICAgcyArPSBzVG9TaGlmdDtcbiAgICAgICAgICAgICAgICBtcyAtPSBzVG9TaGlmdCAqIDFlMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkTnVtYmVyKG5ldyBOYXRpdmVEYXRlKDE5NzAsIDAsIDEsIDAsIDAsIHMsIG1zKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQ29weSBhbnkgY3VzdG9tIG1ldGhvZHMgYSAzcmQgcGFydHkgbGlicmFyeSBtYXkgaGF2ZSBhZGRlZFxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gTmF0aXZlRGF0ZSkge1xuICAgICAgICAgICAgaWYgKG93bnMoTmF0aXZlRGF0ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIERhdGVTaGltW2tleV0gPSBOYXRpdmVEYXRlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb3B5IFwibmF0aXZlXCIgbWV0aG9kcyBleHBsaWNpdGx5OyB0aGV5IG1heSBiZSBub24tZW51bWVyYWJsZVxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGVTaGltLCB7XG4gICAgICAgICAgICBub3c6IE5hdGl2ZURhdGUubm93LFxuICAgICAgICAgICAgVVRDOiBOYXRpdmVEYXRlLlVUQ1xuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgRGF0ZVNoaW0ucHJvdG90eXBlID0gTmF0aXZlRGF0ZS5wcm90b3R5cGU7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZVNoaW0ucHJvdG90eXBlLCB7XG4gICAgICAgICAgICBjb25zdHJ1Y3RvcjogRGF0ZVNoaW1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgLy8gVXBncmFkZSBEYXRlLnBhcnNlIHRvIGhhbmRsZSBzaW1wbGlmaWVkIElTTyA4NjAxIHN0cmluZ3NcbiAgICAgICAgdmFyIHBhcnNlU2hpbSA9IGZ1bmN0aW9uIHBhcnNlKHN0cmluZykge1xuICAgICAgICAgICAgdmFyIG1hdGNoID0gaXNvRGF0ZUV4cHJlc3Npb24uZXhlYyhzdHJpbmcpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFyc2UgbW9udGhzLCBkYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgIC8vIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgLy8gcGFyc2UgdGhlIFVUQyBvZmZzZXQgY29tcG9uZW50XG4gICAgICAgICAgICAgICAgdmFyIHllYXIgPSAkTnVtYmVyKG1hdGNoWzFdKSxcbiAgICAgICAgICAgICAgICAgICAgbW9udGggPSAkTnVtYmVyKG1hdGNoWzJdIHx8IDEpIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgZGF5ID0gJE51bWJlcihtYXRjaFszXSB8fCAxKSAtIDEsXG4gICAgICAgICAgICAgICAgICAgIGhvdXIgPSAkTnVtYmVyKG1hdGNoWzRdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICBtaW51dGUgPSAkTnVtYmVyKG1hdGNoWzVdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICBzZWNvbmQgPSAkTnVtYmVyKG1hdGNoWzZdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZCA9IE1hdGguZmxvb3IoJE51bWJlcihtYXRjaFs3XSB8fCAwKSAqIDEwMDApLFxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRpbWUgem9uZSBpcyBtaXNzZWQsIGxvY2FsIG9mZnNldCBzaG91bGQgYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICAvLyAoRVMgNS4xIGJ1ZylcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vYnVncy5lY21hc2NyaXB0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTEyXG4gICAgICAgICAgICAgICAgICAgIGlzTG9jYWxUaW1lID0gQm9vbGVhbihtYXRjaFs0XSAmJiAhbWF0Y2hbOF0pLFxuICAgICAgICAgICAgICAgICAgICBzaWduT2Zmc2V0ID0gbWF0Y2hbOV0gPT09ICctJyA/IDEgOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgaG91ck9mZnNldCA9ICROdW1iZXIobWF0Y2hbMTBdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICBtaW51dGVPZmZzZXQgPSAkTnVtYmVyKG1hdGNoWzExXSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0O1xuICAgICAgICAgICAgICAgIHZhciBoYXNNaW51dGVzT3JTZWNvbmRzT3JNaWxsaXNlY29uZHMgPSBtaW51dGUgPiAwIHx8IHNlY29uZCA+IDAgfHwgbWlsbGlzZWNvbmQgPiAwO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgaG91ciA8IChoYXNNaW51dGVzT3JTZWNvbmRzT3JNaWxsaXNlY29uZHMgPyAyNCA6IDI1KSAmJlxuICAgICAgICAgICAgICAgICAgICBtaW51dGUgPCA2MCAmJiBzZWNvbmQgPCA2MCAmJiBtaWxsaXNlY29uZCA8IDEwMDAgJiZcbiAgICAgICAgICAgICAgICAgICAgbW9udGggPiAtMSAmJiBtb250aCA8IDEyICYmIGhvdXJPZmZzZXQgPCAyNCAmJlxuICAgICAgICAgICAgICAgICAgICBtaW51dGVPZmZzZXQgPCA2MCAmJiAvLyBkZXRlY3QgaW52YWxpZCBvZmZzZXRzXG4gICAgICAgICAgICAgICAgICAgIGRheSA+IC0xICYmXG4gICAgICAgICAgICAgICAgICAgIGRheSA8IChkYXlGcm9tTW9udGgoeWVhciwgbW9udGggKyAxKSAtIGRheUZyb21Nb250aCh5ZWFyLCBtb250aCkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgIChkYXlGcm9tTW9udGgoeWVhciwgbW9udGgpICsgZGF5KSAqIDI0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaG91ck9mZnNldCAqIHNpZ25PZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgKSAqIDYwO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAoXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVzdWx0ICsgbWludXRlICsgbWludXRlT2Zmc2V0ICogc2lnbk9mZnNldCkgKiA2MCArXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgKSAqIDEwMDAgKyBtaWxsaXNlY29uZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0b1VUQyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgtOC42NGUxNSA8PSByZXN1bHQgJiYgcmVzdWx0IDw9IDguNjRlMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBOYXRpdmVEYXRlLnBhcnNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZVNoaW0sIHsgcGFyc2U6IHBhcnNlU2hpbSB9KTtcblxuICAgICAgICByZXR1cm4gRGF0ZVNoaW07XG4gICAgfShEYXRlKSk7XG4gICAgLyogZ2xvYmFsIERhdGU6IGZhbHNlICovXG59XG5cbi8vIEVTNSAxNS45LjQuNFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS40LjRcbmlmICghRGF0ZS5ub3cpIHtcbiAgICBEYXRlLm5vdyA9IGZ1bmN0aW9uIG5vdygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIH07XG59XG5cbi8vXG4vLyBOdW1iZXJcbi8vID09PT09PVxuLy9cblxuLy8gRVM1LjEgMTUuNy40LjVcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjcuNC41XG52YXIgaGFzVG9GaXhlZEJ1Z3MgPSBOdW1iZXJQcm90b3R5cGUudG9GaXhlZCAmJiAoXG4gICgwLjAwMDA4KS50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gICgwLjkpLnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAoMS4yNTUpLnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAoMTAwMDAwMDAwMDAwMDAwMDEyOCkudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pO1xuXG52YXIgdG9GaXhlZEhlbHBlcnMgPSB7XG4gIGJhc2U6IDFlNyxcbiAgc2l6ZTogNixcbiAgZGF0YTogWzAsIDAsIDAsIDAsIDAsIDBdLFxuICBtdWx0aXBseTogZnVuY3Rpb24gbXVsdGlwbHkobiwgYykge1xuICAgICAgdmFyIGkgPSAtMTtcbiAgICAgIHZhciBjMiA9IGM7XG4gICAgICB3aGlsZSAoKytpIDwgdG9GaXhlZEhlbHBlcnMuc2l6ZSkge1xuICAgICAgICAgIGMyICs9IG4gKiB0b0ZpeGVkSGVscGVycy5kYXRhW2ldO1xuICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRhdGFbaV0gPSBjMiAlIHRvRml4ZWRIZWxwZXJzLmJhc2U7XG4gICAgICAgICAgYzIgPSBNYXRoLmZsb29yKGMyIC8gdG9GaXhlZEhlbHBlcnMuYmFzZSk7XG4gICAgICB9XG4gIH0sXG4gIGRpdmlkZTogZnVuY3Rpb24gZGl2aWRlKG4pIHtcbiAgICAgIHZhciBpID0gdG9GaXhlZEhlbHBlcnMuc2l6ZTtcbiAgICAgIHZhciBjID0gMDtcbiAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgIGMgKz0gdG9GaXhlZEhlbHBlcnMuZGF0YVtpXTtcbiAgICAgICAgICB0b0ZpeGVkSGVscGVycy5kYXRhW2ldID0gTWF0aC5mbG9vcihjIC8gbik7XG4gICAgICAgICAgYyA9IChjICUgbikgKiB0b0ZpeGVkSGVscGVycy5iYXNlO1xuICAgICAgfVxuICB9LFxuICBudW1Ub1N0cmluZzogZnVuY3Rpb24gbnVtVG9TdHJpbmcoKSB7XG4gICAgICB2YXIgaSA9IHRvRml4ZWRIZWxwZXJzLnNpemU7XG4gICAgICB2YXIgcyA9ICcnO1xuICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgdG9GaXhlZEhlbHBlcnMuZGF0YVtpXSAhPT0gMCkge1xuICAgICAgICAgICAgICB2YXIgdCA9ICRTdHJpbmcodG9GaXhlZEhlbHBlcnMuZGF0YVtpXSk7XG4gICAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgcyA9IHQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzICs9IHN0clNsaWNlKCcwMDAwMDAwJywgMCwgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcztcbiAgfSxcbiAgcG93OiBmdW5jdGlvbiBwb3coeCwgbiwgYWNjKSB7XG4gICAgICByZXR1cm4gKG4gPT09IDAgPyBhY2MgOiAobiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKSkpO1xuICB9LFxuICBsb2c6IGZ1bmN0aW9uIGxvZyh4KSB7XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgeDIgPSB4O1xuICAgICAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICAgICAgICBuICs9IDEyO1xuICAgICAgICAgIHgyIC89IDQwOTY7XG4gICAgICB9XG4gICAgICB3aGlsZSAoeDIgPj0gMikge1xuICAgICAgICAgIG4gKz0gMTtcbiAgICAgICAgICB4MiAvPSAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG47XG4gIH1cbn07XG5cbnZhciB0b0ZpeGVkU2hpbSA9IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgZiwgeCwgcywgbSwgZSwgeiwgaiwgaztcblxuICAgIC8vIFRlc3QgZm9yIE5hTiBhbmQgcm91bmQgZnJhY3Rpb25EaWdpdHMgZG93blxuICAgIGYgPSAkTnVtYmVyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICBmID0gaXNBY3R1YWxOYU4oZikgPyAwIDogTWF0aC5mbG9vcihmKTtcblxuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ051bWJlci50b0ZpeGVkIGNhbGxlZCB3aXRoIGludmFsaWQgbnVtYmVyIG9mIGRlY2ltYWxzJyk7XG4gICAgfVxuXG4gICAgeCA9ICROdW1iZXIodGhpcyk7XG5cbiAgICBpZiAoaXNBY3R1YWxOYU4oeCkpIHtcbiAgICAgICAgcmV0dXJuICdOYU4nO1xuICAgIH1cblxuICAgIC8vIElmIGl0IGlzIHRvbyBiaWcgb3Igc21hbGwsIHJldHVybiB0aGUgc3RyaW5nIHZhbHVlIG9mIHRoZSBudW1iZXJcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHtcbiAgICAgICAgcmV0dXJuICRTdHJpbmcoeCk7XG4gICAgfVxuXG4gICAgcyA9ICcnO1xuXG4gICAgaWYgKHggPCAwKSB7XG4gICAgICAgIHMgPSAnLSc7XG4gICAgICAgIHggPSAteDtcbiAgICB9XG5cbiAgICBtID0gJzAnO1xuXG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgICAvLyAxZS0yMSA8IHggPCAxZTIxXG4gICAgICAgIC8vIC03MCA8IGxvZzIoeCkgPCA3MFxuICAgICAgICBlID0gdG9GaXhlZEhlbHBlcnMubG9nKHggKiB0b0ZpeGVkSGVscGVycy5wb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgICB6ID0gKGUgPCAwID8geCAqIHRvRml4ZWRIZWxwZXJzLnBvdygyLCAtZSwgMSkgOiB4IC8gdG9GaXhlZEhlbHBlcnMucG93KDIsIGUsIDEpKTtcbiAgICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwOyAvLyBNYXRoLnBvdygyLCA1Mik7XG4gICAgICAgIGUgPSA1MiAtIGU7XG5cbiAgICAgICAgLy8gLTE4IDwgZSA8IDEyMlxuICAgICAgICAvLyB4ID0geiAvIDIgXiBlXG4gICAgICAgIGlmIChlID4gMCkge1xuICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMCwgeik7XG4gICAgICAgICAgICBqID0gZjtcblxuICAgICAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgICAgICAgaiAtPSA3O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSh0b0ZpeGVkSGVscGVycy5wb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgICAgIGogPSBlIC0gMTtcblxuICAgICAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5kaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMuZGl2aWRlKDEgPDwgaik7XG4gICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSgxLCAxKTtcbiAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRpdmlkZSgyKTtcbiAgICAgICAgICAgIG0gPSB0b0ZpeGVkSGVscGVycy5udW1Ub1N0cmluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMCwgeik7XG4gICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSgxIDw8ICgtZSksIDApO1xuICAgICAgICAgICAgbSA9IHRvRml4ZWRIZWxwZXJzLm51bVRvU3RyaW5nKCkgKyBzdHJTbGljZSgnMC4wMDAwMDAwMDAwMDAwMDAwMDAwMCcsIDIsIDIgKyBmKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmID4gMCkge1xuICAgICAgICBrID0gbS5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGsgPD0gZikge1xuICAgICAgICAgICAgbSA9IHMgKyBzdHJTbGljZSgnMC4wMDAwMDAwMDAwMDAwMDAwMDAwJywgMCwgZiAtIGsgKyAyKSArIG07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtID0gcyArIHN0clNsaWNlKG0sIDAsIGsgLSBmKSArICcuJyArIHN0clNsaWNlKG0sIGsgLSBmKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIG0gPSBzICsgbTtcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn07XG5kZWZpbmVQcm9wZXJ0aWVzKE51bWJlclByb3RvdHlwZSwgeyB0b0ZpeGVkOiB0b0ZpeGVkU2hpbSB9LCBoYXNUb0ZpeGVkQnVncyk7XG5cbnZhciBoYXNUb1ByZWNpc2lvblVuZGVmaW5lZEJ1ZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIDEuMC50b1ByZWNpc2lvbih1bmRlZmluZWQpID09PSAnMSc7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59KCkpO1xudmFyIG9yaWdpbmFsVG9QcmVjaXNpb24gPSBOdW1iZXJQcm90b3R5cGUudG9QcmVjaXNpb247XG5kZWZpbmVQcm9wZXJ0aWVzKE51bWJlclByb3RvdHlwZSwge1xuICAgIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBwcmVjaXNpb24gPT09ICd1bmRlZmluZWQnID8gb3JpZ2luYWxUb1ByZWNpc2lvbi5jYWxsKHRoaXMpIDogb3JpZ2luYWxUb1ByZWNpc2lvbi5jYWxsKHRoaXMsIHByZWNpc2lvbik7XG4gICAgfVxufSwgaGFzVG9QcmVjaXNpb25VbmRlZmluZWRCdWcpO1xuXG4vL1xuLy8gU3RyaW5nXG4vLyA9PT09PT1cbi8vXG5cbi8vIEVTNSAxNS41LjQuMTRcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjUuNC4xNFxuXG4vLyBbYnVnZml4LCBJRSBsdCA5LCBmaXJlZm94IDQsIEtvbnF1ZXJvciwgT3BlcmEsIG9ic2N1cmUgYnJvd3NlcnNdXG4vLyBNYW55IGJyb3dzZXJzIGRvIG5vdCBzcGxpdCBwcm9wZXJseSB3aXRoIHJlZ3VsYXIgZXhwcmVzc2lvbnMgb3IgdGhleVxuLy8gZG8gbm90IHBlcmZvcm0gdGhlIHNwbGl0IGNvcnJlY3RseSB1bmRlciBvYnNjdXJlIGNvbmRpdGlvbnMuXG4vLyBTZWUgaHR0cDovL2Jsb2cuc3RldmVubGV2aXRoYW4uY29tL2FyY2hpdmVzL2Nyb3NzLWJyb3dzZXItc3BsaXRcbi8vIEkndmUgdGVzdGVkIGluIG1hbnkgYnJvd3NlcnMgYW5kIHRoaXMgc2VlbXMgdG8gY292ZXIgdGhlIGRldmlhbnQgb25lczpcbi8vICAgICdhYicuc3BsaXQoLyg/OmFiKSovKSBzaG91bGQgYmUgW1wiXCIsIFwiXCJdLCBub3QgW1wiXCJdXG4vLyAgICAnLicuc3BsaXQoLyguPykoLj8pLykgc2hvdWxkIGJlIFtcIlwiLCBcIi5cIiwgXCJcIiwgXCJcIl0sIG5vdCBbXCJcIiwgXCJcIl1cbi8vICAgICd0ZXNzdCcuc3BsaXQoLyhzKSovKSBzaG91bGQgYmUgW1widFwiLCB1bmRlZmluZWQsIFwiZVwiLCBcInNcIiwgXCJ0XCJdLCBub3Rcbi8vICAgICAgIFt1bmRlZmluZWQsIFwidFwiLCB1bmRlZmluZWQsIFwiZVwiLCAuLi5dXG4vLyAgICAnJy5zcGxpdCgvLj8vKSBzaG91bGQgYmUgW10sIG5vdCBbXCJcIl1cbi8vICAgICcuJy5zcGxpdCgvKCkoKS8pIHNob3VsZCBiZSBbXCIuXCJdLCBub3QgW1wiXCIsIFwiXCIsIFwiLlwiXVxuXG5pZiAoXG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT09IDQgfHxcbiAgICAndGVzc3QnLnNwbGl0KC8ocykqLylbMV0gPT09ICd0JyB8fFxuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT09IDQgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGggfHxcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxXG4pIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29tcGxpYW50RXhlY05wY2cgPSB0eXBlb2YgKC8oKT8/LykuZXhlYygnJylbMV0gPT09ICd1bmRlZmluZWQnOyAvLyBOUENHOiBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgICAgICB2YXIgbWF4U2FmZTMyQml0SW50ID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcblxuICAgICAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VwYXJhdG9yID09PSAndW5kZWZpbmVkJyAmJiBsaW1pdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgICAgICAgIGlmICghaXNSZWdleChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0clNwbGl0KHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICsgLy8gaW4gRVM2XG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKSwgLy8gRmlyZWZveCAzKyBhbmQgRVM2XG4gICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cpIHtcbiAgICAgICAgICAgICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogVmFsdWVzIGZvciBgbGltaXRgLCBwZXIgdGhlIHNwZWM6XG4gICAgICAgICAgICAgKiBJZiB1bmRlZmluZWQ6IDQyOTQ5NjcyOTUgLy8gbWF4U2FmZTMyQml0SW50XG4gICAgICAgICAgICAgKiBJZiAwLCBJbmZpbml0eSwgb3IgTmFOOiAwXG4gICAgICAgICAgICAgKiBJZiBwb3NpdGl2ZSBudW1iZXI6IGxpbWl0ID0gTWF0aC5mbG9vcihsaW1pdCk7IGlmIChsaW1pdCA+IDQyOTQ5NjcyOTUpIGxpbWl0IC09IDQyOTQ5NjcyOTY7XG4gICAgICAgICAgICAgKiBJZiBuZWdhdGl2ZSBudW1iZXI6IDQyOTQ5NjcyOTYgLSBNYXRoLmZsb29yKE1hdGguYWJzKGxpbWl0KSlcbiAgICAgICAgICAgICAqIElmIG90aGVyOiBUeXBlLWNvbnZlcnQsIHRoZW4gdXNlIHRoZSBhYm92ZSBydWxlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgc3BsaXRMaW1pdCA9IHR5cGVvZiBsaW1pdCA9PT0gJ3VuZGVmaW5lZCcgPyBtYXhTYWZlMzJCaXRJbnQgOiBFUy5Ub1VpbnQzMihsaW1pdCk7XG4gICAgICAgICAgICBtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpO1xuICAgICAgICAgICAgd2hpbGUgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKG91dHB1dCwgc3RyU2xpY2Uoc3RyaW5nLCBsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cgJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFtpXSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X3B1c2guYXBwbHkob3V0cHV0LCBhcnJheVNsaWNlKG1hdGNoLCAxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gc3BsaXRMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKG91dHB1dCwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHVzaENhbGwob3V0cHV0LCBzdHJTbGljZShzdHJpbmcsIGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gc3BsaXRMaW1pdCA/IGFycmF5U2xpY2Uob3V0cHV0LCAwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9KCkpO1xuXG4vLyBbYnVnZml4LCBjaHJvbWVdXG4vLyBJZiBzZXBhcmF0b3IgaXMgdW5kZWZpbmVkLCB0aGVuIHRoZSByZXN1bHQgYXJyYXkgY29udGFpbnMganVzdCBvbmUgU3RyaW5nLFxuLy8gd2hpY2ggaXMgdGhlIHRoaXMgdmFsdWUgKGNvbnZlcnRlZCB0byBhIFN0cmluZykuIElmIGxpbWl0IGlzIG5vdCB1bmRlZmluZWQsXG4vLyB0aGVuIHRoZSBvdXRwdXQgYXJyYXkgaXMgdHJ1bmNhdGVkIHNvIHRoYXQgaXQgY29udGFpbnMgbm8gbW9yZSB0aGFuIGxpbWl0XG4vLyBlbGVtZW50cy5cbi8vIFwiMFwiLnNwbGl0KHVuZGVmaW5lZCwgMCkgLT4gW11cbn0gZWxzZSBpZiAoJzAnLnNwbGl0KHZvaWQgMCwgMCkubGVuZ3RoKSB7XG4gICAgU3RyaW5nUHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgICBpZiAodHlwZW9mIHNlcGFyYXRvciA9PT0gJ3VuZGVmaW5lZCcgJiYgbGltaXQgPT09IDApIHsgcmV0dXJuIFtdOyB9XG4gICAgICAgIHJldHVybiBzdHJTcGxpdCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xufVxuXG52YXIgc3RyX3JlcGxhY2UgPSBTdHJpbmdQcm90b3R5cGUucmVwbGFjZTtcbnZhciByZXBsYWNlUmVwb3J0c0dyb3Vwc0NvcnJlY3RseSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdyb3VwcyA9IFtdO1xuICAgICd4Jy5yZXBsYWNlKC94KC4pPy9nLCBmdW5jdGlvbiAobWF0Y2gsIGdyb3VwKSB7XG4gICAgICAgIHB1c2hDYWxsKGdyb3VwcywgZ3JvdXApO1xuICAgIH0pO1xuICAgIHJldHVybiBncm91cHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBncm91cHNbMF0gPT09ICd1bmRlZmluZWQnO1xufSgpKTtcblxuaWYgKCFyZXBsYWNlUmVwb3J0c0dyb3Vwc0NvcnJlY3RseSkge1xuICAgIFN0cmluZ1Byb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICAgIHZhciBpc0ZuID0gaXNDYWxsYWJsZShyZXBsYWNlVmFsdWUpO1xuICAgICAgICB2YXIgaGFzQ2FwdHVyaW5nR3JvdXBzID0gaXNSZWdleChzZWFyY2hWYWx1ZSkgJiYgKC9cXClbKj9dLykudGVzdChzZWFyY2hWYWx1ZS5zb3VyY2UpO1xuICAgICAgICBpZiAoIWlzRm4gfHwgIWhhc0NhcHR1cmluZ0dyb3Vwcykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cl9yZXBsYWNlLmNhbGwodGhpcywgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlZFJlcGxhY2VWYWx1ZSA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbExhc3RJbmRleCA9IHNlYXJjaFZhbHVlLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICBzZWFyY2hWYWx1ZS5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gc2VhcmNoVmFsdWUuZXhlYyhtYXRjaCkgfHwgW107XG4gICAgICAgICAgICAgICAgc2VhcmNoVmFsdWUubGFzdEluZGV4ID0gb3JpZ2luYWxMYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgcHVzaENhbGwoYXJncywgYXJndW1lbnRzW2xlbmd0aCAtIDJdLCBhcmd1bWVudHNbbGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlVmFsdWUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHN0cl9yZXBsYWNlLmNhbGwodGhpcywgc2VhcmNoVmFsdWUsIHdyYXBwZWRSZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLy8gRUNNQS0yNjIsIDNyZCBCLjIuM1xuLy8gTm90IGFuIEVDTUFTY3JpcHQgc3RhbmRhcmQsIGFsdGhvdWdoIEVDTUFTY3JpcHQgM3JkIEVkaXRpb24gaGFzIGFcbi8vIG5vbi1ub3JtYXRpdmUgc2VjdGlvbiBzdWdnZXN0aW5nIHVuaWZvcm0gc2VtYW50aWNzIGFuZCBpdCBzaG91bGQgYmVcbi8vIG5vcm1hbGl6ZWQgYWNyb3NzIGFsbCBicm93c2Vyc1xuLy8gW2J1Z2ZpeCwgSUUgbHQgOV0gSUUgPCA5IHN1YnN0cigpIHdpdGggbmVnYXRpdmUgdmFsdWUgbm90IHdvcmtpbmcgaW4gSUVcbnZhciBzdHJpbmdfc3Vic3RyID0gU3RyaW5nUHJvdG90eXBlLnN1YnN0cjtcbnZhciBoYXNOZWdhdGl2ZVN1YnN0ckJ1ZyA9ICcnLnN1YnN0ciAmJiAnMGInLnN1YnN0cigtMSkgIT09ICdiJztcbmRlZmluZVByb3BlcnRpZXMoU3RyaW5nUHJvdG90eXBlLCB7XG4gICAgc3Vic3RyOiBmdW5jdGlvbiBzdWJzdHIoc3RhcnQsIGxlbmd0aCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZFN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRTdGFydCA9IG1heCh0aGlzLmxlbmd0aCArIHN0YXJ0LCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyaW5nX3N1YnN0ci5jYWxsKHRoaXMsIG5vcm1hbGl6ZWRTdGFydCwgbGVuZ3RoKTtcbiAgICB9XG59LCBoYXNOZWdhdGl2ZVN1YnN0ckJ1Zyk7XG5cbi8vIEVTNSAxNS41LjQuMjBcbi8vIHdoaXRlc3BhY2UgZnJvbTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbnZhciB3cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAgICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcgK1xuICAgICdcXHUyMDI5XFx1RkVGRic7XG52YXIgemVyb1dpZHRoID0gJ1xcdTIwMGInO1xudmFyIHdzUmVnZXhDaGFycyA9ICdbJyArIHdzICsgJ10nO1xudmFyIHRyaW1CZWdpblJlZ2V4cCA9IG5ldyBSZWdFeHAoJ14nICsgd3NSZWdleENoYXJzICsgd3NSZWdleENoYXJzICsgJyonKTtcbnZhciB0cmltRW5kUmVnZXhwID0gbmV3IFJlZ0V4cCh3c1JlZ2V4Q2hhcnMgKyB3c1JlZ2V4Q2hhcnMgKyAnKiQnKTtcbnZhciBoYXNUcmltV2hpdGVzcGFjZUJ1ZyA9IFN0cmluZ1Byb3RvdHlwZS50cmltICYmICh3cy50cmltKCkgfHwgIXplcm9XaWR0aC50cmltKCkpO1xuZGVmaW5lUHJvcGVydGllcyhTdHJpbmdQcm90b3R5cGUsIHtcbiAgICAvLyBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvZmFzdGVyLXRyaW0tamF2YXNjcmlwdFxuICAgIC8vIGh0dHA6Ly9wZXJmZWN0aW9ua2lsbHMuY29tL3doaXRlc3BhY2UtZGV2aWF0aW9ucy9cbiAgICB0cmltOiBmdW5jdGlvbiB0cmltKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRTdHJpbmcodGhpcykucmVwbGFjZSh0cmltQmVnaW5SZWdleHAsICcnKS5yZXBsYWNlKHRyaW1FbmRSZWdleHAsICcnKTtcbiAgICB9XG59LCBoYXNUcmltV2hpdGVzcGFjZUJ1Zyk7XG52YXIgdHJpbSA9IGNhbGwuYmluZChTdHJpbmcucHJvdG90eXBlLnRyaW0pO1xuXG52YXIgaGFzTGFzdEluZGV4QnVnID0gU3RyaW5nUHJvdG90eXBlLmxhc3RJbmRleE9mICYmICdhYmPjgYLjgYQnLmxhc3RJbmRleE9mKCfjgYLjgYQnLCAyKSAhPT0gLTE7XG5kZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzID09PSAndW5kZWZpbmVkJyB8fCB0aGlzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FuJ3QgY29udmVydCBcIiArIHRoaXMgKyAnIHRvIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBTID0gJFN0cmluZyh0aGlzKTtcbiAgICAgICAgdmFyIHNlYXJjaFN0ciA9ICRTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICAgICAgdmFyIG51bVBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gJE51bWJlcihhcmd1bWVudHNbMV0pIDogTmFOO1xuICAgICAgICB2YXIgcG9zID0gaXNBY3R1YWxOYU4obnVtUG9zKSA/IEluZmluaXR5IDogRVMuVG9JbnRlZ2VyKG51bVBvcyk7XG4gICAgICAgIHZhciBzdGFydCA9IG1pbihtYXgocG9zLCAwKSwgUy5sZW5ndGgpO1xuICAgICAgICB2YXIgc2VhcmNoTGVuID0gc2VhcmNoU3RyLmxlbmd0aDtcbiAgICAgICAgdmFyIGsgPSBzdGFydCArIHNlYXJjaExlbjtcbiAgICAgICAgd2hpbGUgKGsgPiAwKSB7XG4gICAgICAgICAgICBrID0gbWF4KDAsIGsgLSBzZWFyY2hMZW4pO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RySW5kZXhPZihzdHJTbGljZShTLCBrLCBzdGFydCArIHNlYXJjaExlbiksIHNlYXJjaFN0cik7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGsgKyBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxufSwgaGFzTGFzdEluZGV4QnVnKTtcblxudmFyIG9yaWdpbmFsTGFzdEluZGV4T2YgPSBTdHJpbmdQcm90b3R5cGUubGFzdEluZGV4T2Y7XG5kZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsTGFzdEluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG59LCBTdHJpbmdQcm90b3R5cGUubGFzdEluZGV4T2YubGVuZ3RoICE9PSAxKTtcblxuLy8gRVMtNSAxNS4xLjIuMlxuLyogZXNsaW50LWRpc2FibGUgcmFkaXggKi9cbmlmIChwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8IHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIpIHtcbi8qIGVzbGludC1lbmFibGUgcmFkaXggKi9cbiAgICAvKiBnbG9iYWwgcGFyc2VJbnQ6IHRydWUgKi9cbiAgICBwYXJzZUludCA9IChmdW5jdGlvbiAob3JpZ1BhcnNlSW50KSB7XG4gICAgICAgIHZhciBoZXhSZWdleCA9IC9eW1xcLStdPzBbeFhdLztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSB0cmltKHN0cik7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdGVkUmFkaXggPSAkTnVtYmVyKHJhZGl4KSB8fCAoaGV4UmVnZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCk7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ1BhcnNlSW50KHN0cmluZywgZGVmYXVsdGVkUmFkaXgpO1xuICAgICAgICB9O1xuICAgIH0ocGFyc2VJbnQpKTtcbn1cblxuLy8gaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjNcbmlmICgxIC8gcGFyc2VGbG9hdCgnLTAnKSAhPT0gLUluZmluaXR5KSB7XG4gICAgLyogZ2xvYmFsIHBhcnNlRmxvYXQ6IHRydWUgKi9cbiAgICBwYXJzZUZsb2F0ID0gKGZ1bmN0aW9uIChvcmlnUGFyc2VGbG9hdCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dFN0cmluZyA9IHRyaW0oc3RyaW5nKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBvcmlnUGFyc2VGbG9hdChpbnB1dFN0cmluZyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0clNsaWNlKGlucHV0U3RyaW5nLCAwLCAxKSA9PT0gJy0nID8gLTAgOiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfShwYXJzZUZsb2F0KSk7XG59XG5cbmlmIChTdHJpbmcobmV3IFJhbmdlRXJyb3IoJ3Rlc3QnKSkgIT09ICdSYW5nZUVycm9yOiB0ZXN0Jykge1xuICAgIHZhciBlcnJvclRvU3RyaW5nU2hpbSA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG5hbWUgPSAnRXJyb3InO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbmFtZSA9ICRTdHJpbmcobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1zZyA9IHRoaXMubWVzc2FnZTtcbiAgICAgICAgaWYgKHR5cGVvZiBtc2cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBtc2cgPSAnJztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbXNnICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbXNnID0gJFN0cmluZyhtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1zZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1zZykge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWUgKyAnOiAnICsgbXNnO1xuICAgIH07XG4gICAgLy8gY2FuJ3QgdXNlIGRlZmluZVByb3BlcnRpZXMgaGVyZSBiZWNhdXNlIG9mIHRvU3RyaW5nIGVudW1lcmF0aW9uIGlzc3VlIGluIElFIDw9IDhcbiAgICBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBlcnJvclRvU3RyaW5nU2hpbTtcbn1cblxuaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICB2YXIgZW5zdXJlTm9uRW51bWVyYWJsZSA9IGZ1bmN0aW9uIChvYmosIHByb3ApIHtcbiAgICAgICAgaWYgKGlzRW51bShvYmosIHByb3ApKSB7XG4gICAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wKTtcbiAgICAgICAgICAgIGRlc2MuZW51bWVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgZGVzYyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGVuc3VyZU5vbkVudW1lcmFibGUoRXJyb3IucHJvdG90eXBlLCAnbWVzc2FnZScpO1xuICAgIGlmIChFcnJvci5wcm90b3R5cGUubWVzc2FnZSAhPT0gJycpIHtcbiAgICAgIEVycm9yLnByb3RvdHlwZS5tZXNzYWdlID0gJyc7XG4gICAgfVxuICAgIGVuc3VyZU5vbkVudW1lcmFibGUoRXJyb3IucHJvdG90eXBlLCAnbmFtZScpO1xufVxuXG5pZiAoU3RyaW5nKC9hL21pZykgIT09ICcvYS9naW0nKSB7XG4gICAgdmFyIHJlZ2V4VG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgdmFyIHN0ciA9ICcvJyArIHRoaXMuc291cmNlICsgJy8nO1xuICAgICAgICBpZiAodGhpcy5nbG9iYWwpIHtcbiAgICAgICAgICAgIHN0ciArPSAnZyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaWdub3JlQ2FzZSkge1xuICAgICAgICAgICAgc3RyICs9ICdpJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tdWx0aWxpbmUpIHtcbiAgICAgICAgICAgIHN0ciArPSAnbSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9O1xuICAgIC8vIGNhbid0IHVzZSBkZWZpbmVQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBvZiB0b1N0cmluZyBlbnVtZXJhdGlvbiBpc3N1ZSBpbiBJRSA8PSA4XG4gICAgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZyA9IHJlZ2V4VG9TdHJpbmc7XG59XG5cbn0pKTtcbiIsIi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qYWtlYXJjaGliYWxkL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIDMuMC4yXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkb2JqZWN0T3JGdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzRnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNNYXliZVRoZW5hYmxlKHgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHV0aWxzJCRfaXNBcnJheTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkpIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGliJGVzNiRwcm9taXNlJHV0aWxzJCRfaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNBcnJheSA9IGxpYiRlczYkcHJvbWlzZSR1dGlscyQkX2lzQXJyYXk7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW4gPSAwO1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkdG9TdHJpbmcgPSB7fS50b1N0cmluZztcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJHZlcnR4TmV4dDtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJGN1c3RvbVNjaGVkdWxlckZuO1xuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwID0gZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgYXJnKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbl0gPSBjYWxsYmFjaztcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRxdWV1ZVtsaWIkZXM2JHByb21pc2UkYXNhcCQkbGVuICsgMV0gPSBhcmc7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkbGVuICs9IDI7XG4gICAgICBpZiAobGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbiA9PT0gMikge1xuICAgICAgICAvLyBJZiBsZW4gaXMgMiwgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gc2NoZWR1bGUgYW4gYXN5bmMgZmx1c2guXG4gICAgICAgIC8vIElmIGFkZGl0aW9uYWwgY2FsbGJhY2tzIGFyZSBxdWV1ZWQgYmVmb3JlIHRoZSBxdWV1ZSBpcyBmbHVzaGVkLCB0aGV5XG4gICAgICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICAgICAgaWYgKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRjdXN0b21TY2hlZHVsZXJGbikge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRjdXN0b21TY2hlZHVsZXJGbihsaWIkZXM2JHByb21pc2UkYXNhcCQkZmx1c2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzY2hlZHVsZUZsdXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRjdXN0b21TY2hlZHVsZXJGbiA9IHNjaGVkdWxlRm47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJHNldEFzYXAoYXNhcEZuKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcCA9IGFzYXBGbjtcbiAgICB9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJGJyb3dzZXJXaW5kb3cgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gd2luZG93IDogdW5kZWZpbmVkO1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3Nlckdsb2JhbCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRicm93c2VyV2luZG93IHx8IHt9O1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRicm93c2VyR2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRpc05vZGUgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYge30udG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nO1xuXG4gICAgLy8gdGVzdCBmb3Igd2ViIHdvcmtlciBidXQgbm90IGluIElFMTBcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJGlzV29ya2VyID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIGltcG9ydFNjcmlwdHMgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4gICAgLy8gbm9kZVxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VOZXh0VGljaygpIHtcbiAgICAgIC8vIG5vZGUgdmVyc2lvbiAwLjEwLnggZGlzcGxheXMgYSBkZXByZWNhdGlvbiB3YXJuaW5nIHdoZW4gbmV4dFRpY2sgaXMgdXNlZCByZWN1cnNpdmVseVxuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jdWpvanMvd2hlbi9pc3N1ZXMvNDEwIGZvciBkZXRhaWxzXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2sobGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gdmVydHhcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlVmVydHhUaW1lcigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHZlcnR4TmV4dChsaWIkZXM2JHByb21pc2UkYXNhcCQkZmx1c2gpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTXV0YXRpb25PYnNlcnZlcigpIHtcbiAgICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBsaWIkZXM2JHByb21pc2UkYXNhcCQkQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIobGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKTtcbiAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgbm9kZS5kYXRhID0gKGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gd2ViIHdvcmtlclxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VTZXRUaW1lb3V0KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRUaW1lb3V0KGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCwgMSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaWIkZXM2JHByb21pc2UkYXNhcCQkbGVuOyBpKz0yKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRxdWV1ZVtpXTtcbiAgICAgICAgdmFyIGFyZyA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRxdWV1ZVtpKzFdO1xuXG4gICAgICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbaSsxXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbiA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJGF0dGVtcHRWZXJ0eCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByID0gcmVxdWlyZTtcbiAgICAgICAgdmFyIHZlcnR4ID0gcigndmVydHgnKTtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgICAgIHJldHVybiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlVmVydHhUaW1lcigpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlU2V0VGltZW91dCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaDtcbiAgICAvLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuICAgIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkaXNOb2RlKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VOZXh0VGljaygpO1xuICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJGFzYXAkJEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG4gICAgfSBlbHNlIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkaXNXb3JrZXIpIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzY2hlZHVsZUZsdXNoID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZU1lc3NhZ2VDaGFubmVsKCk7XG4gICAgfSBlbHNlIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3NlcldpbmRvdyA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhdHRlbXB0VmVydHgoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2ggPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlU2V0VGltZW91dCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3AoKSB7fVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcgICA9IHZvaWQgMDtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVEID0gMTtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURUQgID0gMjtcblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRHRVRfVEhFTl9FUlJPUiA9IG5ldyBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRFcnJvck9iamVjdCgpO1xuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc2VsZkZ1bGZpbGxtZW50KCkge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGNhbm5vdFJldHVybk93bigpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZ2V0VGhlbihwcm9taXNlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRHRVRfVEhFTl9FUlJPUi5lcnJvciA9IGVycm9yO1xuICAgICAgICByZXR1cm4gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkdHJ5VGhlbih0aGVuLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcik7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuKSB7XG4gICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAoZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgICB2YXIgc2VhbGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvciA9IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHRyeVRoZW4odGhlbiwgdGhlbmFibGUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHNlYWxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgICAgIGlmICh0aGVuYWJsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgIGlmIChzZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpO1xuXG4gICAgICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9LCBwcm9taXNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICAgICAgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVEKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gICAgICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURUQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpIHtcbiAgICAgIGlmIChtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yID09PSBwcm9taXNlLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRoZW4gPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRnZXRUaGVuKG1heWJlVGhlbmFibGUpO1xuXG4gICAgICAgIGlmICh0aGVuID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRHRVRfVEhFTl9FUlJPUikge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRHRVRfVEhFTl9FUlJPUi5lcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAodGhlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICAgICAgfSBlbHNlIGlmIChsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkc2VsZkZ1bGZpbGxtZW50KCkpO1xuICAgICAgfSBlbHNlIGlmIChsaWIkZXM2JHByb21pc2UkdXRpbHMkJG9iamVjdE9yRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gICAgICBpZiAocHJvbWlzZS5fb25lcnJvcikge1xuICAgICAgICBwcm9taXNlLl9vbmVycm9yKHByb21pc2UuX3Jlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHB1Ymxpc2gocHJvbWlzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICAgICAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HKSB7IHJldHVybjsgfVxuXG4gICAgICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3N0YXRlID0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVEO1xuXG4gICAgICBpZiAocHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHB1Ymxpc2gsIHByb21pc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pIHtcbiAgICAgIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORykgeyByZXR1cm47IH1cbiAgICAgIHByb21pc2UuX3N0YXRlID0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURUQ7XG4gICAgICBwcm9taXNlLl9yZXN1bHQgPSByZWFzb247XG5cbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHB1Ymxpc2hSZWplY3Rpb24sIHByb21pc2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICAgICAgdmFyIHN1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgICAgIHZhciBsZW5ndGggPSBzdWJzY3JpYmVycy5sZW5ndGg7XG5cbiAgICAgIHBhcmVudC5fb25lcnJvciA9IG51bGw7XG5cbiAgICAgIHN1YnNjcmliZXJzW2xlbmd0aF0gPSBjaGlsZDtcbiAgICAgIHN1YnNjcmliZXJzW2xlbmd0aCArIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEZVTEZJTExFRF0gPSBvbkZ1bGZpbGxtZW50O1xuICAgICAgc3Vic2NyaWJlcnNbbGVuZ3RoICsgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURURdICA9IG9uUmVqZWN0aW9uO1xuXG4gICAgICBpZiAobGVuZ3RoID09PSAwICYmIHBhcmVudC5fc3RhdGUpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaCwgcGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRwdWJsaXNoKHByb21pc2UpIHtcbiAgICAgIHZhciBzdWJzY3JpYmVycyA9IHByb21pc2UuX3N1YnNjcmliZXJzO1xuICAgICAgdmFyIHNldHRsZWQgPSBwcm9taXNlLl9zdGF0ZTtcblxuICAgICAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgICAgdmFyIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmliZXJzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIGNoaWxkID0gc3Vic2NyaWJlcnNbaV07XG4gICAgICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGludm9rZUNhbGxiYWNrKHNldHRsZWQsIGNoaWxkLCBjYWxsYmFjaywgZGV0YWlsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhkZXRhaWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRXJyb3JPYmplY3QoKSB7XG4gICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkVFJZX0NBVENIX0VSUk9SID0gbmV3IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEVycm9yT2JqZWN0KCk7XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCR0cnlDYXRjaChjYWxsYmFjaywgZGV0YWlsKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZGV0YWlsKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRUUllfQ0FUQ0hfRVJST1IuZXJyb3IgPSBlO1xuICAgICAgICByZXR1cm4gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkVFJZX0NBVENIX0VSUk9SO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgICAgIHZhciBoYXNDYWxsYmFjayA9IGxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICAgICAgdmFsdWUsIGVycm9yLCBzdWNjZWVkZWQsIGZhaWxlZDtcblxuICAgICAgaWYgKGhhc0NhbGxiYWNrKSB7XG4gICAgICAgIHZhbHVlID0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRUUllfQ0FUQ0hfRVJST1IpIHtcbiAgICAgICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICAgICAgc3VjY2VlZGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HKSB7XG4gICAgICAgIC8vIG5vb3BcbiAgICAgIH0gZWxzZSBpZiAoaGFzQ2FsbGJhY2sgJiYgc3VjY2VlZGVkKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChmYWlsZWQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVEKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSl7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvcihDb25zdHJ1Y3RvciwgaW5wdXQpIHtcbiAgICAgIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICAgICAgZW51bWVyYXRvci5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgICAgZW51bWVyYXRvci5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3ApO1xuXG4gICAgICBpZiAoZW51bWVyYXRvci5fdmFsaWRhdGVJbnB1dChpbnB1dCkpIHtcbiAgICAgICAgZW51bWVyYXRvci5faW5wdXQgICAgID0gaW5wdXQ7XG4gICAgICAgIGVudW1lcmF0b3IubGVuZ3RoICAgICA9IGlucHV0Lmxlbmd0aDtcbiAgICAgICAgZW51bWVyYXRvci5fcmVtYWluaW5nID0gaW5wdXQubGVuZ3RoO1xuXG4gICAgICAgIGVudW1lcmF0b3IuX2luaXQoKTtcblxuICAgICAgICBpZiAoZW51bWVyYXRvci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKGVudW1lcmF0b3IucHJvbWlzZSwgZW51bWVyYXRvci5fcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbnVtZXJhdG9yLmxlbmd0aCA9IGVudW1lcmF0b3IubGVuZ3RoIHx8IDA7XG4gICAgICAgICAgZW51bWVyYXRvci5fZW51bWVyYXRlKCk7XG4gICAgICAgICAgaWYgKGVudW1lcmF0b3IuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChlbnVtZXJhdG9yLnByb21pc2UsIGVudW1lcmF0b3IuX3Jlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QoZW51bWVyYXRvci5wcm9taXNlLCBlbnVtZXJhdG9yLl92YWxpZGF0aW9uRXJyb3IoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl92YWxpZGF0ZUlucHV0ID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgIHJldHVybiBsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzQXJyYXkoaW5wdXQpO1xuICAgIH07XG5cbiAgICBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignQXJyYXkgTWV0aG9kcyBtdXN0IGJlIHByb3ZpZGVkIGFuIEFycmF5Jyk7XG4gICAgfTtcblxuICAgIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICB9O1xuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRkZWZhdWx0ID0gbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3I7XG5cbiAgICBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX2VudW1lcmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gICAgICB2YXIgbGVuZ3RoICA9IGVudW1lcmF0b3IubGVuZ3RoO1xuICAgICAgdmFyIHByb21pc2UgPSBlbnVtZXJhdG9yLnByb21pc2U7XG4gICAgICB2YXIgaW5wdXQgICA9IGVudW1lcmF0b3IuX2lucHV0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgcHJvbWlzZS5fc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcgJiYgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVudW1lcmF0b3IuX2VhY2hFbnRyeShpbnB1dFtpXSwgaSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fZWFjaEVudHJ5ID0gZnVuY3Rpb24oZW50cnksIGkpIHtcbiAgICAgIHZhciBlbnVtZXJhdG9yID0gdGhpcztcbiAgICAgIHZhciBjID0gZW51bWVyYXRvci5faW5zdGFuY2VDb25zdHJ1Y3RvcjtcblxuICAgICAgaWYgKGxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNNYXliZVRoZW5hYmxlKGVudHJ5KSkge1xuICAgICAgICBpZiAoZW50cnkuY29uc3RydWN0b3IgPT09IGMgJiYgZW50cnkuX3N0YXRlICE9PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HKSB7XG4gICAgICAgICAgZW50cnkuX29uZXJyb3IgPSBudWxsO1xuICAgICAgICAgIGVudW1lcmF0b3IuX3NldHRsZWRBdChlbnRyeS5fc3RhdGUsIGksIGVudHJ5Ll9yZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVudW1lcmF0b3IuX3dpbGxTZXR0bGVBdChjLnJlc29sdmUoZW50cnkpLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW51bWVyYXRvci5fcmVtYWluaW5nLS07XG4gICAgICAgIGVudW1lcmF0b3IuX3Jlc3VsdFtpXSA9IGVudHJ5O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX3NldHRsZWRBdCA9IGZ1bmN0aW9uKHN0YXRlLCBpLCB2YWx1ZSkge1xuICAgICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuICAgICAgdmFyIHByb21pc2UgPSBlbnVtZXJhdG9yLnByb21pc2U7XG5cbiAgICAgIGlmIChwcm9taXNlLl9zdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORykge1xuICAgICAgICBlbnVtZXJhdG9yLl9yZW1haW5pbmctLTtcblxuICAgICAgICBpZiAoc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbnVtZXJhdG9yLl9yZXN1bHRbaV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZW51bWVyYXRvci5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgZW51bWVyYXRvci5fcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl93aWxsU2V0dGxlQXQgPSBmdW5jdGlvbihwcm9taXNlLCBpKSB7XG4gICAgICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHN1YnNjcmliZShwcm9taXNlLCB1bmRlZmluZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGVudW1lcmF0b3IuX3NldHRsZWRBdChsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRUQsIGksIHZhbHVlKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICBlbnVtZXJhdG9yLl9zZXR0bGVkQXQobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURUQsIGksIHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJGFsbCQkYWxsKGVudHJpZXMpIHtcbiAgICAgIHJldHVybiBuZXcgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJGRlZmF1bHQodGhpcywgZW50cmllcykucHJvbWlzZTtcbiAgICB9XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJGFsbCQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJGFsbCQkYWxsO1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJhY2UkJHJhY2UoZW50cmllcykge1xuICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgICAgIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3ApO1xuXG4gICAgICBpZiAoIWxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNBcnJheShlbnRyaWVzKSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgZnVuY3Rpb24gb25GdWxmaWxsbWVudCh2YWx1ZSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25SZWplY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgcHJvbWlzZS5fc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcgJiYgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHN1YnNjcmliZShDb25zdHJ1Y3Rvci5yZXNvbHZlKGVudHJpZXNbaV0pLCB1bmRlZmluZWQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyYWNlJCRkZWZhdWx0ID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmFjZSQkcmFjZTtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZXNvbHZlJCRyZXNvbHZlKG9iamVjdCkge1xuICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgICAgIGlmIChvYmplY3QgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0LmNvbnN0cnVjdG9yID09PSBDb25zdHJ1Y3Rvcikge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3RvcihsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wKTtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVzb2x2ZSQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlc29sdmUkJHJlc29sdmU7XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVqZWN0JCRyZWplY3QocmVhc29uKSB7XG4gICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJG5vb3ApO1xuICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlamVjdCQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlamVjdCQkcmVqZWN0O1xuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRjb3VudGVyID0gMDtcblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRuZWVkc1Jlc29sdmVyKCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhIHJlc29sdmVyIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRuZWVkc05ldygpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRkZWZhdWx0ID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2U7XG4gICAgLyoqXG4gICAgICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gICAgICBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLCB3aGljaFxuICAgICAgcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGUgcmVhc29uXG4gICAgICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICAgICAgVGVybWlub2xvZ3lcbiAgICAgIC0tLS0tLS0tLS0tXG5cbiAgICAgIC0gYHByb21pc2VgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB3aXRoIGEgYHRoZW5gIG1ldGhvZCB3aG9zZSBiZWhhdmlvciBjb25mb3JtcyB0byB0aGlzIHNwZWNpZmljYXRpb24uXG4gICAgICAtIGB0aGVuYWJsZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHRoYXQgZGVmaW5lcyBhIGB0aGVuYCBtZXRob2QuXG4gICAgICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuXG4gICAgICAtIGBleGNlcHRpb25gIGlzIGEgdmFsdWUgdGhhdCBpcyB0aHJvd24gdXNpbmcgdGhlIHRocm93IHN0YXRlbWVudC5cbiAgICAgIC0gYHJlYXNvbmAgaXMgYSB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aHkgYSBwcm9taXNlIHdhcyByZWplY3RlZC5cbiAgICAgIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuXG4gICAgICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuXG5cbiAgICAgIFByb21pc2VzIHRoYXQgYXJlIGZ1bGZpbGxlZCBoYXZlIGEgZnVsZmlsbG1lbnQgdmFsdWUgYW5kIGFyZSBpbiB0aGUgZnVsZmlsbGVkXG4gICAgICBzdGF0ZS4gIFByb21pc2VzIHRoYXQgYXJlIHJlamVjdGVkIGhhdmUgYSByZWplY3Rpb24gcmVhc29uIGFuZCBhcmUgaW4gdGhlXG4gICAgICByZWplY3RlZCBzdGF0ZS4gIEEgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmV2ZXIgYSB0aGVuYWJsZS5cblxuICAgICAgUHJvbWlzZXMgY2FuIGFsc28gYmUgc2FpZCB0byAqcmVzb2x2ZSogYSB2YWx1ZS4gIElmIHRoaXMgdmFsdWUgaXMgYWxzbyBhXG4gICAgICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzXG4gICAgICBzZXR0bGVkIHN0YXRlLiAgU28gYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpbGxcbiAgICAgIGl0c2VsZiByZWplY3QsIGFuZCBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIHdpbGxcbiAgICAgIGl0c2VsZiBmdWxmaWxsLlxuXG5cbiAgICAgIEJhc2ljIFVzYWdlOlxuICAgICAgLS0tLS0tLS0tLS0tXG5cbiAgICAgIGBgYGpzXG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAvLyBvbiBzdWNjZXNzXG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuXG4gICAgICAgIC8vIG9uIGZhaWx1cmVcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcblxuICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgLy8gb24gcmVqZWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBBZHZhbmNlZCBVc2FnZTpcbiAgICAgIC0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICBQcm9taXNlcyBzaGluZSB3aGVuIGFic3RyYWN0aW5nIGF3YXkgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBzdWNoIGFzXG4gICAgICBgWE1MSHR0cFJlcXVlc3Rgcy5cblxuICAgICAgYGBganNcbiAgICAgIGZ1bmN0aW9uIGdldEpTT04odXJsKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVyO1xuICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZ2V0SlNPTignL3Bvc3RzLmpzb24nKS50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAvLyBvbiByZWplY3Rpb25cbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIFVubGlrZSBjYWxsYmFja3MsIHByb21pc2VzIGFyZSBncmVhdCBjb21wb3NhYmxlIHByaW1pdGl2ZXMuXG5cbiAgICAgIGBgYGpzXG4gICAgICBQcm9taXNlLmFsbChbXG4gICAgICAgIGdldEpTT04oJy9wb3N0cycpLFxuICAgICAgICBnZXRKU09OKCcvY29tbWVudHMnKVxuICAgICAgXSkudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgICAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OXG4gICAgICAgIHZhbHVlc1sxXSAvLyA9PiBjb21tZW50c0pTT05cblxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQGNsYXNzIFByb21pc2VcbiAgICAgIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVyXG4gICAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgICBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlKHJlc29sdmVyKSB7XG4gICAgICB0aGlzLl9pZCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRjb3VudGVyKys7XG4gICAgICB0aGlzLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgICAgIGlmIChsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wICE9PSByZXNvbHZlcikge1xuICAgICAgICBpZiAoIWxpYiRlczYkcHJvbWlzZSR1dGlscyQkaXNGdW5jdGlvbihyZXNvbHZlcikpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkbmVlZHNSZXNvbHZlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlKSkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRuZWVkc05ldygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaW5pdGlhbGl6ZVByb21pc2UodGhpcywgcmVzb2x2ZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLmFsbCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJGFsbCQkZGVmYXVsdDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5yYWNlID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmFjZSQkZGVmYXVsdDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5yZXNvbHZlID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVzb2x2ZSQkZGVmYXVsdDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5yZWplY3QgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZWplY3QkJGRlZmF1bHQ7XG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UuX3NldFNjaGVkdWxlciA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzZXRTY2hlZHVsZXI7XG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UuX3NldEFzYXAgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2V0QXNhcDtcbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5fYXNhcCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwO1xuXG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UucHJvdG90eXBlID0ge1xuICAgICAgY29uc3RydWN0b3I6IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLFxuXG4gICAgLyoqXG4gICAgICBUaGUgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCxcbiAgICAgIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gICAgICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgICAgIC8vIHVzZXIgaXMgYXZhaWxhYmxlXG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgICAgICAvLyB1c2VyIGlzIHVuYXZhaWxhYmxlLCBhbmQgeW91IGFyZSBnaXZlbiB0aGUgcmVhc29uIHdoeVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQ2hhaW5pbmdcbiAgICAgIC0tLS0tLS0tXG5cbiAgICAgIFRoZSByZXR1cm4gdmFsdWUgb2YgYHRoZW5gIGlzIGl0c2VsZiBhIHByb21pc2UuICBUaGlzIHNlY29uZCwgJ2Rvd25zdHJlYW0nXG4gICAgICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gICAgICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cblxuICAgICAgYGBganNcbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICByZXR1cm4gdXNlci5uYW1lO1xuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICByZXR1cm4gJ2RlZmF1bHQgbmFtZSc7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh1c2VyTmFtZSkge1xuICAgICAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgICAgIC8vIHdpbGwgYmUgYCdkZWZhdWx0IG5hbWUnYFxuICAgICAgfSk7XG5cbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jyk7XG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAvLyBpZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHJlYXNvbmAgd2lsbCBiZSAnRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknLlxuICAgICAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jy5cbiAgICAgIH0pO1xuICAgICAgYGBgXG4gICAgICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS5cblxuICAgICAgYGBganNcbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBuZXZlciByZWFjaGVkXG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBBc3NpbWlsYXRpb25cbiAgICAgIC0tLS0tLS0tLS0tLVxuXG4gICAgICBTb21ldGltZXMgdGhlIHZhbHVlIHlvdSB3YW50IHRvIHByb3BhZ2F0ZSB0byBhIGRvd25zdHJlYW0gcHJvbWlzZSBjYW4gb25seSBiZVxuICAgICAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZVxuICAgICAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgICAgIHVudGlsIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHNldHRsZWQuIFRoaXMgaXMgY2FsbGVkICphc3NpbWlsYXRpb24qLlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAgIC8vIFRoZSB1c2VyJ3MgY29tbWVudHMgYXJlIG5vdyBhdmFpbGFibGVcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmVcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgLy8gSWYgYGZpbmRDb21tZW50c0J5QXV0aG9yYCByZWplY3RzLCB3ZSdsbCBoYXZlIHRoZSByZWFzb24gaGVyZVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgU2ltcGxlIEV4YW1wbGVcbiAgICAgIC0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcblxuICAgICAgYGBgamF2YXNjcmlwdFxuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9XG4gICAgICBgYGBcblxuICAgICAgRXJyYmFjayBFeGFtcGxlXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIC8vIGZhaWx1cmVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBzdWNjZXNzXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIFByb21pc2UgRXhhbXBsZTtcblxuICAgICAgYGBgamF2YXNjcmlwdFxuICAgICAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQWR2YW5jZWQgRXhhbXBsZVxuICAgICAgLS0tLS0tLS0tLS0tLS1cblxuICAgICAgU3luY2hyb25vdXMgRXhhbXBsZVxuXG4gICAgICBgYGBqYXZhc2NyaXB0XG4gICAgICB2YXIgYXV0aG9yLCBib29rcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXV0aG9yID0gZmluZEF1dGhvcigpO1xuICAgICAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpO1xuICAgICAgICAvLyBzdWNjZXNzXG4gICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAvLyBmYWlsdXJlXG4gICAgICB9XG4gICAgICBgYGBcblxuICAgICAgRXJyYmFjayBFeGFtcGxlXG5cbiAgICAgIGBgYGpzXG5cbiAgICAgIGZ1bmN0aW9uIGZvdW5kQm9va3MoYm9va3MpIHtcblxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuXG4gICAgICB9XG5cbiAgICAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgIC8vIGZhaWx1cmVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgZmFpbHVyZShyZWFzb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzdWNjZXNzXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIFByb21pc2UgRXhhbXBsZTtcblxuICAgICAgYGBgamF2YXNjcmlwdFxuICAgICAgZmluZEF1dGhvcigpLlxuICAgICAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS5cbiAgICAgICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAgICAgLy8gZm91bmQgYm9va3NcbiAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBAbWV0aG9kIHRoZW5cbiAgICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbGVkXG4gICAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gICAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAgICovXG4gICAgICB0aGVuOiBmdW5jdGlvbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gcGFyZW50Ll9zdGF0ZTtcblxuICAgICAgICBpZiAoc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEZVTEZJTExFRCAmJiAhb25GdWxmaWxsbWVudCB8fCBzdGF0ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURUQgJiYgIW9uUmVqZWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBhcmVudC5fcmVzdWx0O1xuXG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1tzdGF0ZSAtIDFdO1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRpbnZva2VDYWxsYmFjayhzdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCByZXN1bHQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9LFxuXG4gICAgLyoqXG4gICAgICBgY2F0Y2hgIGlzIHNpbXBseSBzdWdhciBmb3IgYHRoZW4odW5kZWZpbmVkLCBvblJlamVjdGlvbilgIHdoaWNoIG1ha2VzIGl0IHRoZSBzYW1lXG4gICAgICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuXG4gICAgICBgYGBqc1xuICAgICAgZnVuY3Rpb24gZmluZEF1dGhvcigpe1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkbid0IGZpbmQgdGhhdCBhdXRob3InKTtcbiAgICAgIH1cblxuICAgICAgLy8gc3luY2hyb25vdXNcbiAgICAgIHRyeSB7XG4gICAgICAgIGZpbmRBdXRob3IoKTtcbiAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gICAgICB9XG5cbiAgICAgIC8vIGFzeW5jIHdpdGggcHJvbWlzZXNcbiAgICAgIGZpbmRBdXRob3IoKVsnY2F0Y2gnXShmdW5jdGlvbihyZWFzb24pe1xuICAgICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQG1ldGhvZCBjYXRjaFxuICAgICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgICAgIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICAgKi9cbiAgICAgICdjYXRjaCc6IGZ1bmN0aW9uKG9uUmVqZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3Rpb24pO1xuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHBvbHlmaWxsJCRwb2x5ZmlsbCgpIHtcbiAgICAgIHZhciBsb2NhbDtcblxuICAgICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbG9jYWwgPSBnbG9iYWw7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGxvY2FsID0gc2VsZjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbG9jYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBQID0gbG9jYWwuUHJvbWlzZTtcblxuICAgICAgaWYgKFAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFAucmVzb2x2ZSgpKSA9PT0gJ1tvYmplY3QgUHJvbWlzZV0nICYmICFQLmNhc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsb2NhbC5Qcm9taXNlID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkJGRlZmF1bHQ7XG4gICAgfVxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkcG9seWZpbGwkJGRlZmF1bHQgPSBsaWIkZXM2JHByb21pc2UkcG9seWZpbGwkJHBvbHlmaWxsO1xuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSR1bWQkJEVTNlByb21pc2UgPSB7XG4gICAgICAnUHJvbWlzZSc6IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRkZWZhdWx0LFxuICAgICAgJ3BvbHlmaWxsJzogbGliJGVzNiRwcm9taXNlJHBvbHlmaWxsJCRkZWZhdWx0XG4gICAgfTtcblxuICAgIC8qIGdsb2JhbCBkZWZpbmU6dHJ1ZSBtb2R1bGU6dHJ1ZSB3aW5kb3c6IHRydWUgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKSB7XG4gICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBsaWIkZXM2JHByb21pc2UkdW1kJCRFUzZQcm9taXNlOyB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZVsnZXhwb3J0cyddKSB7XG4gICAgICBtb2R1bGVbJ2V4cG9ydHMnXSA9IGxpYiRlczYkcHJvbWlzZSR1bWQkJEVTNlByb21pc2U7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXNbJ0VTNlByb21pc2UnXSA9IGxpYiRlczYkcHJvbWlzZSR1bWQkJEVTNlByb21pc2U7XG4gICAgfVxuXG4gICAgbGliJGVzNiRwcm9taXNlJHBvbHlmaWxsJCRkZWZhdWx0KCk7XG59KS5jYWxsKHRoaXMpO1xuXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsInZhciBwcm9taXNlRXh0ZW5zaW9uc18xID0gcmVxdWlyZShcIi4vLi4vaGVscGVycy9wcm9taXNlRXh0ZW5zaW9uc1wiKTtcclxudmFyIGFjdGl2aXR5TWFuYWdlbWVudEFQSV8xID0gcmVxdWlyZShcIi4vYWN0aXZpdHlNYW5hZ2VtZW50QVBJXCIpO1xyXG52YXIgYWN0aXZpdHlBR01fMSA9IHJlcXVpcmUoXCIuLi9jb3JlL2FjdGl2aXR5QUdNXCIpO1xyXG52YXIgQWN0aXZpdHlBUEkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWN0aXZpdHlBUEkobWFuYWdlciwgbXkpIHtcclxuICAgICAgICB0aGlzLnZlcnNpb24gPSBcIjIuMS4zXCI7XHJcbiAgICAgICAgdGhpcy5fbWFuYWdlciA9IG1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5fbXkgPSBteTtcclxuICAgICAgICB0aGlzLmFsbCA9IG5ldyBhY3Rpdml0eU1hbmFnZW1lbnRBUElfMS5BY3Rpdml0eU1hbmFnZW1lbnRBUEkobWFuYWdlciwgbXkpO1xyXG4gICAgfVxyXG4gICAgQWN0aXZpdHlBUEkucHJvdG90eXBlLnJlYWR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX21hbmFnZXIucmVhZHkoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcyk7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlBUEkucHJvdG90eXBlLCBcIm15XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX215O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5QVBJLnByb3RvdHlwZSwgXCJhd2FyZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9teS53aW5kb3cgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eUFQSS5wcm90b3R5cGUsIFwiaW5BY3Rpdml0eVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF3YXJlICYmIHRoaXMuX215LmFjdGl2aXR5ICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlBUEkucHJvdG90eXBlLCBcImFnbVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5hd2FyZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5BY3Rpdml0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBhY3Rpdml0eUFHTV8xLkFjdGl2aXR5QUdNKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9teS5hY3Rpdml0eS5hZ207XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gQWN0aXZpdHlBUEk7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQWN0aXZpdHlBUEkgPSBBY3Rpdml0eUFQSTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHlBUEkuanMubWFwIiwidmFyIHV0aWwgPSByZXF1aXJlKFwiLi8uLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBBY3Rpdml0eU1hbmFnZW1lbnRBUEkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWN0aXZpdHlNYW5hZ2VtZW50QVBJKG1hbmFnZXIsIG15KSB7XHJcbiAgICAgICAgdGhpcy5fbWFuYWdlciA9IG1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5fbXkgPSBteTtcclxuICAgICAgICB0aGlzLmFjdGl2aXR5VHlwZXMgPSB7XHJcbiAgICAgICAgICAgIGdldDogdGhpcy5fZ2V0QWN0aXZpdHlUeXBlc1dyYXBwZXIuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgcmVnaXN0ZXI6IHRoaXMuX21hbmFnZXIucmVnaXN0ZXJBY3Rpdml0eVR5cGUuYmluZCh0aGlzLl9tYW5hZ2VyKSxcclxuICAgICAgICAgICAgdW5yZWdpc3RlcjogdGhpcy5fbWFuYWdlci51bnJlZ2lzdGVyQWN0aXZpdHlUeXBlLmJpbmQodGhpcy5fbWFuYWdlciksXHJcbiAgICAgICAgICAgIHN1YnNjcmliZTogdGhpcy5fbWFuYWdlci5zdWJzY3JpYmVBY3Rpdml0eVR5cGVFdmVudHMuYmluZCh0aGlzLl9tYW5hZ2VyKSxcclxuICAgICAgICAgICAgdW5zdWJzY3JpYmU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgaW5pdGlhdGU6IHRoaXMuX21hbmFnZXIuaW5pdGlhdGUuYmluZCh0aGlzLl9tYW5hZ2VyKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy53aW5kb3dUeXBlcyA9IHtcclxuICAgICAgICAgICAgZ2V0OiB0aGlzLl9nZXRXaW5kb3dUeXBlc1dyYXBwZXIuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgcmVnaXN0ZXJGYWN0b3J5OiB0aGlzLl9tYW5hZ2VyLnJlZ2lzdGVyV2luZG93RmFjdG9yeS5iaW5kKHRoaXMuX21hbmFnZXIpLFxyXG4gICAgICAgICAgICB1bnJlZ2lzdGVyRmFjdG9yeTogdGhpcy5fbWFuYWdlci51bnJlZ2lzdGVyV2luZG93RmFjdG9yeS5iaW5kKHRoaXMuX21hbmFnZXIpLFxyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IHRoaXMuX21hbmFnZXIuc3Vic2NyaWJlV2luZG93VHlwZUV2ZW50cy5iaW5kKHRoaXMuX21hbmFnZXIpLFxyXG4gICAgICAgICAgICB1bnN1YnNjcmliZTogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLndpbmRvd3MgPSB7XHJcbiAgICAgICAgICAgIGdldDogdGhpcy5fbWFuYWdlci5nZXRXaW5kb3dzLmJpbmQodGhpcy5fbWFuYWdlciksXHJcbiAgICAgICAgICAgIHN1YnNjcmliZTogdGhpcy5fbWFuYWdlci5zdWJzY3JpYmVXaW5kb3dFdmVudHMuYmluZCh0aGlzLl9tYW5hZ2VyKSxcclxuICAgICAgICAgICAgYW5ub3VuY2U6IHRoaXMuX21hbmFnZXIuYW5ub3VuY2VXaW5kb3cuYmluZCh0aGlzLl9tYW5hZ2VyKSxcclxuICAgICAgICAgICAgdW5zdWJzY3JpYmU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgY3JlYXRlOiB0aGlzLl9tYW5hZ2VyLmNyZWF0ZVdpbmRvdy5iaW5kKHRoaXMuX21hbmFnZXIpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcyA9IHtcclxuICAgICAgICAgICAgZ2V0OiB0aGlzLl9tYW5hZ2VyLmdldEFjdGl2aXRpZXMuYmluZCh0aGlzLl9tYW5hZ2VyKSxcclxuICAgICAgICAgICAgc3Vic2NyaWJlOiB0aGlzLl9tYW5hZ2VyLnN1YnNjcmliZUFjdGl2aXR5RXZlbnRzLmJpbmQodGhpcy5fbWFuYWdlciksXHJcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bmRlZmluZWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgQWN0aXZpdHlNYW5hZ2VtZW50QVBJLnByb3RvdHlwZS5fZ2V0QWN0aXZpdHlUeXBlc1dyYXBwZXIgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYW5hZ2VyLmdldEFjdGl2aXR5VHlwZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hbmFnZXIuZ2V0QWN0aXZpdHlUeXBlKG5hbWUpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlbWVudEFQSS5wcm90b3R5cGUuX2dldFdpbmRvd1R5cGVzV3JhcHBlciA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQobmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hbmFnZXIuZ2V0V2luZG93VHlwZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hbmFnZXIuZ2V0V2luZG93VHlwZShuYW1lKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQWN0aXZpdHlNYW5hZ2VtZW50QVBJO1xyXG59KSgpO1xyXG5leHBvcnRzLkFjdGl2aXR5TWFuYWdlbWVudEFQSSA9IEFjdGl2aXR5TWFuYWdlbWVudEFQSTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHlNYW5hZ2VtZW50QVBJLmpzLm1hcCIsInZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuLy4uL2hlbHBlcnMvbG9nZ2VyXCIpO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLy4uL2hlbHBlcnMvdXRpbFwiKTtcclxudmFyIEFjdGl2aXR5TXkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWN0aXZpdHlNeShtYW5hZ2VyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl9teUFjdGl2aXR5Sm9pbmVkQ2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5fbXlBY3Rpdml0eVJlbW92ZWRDYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLl9teUNvbnRleHRVcGRhdGVDYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLl9sb2dnZXIgPSBsb2dnZXJfMS5Mb2dnZXIuR2V0KHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX21hbmFnZXIgPSBtYW5hZ2VyO1xyXG4gICAgICAgIG1hbmFnZXIucmVhZHkoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYW0pIHtcclxuICAgICAgICAgICAgYW0uc3Vic2NyaWJlQWN0aXZpdHlDb250ZXh0Q2hhbmdlZChfdGhpcy5fc3Vic2NyaWJlTXlDb250ZXh0Q2hhbmdlZC5iaW5kKF90aGlzKSk7XHJcbiAgICAgICAgICAgIGFtLnN1YnNjcmliZVdpbmRvd0V2ZW50cyhfdGhpcy5fc3Vic2NyaWJlTXlXaW5kb3dFdmVudC5iaW5kKF90aGlzKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlNeS5wcm90b3R5cGUsIFwid2luZG93XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwodGhpcy5fd2luZG93KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFubm91bmNlZFdpbmRvd3MgPSB0aGlzLl9tYW5hZ2VyLmFubm91bmNlZFdpbmRvd3M7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5ub3VuY2VkV2luZG93cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2luZG93ID0gYW5ub3VuY2VkV2luZG93c1swXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2luZG93O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5TXkucHJvdG90eXBlLCBcImFjdGl2aXR5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG15V2luID0gdGhpcy53aW5kb3c7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKG15V2luKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbXlXaW4uYWN0aXZpdHk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBY3Rpdml0eU15LnByb3RvdHlwZS5jcmVhdGVXaW5kb3cgPSBmdW5jdGlvbiAod2luZG93VHlwZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYW5hZ2VyLmNyZWF0ZVdpbmRvdyh0aGlzLmFjdGl2aXR5LCB3aW5kb3dUeXBlKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlNeS5wcm90b3R5cGUsIFwiY29udGV4dFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBhY3Rpdml0eSA9IHRoaXMuYWN0aXZpdHk7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKGFjdGl2aXR5KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhY3Rpdml0eS5jb250ZXh0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgQWN0aXZpdHlNeS5wcm90b3R5cGUub25BY3Rpdml0eUpvaW5lZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX215QWN0aXZpdHlKb2luZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgdmFyIG15V2luID0gdGhpcy53aW5kb3c7XHJcbiAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKG15V2luKSAmJiAhdXRpbC5pc1VuZGVmaW5lZE9yTnVsbChteVdpbi5hY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sobXlXaW4uYWN0aXZpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU15LnByb3RvdHlwZS5vbkFjdGl2aXR5TGVmdCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX215QWN0aXZpdHlSZW1vdmVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLm9uQ29udGV4dENoYW5nZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9teUNvbnRleHRVcGRhdGVDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgdmFyIG15V2luID0gdGhpcy53aW5kb3c7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwobXlXaW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFjdGl2aXR5ID0gbXlXaW4uYWN0aXZpdHk7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwoYWN0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbGJhY2soYWN0aXZpdHkuY29udGV4dCwgYWN0aXZpdHkuY29udGV4dCwgW10sIGFjdGl2aXR5KTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU15LnByb3RvdHlwZS5fc3Vic2NyaWJlTXlDb250ZXh0Q2hhbmdlZCA9IGZ1bmN0aW9uIChhY3Rpdml0eSwgY29udGV4dCwgZGVsdGEsIHJlbW92ZWQpIHtcclxuICAgICAgICB2YXIgbXlXaW4gPSB0aGlzLndpbmRvdztcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbChteVdpbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbXlBY3Rpdml0eSA9IG15V2luLmFjdGl2aXR5O1xyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKG15QWN0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFjdGl2aXR5LmlkICE9PSBteUFjdGl2aXR5LmlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbm90aWZ5TXlDb250ZXh0Q2hhbmdlZChhY3Rpdml0eSwgY29udGV4dCwgZGVsdGEsIHJlbW92ZWQpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLl9zdWJzY3JpYmVNeVdpbmRvd0V2ZW50ID0gZnVuY3Rpb24gKGFjdGl2aXR5LCB3aW5kb3csIGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwodGhpcy53aW5kb3cpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMud2luZG93LmlkICE9PSB3aW5kb3cuaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXZlbnQgPT09IFwiam9pbmVkXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm90aWZ5T25Kb2luZWQoYWN0aXZpdHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fbm90aWZ5TXlXaW5kb3dFdmVudChhY3Rpdml0eSwgdGhpcy5fbXlBY3Rpdml0eVJlbW92ZWRDYWxsYmFja3MpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU15LnByb3RvdHlwZS5fbm90aWZ5TXlXaW5kb3dFdmVudCA9IGZ1bmN0aW9uIChhY3Rpdml0eSwgY2FsbGJhY2tTdG9yZSkge1xyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBjYWxsYmFja1N0b3JlLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGNhbGxiYWNrU3RvcmVbaW5kZXhdO1xyXG4gICAgICAgICAgICBlbGVtZW50KGFjdGl2aXR5LCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLl9ub3RpZnlNeUNvbnRleHRDaGFuZ2VkID0gZnVuY3Rpb24gKGFjdGl2aXR5LCBjb250ZXh0LCBkZWx0YSwgcmVtb3ZlZCkge1xyXG4gICAgICAgIGRlbHRhID0gZGVsdGEgfHwge307XHJcbiAgICAgICAgcmVtb3ZlZCA9IHJlbW92ZWQgfHwgW107XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX215Q29udGV4dFVwZGF0ZUNhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9teUNvbnRleHRVcGRhdGVDYWxsYmFja3NbaW5kZXhdO1xyXG4gICAgICAgICAgICBlbGVtZW50KGNvbnRleHQsIGRlbHRhLCByZW1vdmVkLCBhY3Rpdml0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TXkucHJvdG90eXBlLl9ub3RpZnlPbkpvaW5lZCA9IGZ1bmN0aW9uIChhY3Rpdml0eSkge1xyXG4gICAgICAgIC8vIHdoZW4gam9pbmVkIHRvIGFjdGl2aXR5IG5vdGlmeSBmb3IgOlxyXG4gICAgICAgIC8vICogam9pbmVkXHJcbiAgICAgICAgLy8gKiBjb250ZXh0IGNoYW5nZVxyXG4gICAgICAgIHRoaXMuX25vdGlmeU15V2luZG93RXZlbnQoYWN0aXZpdHksIHRoaXMuX215QWN0aXZpdHlKb2luZWRDYWxsYmFja3MpO1xyXG4gICAgICAgIHRoaXMuX25vdGlmeU15Q29udGV4dENoYW5nZWQoYWN0aXZpdHksIGFjdGl2aXR5LmNvbnRleHQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBY3Rpdml0eU15O1xyXG59KSgpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXT0gQWN0aXZpdHlNeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHlNeUFQSS5qcy5tYXAiLCJ2YXIgQWN0aXZpdHlDb25maWcgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWN0aXZpdHlDb25maWcoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQWN0aXZpdHlDb25maWc7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQWN0aXZpdHlDb25maWcgPSBBY3Rpdml0eUNvbmZpZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHlDb25maWcuanMubWFwIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvZXM2LXByb21pc2UvZXM2LXByb21pc2UuZC50c1wiLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvdGljazQyLWFnbS9hZ20uZC50c1wiLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGluZ3MvdGljazQyLWxvZ2dlci9sb2dnZXIuZC50c1wiLz5cclxucmVxdWlyZShcImVzNi1wcm9taXNlXCIpO1xyXG52YXIgaGNCcmlkZ2VfMSA9IHJlcXVpcmUoXCIuL2JyaWRnZXMvaGNCcmlkZ2VcIik7XHJcbnZhciBhY3Rpdml0eU1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL2NvcmUvYWN0aXZpdHlNYW5hZ2VyXCIpO1xyXG52YXIgYWN0aXZpdHlNeUFQSV8xID0gcmVxdWlyZShcIi4vQVBJL2FjdGl2aXR5TXlBUElcIik7XHJcbnZhciBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnMvbG9nZ2VyXCIpO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL2hlbHBlcnMvdXRpbFwiKTtcclxudmFyIGFjdGl2aXR5Q29uZmlnXzEgPSByZXF1aXJlKFwiLi9hY3Rpdml0eUNvbmZpZ1wiKTtcclxudmFyIGFjdGl2aXR5QVBJXzEgPSByZXF1aXJlKFwiLi9BUEkvYWN0aXZpdHlBUElcIik7XHJcbnZhciBhY3Rpdml0eUFHTV8xID0gcmVxdWlyZShcIi4vY29yZS9hY3Rpdml0eUFHTVwiKTtcclxuYWN0aXZpdHkgPSBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICBjb25maWcgPSBjb25maWcgfHwgbmV3IGFjdGl2aXR5Q29uZmlnXzEuQWN0aXZpdHlDb25maWc7XHJcbiAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWQoY29uZmlnLmxvZ0xldmVsKSkge1xyXG4gICAgICAgIGxvZ2dlcl8xLkxvZ2dlci5MZXZlbCA9IGNvbmZpZy5sb2dMZXZlbDtcclxuICAgIH1cclxuICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbChjb25maWcubG9nZ2VyKSkge1xyXG4gICAgICAgIGxvZ2dlcl8xLkxvZ2dlci5HbHVlTG9nZ2VyID0gY29uZmlnLmxvZ2dlcjtcclxuICAgIH1cclxuICAgIHZhciBicmlkZ2U7XHJcbiAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWQod2luZG93Lmh0bWxDb250YWluZXIpKSB7XHJcbiAgICAgICAgYnJpZGdlID0gbmV3IGhjQnJpZGdlXzFbJ2RlZmF1bHQnXSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQWN0aXZpdHkgbm90IHN1cHBvcnRlZCBpbiBpbiBicm93c2VyXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFicmlkZ2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGJyaWRnZSB0byBuYXRpdmUgYWN0aXZpdHkgaXMgbmVlZGVkIHRvIGNyZWF0ZSBhY3Rpdml0eSBsaWIuXCIpO1xyXG4gICAgfVxyXG4gICAgYWN0aXZpdHlBR01fMS5BY3Rpdml0eUFHTS5BR00gPSBjb25maWcuYWdtO1xyXG4gICAgdmFyIGFjdGl2aXR5TWFuYWdlciA9IG5ldyBhY3Rpdml0eU1hbmFnZXJfMVsnZGVmYXVsdCddKGJyaWRnZSwgIWNvbmZpZy5kaXNhYmxlQXV0b0Fubm91bmNlKTtcclxuICAgIHZhciBteSA9IG5ldyBhY3Rpdml0eU15QVBJXzFbJ2RlZmF1bHQnXShhY3Rpdml0eU1hbmFnZXIpO1xyXG4gICAgcmV0dXJuIG5ldyBhY3Rpdml0eUFQSV8xLkFjdGl2aXR5QVBJKGFjdGl2aXR5TWFuYWdlciwgbXkpO1xyXG59O1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFjdGl2aXR5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY3Rpdml0eU1vZHVsZS5qcy5tYXAiLCJ2YXIgZW50aXR5RXZlbnRfMSA9IHJlcXVpcmUoXCIuLi9jb250cmFjdHMvZW50aXR5RXZlbnRcIik7XHJcbnZhciBhY3Rpdml0eVN0YXR1c18xID0gcmVxdWlyZShcIi4uL2NvbnRyYWN0cy9hY3Rpdml0eVN0YXR1c1wiKTtcclxudmFyIGFjdGl2aXR5VHlwZV8xID0gcmVxdWlyZShcIi4uL2VudGl0aWVzL2FjdGl2aXR5VHlwZVwiKTtcclxudmFyIHdpbmRvd1R5cGVfMSA9IHJlcXVpcmUoXCIuLi9lbnRpdGllcy93aW5kb3dUeXBlXCIpO1xyXG52YXIgYWN0aXZpdHlfMSA9IHJlcXVpcmUoXCIuLi9lbnRpdGllcy9hY3Rpdml0eVwiKTtcclxudmFyIGFjdGl2aXR5V2luZG93XzEgPSByZXF1aXJlKFwiLi4vZW50aXRpZXMvYWN0aXZpdHlXaW5kb3dcIik7XHJcbnZhciBwcm94eVdpbmRvd0ZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuLi9jb3JlL3Byb3h5V2luZG93RmFjdG9yeVwiKTtcclxudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvbG9nZ2VyXCIpO1xyXG52YXIgZW50aXR5RXZlbnRfMiA9IHJlcXVpcmUoXCIuLi9jb250cmFjdHMvZW50aXR5RXZlbnRcIik7XHJcbnZhciByZWFkeU1hcmtlcl8xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvcmVhZHlNYXJrZXJcIik7XHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdXRpbFwiKTtcclxudmFyIGVudGl0eUV2ZW50XzMgPSByZXF1aXJlKFwiLi4vY29udHJhY3RzL2VudGl0eUV2ZW50XCIpO1xyXG52YXIgSENCcmlkZ2UgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSENCcmlkZ2UoYWdtKSB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZpdHlUeXBlRW50aXR5TmFtZSA9IFwiYWN0aXZpdHlUeXBlXCI7XHJcbiAgICAgICAgdGhpcy5fd2luZG93VHlwZUVudGl0eU5hbWUgPSBcIndpbmRvd1R5cGVcIjtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eUVudGl0eU5hbWUgPSBcImFjdGl2aXR5XCI7XHJcbiAgICAgICAgdGhpcy5fd2luZG93RW50aXR5TmFtZSA9IFwiYWN0aXZpdHlXaW5kb3dcIjtcclxuICAgICAgICB0aGlzLl9sb2dnZXIgPSBsb2dnZXJfMS5Mb2dnZXIuR2V0KHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2xhc3RTZXEgPSAwO1xyXG4gICAgICAgIHRoaXMuX2V2ZW50UXVldWUgPSBbXTtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eVR5cGVDYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLl93aW5kb3dUeXBlQ2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5fYWN0aXZpdHlDYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLl93aW5kb3dDYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLl9hZ20gPSBhZ207XHJcbiAgICB9XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX3JlYWR5TWFya2VyID0gbmV3IHJlYWR5TWFya2VyXzEuUmVhZHlNYXJrZXIoXCJIQyBCcmlkZ2VcIiwgMSk7XHJcbiAgICAgICAgdGhpcy5faHRtbENvbnRhaW5lciA9IHdpbmRvdy5odG1sQ29udGFpbmVyLmFjdGl2aXR5RmFjYWRlO1xyXG4gICAgICAgIHRoaXMuX2h0bWxDb250YWluZXIuaW5pdCh0aGlzLl9hZ20gPyB0aGlzLl9hZ20uaW5zdGFuY2UgOiB1bmRlZmluZWQsIHRoaXMuX2hjRXZlbnRIYW5kbGVyLmJpbmQodGhpcyksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3JlYWR5TWFya2VyLnNpZ25hbChcIkluaXQgZG9uZSBmcm9tIEhDXCIpO1xyXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVhZHlNYXJrZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9yZWFkeU1hcmtlci5zZXRDYWxsYmFjayhmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5lcnJvcihcIkVycm9yIGluaXRpYWxpemluZyBIQyBicmlkZ2UgLSBcIiArIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KF90aGlzLl9yZWFkeU1hcmtlci5nZXRFcnJvcigpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLl9oY0V2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudEpzb24pIHtcclxuICAgICAgICB0aGlzLl9sb2dnZXIudHJhY2UoZXZlbnRKc29uKTtcclxuICAgICAgICB2YXIgZXZlbnQgPSBKU09OLnBhcnNlKGV2ZW50SnNvbik7XHJcbiAgICAgICAgdGhpcy5fcHJvY2Vzc0V2ZW50QnlTZXEoZXZlbnQpO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5fcHJvY2Vzc0V2ZW50QnlTZXEgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgc2VxID0gZXZlbnQuc2VxdWVuY2U7XHJcbiAgICAgICAgaWYgKHNlcSA9PT0gdGhpcy5fbGFzdFNlcSArIDEpIHtcclxuICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc0V2ZW50KGV2ZW50KTtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdFNlcSsrO1xyXG4gICAgICAgICAgICB2YXIgbmV4dEV2ZW50ID0gdGhpcy5fZXZlbnRRdWV1ZVtzZXEgKyAxXTtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkKG5leHRFdmVudCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhcInJlcGxheWluZyBtZXNzYWdlIG51bWJlciBcIiArIHNlcSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzRXZlbnRCeVNlcShuZXh0RXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50UXVldWVbc2VxICsgMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50UXVldWVbc2VxXSA9IGV2ZW50O1xyXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJHb3Qgb3V0IG9mIG9yZGVyIGV2ZW50IHdpdGggbnVtYmVyIFwiICsgc2VxICsgXCIuIFdpbGwgd2FpdCBmb3IgcHJldmlvdXMgZXZlbnQocykgYmVmb3JlIHJlcGxheWluZy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5fcHJvY2Vzc0V2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGVudGl0eVR5cGUgPSBldmVudC5lbnRpdHlUeXBlO1xyXG4gICAgICAgIHZhciBldmVudENvbnRleHQgPSB0aGlzLl9jb252ZXJ0Q29udGV4dChldmVudC5jb250ZXh0KTtcclxuICAgICAgICB2YXIgZW50aXR5O1xyXG4gICAgICAgIHN3aXRjaCAoZW50aXR5VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMuX2FjdGl2aXR5VHlwZUVudGl0eU5hbWU6XHJcbiAgICAgICAgICAgICAgICBlbnRpdHkgPSBIQ0JyaWRnZS5faGNUb0pzQWN0aXZpdHlUeXBlKGV2ZW50LmVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wdWJsaXNoQWN0aXZpdHlUeXBlU3RhdHVzQ2hhbmdlKGVudGl0eSwgZXZlbnRDb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMuX3dpbmRvd1R5cGVFbnRpdHlOYW1lOlxyXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gdGhpcy5faGNUb0pzV2luZG93VHlwZShldmVudC5lbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHVibGlzaFdpbmRvd1R5cGVTdGF0dXNDaGFuZ2UoZW50aXR5LCBldmVudENvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgdGhpcy5fYWN0aXZpdHlFbnRpdHlOYW1lOlxyXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gdGhpcy5faGNUb0pzQWN0aXZpdHkoZXZlbnQuZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3B1Ymxpc2hBY3Rpdml0eVN0YXR1c0NoYW5nZShlbnRpdHksIGV2ZW50Q29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSB0aGlzLl93aW5kb3dFbnRpdHlOYW1lOlxyXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gSENCcmlkZ2UuX2hjVG9Kc1dpbmRvdyhldmVudC5lbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHVibGlzaEFjdGl2aXR5V2luZG93RXZlbnQoZW50aXR5LCBldmVudENvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5fY29udmVydENvbnRleHQgPSBmdW5jdGlvbiAoaGNDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKGhjQ29udGV4dC50eXBlID09PSBlbnRpdHlFdmVudF8xLkVudGl0eUV2ZW50VHlwZS5TdGF0dXNDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdmFyIG9sZFN0YXR1cyA9IG5ldyBhY3Rpdml0eVN0YXR1c18xLkFjdGl2aXR5U3RhdHVzKGhjQ29udGV4dC5vbGRTdGF0dXMuc3RhdGUsIGhjQ29udGV4dC5vbGRTdGF0dXMuc3RhdHVzTWVzc2FnZSwgaGNDb250ZXh0Lm9sZFN0YXR1cy5zdGF0dXNUaW1lKTtcclxuICAgICAgICAgICAgdmFyIG5ld1N0YXR1cyA9IG5ldyBhY3Rpdml0eVN0YXR1c18xLkFjdGl2aXR5U3RhdHVzKGhjQ29udGV4dC5uZXdTdGF0dXMuc3RhdGUsIGhjQ29udGV4dC5uZXdTdGF0dXMuc3RhdHVzTWVzc2FnZSwgaGNDb250ZXh0Lm5ld1N0YXR1cy5zdGF0dXNUaW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBlbnRpdHlFdmVudF8xLkVudGl0eVN0YXR1c0NoYW5nZUV2ZW50Q29udGV4dChuZXdTdGF0dXMsIG9sZFN0YXR1cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhjQ29udGV4dC50eXBlID09PSBlbnRpdHlFdmVudF8xLkVudGl0eUV2ZW50VHlwZS5BY3Rpdml0eVdpbmRvd0V2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBhY3QgPSB0aGlzLl9oY1RvSnNBY3Rpdml0eShoY0NvbnRleHQuYWN0aXZpdHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGVudGl0eUV2ZW50XzEuRW50aXR5QWN0aXZpdHlXaW5kb3dFdmVudENvbnRleHQoYWN0LCBoY0NvbnRleHQuZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoY0NvbnRleHQudHlwZSA9PT0gZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudFR5cGUuQWN0aXZpdHlDb250ZXh0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgZW50aXR5RXZlbnRfMy5BY3Rpdml0eUNvbnRleHRDaGFuZ2VkQ29udGV4dChoY0NvbnRleHQubmV3Q29udGV4dCwgaGNDb250ZXh0LnVwZGF0ZWQsIGhjQ29udGV4dC5yZW1vdmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBlbnRpdHlFdmVudF8xLkVudGl0eUV2ZW50Q29udGV4dChoY0NvbnRleHQudHlwZSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UuX2hjVG9Kc1dpbmRvdyA9IGZ1bmN0aW9uIChoY1dpbmRvdykge1xyXG4gICAgICAgIHJldHVybiBuZXcgYWN0aXZpdHlXaW5kb3dfMVsnZGVmYXVsdCddKGhjV2luZG93LmlkLCBoY1dpbmRvdy5uYW1lLCBoY1dpbmRvdy50eXBlLCBoY1dpbmRvdy5hY3Rpdml0eUlkLCBoY1dpbmRvdy5pbnN0YW5jZSwgaGNXaW5kb3cuaXNJbmRlcGVuZGVudCk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLl9oY1RvSnNBY3Rpdml0eSA9IGZ1bmN0aW9uIChoY0FjdCkge1xyXG4gICAgICAgIHZhciB3aW5kb3cgPSBoY0FjdC5vd25lciA/IEhDQnJpZGdlLl9oY1RvSnNXaW5kb3coaGNBY3Qub3duZXIpIDogbnVsbDtcclxuICAgICAgICB2YXIgc3RhdHVzID0gbmV3IGFjdGl2aXR5U3RhdHVzXzEuQWN0aXZpdHlTdGF0dXMoaGNBY3Quc3RhdHVzLnN0YXRlLCBoY0FjdC5zdGF0dXMuc3RhdHVzTWVzc2FnZSwgaGNBY3Quc3RhdHVzLnN0YXR1c1RpbWUpO1xyXG4gICAgICAgIHZhciBoZWxwZXJXaW5kb3dzID0gaGNBY3Qud2luZG93cyA/IGhjQWN0LndpbmRvd3MubWFwKGZ1bmN0aW9uICh3KSB7IHJldHVybiBIQ0JyaWRnZS5faGNUb0pzV2luZG93KHcpOyB9KSA6IFtdO1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gSlNPTi5wYXJzZShoY0FjdC5jb250ZXh0KTtcclxuICAgICAgICByZXR1cm4gbmV3IGFjdGl2aXR5XzFbJ2RlZmF1bHQnXShoY0FjdC5pZCwgaGNBY3QudHlwZS5uYW1lLCBzdGF0dXMsIGNvbnRleHQsIHdpbmRvdywgaGVscGVyV2luZG93cyk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UuX2hjVG9Kc0FjdGl2aXR5VHlwZSA9IGZ1bmN0aW9uIChoY0FjdFR5cGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGFjdGl2aXR5VHlwZV8xWydkZWZhdWx0J10oaGNBY3RUeXBlLm5hbWUsIGhjQWN0VHlwZS5vd25lcldpbmRvd1R5cGUsIGhjQWN0VHlwZS5oZWxwZXJXaW5kb3dUeXBlcywgaGNBY3RUeXBlLmRlc2NyaXB0aW9uKTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuX2hjVG9Kc1dpbmRvd1R5cGUgPSBmdW5jdGlvbiAoaGNXaW5UeXBlKSB7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQoaGNXaW5UeXBlLmZhY3RvcmllcykpIHtcclxuICAgICAgICAgICAgaGNXaW5UeXBlLmZhY3RvcmllcyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZmFjdG9yaWVzID0gaGNXaW5UeXBlLmZhY3Rvcmllcy5tYXAoZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEhDQnJpZGdlLl9oY1RvSnNXaW5kb3dUeXBlRmFjdG9yeShmKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IHdpbmRvd1R5cGVfMVsnZGVmYXVsdCddKGhjV2luVHlwZS5uYW1lLCBmYWN0b3JpZXMpO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLl9oY1RvSnNXaW5kb3dUeXBlRmFjdG9yeSA9IGZ1bmN0aW9uIChoY1dpblR5cGVGYWN0b3J5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBwcm94eVdpbmRvd0ZhY3RvcnlfMS5Qcm94eVdpbmRvd0ZhY3RvcnkoaGNXaW5UeXBlRmFjdG9yeS5kZXNjcmlwdGlvbik7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UuX2dldFVSTFBhcmFtZXRlciA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCgobmV3IFJlZ0V4cCgnWz98Jl0nICsgbmFtZSArICc9JyArICcoW14mO10rPykoJnwjfDt8JCknKS5leGVjKGxvY2F0aW9uLnNlYXJjaCkgfHwgWywgXCJcIl0pWzFdLnJlcGxhY2UoL1xcKy9nLCAnJTIwJykpIHx8IG51bGw7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmdldEFjdGl2aXR5VHlwZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5nZXRBY3Rpdml0eVR5cGVzKGZ1bmN0aW9uIChpbmZvcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGluZm9zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmZvID0gaW5mb3NbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdBY3Rpdml0eVR5cGUgPSBIQ0JyaWRnZS5faGNUb0pzQWN0aXZpdHlUeXBlKGluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld0FjdGl2aXR5VHlwZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLnJlZ2lzdGVyQWN0aXZpdHlUeXBlID0gZnVuY3Rpb24gKGFjdGl2aXR5VHlwZU5hbWUsIG93bmVyV2luZG93LCBoZWxwZXJXaW5kb3dzLCBsYXlvdXRDb25maWcsIGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAoaGVscGVyV2luZG93cyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBoZWxwZXJXaW5kb3dzID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGFjdGl2aXR5VHlwZU5hbWUsXHJcbiAgICAgICAgICAgICAgICBvd25lcldpbmRvd1R5cGU6IG93bmVyV2luZG93LFxyXG4gICAgICAgICAgICAgICAgaGVscGVyV2luZG93VHlwZXM6IGhlbHBlcldpbmRvd3MsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICBsYXlvdXRDb25maWc6IEpTT04uc3RyaW5naWZ5KGxheW91dENvbmZpZylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIucmVnaXN0ZXJBY3Rpdml0eVR5cGUoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSwgZnVuY3Rpb24gKGluZm8pIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdBY3Rpdml0eVR5cGUgPSBIQ0JyaWRnZS5faGNUb0pzQWN0aXZpdHlUeXBlKGluZm8pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXdBY3Rpdml0eVR5cGUpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS51bnJlZ2lzdGVyQWN0aXZpdHlUeXBlID0gZnVuY3Rpb24gKGFjdGl2aXR5VHlwZU5hbWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLnVucmVnaXN0ZXJBY3Rpdml0eVR5cGUoYWN0aXZpdHlUeXBlTmFtZSwgZnVuY3Rpb24gKGluZm8pIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmdldFdpbmRvd1R5cGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIuZ2V0V2luZG93VHlwZXMoZnVuY3Rpb24gKGluZm9zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5mb3MubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBpbmZvc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1dpbmRvd1R5cGUgPSBfdGhpcy5faGNUb0pzV2luZG93VHlwZShpbmZvKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXdXaW5kb3dUeXBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUucmVnaXN0ZXJXaW5kb3dGYWN0b3J5ID0gZnVuY3Rpb24gKHdpbmRvd1R5cGVOYW1lLCBmYWN0b3J5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh3aW5kb3dUeXBlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIndpbmRvd1R5cGVOYW1lIHNob3VsZCBiZSBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5yZWdpc3RlcldpbmRvd0ZhY3Rvcnkod2luZG93VHlwZU5hbWUsIGZhY3RvcnkuY3JlYXRlLmJpbmQoZmFjdG9yeSksIGZ1bmN0aW9uIChpbmZvKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5pbml0aWF0ZUFjdGl2aXR5ID0gZnVuY3Rpb24gKGFjdGl2aXR5VHlwZSwgY29udGV4dCwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKGFjdGl2aXR5VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIndpbmRvd1R5cGVOYW1lIHNob3VsZCBiZSBwcm92aWRlZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbChjb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dCA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLmluaXRpYXRlKGFjdGl2aXR5VHlwZSwgSlNPTi5zdHJpbmdpZnkoY29udGV4dCksIGZ1bmN0aW9uIChhY3Rpdml0eUlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFjdGl2aXR5SWQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5nZXRBbm5vdW5jZW1lbnRJbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBoYyA9IHdpbmRvdy5odG1sQ29udGFpbmVyO1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gaGMuZ2V0Q29udGV4dCgpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7IGFjdGl2aXR5V2luZG93SWQ6IFwiXCIsIGFjdGl2aXR5V2luZG93VHlwZTogXCJcIiwgYWN0aXZpdHlXaW5kb3dJbmRlcGVuZGVudDogZmFsc2UsIGFjdGl2aXR5V2luZG93TmFtZTogXCJcIiB9O1xyXG4gICAgICAgIHJlc3VsdC5hY3Rpdml0eVdpbmRvd1R5cGUgPSBjb250ZXh0LmFjdGl2aXR5V2luZG93VHlwZTtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChyZXN1bHQuYWN0aXZpdHlXaW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICByZXN1bHQuYWN0aXZpdHlXaW5kb3dUeXBlID0gSENCcmlkZ2UuX2dldFVSTFBhcmFtZXRlcihcImFjdGl2aXR5V2luZG93VHlwZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0LmFjdGl2aXR5V2luZG93SWQgPSBjb250ZXh0LmFjdGl2aXR5V2luZG93SWQ7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQocmVzdWx0LmFjdGl2aXR5V2luZG93SWQpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hY3Rpdml0eVdpbmRvd0lkID0gSENCcmlkZ2UuX2dldFVSTFBhcmFtZXRlcihcImFjdGl2aXR5V2luZG93SWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdC5hY3Rpdml0eVdpbmRvd0luZGVwZW5kZW50ID0gY29udGV4dC5hY3Rpdml0eVdpbmRvd0luZGVwZW5kZW50O1xyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKHJlc3VsdC5hY3Rpdml0eVdpbmRvd0luZGVwZW5kZW50KSkge1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQuYWN0aXZpdHlXaW5kb3dOYW1lID0gY29udGV4dC5hY3Rpdml0eVdpbmRvd05hbWU7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQocmVzdWx0LmFjdGl2aXR5V2luZG93TmFtZSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmFjdGl2aXR5V2luZG93TmFtZSA9IEhDQnJpZGdlLl9nZXRVUkxQYXJhbWV0ZXIoXCJhY3Rpdml0eVdpbmRvd05hbWVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmFubm91bmNlV2luZG93ID0gZnVuY3Rpb24gKHdpbmRvd1R5cGUsIGFjdGl2aXR5V2luZG93SWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKHdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbiBub3QgZGV0ZXJtaW5lIHdpbmRvdyB0eXBlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZCh3aW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW4gbm90IGRldGVybWluZSB3aW5kb3cgYWN0aXZpdHlXaW5kb3dJZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faHRtbENvbnRhaW5lci5hbm5vdW5jZVdpbmRvdyh3aW5kb3dUeXBlLCBhY3Rpdml0eVdpbmRvd0lkLCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5lcnJvcihcIkVycm9yIGFubm91bmNpbmcgYWN0aXZpdHkgd2luZG93IHdpdGggaWQgJ1wiICsgYWN0aXZpdHlXaW5kb3dJZCArIFwiJy4gXCIgKyBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmdldEFjdGl2aXRpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLnRyYWNlKFwiRXhlY3V0aW5nIGdldEFjdGl2aXRpZXMoKVwiKTtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIuZ2V0QWN0aXZpdGllcyhmdW5jdGlvbiAoYWN0aXZpdGllc1N0cikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci50cmFjZShcIkdvdCBnZXRBY3Rpdml0aWVzKCkgOlwiICsgYWN0aXZpdGllc1N0cik7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZpdGllcyA9IEpTT04ucGFyc2UoYWN0aXZpdGllc1N0cik7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYWN0aXZpdGllcy5tYXAoZnVuY3Rpb24gKGFjdCkgeyByZXR1cm4gX3RoaXMuX2hjVG9Kc0FjdGl2aXR5KGFjdCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9sb2dnZXIudHJhY2UoXCJFcnJvciBpbiBnZXRBY3Rpdml0aWVzKCkgOlwiICsgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLnVwZGF0ZUFjdGl2aXR5Q29udGV4dCA9IGZ1bmN0aW9uIChhY3Rpdml0eSwgY29udGV4dCwgZnVsbFJlcGxhY2UsIHJlbW92ZWRLZXlzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChyZW1vdmVkS2V5cykpIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZWRLZXlzID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBmdWxsUmVwbGFjZTogZnVsbFJlcGxhY2UsXHJcbiAgICAgICAgICAgICAgICByZW1vdmVkS2V5czogcmVtb3ZlZEtleXNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIuc2V0QWN0aXZpdHlDb250ZXh0KGFjdGl2aXR5LmlkLCBKU09OLnN0cmluZ2lmeShjb250ZXh0KSwgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyksIGZ1bmN0aW9uIChuZXdDb250ZXh0U3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q29udGV4dCA9IEpTT04ucGFyc2UobmV3Q29udGV4dFN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ld0NvbnRleHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIHJlamVjdChlcnJvcik7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5nZXRBY3Rpdml0eVdpbmRvd3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5nZXRXaW5kb3dzKGZ1bmN0aW9uICh3aW5kb3dzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gd2luZG93cy5tYXAoZnVuY3Rpb24gKHdpbmQpIHsgcmV0dXJuIEhDQnJpZGdlLl9oY1RvSnNXaW5kb3cod2luZCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5zdG9wQWN0aXZpdHkgPSBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLnN0b3BBY3Rpdml0eShhY3Rpdml0eS5pZCwgZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS51bnJlZ2lzdGVyV2luZG93RmFjdG9yeSA9IGZ1bmN0aW9uICh3aW5kb3dUeXBlTmFtZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIucmVnaXN0ZXJXaW5kb3dGYWN0b3J5KHdpbmRvd1R5cGVOYW1lLCBmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUuY3JlYXRlV2luZG93ID0gZnVuY3Rpb24gKGlkLCB3aW5kb3dEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5jcmVhdGVXaW5kb3coaWQsIEpTT04uc3RyaW5naWZ5KHdpbmRvd0RlZmluaXRpb24pLCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoaWQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5vbkFjdGl2aXR5VHlwZVN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXR5VHlwZUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUub25XaW5kb3dUeXBlU3RhdHVzQ2hhbmdlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5fd2luZG93VHlwZUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBIQ0JyaWRnZS5wcm90b3R5cGUub25BY3Rpdml0eVN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXR5Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5vbkFjdGl2aXR5V2luZG93Q2hhbmdlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5fd2luZG93Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5nZXRXaW5kb3dCb3VuZHMgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9odG1sQ29udGFpbmVyLmdldFdpbmRvd0JvdW5kcyhpZCwgZnVuY3Rpb24gKGJvdW5kcykge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShib3VuZHMpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLnNldFdpbmRvd0JvdW5kcyA9IGZ1bmN0aW9uIChpZCwgYm91bmRzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5zZXRXaW5kb3dCb3VuZHMoaWQsIEpTT04uc3RyaW5naWZ5KGJvdW5kcyksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5yZWdpc3RlcldpbmRvdyA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBpbmRlcGVuZGVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2h0bWxDb250YWluZXIucmVnaXN0ZXJXaW5kb3codHlwZSwgbmFtZSwgaW5kZXBlbmRlbnQsIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpZCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLmNsb3NlV2luZG93ID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5faHRtbENvbnRhaW5lci5jbG9zZVdpbmRvdyhpZCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLl9wdWJsaXNoU3RhdHVzQ2hhbmdlID0gZnVuY3Rpb24gKGVudGl0eSwgY29udGV4dCwgY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eUV2ZW50ID0gbmV3IGVudGl0eUV2ZW50XzIuRW50aXR5RXZlbnQoZW50aXR5LCBjb250ZXh0KTtcclxuICAgICAgICBjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soZW50aXR5RXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5fcHVibGlzaEFjdGl2aXR5VHlwZVN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uIChhdCwgY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuX3B1Ymxpc2hTdGF0dXNDaGFuZ2UoYXQsIGNvbnRleHQsIHRoaXMuX2FjdGl2aXR5VHlwZUNhbGxiYWNrcyk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLl9wdWJsaXNoV2luZG93VHlwZVN0YXR1c0NoYW5nZSA9IGZ1bmN0aW9uICh3dCwgY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuX3B1Ymxpc2hTdGF0dXNDaGFuZ2Uod3QsIGNvbnRleHQsIHRoaXMuX3dpbmRvd1R5cGVDYWxsYmFja3MpO1xyXG4gICAgfTtcclxuICAgIEhDQnJpZGdlLnByb3RvdHlwZS5fcHVibGlzaEFjdGl2aXR5U3RhdHVzQ2hhbmdlID0gZnVuY3Rpb24gKGFjdCwgY29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuX3B1Ymxpc2hTdGF0dXNDaGFuZ2UoYWN0LCBjb250ZXh0LCB0aGlzLl9hY3Rpdml0eUNhbGxiYWNrcyk7XHJcbiAgICB9O1xyXG4gICAgSENCcmlkZ2UucHJvdG90eXBlLl9wdWJsaXNoQWN0aXZpdHlXaW5kb3dFdmVudCA9IGZ1bmN0aW9uICh3LCBjb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5fcHVibGlzaFN0YXR1c0NoYW5nZSh3LCBjb250ZXh0LCB0aGlzLl93aW5kb3dDYWxsYmFja3MpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBIQ0JyaWRnZTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzWydkZWZhdWx0J109IEhDQnJpZGdlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oY0JyaWRnZS5qcy5tYXAiLCJ2YXIgQWN0aXZpdHlTdGF0dXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQWN0aXZpdHlTdGF0dXMoc3RhdGUsIG1lc3NhZ2UsIHRpbWUpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xyXG4gICAgfVxyXG4gICAgQWN0aXZpdHlTdGF0dXMucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5U3RhdHVzLnByb3RvdHlwZS5nZXRNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlTdGF0dXMucHJvdG90eXBlLmdldFRpbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQWN0aXZpdHlTdGF0dXM7XHJcbn0pKCk7XHJcbmV4cG9ydHMuQWN0aXZpdHlTdGF0dXMgPSBBY3Rpdml0eVN0YXR1cztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHlTdGF0dXMuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIEVudGl0eUV2ZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVudGl0eUV2ZW50KGVudGl0aXksIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmVudGl0eSA9IGVudGl0aXk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIH1cclxuICAgIHJldHVybiBFbnRpdHlFdmVudDtcclxufSkoKTtcclxuZXhwb3J0cy5FbnRpdHlFdmVudCA9IEVudGl0eUV2ZW50O1xyXG52YXIgRW50aXR5RXZlbnRDb250ZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVudGl0eUV2ZW50Q29udGV4dChldmVudFR5cGUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBldmVudFR5cGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRW50aXR5RXZlbnRDb250ZXh0O1xyXG59KSgpO1xyXG5leHBvcnRzLkVudGl0eUV2ZW50Q29udGV4dCA9IEVudGl0eUV2ZW50Q29udGV4dDtcclxudmFyIEVudGl0eVN0YXR1c0NoYW5nZUV2ZW50Q29udGV4dCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRW50aXR5U3RhdHVzQ2hhbmdlRXZlbnRDb250ZXh0LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRW50aXR5U3RhdHVzQ2hhbmdlRXZlbnRDb250ZXh0KG5ld1N0YXR1cywgb2xkU3RhdHVzKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgRW50aXR5RXZlbnRUeXBlLlN0YXR1c0NoYW5nZSk7XHJcbiAgICAgICAgdGhpcy5uZXdTdGF0dXMgPSBuZXdTdGF0dXM7XHJcbiAgICAgICAgdGhpcy5vbGRTdGF0dXMgPSBvbGRTdGF0dXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRW50aXR5U3RhdHVzQ2hhbmdlRXZlbnRDb250ZXh0O1xyXG59KShFbnRpdHlFdmVudENvbnRleHQpO1xyXG5leHBvcnRzLkVudGl0eVN0YXR1c0NoYW5nZUV2ZW50Q29udGV4dCA9IEVudGl0eVN0YXR1c0NoYW5nZUV2ZW50Q29udGV4dDtcclxudmFyIEVudGl0eUFjdGl2aXR5V2luZG93RXZlbnRDb250ZXh0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFbnRpdHlBY3Rpdml0eVdpbmRvd0V2ZW50Q29udGV4dCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEVudGl0eUFjdGl2aXR5V2luZG93RXZlbnRDb250ZXh0KGFjdGl2aXR5LCBldmVudCkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIEVudGl0eUV2ZW50VHlwZS5BY3Rpdml0eVdpbmRvd0V2ZW50KTtcclxuICAgICAgICB0aGlzLmFjdGl2aXR5ID0gYWN0aXZpdHk7XHJcbiAgICAgICAgdGhpcy5ldmVudCA9IGV2ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEVudGl0eUFjdGl2aXR5V2luZG93RXZlbnRDb250ZXh0O1xyXG59KShFbnRpdHlFdmVudENvbnRleHQpO1xyXG5leHBvcnRzLkVudGl0eUFjdGl2aXR5V2luZG93RXZlbnRDb250ZXh0ID0gRW50aXR5QWN0aXZpdHlXaW5kb3dFdmVudENvbnRleHQ7XHJcbnZhciBBY3Rpdml0eUNvbnRleHRDaGFuZ2VkQ29udGV4dCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWN0aXZpdHlDb250ZXh0Q2hhbmdlZENvbnRleHQsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eUNvbnRleHRDaGFuZ2VkQ29udGV4dChjb250ZXh0LCB1cGRhdGVkLCByZW1vdmVkKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgRW50aXR5RXZlbnRUeXBlLkFjdGl2aXR5Q29udGV4dENoYW5nZSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVkID0gdXBkYXRlZDtcclxuICAgICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IEpTT04ucGFyc2UoY29udGV4dCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQWN0aXZpdHlDb250ZXh0Q2hhbmdlZENvbnRleHQ7XHJcbn0pKEVudGl0eUV2ZW50Q29udGV4dCk7XHJcbmV4cG9ydHMuQWN0aXZpdHlDb250ZXh0Q2hhbmdlZENvbnRleHQgPSBBY3Rpdml0eUNvbnRleHRDaGFuZ2VkQ29udGV4dDtcclxudmFyIEVudGl0eUV2ZW50VHlwZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFbnRpdHlFdmVudFR5cGUoKSB7XHJcbiAgICB9XHJcbiAgICBFbnRpdHlFdmVudFR5cGUuQWRkZWQgPSBcImFkZGVkXCI7XHJcbiAgICBFbnRpdHlFdmVudFR5cGUuUmVtb3ZlZCA9IFwicmVtb3ZlZFwiO1xyXG4gICAgRW50aXR5RXZlbnRUeXBlLlVwZGF0ZWQgPSBcInVwZGF0ZWRcIjtcclxuICAgIEVudGl0eUV2ZW50VHlwZS5GYWN0b3J5UmVnaXN0ZXJlZCA9IFwiZmFjdG9yeVJlZ2lzdGVyZWRcIjtcclxuICAgIEVudGl0eUV2ZW50VHlwZS5GYWN0b3J5VW5yZWdpc3RlcmVkID0gXCJmYWN0b3J5VW5yZWdpc3RlcmVkXCI7XHJcbiAgICBFbnRpdHlFdmVudFR5cGUuU3RhdHVzQ2hhbmdlID0gXCJzdGF0dXNDaGFuZ2VcIjtcclxuICAgIEVudGl0eUV2ZW50VHlwZS5BY3Rpdml0eUNvbnRleHRDaGFuZ2UgPSBcImFjdGl2aXR5Q29udGV4dFVwZGF0ZVwiO1xyXG4gICAgRW50aXR5RXZlbnRUeXBlLkFjdGl2aXR5V2luZG93RXZlbnQgPSBcImFjdGl2aXR5V2luZG93RXZlbnRcIjtcclxuICAgIHJldHVybiBFbnRpdHlFdmVudFR5cGU7XHJcbn0pKCk7XHJcbmV4cG9ydHMuRW50aXR5RXZlbnRUeXBlID0gRW50aXR5RXZlbnRUeXBlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnRpdHlFdmVudC5qcy5tYXAiLCJ2YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBBY3Rpdml0eUFHTSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eUFHTShhY3Rpdml0eSkge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXR5ID0gYWN0aXZpdHk7XHJcbiAgICB9XHJcbiAgICBBY3Rpdml0eUFHTS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2Vuc3VyZUhhc0FnbSgpO1xyXG4gICAgICAgIEFjdGl2aXR5QUdNLkFHTS5yZWdpc3RlcihkZWZpbml0aW9uLCBoYW5kbGVyKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eUFHTS5wcm90b3R5cGUuc2VydmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9lbnN1cmVIYXNBZ20oKTtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0aGlzLl9hY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZpdHkud2luZG93cy5tYXAoZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHcuaW5zdGFuY2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLm1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZW5zdXJlSGFzQWdtKCk7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwodGhpcy5fYWN0aXZpdHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHdpbmRvd3MgPSB0aGlzLl9hY3Rpdml0eS53aW5kb3dzO1xyXG4gICAgICAgIHZhciBtZXRob2ROYW1lcyA9IFtdO1xyXG4gICAgICAgIHZhciBtZXRob2RzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHdpbmRvd3MubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IHdpbmRvd3NbaW5kZXhdO1xyXG4gICAgICAgICAgICB2YXIgd2luZG93TWV0aG9kcyA9IHRoaXMubWV0aG9kc0ZvcldpbmRvdyh3aW5kb3dfMSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIG1ldGhvZEluZGV4ID0gMDsgbWV0aG9kSW5kZXggPCB3aW5kb3dNZXRob2RzLmxlbmd0aDsgbWV0aG9kSW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRXaW5kb3dNZXRob2QgPSB3aW5kb3dNZXRob2RzW21ldGhvZEluZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChtZXRob2ROYW1lcy5pbmRleE9mKGN1cnJlbnRXaW5kb3dNZXRob2QubmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kTmFtZXMucHVzaChjdXJyZW50V2luZG93TWV0aG9kLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZHMucHVzaChjdXJyZW50V2luZG93TWV0aG9kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWV0aG9kcztcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eUFHTS5wcm90b3R5cGUubWV0aG9kc0ZvcldpbmRvdyA9IGZ1bmN0aW9uICh3aW5kb3cpIHtcclxuICAgICAgICB0aGlzLl9lbnN1cmVIYXNBZ20oKTtcclxuICAgICAgICBpZiAoIXdpbmRvdy5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBY3Rpdml0eUFHTS5BR00ubWV0aG9kc0Zvckluc3RhbmNlKHdpbmRvdy5pbnN0YW5jZSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLmludm9rZSA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBhcmcsIHRhcmdldCwgb3B0aW9ucywgc3VjY2VzcywgZXJyb3IpIHtcclxuICAgICAgICB0aGlzLl9lbnN1cmVIYXNBZ20oKTtcclxuICAgICAgICB2YXIgYWN0aXZpdHlTZXJ2ZXJzID0gdGhpcy5zZXJ2ZXJzKCk7XHJcbiAgICAgICAgdmFyIHNlcnZlcnNUb0ludm9rZUFnYWluc3QgPSBbXTtcclxuICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IFwiYWN0aXZpdHkuYWxsXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1dGlsLmlzU3RyaW5nKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gXCJhY3Rpdml0eS5hbGxcIikge1xyXG4gICAgICAgICAgICAgICAgc2VydmVyc1RvSW52b2tlQWdhaW5zdCA9IGFjdGl2aXR5U2VydmVycztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQgPT09IFwiYWN0aXZpdHkuYmVzdFwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG90ZW50aWFsVGFyZ2V0cyA9IGFjdGl2aXR5U2VydmVycy5maWx0ZXIoZnVuY3Rpb24gKHNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2RzID0gQWN0aXZpdHlBR00uQUdNLm1ldGhvZHNGb3JJbnN0YW5jZShzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2RzLmZpbHRlcihmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5uYW1lID09PSBtZXRob2ROYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3RlbnRpYWxUYXJnZXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJzVG9JbnZva2VBZ2FpbnN0ID0gW3BvdGVudGlhbFRhcmdldHNbMF1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldCA9PT0gXCJhbGxcIiB8fCB0YXJnZXQgPT09IFwiYmVzdFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQWN0aXZpdHlBR00uQUdNLmludm9rZShtZXRob2ROYW1lLCBhcmcsIHRhcmdldCwgb3B0aW9ucywgc3VjY2VzcywgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbnZva2UgdGFyZ2V0IFwiICsgdGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh1dGlsLmlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RFbGVtID0gdGFyZ2V0WzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzQWdtSW5zdGFuY2UoZmlyc3RFbGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlcnNUb0ludm9rZUFnYWluc3QgPSB0YXJnZXQubWFwKGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gaW5zdGFuY2U7IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5faXNBY3Rpdml0eVdpbmRvdyhmaXJzdEVsZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyc1RvSW52b2tlQWdhaW5zdCA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHdpbikgeyByZXR1cm4gd2luLmluc3RhbmNlOyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdGFyZ2V0IG9iamVjdFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzQWdtSW5zdGFuY2UodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgc2VydmVyc1RvSW52b2tlQWdhaW5zdCA9IFt0YXJnZXRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2lzQWN0aXZpdHlXaW5kb3codGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgc2VydmVyc1RvSW52b2tlQWdhaW5zdCA9IFt0YXJnZXQuaW5zdGFuY2VdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0YXJnZXQgb2JqZWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBY3Rpdml0eUFHTS5BR00uaW52b2tlKG1ldGhvZE5hbWUsIGFyZywgc2VydmVyc1RvSW52b2tlQWdhaW5zdCwgb3B0aW9ucywgc3VjY2VzcywgZXJyb3IpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5QUdNLnByb3RvdHlwZS51bnJlZ2lzdGVyID0gZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcclxuICAgICAgICB0aGlzLl9lbnN1cmVIYXNBZ20oKTtcclxuICAgICAgICByZXR1cm4gQWN0aXZpdHlBR00uQUdNLnVucmVnaXN0ZXIoZGVmaW5pdGlvbik7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLmNyZWF0ZVN0cmVhbSA9IGZ1bmN0aW9uIChtZXRob2REZWZpbml0aW9uLCBzdWJzY3JpYmVyQWRkZWRIYW5kbGVyLCBzdWJzY3JpYmVyUmVtb3ZlZEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZW5zdXJlSGFzQWdtKCk7XHJcbiAgICAgICAgQWN0aXZpdHlBR00uQUdNLmNyZWF0ZVN0cmVhbShtZXRob2REZWZpbml0aW9uLCBzdWJzY3JpYmVyQWRkZWRIYW5kbGVyLCBzdWJzY3JpYmVyUmVtb3ZlZEZ1bmN0aW9uKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eUFHTS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG1ldGhvZERlZmluaXRpb24sIHBhcmFtZXRlcnMsIHRhcmdldCkge1xyXG4gICAgICAgIHRoaXMuX2Vuc3VyZUhhc0FnbSgpO1xyXG4gICAgICAgIHZhciBzZXJ2ZXJzID0gdGhpcy5zZXJ2ZXJzKCk7XHJcbiAgICAgICAgcmV0dXJuIEFjdGl2aXR5QUdNLkFHTS5zdWJzY3JpYmUobWV0aG9kRGVmaW5pdGlvbiwgcGFyYW1ldGVycywgc2VydmVycyk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLl9lbnN1cmVIYXNBZ20gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwoQWN0aXZpdHlBR00uQUdNKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBZ20gc2hvdWxkIGJlIGNvbmZpZ3VyZWQgdG8gYmUgdXNlZCBpbiBhY3Rpdml0eVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlBR00ucHJvdG90eXBlLl9pc0FnbUluc3RhbmNlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHJldHVybiBvYmouYXBwbGljYXRpb24gIT0gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5QUdNLnByb3RvdHlwZS5faXNBY3Rpdml0eVdpbmRvdyA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqLmluc3RhbmNlICE9PSB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFjdGl2aXR5QUdNO1xyXG59KSgpO1xyXG5leHBvcnRzLkFjdGl2aXR5QUdNID0gQWN0aXZpdHlBR007XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5QUdNLmpzLm1hcCIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL2VzNi1wcm9taXNlL2VzNi1wcm9taXNlLmQudHNcIi8+XHJcbnZhciBlbnRpdHlFdmVudF8xID0gcmVxdWlyZShcIi4uL2NvbnRyYWN0cy9lbnRpdHlFdmVudFwiKTtcclxudmFyIGFjdGl2aXR5VHlwZV8xID0gcmVxdWlyZShcIi4uL2VudGl0aWVzL2FjdGl2aXR5VHlwZVwiKTtcclxudmFyIHByb21pc2VFeHRlbnNpb25zXzEgPSByZXF1aXJlKFwiLi4vaGVscGVycy9wcm9taXNlRXh0ZW5zaW9uc1wiKTtcclxudmFyIHJlYWR5TWFya2VyXzEgPSByZXF1aXJlKFwiLi4vaGVscGVycy9yZWFkeU1hcmtlclwiKTtcclxudmFyIGVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vaGVscGVycy9lbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvblwiKTtcclxudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvbG9nZ2VyXCIpO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBsb2NhbFdpbmRvd0ZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL2xvY2FsV2luZG93RmFjdG9yeVwiKTtcclxudmFyIEFjdGl2aXR5TWFuYWdlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eU1hbmFnZXIoYnJpZGdlLCBhdXRvQW5ub3VuY2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2xvZ2dlciA9IGxvZ2dlcl8xLkxvZ2dlci5HZXQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5fYW5ub3VuY2VkV2luZG93cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2JyaWRnZSA9IGJyaWRnZTtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eVR5cGVzID0gbmV3IGVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uXzEuRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24oZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9ncmFiRW50aXR5KGUpOyB9KTtcclxuICAgICAgICB0aGlzLl93aW5kb3dUeXBlcyA9IG5ldyBlbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbl8xLkVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uKGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fZ3JhYkVudGl0eShlKTsgfSk7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZpdGllcyA9IG5ldyBlbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbl8xLkVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uKGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fZ3JhYkVudGl0eShlKTsgfSk7XHJcbiAgICAgICAgdGhpcy5fd2luZG93cyA9IG5ldyBlbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbl8xLkVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uKGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fZ3JhYkVudGl0eShlKTsgfSk7XHJcbiAgICAgICAgdGhpcy5fZGF0YVJlYWR5TWFya2VyID0gbmV3IHJlYWR5TWFya2VyXzEuUmVhZHlNYXJrZXIoXCJBY3Rpdml0eSBNYW5hZ2VyIERhdGFcIiwgW1wiR2V0QWN0aXZpdHlUeXBlc1wiLCBcIkdldFdpbmRvd1R5cGVzXCIsIFwiR2V0QWN0aXZpdGllc1wiLCBcIkdldFdpbmRvd3NcIl0ubGVuZ3RoKTtcclxuICAgICAgICBpZiAoYXV0b0Fubm91bmNlKSB7XHJcbiAgICAgICAgICAgIHZhciBhbm5vdW5jZU1ha2VyID0gbmV3IHJlYWR5TWFya2VyXzEuUmVhZHlNYXJrZXIoXCJBY3Rpdml0eSBNYW5hZ2VyIEFubm91bmNlXCIsIFtcIkFubm91bmNlbWVudFwiXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZWFkeU1hcmtlciA9IGFubm91bmNlTWFrZXI7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGFSZWFkeU1hcmtlci5zZXRDYWxsYmFjayhmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3JlYWR5TWFya2VyLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLmRlYnVnKFwiQXV0byBhbm5vdW5jaW5nIHdpbmRvd1wiKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmFubm91bmNlV2luZG93KClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9hbm5vdW5jZWRXaW5kb3dzLnB1c2godyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3JlYWR5TWFya2VyLnNpZ25hbChcIlN1Y2Nlc3NmdWxseSBhbm5vdW5jZWQgd2luZG93IHdpdGggaWQgJ1wiICsgdy5pZCArIFwiJ1wiKTtcclxuICAgICAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLmRlYnVnKFwiV2lsbCBub3QgYW5ub3VuY2Ugd2luZG93IC0gXCIgKyBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZWFkeU1hcmtlci5zaWduYWwoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlYWR5TWFya2VyID0gdGhpcy5fZGF0YVJlYWR5TWFya2VyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9icmlkZ2UuaW5pdCgpO1xyXG4gICAgICAgIHRoaXMuX2JyaWRnZVxyXG4gICAgICAgICAgICAucmVhZHkoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYXcpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZUZvckRhdGEoKTtcclxuICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUsIFwiYW5ub3VuY2VkV2luZG93c1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbm5vdW5jZWRXaW5kb3dzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgYWxsb3dlZFwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUucmVhZHkgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVhZHlNYXJrZXIuc2V0Q2FsbGJhY2soZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChfdGhpcy5fcmVhZHlNYXJrZXIuZ2V0RXJyb3IoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlRXh0ZW5zaW9uc18xLm5vZGVpZnkocHJvbWlzZSwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuZ2V0QWN0aXZpdHlUeXBlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZpdHlUeXBlcy5nZXQoKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLmdldEFjdGl2aXR5VHlwZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2aXR5VHlwZXMuZ2V0QnlOYW1lKG5hbWUpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUucmVnaXN0ZXJBY3Rpdml0eVR5cGUgPSBmdW5jdGlvbiAoYWN0aXZpdHlUeXBlTmFtZSwgb3duZXJXaW5kb3dUeXBlLCBoZWxwZXJXaW5kb3dUeXBlcywgbGF5b3V0Q29uZmlnLCBkZXNjcmlwdGlvbiwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbChhY3Rpdml0eVR5cGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiYWN0aXZpdHlUeXBlTmFtZSBhcmd1bWVudCBjYW4gbm90IGJlIHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNTdHJpbmcoYWN0aXZpdHlUeXBlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcImFjdGl2aXR5VHlwZU5hbWUgc2hvdWxkIGJlIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYWN0VHlwZSA9IF90aGlzLmdldEFjdGl2aXR5VHlwZShhY3Rpdml0eVR5cGVOYW1lKTtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKGFjdFR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJBY3Rpdml0eSB0eXBlICdcIiArIGFjdGl2aXR5VHlwZU5hbWUgKyBcIicgYWxyZWFkeSBleGlzdHNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG93bmVyRGVmaW5pdGlvbjtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQob3duZXJXaW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiT3duZXIgd2luZG93IHR5cGUgY2FuIG5vdCBiZSB1bmRlZmluZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNTdHJpbmcob3duZXJXaW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgb3duZXJEZWZpbml0aW9uID0geyB0eXBlOiBvd25lcldpbmRvd1R5cGUsIG5hbWU6IFwiXCIsIGlzSW5kZXBlbmRlbnQ6IGZhbHNlLCBhcmd1bWVudHM6IHt9IH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvd25lckRlZmluaXRpb24gPSBvd25lcldpbmRvd1R5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGhlbHBlckRlZmluaXRpb25zID0gW107XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZChoZWxwZXJXaW5kb3dUeXBlcykgJiYgdXRpbC5pc0FycmF5KGhlbHBlcldpbmRvd1R5cGVzKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gaGVscGVyV2luZG93VHlwZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGhlbHBlcldpbmRvd1R5cGVzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1N0cmluZyhpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmaW5pdGlvbiA9IHsgdHlwZTogaXRlbSwgbmFtZTogXCJcIiwgaXNJbmRlcGVuZGVudDogZmFsc2UsIGFyZ3VtZW50czoge30sIHJlbGF0aXZlVG86IFwiXCIsIHJlbGF0aXZlRGlyZWN0aW9uOiBcIlwiLCB3aW5kb3dTdHlsZUF0dHJpYnV0ZXM6IHt9IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHBlckRlZmluaXRpb25zLnB1c2goZGVmaW5pdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJEZWZpbml0aW9ucy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlXHJcbiAgICAgICAgICAgICAgICAucmVnaXN0ZXJBY3Rpdml0eVR5cGUoYWN0aXZpdHlUeXBlTmFtZSwgb3duZXJEZWZpbml0aW9uLCBoZWxwZXJEZWZpbml0aW9ucywgbGF5b3V0Q29uZmlnLCBkZXNjcmlwdGlvbilcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChhY3Rpdml0eVR5cGUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9ncmFiRW50aXR5KGFjdGl2aXR5VHlwZSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFjdGl2aXR5VHlwZSk7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VFeHRlbnNpb25zXzEubm9kZWlmeShwcm9taXNlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS51bnJlZ2lzdGVyQWN0aXZpdHlUeXBlID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdmFyIGFjdFR5cGUgPSBfdGhpcy5nZXRBY3Rpdml0eVR5cGUodHlwZSk7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKGFjdFR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJBY3Rpdml0eSB0eXBlICdcIiArIHR5cGUgKyBcIicgZG9lcyBub3QgZXhpc3RzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fYnJpZGdlLnVucmVnaXN0ZXJBY3Rpdml0eVR5cGUodHlwZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VFeHRlbnNpb25zXzEubm9kZWlmeShwcm9taXNlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5pbml0aWF0ZSA9IGZ1bmN0aW9uIChhY3Rpdml0eVR5cGUsIGNvbnRleHQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdmFyIGFjdFR5cGUgPSBfdGhpcy5nZXRBY3Rpdml0eVR5cGUoYWN0aXZpdHlUeXBlKTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQoYWN0VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIkFjdGl2aXR5IHR5cGUgJ1wiICsgYWN0aXZpdHlUeXBlICsgXCInIGRvZXMgbm90IGV4aXN0c1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlXHJcbiAgICAgICAgICAgICAgICAuaW5pdGlhdGVBY3Rpdml0eShhY3Rpdml0eVR5cGUsIGNvbnRleHQpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYWN0SWQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9hY3Rpdml0aWVzXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldE9yV2FpdChhY3RJZClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhY3QpO1xyXG4gICAgICAgICAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0pO1xyXG4gICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VFeHRlbnNpb25zXzEubm9kZWlmeShwcm9taXNlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5zdWJzY3JpYmVBY3Rpdml0eVR5cGVFdmVudHMgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2aXR5VHlwZXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChhdCwgY29udGV4dCkge1xyXG4gICAgICAgICAgICBoYW5kbGVyKGF0LCBjb250ZXh0LnR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuZ2V0V2luZG93VHlwZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpbmRvd1R5cGVzLmdldCgpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuZ2V0V2luZG93VHlwZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpbmRvd1R5cGVzLmdldEJ5TmFtZShuYW1lKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnJlZ2lzdGVyV2luZG93RmFjdG9yeSA9IGZ1bmN0aW9uICh3aW5kb3dUeXBlLCBmYWN0b3J5TWV0aG9kLCBkZXNjcmlwdGlvbiwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh3aW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwibm8gd2luZG93VHlwZSBzcGVjaWZpZWRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNPYmplY3Qod2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvd1R5cGUgPSB3aW5kb3dUeXBlLmdldE5hbWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghdXRpbC5pc1N0cmluZyh3aW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwid2luZG93VHlwZSBzaG91bGQgYmUgc3RyaW5nIG9yIG9iamVjdCB0aGF0IGhhcyBnZXROYW1lIG1ldGhvZFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZmFjdG9yeSA9IG5ldyBsb2NhbFdpbmRvd0ZhY3RvcnlfMS5Mb2NhbFdpbmRvd0ZhY3RvcnkoZmFjdG9yeU1ldGhvZCwgZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlXHJcbiAgICAgICAgICAgICAgICAucmVnaXN0ZXJXaW5kb3dGYWN0b3J5KHdpbmRvd1R5cGUsIGZhY3RvcnkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh2KTtcclxuICAgICAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlRXh0ZW5zaW9uc18xLm5vZGVpZnkocHJvbWlzZSwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUudW5yZWdpc3RlcldpbmRvd0ZhY3RvcnkgPSBmdW5jdGlvbiAod2luZG93VHlwZSwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh3aW5kb3dUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwibm8gd2luZG93VHlwZSBzcGVjaWZpZWRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzU3RyaW5nKHdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJ3aW5kb3dUeXBlIHNob3VsZCBiZSBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlXHJcbiAgICAgICAgICAgICAgICAudW5yZWdpc3RlcldpbmRvd0ZhY3Rvcnkod2luZG93VHlwZSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHYpO1xyXG4gICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VFeHRlbnNpb25zXzEubm9kZWlmeShwcm9taXNlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5nZXRBY3Rpdml0aWVzID0gZnVuY3Rpb24gKGFjdGl2aXR5VHlwZSkge1xyXG4gICAgICAgIHZhciBhY3QgPSB0aGlzLl9hY3Rpdml0aWVzLmdldCgpO1xyXG4gICAgICAgIGlmICghYWN0aXZpdHlUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0eXBlcyA9IGFjdGl2aXR5VHlwZTtcclxuICAgICAgICBpZiAodXRpbC5pc1N0cmluZyhhY3Rpdml0eVR5cGUpKSB7XHJcbiAgICAgICAgICAgIHR5cGVzID0gW2FjdGl2aXR5VHlwZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFjdGl2aXR5VHlwZSBpbnN0YW5jZW9mIGFjdGl2aXR5VHlwZV8xWydkZWZhdWx0J10pIHtcclxuICAgICAgICAgICAgdHlwZXMgPSBbYWN0aXZpdHlUeXBlLm5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhY3Rpdml0eVR5cGUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbnB1dCBhcmd1bWVudCAnYWN0aXZpdHlUeXBlJyA9IFwiICsgYWN0aXZpdHlUeXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFjdC5maWx0ZXIoZnVuY3Rpb24gKGFjdCkge1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IGFjdC50eXBlO1xyXG4gICAgICAgICAgICByZXR1cm4gdXRpbC5zb21lKHR5cGVzLCBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGUuaWQgPT0gdC5pZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5nZXRBY3Rpdml0eUJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZpdGllcy5nZXRCeU5hbWUoaWQpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuYW5ub3VuY2VXaW5kb3cgPSBmdW5jdGlvbiAoYWN0aXZpdHlXaW5kb3dJZCwgd2luZG93VHlwZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciBhbm5vdW5jZW1lbnRJbmZvID0gX3RoaXMuX2JyaWRnZS5nZXRBbm5vdW5jZW1lbnRJbmZvKCk7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKGFjdGl2aXR5V2luZG93SWQpKSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpdml0eVdpbmRvd0lkID0gYW5ub3VuY2VtZW50SW5mby5hY3Rpdml0eVdpbmRvd0lkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKHdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3dUeXBlID0gYW5ub3VuY2VtZW50SW5mby5hY3Rpdml0eVdpbmRvd1R5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwod2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBub3QgYW5ub3VuY2UgLSB1bmtub3duIHdpbmRvd1R5cGVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwoYWN0aXZpdHlXaW5kb3dJZCkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9sb2dnZXIuZGVidWcoXCJSZWdpc3RlcmluZyB3aW5kb3cgd2l0aCB0eXBlOidcIiArIHdpbmRvd1R5cGUgKyBcIicsIG5hbWU6J1wiICsgYW5ub3VuY2VtZW50SW5mby5hY3Rpdml0eVdpbmRvd05hbWUgKyBcIicsIGluZC46J1wiICsgYW5ub3VuY2VtZW50SW5mby5hY3Rpdml0eVdpbmRvd0luZGVwZW5kZW50ICsgXCInXCIpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2JyaWRnZS5yZWdpc3RlcldpbmRvdyh3aW5kb3dUeXBlLCBhbm5vdW5jZW1lbnRJbmZvLmFjdGl2aXR5V2luZG93TmFtZSwgYW5ub3VuY2VtZW50SW5mby5hY3Rpdml0eVdpbmRvd0luZGVwZW5kZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKF90aGlzLl93aW5kb3dzLmdldE9yV2FpdC5iaW5kKF90aGlzLl93aW5kb3dzKSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodyk7XHJcbiAgICAgICAgICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLmRlYnVnKFwiQW5ub3VuY2luZyB3aW5kb3cgd2l0aCBpZCAnXCIgKyBhY3Rpdml0eVdpbmRvd0lkICsgXCInIGFuZCB0eXBlICdcIiArIHdpbmRvd1R5cGUgKyBcIidcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFdpbmRvdyA9IF90aGlzLl93aW5kb3dzLmdldEJ5TmFtZShhY3Rpdml0eVdpbmRvd0lkKTtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbChjdXJyZW50V2luZG93KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9sb2dnZXIuZGVidWcoXCJXaW5kb3cgd2l0aCBpZCAnXCIgKyBhY3Rpdml0eVdpbmRvd0lkICsgXCInIGFscmVhZHkgYW5ub3VuY2VkIC0gcmV1c2luZyB0aGUgd2luZG93XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY3VycmVudFdpbmRvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHdpbmRvd0V2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChhLCB3LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5V2luZG93SWQgPT09IHcuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPT09IFwiam9pbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpdml0eSA9IHcuYWN0aXZpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZChhY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJVTkRFRklORUQgQUNUSVZJVFlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLnRyYWNlKFwiR290IGpvaW5lZCBldmVudCBmb3IgaWQgJ1wiICsgYWN0aXZpdHlXaW5kb3dJZCArIFwiJ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy51bnN1YnNjcmliZVdpbmRvd0V2ZW50cyh3aW5kb3dFdmVudEhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZVdpbmRvd0V2ZW50cyh3aW5kb3dFdmVudEhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci50cmFjZShcIldhaXRpbmcgZm9yIGpvaW5lZCBldmVudCBmb3IgaWQgJ1wiICsgYWN0aXZpdHlXaW5kb3dJZCArIFwiJ1wiKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9icmlkZ2UuYW5ub3VuY2VXaW5kb3cod2luZG93VHlwZSwgYWN0aXZpdHlXaW5kb3dJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnN1YnNjcmliZVdpbmRvd1R5cGVFdmVudHMgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX3dpbmRvd1R5cGVzLnN1YnNjcmliZShmdW5jdGlvbiAod3QsIGNvbnRleHQpIHtcclxuICAgICAgICAgICAgaGFuZGxlcih3dCwgY29udGV4dC50eXBlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnN1YnNjcmliZUFjdGl2aXR5RXZlbnRzID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0aWVzLnN1YnNjcmliZShmdW5jdGlvbiAoYWN0LCBjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LnR5cGUgPT09IGVudGl0eUV2ZW50XzEuRW50aXR5RXZlbnRUeXBlLlN0YXR1c0NoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSBjb250ZXh0O1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcihhY3QsIHAubmV3U3RhdHVzLCBwLm9sZFN0YXR1cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnN1YnNjcmliZVdpbmRvd0V2ZW50cyA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5fd2luZG93cy5zdWJzY3JpYmUoZnVuY3Rpb24gKHdpbmRvdywgY29udGV4dCkge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC50eXBlID09PSBlbnRpdHlFdmVudF8xLkVudGl0eUV2ZW50VHlwZS5BY3Rpdml0eVdpbmRvd0V2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcCA9IGNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKHdpbmRvdy5hY3Rpdml0eSwgd2luZG93LCBwLmV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUudW5zdWJzY3JpYmVXaW5kb3dFdmVudHMgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuY3JlYXRlV2luZG93ID0gZnVuY3Rpb24gKGFjdGl2aXR5LCB3aW5kb3dUeXBlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKGFjdGl2aXR5KSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiYWN0aXZpdHkgaXMgdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHdpbmRvd1R5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJ3aW5kb3dUeXBlIGlzIHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgd2luZG93RGVmaW5pdGlvbjtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNTdHJpbmcod2luZG93VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvd0RlZmluaXRpb24gPSB7IHR5cGU6IHdpbmRvd1R5cGUsIG5hbWU6IFwiXCIsIGlzSW5kZXBlbmRlbnQ6IGZhbHNlLCBhcmd1bWVudHM6IHt9IH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3dEZWZpbml0aW9uID0gd2luZG93VHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVsYXRpdmVUb1dpbmRvdztcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHdpbmRvd0RlZmluaXRpb24ucmVsYXRpdmVUbykpIHtcclxuICAgICAgICAgICAgICAgIHJlbGF0aXZlVG9XaW5kb3cgPSB3aW5kb3dEZWZpbml0aW9uLnJlbGF0aXZlVG87XHJcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZVRvV2luZG93KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dzID0gX3RoaXMuZ2V0V2luZG93cyh7IHR5cGU6IHJlbGF0aXZlVG9XaW5kb3cgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHdpbmRvd3MpICYmIHdpbmRvd3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dEZWZpbml0aW9uLnJlbGF0aXZlVG8gPSB3aW5kb3dzWzBdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHJlbGF0aXZlVG9XaW5kb3cudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2luZG93cyA9IF90aGlzLmdldFdpbmRvd3MoeyB0eXBlOiByZWxhdGl2ZVRvV2luZG93LnR5cGUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHdpbmRvd3MpICYmIHdpbmRvd3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dEZWZpbml0aW9uLnJlbGF0aXZlVG8gPSB3aW5kb3dzWzBdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHJlbGF0aXZlVG9XaW5kb3cud2luZG93SWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93RGVmaW5pdGlvbi5yZWxhdGl2ZVRvID0gcmVsYXRpdmVUb1dpbmRvdy53aW5kb3dJZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlLmNyZWF0ZVdpbmRvdyhhY3Rpdml0eS5pZCwgd2luZG93RGVmaW5pdGlvbilcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh3aWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB3aW5kb3cgPSBfdGhpcy5fd2luZG93cy5nZXRCeU5hbWUod2lkKTtcclxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZCh3aW5kb3cpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh3aW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5kZWJ1ZyhcIldpbmRvdyBjcmVhdGVkLCB3YWl0aW5nIGZvciB3aW5kb3cgZW50aXR5IHdpdGggaWQgXCIgKyB3aWQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAod2luZG93LCBjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5pZCA9PT0gd2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhcIkdvdCBlbnRpdHkgd2luZG93IHdpdGggaWQgXCIgKyB3aWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHdpbmRvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dpbmRvd3MudW5zdWJzY3JpYmUoaGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfS5iaW5kKF90aGlzKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLl93aW5kb3dzLnN1YnNjcmliZShoYW5kbGVyKTtcclxuICAgICAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlRXh0ZW5zaW9uc18xLm5vZGVpZnkocHJvbWlzZSwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuam9pbldpbmRvd1RvQWN0aXZpdHkgPSBmdW5jdGlvbiAoYWN0aXZpdHksIHdpbmRvdywgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUubGVhdmVXaW5kb3dGcm9tQWN0aXZpdHkgPSBmdW5jdGlvbiAoYWN0aXZpdHksIHdpbmRvdywgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuc2V0QWN0aXZpdHlDb250ZXh0ID0gZnVuY3Rpb24gKGFjdGl2aXR5LCBjb250ZXh0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKGFjdGl2aXR5KSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiYWN0aXZpdHkgY2FuIG5vdCBiZSBudWxsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9icmlkZ2VcclxuICAgICAgICAgICAgICAgIC51cGRhdGVBY3Rpdml0eUNvbnRleHQoYWN0aXZpdHksIGNvbnRleHQsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG9iaik7XHJcbiAgICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZUV4dGVuc2lvbnNfMS5ub2RlaWZ5KHByb21pc2UsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eU1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZUFjdGl2aXR5Q29udGV4dCA9IGZ1bmN0aW9uIChhY3Rpdml0eSwgY29udGV4dCwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBpZiAodXRpbC5pc1VuZGVmaW5lZE9yTnVsbChhY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcImFjdGl2aXR5IGNhbiBub3QgYmUgbnVsbFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZEtleXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0Lmhhc093blByb3BlcnR5KGtleSkgJiYgY29udGV4dFtrZXldID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZEtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9icmlkZ2VcclxuICAgICAgICAgICAgICAgIC51cGRhdGVBY3Rpdml0eUNvbnRleHQoYWN0aXZpdHksIGNvbnRleHQsIGZhbHNlLCByZW1vdmVkS2V5cylcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUob2JqKTtcclxuICAgICAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlRXh0ZW5zaW9uc18xLm5vZGVpZnkocHJvbWlzZSwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuc3Vic2NyaWJlQWN0aXZpdHlDb250ZXh0Q2hhbmdlZCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZpdGllcy5zdWJzY3JpYmUoZnVuY3Rpb24gKGFjdCwgY29udGV4dCkge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC50eXBlID09PSBlbnRpdHlFdmVudF8xLkVudGl0eUV2ZW50VHlwZS5BY3Rpdml0eUNvbnRleHRDaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVDb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIoYWN0LCB1cGRhdGVDb250ZXh0LmNvbnRleHQsIHVwZGF0ZUNvbnRleHQudXBkYXRlZCwgdXBkYXRlQ29udGV4dC5yZW1vdmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5TWFuYWdlci5wcm90b3R5cGUuc3RvcEFjdGl2aXR5ID0gZnVuY3Rpb24gKGFjdGl2aXR5LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5fYnJpZGdlLnN0b3BBY3Rpdml0eShhY3Rpdml0eSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VFeHRlbnNpb25zXzEubm9kZWlmeShwcm9taXNlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5nZXRXaW5kb3dzID0gZnVuY3Rpb24gKGZpbHRlcikge1xyXG4gICAgICAgIGlmICh1dGlsLmlzVW5kZWZpbmVkKGZpbHRlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dpbmRvd3MuZ2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZChmaWx0ZXIuaWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5fd2luZG93cy5nZXRCeU5hbWUoZmlsdGVyLmlkKV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhbGxXaW5kb3dzID0gdGhpcy5fd2luZG93cy5nZXQoKTtcclxuICAgICAgICByZXR1cm4gYWxsV2luZG93cy5maWx0ZXIoZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkKGZpbHRlci50eXBlKSAmJiB3LnR5cGUuaWQgIT09IGZpbHRlci50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkKGZpbHRlci5uYW1lKSAmJiB3Lm5hbWUgIT09IGZpbHRlci5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkKGZpbHRlci5hY3Rpdml0eUlkKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWRPck51bGwody5hY3Rpdml0eSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAody5hY3Rpdml0eS5pZCAhPT0gZmlsdGVyLmFjdGl2aXR5SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5fZ3JhYkVudGl0eSA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcclxuICAgICAgICBlbnRpdHkubWFuYWdlciA9IHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5fc3Vic2NyaWJlRm9yRGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhcIlN0YXJ0IGdldHRpbmcgaW5pdGlhbCBkYXRhLi4uXCIpO1xyXG4gICAgICAgIHRoaXMuX2JyaWRnZS5vbkFjdGl2aXR5VHlwZVN0YXR1c0NoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2FjdGl2aXR5VHlwZXMucHJvY2VzcyhldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYnJpZGdlLmdldEFjdGl2aXR5VHlwZXMoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYXQpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2FjdGl2aXR5VHlwZXMuYWRkKGF0KTtcclxuICAgICAgICAgICAgX3RoaXMuX2RhdGFSZWFkeU1hcmtlci5zaWduYWwoXCJHb3QgYWN0IHR5cGVzXCIpO1xyXG4gICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpcy5fbG9nZ2VyLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgX3RoaXMuX2RhdGFSZWFkeU1hcmtlci5lcnJvcihcIkNhbiBub3QgaW5pdGlhbGl6ZSBBY3Rpdml0eU1hbmFnZXIgLSBlcnJvciBnZXR0aW5nIGFjdGl2aXR5IHR5cGVzIC1cIiArIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9icmlkZ2Uub25XaW5kb3dUeXBlU3RhdHVzQ2hhbmdlKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fd2luZG93VHlwZXMucHJvY2VzcyhldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYnJpZGdlLmdldFdpbmRvd1R5cGVzKClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHd0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl93aW5kb3dUeXBlcy5hZGQod3QpO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGF0YVJlYWR5TWFya2VyLnNpZ25hbChcIkdvdCB3aW5kb3cgdHlwZXNcIik7XHJcbiAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9sb2dnZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGF0YVJlYWR5TWFya2VyLmVycm9yKFwiQ2FuIG5vdCBpbml0aWFsaXplIEFjdGl2aXR5TWFuYWdlciAtIGVycm9yIGdldHRpbmcgd2luZG93IHR5cGVzICBcIiArIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9icmlkZ2Uub25BY3Rpdml0eVN0YXR1c0NoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2FjdGl2aXRpZXMucHJvY2VzcyhldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fYnJpZGdlLmdldEFjdGl2aXRpZXMoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYWMpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2FjdGl2aXRpZXMuYWRkKGFjKTtcclxuICAgICAgICAgICAgX3RoaXMuX2RhdGFSZWFkeU1hcmtlci5zaWduYWwoXCJHb3QgYWN0aXZpdGllc1wiKTtcclxuICAgICAgICB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2xvZ2dlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIF90aGlzLl9kYXRhUmVhZHlNYXJrZXIuZXJyb3IoXCJDYW4gbm90IGluaXRpYWxpemUgQWN0aXZpdHlNYW5hZ2VyIC0gZXJyb3IgZ2V0dGluZyBhY3Rpdml0eSBpbnN0YW5jZXMgLVwiICsgZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX2JyaWRnZS5vbkFjdGl2aXR5V2luZG93Q2hhbmdlKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fd2luZG93cy5wcm9jZXNzKGV2ZW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9icmlkZ2UuZ2V0QWN0aXZpdHlXaW5kb3dzKClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGF3KSB7XHJcbiAgICAgICAgICAgIF90aGlzLl93aW5kb3dzLmFkZChhdyk7XHJcbiAgICAgICAgICAgIF90aGlzLl9kYXRhUmVhZHlNYXJrZXIuc2lnbmFsKFwiR290IHdpbmRvd3NcIik7XHJcbiAgICAgICAgfSlbJ2NhdGNoJ10oZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9sb2dnZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGF0YVJlYWR5TWFya2VyLmVycm9yKFwiQ2FuIG5vdCBpbml0aWFsaXplIEFjdGl2aXR5TWFuYWdlciAtIGVycm9yIGdldHRpbmcgYWN0aXZpdHkgd2luZG93cyAtXCIgKyBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5nZXRXaW5kb3dCb3VuZHMgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnJpZGdlLmdldFdpbmRvd0JvdW5kcyhpZCk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5zZXRXaW5kb3dCb3VuZHMgPSBmdW5jdGlvbiAoaWQsIGJvdW5kcywgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fYnJpZGdlLnNldFdpbmRvd0JvdW5kcyhpZCwgYm91bmRzKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSgpOyB9KVsnY2F0Y2gnXShmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VFeHRlbnNpb25zXzEubm9kZWlmeShwcm9taXNlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlNYW5hZ2VyLnByb3RvdHlwZS5jbG9zZVdpbmRvdyA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9icmlkZ2UuY2xvc2VXaW5kb3coaWQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBBY3Rpdml0eU1hbmFnZXI7XHJcbn0pKCk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0c1snZGVmYXVsdCddPSBBY3Rpdml0eU1hbmFnZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5TWFuYWdlci5qcy5tYXAiLCJ2YXIgTG9jYWxXaW5kb3dGYWN0b3J5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExvY2FsV2luZG93RmFjdG9yeShjcmVhdGVGdW5jdGlvbiwgZGVzY3JpcHRpb24pIHtcclxuICAgICAgICB0aGlzLl9jcmVhdGVGdW5jdGlvbiA9IGNyZWF0ZUZ1bmN0aW9uO1xyXG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICB9XHJcbiAgICBMb2NhbFdpbmRvd0ZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChhY3Rpdml0eVdpbmRvd0lkLCBjb250ZXh0LCBsYXlvdXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlRnVuY3Rpb24oYWN0aXZpdHlXaW5kb3dJZCwgY29udGV4dCwgbGF5b3V0KTtcclxuICAgIH07XHJcbiAgICBMb2NhbFdpbmRvd0ZhY3RvcnkucHJvdG90eXBlLmRlc2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTG9jYWxXaW5kb3dGYWN0b3J5O1xyXG59KSgpO1xyXG5leHBvcnRzLkxvY2FsV2luZG93RmFjdG9yeSA9IExvY2FsV2luZG93RmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxXaW5kb3dGYWN0b3J5LmpzLm1hcCIsInZhciBQcm94eVdpbmRvd0ZhY3RvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJveHlXaW5kb3dGYWN0b3J5KGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgIH1cclxuICAgIFByb3h5V2luZG93RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGFjdGl2aXR5V2luZG93SWQsIGNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIFByb3h5V2luZG93RmFjdG9yeS5wcm90b3R5cGUuZGVzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2NyaXB0aW9uO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcm94eVdpbmRvd0ZhY3Rvcnk7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUHJveHlXaW5kb3dGYWN0b3J5ID0gUHJveHlXaW5kb3dGYWN0b3J5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm94eVdpbmRvd0ZhY3RvcnkuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFjdGl2aXR5RW50aXR5XzEgPSByZXF1aXJlKFwiLi9hY3Rpdml0eUVudGl0eVwiKTtcclxudmFyIGFjdGl2aXR5QUdNXzEgPSByZXF1aXJlKFwiLi4vY29yZS9hY3Rpdml0eUFHTVwiKTtcclxudmFyIEFjdGl2aXR5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhBY3Rpdml0eSwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEFjdGl2aXR5KGlkLCBhY3RUeXBlLCBzdGF0dXMsIGNvbnRleHQsIG93bmVyLCBoZWxwZXJXaW5kb3dzKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgaWQpO1xyXG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5fYWN0VHlwZSA9IGFjdFR5cGU7XHJcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuX293bmVyID0gb3duZXI7XHJcbiAgICAgICAgdGhpcy5faGVscGVyV2luZG93cyA9IGhlbHBlcldpbmRvd3M7XHJcbiAgICAgICAgdGhpcy5fYWdtID0gbmV3IGFjdGl2aXR5QUdNXzEuQWN0aXZpdHlBR00odGhpcyk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHkucHJvdG90eXBlLCBcInR5cGVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tYW5hZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmdldEFjdGl2aXR5VHlwZSh0aGlzLl9hY3RUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5LnByb3RvdHlwZSwgXCJjb250ZXh0XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHkucHJvdG90eXBlLCBcInN0YXR1c1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHkucHJvdG90eXBlLCBcIm93bmVyXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX293bmVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5LnByb3RvdHlwZSwgXCJ3aW5kb3dzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5nZXRXaW5kb3dzKHsgYWN0aXZpdHlJZDogdGhpcy5faWQgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHkucHJvdG90eXBlLCBcImFnbVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hZ207XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uICh3aW5kb3csIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5qb2luV2luZG93VG9BY3Rpdml0eSh0aGlzLCB3aW5kb3csIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUuY3JlYXRlV2luZG93ID0gZnVuY3Rpb24gKHdpbmRvd1R5cGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5jcmVhdGVXaW5kb3codGhpcywgd2luZG93VHlwZSwgY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5LnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uICh3aW5kb3csIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5sZWF2ZVdpbmRvd0Zyb21BY3Rpdml0eSh0aGlzLCB3aW5kb3csIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUuZ2V0V2luZG93c0J5VHlwZSA9IGZ1bmN0aW9uICh3aW5kb3dUeXBlKSB7XHJcbiAgICAgICAgdmFyIGZpbHRlciA9IHsgYWN0aXZpdHlJZDogdGhpcy5faWQsIHR5cGU6IHdpbmRvd1R5cGUgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmdldFdpbmRvd3MoZmlsdGVyKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIuc2V0QWN0aXZpdHlDb250ZXh0KHRoaXMsIGNvbnRleHQsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIudXBkYXRlQWN0aXZpdHlDb250ZXh0KHRoaXMsIGNvbnRleHQsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUub25TdGF0dXNDaGFuZ2UgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyLnN1YnNjcmliZUFjdGl2aXR5RXZlbnRzKGZ1bmN0aW9uIChhLCBucywgb3MpIHtcclxuICAgICAgICAgICAgaWYgKGEuaWQgPT09IF90aGlzLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGEsIG5zLCBvcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUub25XaW5kb3dFdmVudCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm1hbmFnZXIuc3Vic2NyaWJlV2luZG93RXZlbnRzKGZ1bmN0aW9uIChhLCB3LCBlKSB7XHJcbiAgICAgICAgICAgIGlmIChhLmlkID09PSBfdGhpcy5pZCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcihhLCB3LCBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5LnByb3RvdHlwZS5vbkNvbnRleHRDaGFuZ2VkID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubWFuYWdlci5zdWJzY3JpYmVBY3Rpdml0eUNvbnRleHRDaGFuZ2VkKGZ1bmN0aW9uIChhY3QsIGNvbnRleHQsIGRlbHRhLCByZW1vdmVkKSB7XHJcbiAgICAgICAgICAgIGlmIChhY3QuaWQgPT09IF90aGlzLmlkKSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGNvbnRleHQsIGRlbHRhLCByZW1vdmVkLCBhY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaGFuZGxlcih0aGlzLmNvbnRleHQsIHRoaXMuY29udGV4dCwgW10sIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubWFuYWdlci5zdG9wQWN0aXZpdHkodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLnVwZGF0ZUNvcmUgPSBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcclxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZUNvcmUuY2FsbCh0aGlzLCBhY3Rpdml0eSk7XHJcbiAgICAgICAgdGhpcy5fYWN0VHlwZSA9IGFjdGl2aXR5Ll9hY3RUeXBlO1xyXG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBhY3Rpdml0eS5fY29udGV4dDtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBhY3Rpdml0eS5fc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuX2hlbHBlcldpbmRvd3MgPSBhY3Rpdml0eS5faGVscGVyV2luZG93cztcclxuICAgICAgICB0aGlzLl9vd25lciA9IGFjdGl2aXR5Ll9vd25lcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQWN0aXZpdHk7XHJcbn0pKGFjdGl2aXR5RW50aXR5XzFbJ2RlZmF1bHQnXSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0c1snZGVmYXVsdCddPSBBY3Rpdml0eTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHkuanMubWFwIiwidmFyIEFjdGl2aXR5RW50aXR5ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFjdGl2aXR5RW50aXR5KGlkKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICB0aGlzLl9pZCA9IGlkO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5RW50aXR5LnByb3RvdHlwZSwgXCJpZFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEFjdGl2aXR5RW50aXR5LnByb3RvdHlwZS5vblVwZGF0ZWQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlFbnRpdHkucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlci5faWQgIT0gdGhpcy5faWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW4gbm90IHVwZGF0ZSBmcm9tIGVudGl0eSB3aXRoIGRpZmZlcmVudCBpZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlQ29yZShvdGhlcik7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkoKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eUVudGl0eS5wcm90b3R5cGUudXBkYXRlQ29yZSA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5RW50aXR5LnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1tpbmRleF07XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQWN0aXZpdHlFbnRpdHk7XHJcbn0pKCk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0c1snZGVmYXVsdCddPSBBY3Rpdml0eUVudGl0eTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aXZpdHlFbnRpdHkuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFjdGl2aXR5RW50aXR5XzEgPSByZXF1aXJlKFwiLi9hY3Rpdml0eUVudGl0eVwiKTtcclxudmFyIEFjdGl2aXR5VHlwZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWN0aXZpdHlUeXBlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQWN0aXZpdHlUeXBlKG5hbWUsIG93bmVyV2luZG93LCBoZWxwZXJXaW5kb3dzLCBkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG5hbWUpO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5fb3duZXJXaW5kb3cgPSBvd25lcldpbmRvdztcclxuICAgICAgICB0aGlzLl9oZWxwZXJXaW5kb3dzID0gaGVscGVyV2luZG93cyB8fCBbXTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eVR5cGUucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eVR5cGUucHJvdG90eXBlLCBcImRlc2NyaXB0aW9uXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2NyaXB0aW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5VHlwZS5wcm90b3R5cGUsIFwiaGVscGVyV2luZG93c1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oZWxwZXJXaW5kb3dzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5VHlwZS5wcm90b3R5cGUsIFwib3duZXJXaW5kb3dcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fb3duZXJXaW5kb3c7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBY3Rpdml0eVR5cGUucHJvdG90eXBlLnN1YnNjcmliZUFjdGl2aXR5U3RhdHVzQ2hhbmdlID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEFjdGl2aXR5VHlwZS5wcm90b3R5cGUuaW5pdGlhdGUgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmluaXRpYXRlKHRoaXMuX25hbWUsIGNvbnRleHQsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVR5cGUucHJvdG90eXBlLnVwZGF0ZUNvcmUgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlQ29yZS5jYWxsKHRoaXMsIHR5cGUpO1xyXG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gdHlwZS5fZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5fb3duZXJXaW5kb3cgPSB0eXBlLl9vd25lcldpbmRvdztcclxuICAgICAgICB0aGlzLl9oZWxwZXJXaW5kb3dzID0gdHlwZS5faGVscGVyV2luZG93cztcclxuICAgIH07XHJcbiAgICByZXR1cm4gQWN0aXZpdHlUeXBlO1xyXG59KShhY3Rpdml0eUVudGl0eV8xWydkZWZhdWx0J10pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXT0gQWN0aXZpdHlUeXBlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY3Rpdml0eVR5cGUuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIGFjdGl2aXR5RW50aXR5XzEgPSByZXF1aXJlKFwiLi9hY3Rpdml0eUVudGl0eVwiKTtcclxudmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvbG9nZ2VyXCIpO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBBY3Rpdml0eVdpbmRvdyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQWN0aXZpdHlXaW5kb3csIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBY3Rpdml0eVdpbmRvdyhpZCwgbmFtZSwgdHlwZSwgYWN0aXZpdHlJZCwgaW5zdGFuY2UsIGlzSW5kZXBlbmRlbnQpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBpZCk7XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyXzEuTG9nZ2VyLkdldCh0aGlzKTtcclxuICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eUlkID0gYWN0aXZpdHlJZDtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMuX2lzSW5kZXBlbmRlbnQgPSBpc0luZGVwZW5kZW50O1xyXG4gICAgfVxyXG4gICAgQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLmdldEJvdW5kcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLmdldFdpbmRvd0JvdW5kcyh0aGlzLmlkKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUsIFwiaXNJbmRlcGVuZGVudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0luZGVwZW5kZW50O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFjdGl2aXR5V2luZG93LnByb3RvdHlwZSwgXCJ0eXBlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFuYWdlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5nZXRXaW5kb3dUeXBlKHRoaXMuX3R5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLCBcImFjdGl2aXR5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQodGhpcy5fYWN0aXZpdHlJZCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5nZXRBY3Rpdml0eUJ5SWQodGhpcy5fYWN0aXZpdHlJZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLCBcImlzT3duZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYWN0ID0gdGhpcy5hY3Rpdml0eTtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNVbmRlZmluZWQoYWN0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhY3Qub3duZXIuaWQgPT09IHRoaXMuaWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuc2V0VmlzaWJsZSA9IGZ1bmN0aW9uIChpc1Zpc2libGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuc2V0VGl0bGUgPSBmdW5jdGlvbiAodGl0bGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuc2V0Qm91bmRzID0gZnVuY3Rpb24gKGJvdW5kcywgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLnNldFdpbmRvd0JvdW5kcyh0aGlzLmlkLCBib3VuZHMsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5jbG9zZVdpbmRvdyh0aGlzLmlkKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLCBcImluc3RhbmNlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLm9uQWN0aXZpdHlKb2luZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpYmVGb3JBY3Rpdml0eVdpbmRvd0V2ZW50KFwiam9pbmVkXCIsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUub25BY3Rpdml0eVJlbW92ZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpYmVGb3JBY3Rpdml0eVdpbmRvd0V2ZW50KFwicmVtb3ZlZFwiLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgQWN0aXZpdHlXaW5kb3cucHJvdG90eXBlLnVwZGF0ZUNvcmUgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICB0aGlzLl9hY3Rpdml0eUlkID0gb3RoZXIuX2FjdGl2aXR5SWQ7XHJcbiAgICAgICAgdGhpcy5faXNJbmRlcGVuZGVudCA9IG90aGVyLl9pc0luZGVwZW5kZW50O1xyXG4gICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbChvdGhlci5faW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gb3RoZXIuX2luc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBBY3Rpdml0eVdpbmRvdy5wcm90b3R5cGUuX3N1YnNjcmliZUZvckFjdGl2aXR5V2luZG93RXZlbnQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VyLnN1YnNjcmliZVdpbmRvd0V2ZW50cyhmdW5jdGlvbiAoYWN0aXZpdHksIHdpbmRvdywgZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKHdpbmRvdy5pZCAhPT0gX3RoaXMuaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09IGV2ZW50TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soYWN0aXZpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEFjdGl2aXR5V2luZG93O1xyXG59KShhY3Rpdml0eUVudGl0eV8xWydkZWZhdWx0J10pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXT0gQWN0aXZpdHlXaW5kb3c7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2aXR5V2luZG93LmpzLm1hcCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBhY3Rpdml0eUVudGl0eV8xID0gcmVxdWlyZShcIi4vYWN0aXZpdHlFbnRpdHlcIik7XHJcbnZhciBXaW5kb3dUeXBlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhXaW5kb3dUeXBlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gV2luZG93VHlwZShuYW1lLCBmYWN0b3JpZXMpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBuYW1lKTtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLl9mYWN0b3JpZXMgPSBmYWN0b3JpZXM7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2luZG93VHlwZS5wcm90b3R5cGUsIFwibmFtZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdpbmRvd1R5cGUucHJvdG90eXBlLCBcImZhY3Rvcmllc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWN0b3JpZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV2luZG93VHlwZS5wcm90b3R5cGUsIFwid2luZG93c1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIuZ2V0V2luZG93cyh7IHR5cGU6IHRoaXMuX25hbWUgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBXaW5kb3dUeXBlLnByb3RvdHlwZS5yZWdpc3RlckZhY3RvcnkgPSBmdW5jdGlvbiAoZmFjdG9yeSwgZmFjdG9yeU1ldGhvZCwgZGVzY3JpcHRpb24sIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlci5yZWdpc3RlcldpbmRvd0ZhY3RvcnkodGhpcywgZmFjdG9yeU1ldGhvZCwgZGVzY3JpcHRpb24pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBXaW5kb3dUeXBlO1xyXG59KShhY3Rpdml0eUVudGl0eV8xWydkZWZhdWx0J10pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHNbJ2RlZmF1bHQnXT0gV2luZG93VHlwZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93VHlwZS5qcy5tYXAiLCJ2YXIgZW50aXR5RXZlbnRfMSA9IHJlcXVpcmUoXCIuLi9jb250cmFjdHMvZW50aXR5RXZlbnRcIik7XHJcbnZhciBFbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFbnRpdHlPYnNlcnZhYmxlQ29sbGVjdGlvbihwcm9jZXNzTmV3KSB7XHJcbiAgICAgICAgdGhpcy5faXRlbXMgPSB7fTtcclxuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICB0aGlzLl9wcm9jZXNzTmV3ID0gcHJvY2Vzc05ldztcclxuICAgIH1cclxuICAgIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRPbmUgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHRoaXMuYWRkKFtpdGVtXSk7XHJcbiAgICB9O1xyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChpdGVtcykge1xyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpdGVtcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBpdGVtc1tpbmRleF07XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2VzcyhuZXcgZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudChlbGVtZW50LCBuZXcgZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudENvbnRleHQoZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudFR5cGUuQWRkZWQpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBldmVudC5jb250ZXh0O1xyXG4gICAgICAgIHZhciB0eXBlID0gY29udGV4dC50eXBlO1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSBldmVudC5lbnRpdHk7XHJcbiAgICAgICAgdmFyIGludGVybmFsRW50aXR5ID0gdGhpcy5fdXBkYXRlSW50ZXJuYWxDb2xsZWN0aW9ucyhlbnRpdHksIHR5cGUpO1xyXG4gICAgICAgIHRoaXMuX25vdGlmeUxpc3RlbmVycyhpbnRlcm5hbEVudGl0eSwgY29udGV4dCk7XHJcbiAgICB9O1xyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuX2l0ZW1zKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pdGVtcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2l0ZW1zW2tleV07XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRCeU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9pdGVtcykge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuICAgIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uLnByb3RvdHlwZS5nZXRPcldhaXQgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIHZhciBlbnRpdHlBZGRlZEhhbmRsZXIgPSBmdW5jdGlvbiAoZW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50aXR5LmlkICE9PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShlbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMudW5zdWJzY3JpYmUoZW50aXR5QWRkZWRIYW5kbGVyKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGVudGl0eUFkZGVkSGFuZGxlcik7XHJcbiAgICAgICAgICAgIHZhciB3aW5kb3cgPSBfdGhpcy5nZXRCeU5hbWUobmFtZSk7XHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUod2luZG93KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGhhbmRsZXIpO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9pdGVtcykge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2l0ZW1zW2tleV07XHJcbiAgICAgICAgICAgIGhhbmRsZXIoZWxlbWVudCwgbmV3IGVudGl0eUV2ZW50XzEuRW50aXR5RXZlbnRDb250ZXh0KGVudGl0eUV2ZW50XzEuRW50aXR5RXZlbnRUeXBlLkFkZGVkLnRvU3RyaW5nKCkpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICBpZiAoaW5kZXggIT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uLnByb3RvdHlwZS5fbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gKGVudGl0eSwgY29udGV4dCkge1xyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IHRoaXMuX2xpc3RlbmVyc1tpbmRleF07XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKGVudGl0eSwgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlSW50ZXJuYWxDb2xsZWN0aW9ucyA9IGZ1bmN0aW9uIChlbnRpdHksIHR5cGUpIHtcclxuICAgICAgICBpZiAodHlwZSA9PT0gZW50aXR5RXZlbnRfMS5FbnRpdHlFdmVudFR5cGUuUmVtb3ZlZCkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faXRlbXNbZW50aXR5LmlkXTtcclxuICAgICAgICAgICAgcmV0dXJuIGVudGl0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBlbnRpdHkuaWQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5faXRlbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc05ldyhlbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbXNbZW50aXR5LmlkXSA9IGVudGl0eTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zW2VudGl0eS5pZF0udXBkYXRlKGVudGl0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2VudGl0eS5pZF07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uO1xyXG59KSgpO1xyXG5leHBvcnRzLkVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uID0gRW50aXR5T2JzZXJ2YWJsZUNvbGxlY3Rpb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudGl0eU9ic2VydmFibGVDb2xsZWN0aW9uLmpzLm1hcCIsInZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxudmFyIExvZ0xldmVsID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExvZ0xldmVsKCkge1xyXG4gICAgfVxyXG4gICAgTG9nTGV2ZWwuVHJhY2UgPSBcInRyYWNlXCI7XHJcbiAgICBMb2dMZXZlbC5EZWJ1ZyA9IFwiZGVidWdcIjtcclxuICAgIExvZ0xldmVsLkluZm8gPSBcImluZm9cIjtcclxuICAgIExvZ0xldmVsLldhcm4gPSBcIndhcm5cIjtcclxuICAgIExvZ0xldmVsLkVycm9yID0gXCJlcnJvclwiO1xyXG4gICAgcmV0dXJuIExvZ0xldmVsO1xyXG59KSgpO1xyXG5leHBvcnRzLkxvZ0xldmVsID0gTG9nTGV2ZWw7XHJcbnZhciBMb2dnZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTG9nZ2VyKG5hbWUpIHtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwoTG9nZ2VyLkdsdWVMb2dnZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsdWVMb2dnZXIgPSBMb2dnZXIuR2x1ZUxvZ2dlci5zdWJMb2dnZXIobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgTG9nZ2VyLkdldE5hbWVkID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExvZ2dlcihuYW1lKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIuR2V0ID0gZnVuY3Rpb24gKG93bmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMb2dnZXIoTG9nZ2VyLkdldFR5cGVOYW1lKG93bmVyKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS50cmFjZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHRoaXMuX2dsdWVMb2dnZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsdWVMb2dnZXIudHJhY2UobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoTG9nZ2VyLkxldmVsID09PSBMb2dMZXZlbC5UcmFjZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKHRoaXMuX2dldE1lc3NhZ2UobWVzc2FnZSwgTG9nTGV2ZWwuVHJhY2UpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmRlYnVnID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwodGhpcy5fZ2x1ZUxvZ2dlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ2x1ZUxvZ2dlci5kZWJ1ZyhtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLkRlYnVnIHx8XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLlRyYWNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8odGhpcy5fZ2V0TWVzc2FnZShtZXNzYWdlLCBMb2dMZXZlbC5EZWJ1ZykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgaWYgKCF1dGlsLmlzVW5kZWZpbmVkT3JOdWxsKHRoaXMuX2dsdWVMb2dnZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsdWVMb2dnZXIuaW5mbyhtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLkRlYnVnIHx8XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLlRyYWNlIHx8XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLkluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyh0aGlzLl9nZXRNZXNzYWdlKG1lc3NhZ2UsIExvZ0xldmVsLkluZm8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZE9yTnVsbCh0aGlzLl9nbHVlTG9nZ2VyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nbHVlTG9nZ2VyLndhcm4obWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoTG9nZ2VyLkxldmVsID09PSBMb2dMZXZlbC5EZWJ1ZyB8fFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxldmVsID09PSBMb2dMZXZlbC5UcmFjZSB8fFxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxldmVsID09PSBMb2dMZXZlbC5JbmZvIHx8XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTGV2ZWwgPT09IExvZ0xldmVsLldhcm4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyh0aGlzLl9nZXRNZXNzYWdlKG1lc3NhZ2UsIExvZ0xldmVsLkluZm8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBpZiAoIXV0aWwuaXNVbmRlZmluZWRPck51bGwodGhpcy5fZ2x1ZUxvZ2dlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ2x1ZUxvZ2dlci5lcnJvcihtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IodGhpcy5fZ2V0TWVzc2FnZShtZXNzYWdlLCBMb2dMZXZlbC5FcnJvcikpO1xyXG4gICAgICAgICAgICBjb25zb2xlLnRyYWNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUuX2dldE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSwgbGV2ZWwpIHtcclxuICAgICAgICByZXR1cm4gXCJbXCIgKyBsZXZlbCArIFwiXSBcIiArIHRoaXMuX25hbWUgKyBcIiAtIFwiICsgbWVzc2FnZTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIuR2V0VHlwZU5hbWUgPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIGZ1bmNOYW1lUmVnZXggPSAvZnVuY3Rpb24gKC57MSx9KVxcKC87XHJcbiAgICAgICAgdmFyIHJlc3VsdHMgPSAoZnVuY05hbWVSZWdleCkuZXhlYyhvYmplY3QuY29uc3RydWN0b3IudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcmV0dXJuIChyZXN1bHRzICYmIHJlc3VsdHMubGVuZ3RoID4gMSkgPyByZXN1bHRzWzFdIDogXCJcIjtcclxuICAgIH07XHJcbiAgICBMb2dnZXIuTGV2ZWwgPSBMb2dMZXZlbC5JbmZvO1xyXG4gICAgcmV0dXJuIExvZ2dlcjtcclxufSkoKTtcclxuZXhwb3J0cy5Mb2dnZXIgPSBMb2dnZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5qcy5tYXAiLCJ2YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBuZXh0VGljayA9IGZ1bmN0aW9uIChjYikgeyBzZXRUaW1lb3V0KGNiLCAwKTsgfTtcclxuZnVuY3Rpb24gbm9kZWlmeShwcm9taXNlLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKCF1dGlsLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICB9XHJcbiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcclxuICAgICAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3ApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMubm9kZWlmeSA9IG5vZGVpZnk7XHJcbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZUV4dGVuc2lvbnMuanMubWFwIiwidmFyIGxvZ2dlcl8xID0gcmVxdWlyZShcIi4vbG9nZ2VyXCIpO1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3V0aWxcIik7XHJcbnZhciBSZWFkeU1hcmtlciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWFkeU1hcmtlcihuYW1lLCBzaWduYWxzVG9XYWl0KSB7XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyXzEuTG9nZ2VyLkdldE5hbWVkKFwiUmVhZHlNYXJrZXIgW1wiICsgbmFtZSArIFwiXVwiKTtcclxuICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJJbml0aWFsaXppbmcgcmVhZHkgbWFya2VyIGZvciAnXCIgKyBuYW1lICsgXCInIHdpdGggXCIgKyBzaWduYWxzVG9XYWl0ICsgXCIgc2lnbmFscyB0byB3YWl0XCIpO1xyXG4gICAgICAgIGlmIChzaWduYWxzVG9XYWl0IDw9IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzaWduYWwgbnVtYmVyLiBTaG91bGQgYmUgPiAwXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9zaWduYWxzID0gc2lnbmFsc1RvV2FpdDtcclxuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSBbXTtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgIH1cclxuICAgIFJlYWR5TWFya2VyLnByb3RvdHlwZS5zZXRDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU2V0KCkpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzRXJyb3IoKSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayh0aGlzLl9lcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIFJlYWR5TWFya2VyLnByb3RvdHlwZS5zaWduYWwgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhcIlNpZ25hbGVkIC0gXCIgKyBtZXNzYWdlICsgXCIgLSBzaWduYWxzIGxlZnQgXCIgKyAodGhpcy5fc2lnbmFscyAtIDEpKTtcclxuICAgICAgICB0aGlzLl9zaWduYWxzLS07XHJcbiAgICAgICAgaWYgKHRoaXMuX3NpZ25hbHMgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIHJlYWR5IG1hcmtlciAnXCIgKyB0aGlzLl9uYW1lICsgXCIgLSBzaWduYWxzIGFyZSBcIiArIHRoaXMuX3NpZ25hbHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc1NldCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlYWR5TWFya2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3I7XHJcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVhZHlNYXJrZXIucHJvdG90eXBlLmlzU2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRXJyb3IoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduYWxzID09PSAwO1xyXG4gICAgfTtcclxuICAgIFJlYWR5TWFya2VyLnByb3RvdHlwZS5pc0Vycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAhdXRpbC5pc1VuZGVmaW5lZCh0aGlzLl9lcnJvcik7XHJcbiAgICB9O1xyXG4gICAgUmVhZHlNYXJrZXIucHJvdG90eXBlLmdldEVycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVhZHlNYXJrZXI7XHJcbn0pKCk7XHJcbmV4cG9ydHMuUmVhZHlNYXJrZXIgPSBSZWFkeU1hcmtlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZHlNYXJrZXIuanMubWFwIiwiLy8gc29tZSBzbWFsbCB1c2VmdWwgZnVuY3Rpb25zIChzbyB3ZSBkb24ndCByZWZlcmVuY2UgdW5kZXJzY29yZSBvciBsb2Rhc2gpXHJcbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xyXG59XHJcbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcclxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XHJcbn1cclxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xyXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XHJcbn1cclxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xyXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcclxufVxyXG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xyXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcclxufVxyXG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XHJcbmZ1bmN0aW9uIGlzVW5kZWZpbmVkT3JOdWxsKGFyZykge1xyXG4gICAgcmV0dXJuICFhcmcgfHwgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XHJcbn1cclxuZXhwb3J0cy5pc1VuZGVmaW5lZE9yTnVsbCA9IGlzVW5kZWZpbmVkT3JOdWxsO1xyXG5mdW5jdGlvbiBpc0VtcHR5KGFyZykge1xyXG4gICAgZm9yICh2YXIgcHJvcCBpbiBhcmcpIHtcclxuICAgICAgICBpZiAoYXJnLmhhc093blByb3BlcnR5KHByb3ApKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5leHBvcnRzLmlzRW1wdHkgPSBpc0VtcHR5O1xyXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xyXG4gICAgcmV0dXJuICEhKGFyZyAmJiBhcmcuY29uc3RydWN0b3IgJiYgYXJnLmNhbGwgJiYgYXJnLmFwcGx5KTtcclxufVxyXG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xyXG47XHJcbmZ1bmN0aW9uIHNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xyXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc29tZSA9IHNvbWU7XHJcbmZ1bmN0aW9uIGZpcnN0KGFycmF5LCBwcmVkaWNhdGUpIHtcclxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhcnJheS5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJheVtpbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5leHBvcnRzLmZpcnN0ID0gZmlyc3Q7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIiwidmFyIGNvbm5lY3Rpb24gPSByZXF1aXJlKFwidGljazQyLWdhdGV3YXktY29ubmVjdGlvblwiKTtcclxudmFyIGNsaWVudCA9IHJlcXVpcmUoXCIuL2FnbV9jbGllbnRcIik7XHJcbnZhciBzZXJ2ZXIgPSByZXF1aXJlKFwiLi9hZ21fc2VydmVyXCIpOyBcclxudmFyIGluc3RhbmNlID0gcmVxdWlyZShcIi4vYWdtX2luc3RhbmNlXCIpO1xyXG52YXIgbmF0aXZlX2FnbSA9IHJlcXVpcmUoXCIuL2FnbV9uYXRpdmVcIik7XHJcbi8vdmFyIGFkZF9zdWdhcj0gcmVxdWlyZShcIi4vYWdtX3N1Z2FyXCIpO1xyXG4vL0luaXQgbmFtZXNwYWNlIGlmIG5vdCBhbHJlYWR5IHRoZXJlIFxyXG5cclxuXHJcblxyXG4vL0FkZCBhIGdsb2JhbCBmdW5jdGlvbiB0aGF0IG1ha2VzIGFuIEFHTSBpbnN0YW5jZVxyXG5hZ20gPSBmdW5jdGlvbihjb25maWd1cmF0aW9uKXtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHRcclxuXHQvL1dlIHdpbGwgc3RvcmUgdGhlIGxpYnJhcnkgaGVyZVxyXG5cdHZhciBhZ20gPSB7fTtcclxuICAgIFxyXG5cdGFnbS52ZXJzaW9uID0gXCIyLjEuM1wiO1xyXG5cdFxyXG5cdC8vSW5pdCBkZWJ1Z1xyXG5cdGlmKHR5cGVvZiBjb25maWd1cmF0aW9uIT09XCJvYmplY3RcIil7Y29uZmlndXJhdGlvbiA9IHt9O31cclxuICAgXHJcbiAgIFx0Ly9Jbml0IGNoaWxkIGNvbmZpZ3VyYXRpb24gaWYgaXQgaXMgbm90IGFscmVhZHkgcGFzc2VkIGJ5IHVzZXJcclxuICAgXHR2YXIgY2hpbGRfY29uZmlndXJhdGlvbnMgPSBbXCJjb25uZWN0aW9uXCIsIFwiY2xpZW50XCIsIFwic2VydmVyXCJdO1xyXG5cdGNoaWxkX2NvbmZpZ3VyYXRpb25zLmZvckVhY2goZnVuY3Rpb24oY29uZil7XHJcblx0XHRpZih0eXBlb2YgY29uZmlndXJhdGlvbltjb25mXSE9PVwib2JqZWN0XCIpe2NvbmZpZ3VyYXRpb25bY29uZl0gPSB7fTt9XHJcblx0XHQvL1NldCBkZWJ1ZyBpZiBnbG9iYWwgZGVidWcgaXMgbm90IHNldDpcclxuXHRcdGlmKGNvbmZpZ3VyYXRpb24uZGVidWcpe2NvbmZpZ3VyYXRpb25bY29uZl0uZGVidWcgPSB0cnVlO31cclxuXHR9KTtcclxuXHRcclxuXHQvL0luaXQgY29ubmVjdGlvblxyXG5cdHZhciBjID0gY29uZmlndXJhdGlvbi5jb25uZWN0aW9uO1xyXG4gIFx0Ly9EZXRlcm1pbmUgaWYgd2UgYXJlIGdpdmVuIGEgY29ubmVjdGlvbiBvYmplY3QuIElmIG5vdCwgY3JlYXRlIGl0IG91cnNlbHZlczpcclxuXHRhZ20uY29ubmVjdGlvbiA9KHR5cGVvZiBjPT09XCJvYmplY3RcIiYmdHlwZW9mIGMuc2VuZD09PVwiZnVuY3Rpb25cIiYmdHlwZW9mIGMub24gPT09XCJmdW5jdGlvblwiKT9jOmNvbm5lY3Rpb24oY29uZmlndXJhdGlvbi5jb25uZWN0aW9uKTtcclxuXHRcclxuXHQvL0NyZWF0ZSBhIGNvbm5lY3Rpb24gcHJveHkgd2hpY2ggc2V0cyB0aGUgcHJvZHVjdCBuYW1lIGF1dG9tYXRpY2FsbHlcclxuXHR2YXIgcHJvZHVjdF9uYW1lID0gXCJhZ21cIjtcclxuXHR2YXIgYWdtX2VuYWJsZWRfY29ubmVjdGlvbiA9IHtcclxuICAgIHNlbmQ6ZnVuY3Rpb24odHlwZSwgbWVzc2FnZSl7XHJcbiAgICAgICAgYWdtLmNvbm5lY3Rpb24uc2VuZChwcm9kdWN0X25hbWUsIHR5cGUsIG1lc3NhZ2UpO1xyXG4gICAgfSxcclxuICAgIG9uOmZ1bmN0aW9uKHR5cGUsIGhhbmRsZXIpe1xyXG4gICAgICAgIGFnbS5jb25uZWN0aW9uLm9uKHByb2R1Y3RfbmFtZSwgdHlwZSwgaGFuZGxlcik7XHJcbiAgICB9XHJcblx0XHJcblx0fTtcclxuXHQgXHJcblx0Ly9TYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSByb290IHN5c3RlbSBvYmplY3QgdGhhdCB3ZSBhcmUgZ2l2ZW5cclxuXHR2YXIgbWV0cmljc19yb290ID0gY29uZmlndXJhdGlvbi5tZXRyaWNzO1xyXG5cdFxyXG5cdC8vQ3JlYXRlIHN1YnN5c3RlbXMgZm9yIG91ciBtb2R1bGVzIGFuZCBzYXZlIHRoZW0gaW4gdGhlaXIgY29uZmlndXJhdGlvbi5cclxuXHRpZihtZXRyaWNzX3Jvb3QgIT09IHVuZGVmaW5lZCl7XHJcblx0XHRjb25maWd1cmF0aW9uLmNsaWVudC5tZXRyaWNzID0gbWV0cmljc19yb290LnN1YlN5c3RlbShcIkNsaWVudFwiKTtcclxuXHRcdGNvbmZpZ3VyYXRpb24uc2VydmVyLm1ldHJpY3MgPSBtZXRyaWNzX3Jvb3Quc3ViU3lzdGVtKFwiU2VydmVyXCIpO1xyXG5cdH0gXHJcblx0XHJcbiAgICAvL0luaXRpYWxpemUgb3VyIG1vZHVsZXNcclxuICBcdGFnbS5pbnN0YW5jZSA9IGluc3RhbmNlKGNvbmZpZ3VyYXRpb24uaW5zdGFuY2UsIGFnbV9lbmFibGVkX2Nvbm5lY3Rpb24pO1xyXG5cdGFnbS5jbGllbnQgPSBjbGllbnQoYWdtX2VuYWJsZWRfY29ubmVjdGlvbiwgYWdtLmluc3RhbmNlLCBjb25maWd1cmF0aW9uLmNsaWVudCk7XHJcblx0YWdtLnNlcnZlciA9IHNlcnZlcihhZ21fZW5hYmxlZF9jb25uZWN0aW9uLCBhZ20uaW5zdGFuY2UsIGNvbmZpZ3VyYXRpb24uc2VydmVyKTtcclxuXHJcblx0Ly9BZGQgbWV0aG9kIGFsaWFzZXNcclxuXHRhZ20uaW52b2tlPWFnbS5jbGllbnQuaW52b2tlO1xyXG5cdGFnbS5yZWdpc3Rlcj1hZ20uc2VydmVyLnJlZ2lzdGVyO1xyXG5cdGFnbS51bnJlZ2lzdGVyPWFnbS5zZXJ2ZXIudW5yZWdpc3RlcjtcclxuXHRhZ20uc2VydmVycz1hZ20uY2xpZW50LnNlcnZlcnM7XHJcblx0YWdtLm1ldGhvZHM9YWdtLmNsaWVudC5tZXRob2RzO1xyXG5cdGFnbS5tZXRob2RzX2Zvcl9pbnN0YW5jZT1hZ20uY2xpZW50Lm1ldGhvZHNfZm9yX2luc3RhbmNlO1xyXG5cdGFnbS5tZXRob2RzRm9ySW5zdGFuY2U9YWdtLmNsaWVudC5tZXRob2RzX2Zvcl9pbnN0YW5jZTtcclxuICAgIGFnbS5tZXRob2Q9YWdtLmNsaWVudC5tZXRob2Q7XHJcblx0YWdtLm1ldGhvZF9hZGRlZD1hZ20uY2xpZW50Lm1ldGhvZF9hZGRlZDtcclxuXHRhZ20ubWV0aG9kQWRkZWQ9YWdtLmNsaWVudC5tZXRob2RfYWRkZWQ7XHJcblx0YWdtLm1ldGhvZF9yZW1vdmVkPWFnbS5jbGllbnQubWV0aG9kX3JlbW92ZWQ7XHJcblx0YWdtLm1ldGhvZFJlbW92ZWQ9YWdtLmNsaWVudC5tZXRob2RfcmVtb3ZlZDtcclxuXHJcblx0YWdtLnNlcnZlcl9tZXRob2RfYWRkZWQ9YWdtLmNsaWVudC5zZXJ2ZXJfbWV0aG9kX2FkZGVkO1xyXG5cdGFnbS5zZXJ2ZXJNZXRob2RBZGRlZD1hZ20uY2xpZW50LnNlcnZlcl9tZXRob2RfYWRkZWQ7XHJcblx0YWdtLnNlcnZlcl9tZXRob2RfcmVtb3ZlZD1hZ20uY2xpZW50LnNlcnZlcl9tZXRob2RfcmVtb3ZlZDtcclxuXHRhZ20uc2VydmVyTWV0aG9kUmVtb3ZlZD1hZ20uY2xpZW50LnNlcnZlcl9tZXRob2RfcmVtb3ZlZDtcclxuXHJcblx0YWdtLnNlcnZlcl9hZGRlZD1hZ20uY2xpZW50LnNlcnZlcl9hZGRlZDtcclxuXHRhZ20uc2VydmVyQWRkZWQ9YWdtLmNsaWVudC5zZXJ2ZXJfYWRkZWQ7XHJcblx0YWdtLnNlcnZlcl9yZW1vdmVkPWFnbS5jbGllbnQuc2VydmVyX3JlbW92ZWQ7XHJcblx0YWdtLnNlcnZlclJlbW92ZWQ9YWdtLmNsaWVudC5zZXJ2ZXJfcmVtb3ZlZDtcclxuXHJcblx0YWdtLnN0YXJ0ID0gYWdtLnNlcnZlci5zdGFydDtcclxuXHRhZ20uc3RvcCA9IGFnbS5zZXJ2ZXIuc3RvcDtcclxuXHRcclxuICAgIGlmKGdsb2JhbC5jb25zb2xlIT09dW5kZWZpbmVkICYmIGFnbS5kZWJ1Zz09PXRydWUpe1xyXG5cdCAgICBjb25zb2xlLmxvZyhcIkFHTSBzdGFydGVkLlwiKTtcclxuICAgIH1cclxuXHRcclxuXHRyZXR1cm4gYWdtO1xyXG4gICAgLy9yZXR1cm4gYWRkX3N1Z2FyKGFnbSk7XHJcblxyXG59O1xyXG5cclxuYWdtID0gZ2xvYmFsLmh0bWxDb250YWluZXIhPT11bmRlZmluZWQ/bmF0aXZlX2FnbTphZ207XHJcblxyXG4vL0V4cG9ydCBmb3IgYnJvd3NlcnNcclxuaWYoZ2xvYmFsLnRpY2s0Mj09PXVuZGVmaW5lZCl7Z2xvYmFsLnRpY2s0MiA9IHt9O31cclxuZ2xvYmFsLnRpY2s0Mi5hZ20gPSBhZ207XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFnbTtcclxuXHJcbiIsIi8qXHJcbiBUaGUgQUdNIENsaWVudCBhbmFseXNlcyBzZXJ2ZXIgcHJlc2VuY2VzLCBjb2xsZWN0cyBpbmZvcm1hdGlvbiBhYm91dCB0aGVpciBtZXRob2RzIGFuZCBhbGxvd3MgdXNlcnMgdG8gaW52b2tlIHRoZXNlIG1ldGhvZHMuXHJcbiAqL1xyXG52YXIgY2xpZW50X3NlcnZlcnN0YXRlID0gcmVxdWlyZSgnLi9hZ21fY2xpZW50X3NlcnZlcnN0YXRlJyk7XHJcbnZhciBjbGllbnRfaW52b2NhdGlvbnNzdGF0ZSA9IHJlcXVpcmUoJy4vYWdtX2NsaWVudF9pbnZvY2F0aW9uc3N0YXRlJyk7XHJcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9hZ21faGVscGVycycpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBpbnN0YW5jZSwgY29uZmlndXJhdGlvbikge1xyXG4gICAgLy9WYWxpZGF0ZSBjb25maWd1cmF0aW9uXHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZ3VyYXRpb24gIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgY29uZmlndXJhdGlvbiA9IHt9O1xyXG4gICAgICAgIGlmIChnbG9iYWwuY29uc29sZSAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZ3VyYXRpb24uZGVidWcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0NyZWF0aW5nIGFuIEFHTSBjbGllbnQgd2l0aCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBjb25maWd1cmF0aW9uLnJlbW92ZV9zZXJ2ZXJfb25fbl9taXNzaW5nX2hlYXJ0YmVhdHMgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgY29uZmlndXJhdGlvbi5yZW1vdmVfc2VydmVyX29uX25fbWlzc2luZ19oZWFydGJlYXRzID0gMztcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY29uZmlndXJhdGlvbi5tZXRob2RfcmVzcG9uc2VfdGltZW91dCAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICBjb25maWd1cmF0aW9uLm1ldGhvZF9yZXNwb25zZV90aW1lb3V0ID0gMzAwMDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY29uZmlndXJhdGlvbi53YWl0X2Zvcl9tZXRob2RfdGltZW91dCAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICBjb25maWd1cmF0aW9uLndhaXRfZm9yX21ldGhvZF90aW1lb3V0ID0gMzAwMDtcclxuICAgIH1cclxuICAgIC8vSW5zdGFudGlhdGUgdGhlIG1vZHVsZSB3aGljaCBrZWVwcyB0cmFjayBvZiBhbGwgYXZhaWxhYmxlIHNlcnZlcnMgYW5kIG1ldGhvZHNcclxuICAgIHZhciBzZXJ2ZXJzID0gY2xpZW50X3NlcnZlcnN0YXRlKGNvbmZpZ3VyYXRpb24sIGluc3RhbmNlKTtcclxuICAgIC8vLi5hbmQgd2hlbiB5b3UgcmVjZWl2ZSBhIGhlYXJ0YmVhdC9wcmVzZW5jZSBmcm9tIGEgc2VydmVyLCBkZWxlZ2F0ZSBpdHMgcHJvY2Vzc2luZyB0byB0aGUgbW9kdWxlOlxyXG4gICAgY29ubmVjdGlvbi5vbignU2VydmVyUHJlc2VuY2VNZXNzYWdlJywgZnVuY3Rpb24obXNnKXtzZXJ2ZXJzLnByb2Nlc3NfcHJlc2VuY2UobXNnLCB0cnVlKTt9KTtcclxuICAgIGNvbm5lY3Rpb24ub24oJ1NlcnZlckhlYXJ0YmVhdE1lc3NhZ2UnLCBmdW5jdGlvbihtc2cpe3NlcnZlcnMucHJvY2Vzc19wcmVzZW5jZShtc2csIGZhbHNlKTt9KTtcclxuICAgIC8vSW5zdGFudGlhdGUgdGhlIG1vZHVsZSB0aGF0IGhhbmRsZXMgbWV0aG9kIGV4ZWN1dGlvbiBhbmQgcmVzcG9uc2VzXHJcbiAgICB2YXIgcmVzcG9uc2UgPSBjbGllbnRfaW52b2NhdGlvbnNzdGF0ZShjb25maWd1cmF0aW9uLCBpbnN0YW5jZSwgZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICBjb25uZWN0aW9uLnNlbmQoJ01ldGhvZEludm9jYXRpb25SZXF1ZXN0TWVzc2FnZScsIG0pO1xyXG4gICAgfSk7XHJcbiAgICAvLy4uYW5kIGRlbGVnYXRlIHJlc3BvbnNlcyB0byBpdC5cclxuICAgIGNvbm5lY3Rpb24ub24oJ01ldGhvZEludm9jYXRpb25SZXN1bHRNZXNzYWdlJywgcmVzcG9uc2UucHJvY2Vzc19tZXRob2RfcmVzcG9uc2UpO1xyXG5cclxuXHJcblxyXG5cclxuLy8gICAvL0FkZHMgY2xpZW50IGNhbGxiYWNrcyB3aGljaCBhcmUgZXhlY3V0ZWQgd2hlbiBhIG5ldyBtZXRob2QgaXMgYWRkZWQgb3Igc3RvcHMgYmVpbmcgYXZhaWxhYmxlXHJcbi8vICAgZnVuY3Rpb24gbWV0aG9kX2FkZGVkKGNhbGxiYWNrKSB7XHJcbi8vICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbi8vICAgICAgIC8vQWRkIHRoZSBjYWxsYmFja1xyXG4vLyAgICAgICBjb25maWd1cmF0aW9uLm9uX21ldGhvZF9hZGRlZCA9IGNhbGxiYWNrO1xyXG4vLyAgICAgICAvL0NhbGwgdGhlIGNhbGxiYWNrIGZvciBhbGwgdGhlIG1ldGhvZCB3aGljaCB3ZXJlIGFkZGVkIGJlZm9yZSB0aGUgY2FsbGJhY2sgd2FzIHJlZ2lzdGVyZWQuXHJcbi8vICAgICAgIHNlcnZlcnMuZ2V0X21ldGhvZHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuLy8gICAgICAgICBjYWxsYmFjayhtZXRob2QpO1xyXG4vLyAgICAgICB9KTtcclxuLy8gICAgIH0gZWxzZSB7XHJcbi8vICAgICAgIHRocm93ICdcXCdtZXRob2RfYWRkZWRcXCcgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIGFzIGFuIGFyZ3VtZW50JztcclxuLy8gICAgIH1cclxuLy8gICB9XHJcbi8vICAgZnVuY3Rpb24gbWV0aG9kX3JlbW92ZWQoY2FsbGJhY2spIHtcclxuLy8gICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuLy8gICAgICAgLy9BZGQgdGhlIGNhbGxiYWNrXHJcbi8vICAgICAgIGNvbmZpZ3VyYXRpb24ub25fbWV0aG9kX3JlbW92ZWQgPSBjYWxsYmFjaztcclxuLy8gICAgIH0gZWxzZSB7XHJcbi8vICAgICAgIHRocm93ICdcXCdtZXRob2RfcmVtb3ZlZFxcJyBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgZnVuY3Rpb24gYXMgYW4gYXJndW1lbnQnO1xyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuXHJcbi8vICAgLy9BZGRzIGNsaWVudCBjYWxsYmFja3Mgd2hpY2ggYXJlIGV4ZWN1dGVkIHdoZW4gYSBuZXcgbWV0aG9kIGlzIGFkZGVkIG9yIHN0b3BzIGJlaW5nIGF2YWlsYWJsZVxyXG4vLyAgIGZ1bmN0aW9uIHNlcnZlcl9hZGRlZChjYWxsYmFjaykge1xyXG4vLyAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4vLyAgICAgICAvL0FkZCB0aGUgY2FsbGJhY2tcclxuLy8gICAgICAgY29uZmlndXJhdGlvbi5vbl9zZXJ2ZXJfYWRkZWQgPSBjYWxsYmFjaztcclxuLy8gICAgICAgLy9DYWxsIHRoZSBjYWxsYmFjayBmb3IgYWxsIHRoZSBtZXRob2Qgd2hpY2ggd2VyZSBhZGRlZCBiZWZvcmUgdGhlIGNhbGxiYWNrIHdhcyByZWdpc3RlcmVkLlxyXG4vLyAgICAgICBzZXJ2ZXJzLmdldF9zZXJ2ZXJzKCkuZm9yRWFjaChmdW5jdGlvbiAoc2VydmVyKSB7XHJcbi8vICAgICAgICAgY2FsbGJhY2soc2VydmVyKTtcclxuLy8gICAgICAgfSk7XHJcbi8vICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICB0aHJvdyAnXFwnc2VydmVyX2FkZGVkXFwnIG11c3QgYmUgY2FsbGVkIHdpdGggYSBmdW5jdGlvbiBhcyBhbiBhcmd1bWVudCc7XHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG4vLyAgIGZ1bmN0aW9uIHNlcnZlcl9yZW1vdmVkKGNhbGxiYWNrKSB7XHJcbi8vICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbi8vICAgICAgIC8vQWRkIHRoZSBjYWxsYmFja1xyXG4vLyAgICAgICBjb25maWd1cmF0aW9uLm9uX3NlcnZlcl9yZW1vdmVkID0gY2FsbGJhY2s7XHJcbi8vICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICB0aHJvdyAnXFwnc2VydmVyX3JlbW92ZWRcXCcgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIGFzIGFuIGFyZ3VtZW50JztcclxuLy8gICAgIH1cclxuLy8gICB9XHJcbiAgICAvL0Fic3RyYWN0IGdldF9tZXRob2QgYW5kIGdldF9zZXJ2ZXJzIGZ1bmN0aW9uc1xyXG4gICAgLy9UaGV5IHJlbHkgb24gIGdldF9tZXRob2QgYW5kIGdldF9zZXJ2ZXJzIGZyb20gdGhlIFwic2VydmVyc1wiIG1vZHVsZVxyXG4gICAgLy9JbiB0aG9zZSBvbmVzIHlvdSBkb24ndCBuZWVkIHRvIHNwZWNpZnkgYWxsIG9mIHRoZSBtZXRob2QncyBwcm9wcyB0byBmaW5kIGl0LlxyXG4gICAgZnVuY3Rpb24gZ2V0X21ldGhvZChtZXRob2RfZmlsdGVyKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2RfZmlsdGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBtZXRob2RfZmlsdGVyID0geyBuYW1lOiBtZXRob2RfZmlsdGVyIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vRG8gbm90IGV4ZWN1dGUgZm9yIGVtcHR5IGZpbHRlclxyXG4gICAgICAgIGlmIChtZXRob2RfZmlsdGVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZXhhY3RfbWF0Y2ggPSBzZXJ2ZXJzLmdldF9tZXRob2QobWV0aG9kX2ZpbHRlcik7XHJcbiAgICAgICAgLy9UcnkgY2FsbGluZyB0aGUgb3JpZ2luYWwgXCJnZXRfbWV0aG9kXCIgZnVuY3Rpb24gKGl0IHdpbGwgd29yayBpZiBhbGwgbWV0aG9kIHByb3BlcnRpZXMgYXJlIHNwZWNpZmllZCk6XHJcbiAgICAgICAgaWYgKGV4YWN0X21hdGNoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4YWN0X21hdGNoICAvL1Rha2UgYWxsIGF2YWlsYWJsZSBtZXRob2RzIGFuZCBpdGVyYXRlIHRoZW0gdW50aWwgd2UgZmluZCBhIG1hdGNoXHJcbiAgICAgICAgICAgICAgO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YWtlV2hpbGUoc2VydmVycy5nZXRfbWV0aG9kcygpLCBmdW5jdGlvbiAobWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kX21hdGNoKG1ldGhvZF9maWx0ZXIsIG1ldGhvZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdldF9tZXRob2RzKG1ldGhvZF9maWx0ZXIpIHtcclxuICAgICAgICBpZiAobWV0aG9kX2ZpbHRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJ2ZXJzLmdldF9tZXRob2RzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kX2ZpbHRlciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgbWV0aG9kX2ZpbHRlciA9IHsgbmFtZTogbWV0aG9kX2ZpbHRlciB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VydmVycy5nZXRfbWV0aG9kcygpLmZpbHRlcihmdW5jdGlvbiAobWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXRob2RfbWF0Y2gobWV0aG9kX2ZpbHRlciwgbWV0aG9kKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvL1JldHJpZXZlcyBhbGwgc2VydmVycyB0aGF0IHN1cHBvcnQgYW55IG9mIHNldmVyYWwgbWV0aG9kcywgbGlzdGVkIGFzIGFuIGFycmF5XHJcbiAgICBmdW5jdGlvbiBnZXRfbWV0aG9kc19mb3JfaW5zdGFuY2UoaW5zdGFuY2VfZmlsdGVyKSB7XHJcbiAgICAgICAgdmFyIGV4YWN0X21hdGNoID0gc2VydmVycy5nZXRfbWV0aG9kcyhpbnN0YW5jZV9maWx0ZXIpO1xyXG4gICAgICAgIC8vVHJ5IGNhbGxpbmcgdGhlIG9yaWdpbmFsIFwiZ2V0X21ldGhvZHNcIiBmdW5jdGlvbiAoaXQgd2lsbCB3b3JrIGlmIGFsbCBpbnN0YW5jZSBwcm9wZXJ0aWVzIGFyZSBzcGVjaWZpZWQpOlxyXG4gICAgICAgIGlmIChleGFjdF9tYXRjaC5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4YWN0X21hdGNoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBtZXRob2RfaWRzID0gZ2V0X3NlcnZlcnMoKS5maWx0ZXIoZnVuY3Rpb24gKHNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlX21hdGNoKGluc3RhbmNlX2ZpbHRlciwgc2VydmVyKTtcclxuICAgICAgICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uIChtZXRob2RzLCBzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIHNlcnZlcnMuZ2V0X21ldGhvZF9pZHMoc2VydmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2RfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2RzW21ldGhvZF9pZF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kcztcclxuICAgICAgICAgICAgfSwge30pO1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobWV0aG9kX2lkcykubWFwKGZ1bmN0aW9uIChtZXRob2RfaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2ZXJzLmdldF9tZXRob2QobWV0aG9kX2lkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vUmV0cmlldmVzIGFsbCBzZXJ2ZXJzIHRoYXQgc3VwcG9ydCBhIGdpdmVuIG1ldGhvZFxyXG4gICAgZnVuY3Rpb24gZ2V0X3NlcnZlcnMobWV0aG9kX2ZpbHRlcikge1xyXG4gICAgICAgIC8vTm8gbWV0aG9kIC0gZ2V0IGFsbCBzZXJ2ZXJzXHJcbiAgICAgICAgaWYgKG1ldGhvZF9maWx0ZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VydmVycy5nZXRfc2VydmVycygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL05vbi1leGlzdGluZyBtZXRob2QgLSByZXR1cm4gYW4gZW1wdHkgYXJyYXlcclxuICAgICAgICB2YXIgbWV0aG9kID0gZ2V0X21ldGhvZChtZXRob2RfZmlsdGVyKTtcclxuICAgICAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL0Vsc2UsIHJldHVybiBzZXJ2ZXJzIGZvciBtZXRob2RcclxuICAgICAgICByZXR1cm4gc2VydmVycy5nZXRfc2VydmVycyhtZXRob2QpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvL1JldHJpZXZlcyBhbGwgc2VydmVycyB0aGF0IHN1cHBvcnQgYW55IG9mIHNldmVyYWwgbWV0aG9kcywgbGlzdGVkIGFzIGFuIGFycmF5XHJcbiAgICBmdW5jdGlvbiBzZXJ2ZXJzX2Zvcl9tZXRob2RzKG1ldGhvZHMpe1xyXG4gICAgICAgIHJldHVybiBtZXRob2RzLnJlZHVjZShmdW5jdGlvbiAoc29fZmFyLCBtZXRob2QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNvX2Zhci5jb25jYXQoc2VydmVycy5nZXRfc2VydmVycyhtZXRob2QsIHRydWUpKTsvLyh0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIHRoZXJlIGJlY2F1c2Ugd2UgYWxzbyBuZWVkIHRoZSByZXF1ZXN0IHN1YmplY3QpXHJcbiAgICAgICAgfSwgW10pLnNvcnQoc2VydmVycy5jb21wYXJlX3NlcnZlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlcnZlcnNfZm9yX21ldGhvZF9hbmRfdGFyZ2V0KG1ldGhvZF9maWx0ZXIsIHRhcmdldCl7XHJcbiAgICAgICAgLy9HZXQgdGhlIG1ldGhvZHMgd2hpY2ggbWF0Y2ggdGhlIGZpbHRlclxyXG4gICAgICAgIHZhciBtZXRob2RzID0gZ2V0X21ldGhvZHMobWV0aG9kX2ZpbHRlcik7XHJcbiAgICAgICAgLy9EZXRlcm1pbmUgd2hlcmUgdG8gZXhlY3V0ZSB0aGUgbWV0aG9kKHMpICh0aGUgXCJ0YXJnZXRcIiBhcmd1bWVudClcclxuICAgICAgICAvL0dldCBhbGwgc2VydmVycyB0aGF0IHN1cHBvcnQgdGhlIG1ldGhvZChzKSBhbmQgZ2V0IHRoZSBvbmVzIHRoYXQgbWF0Y2ggdGhlIHRhcmdldCBjcml0ZXJpYVxyXG4gICAgICAgIHJldHVybiBmaWx0ZXJfYnlfdGFyZ2V0KHRhcmdldCwgc2VydmVyc19mb3JfbWV0aG9kcyhtZXRob2RzKSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8vSW52b2tlcyBhbiBBR00gbWV0aG9kIChtb3N0bHkgaXQgZG9lcyBpbnB1dCBjaGVja2luZyksIHRoZSBhY3R1YWwgam9iIGlzIGRvbmUgYnkgXCJyZXF1ZXN0Lmludm9rZVwiXHJcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kX2ZpbHRlciwgYXJndW1lbnRfb2JqLCB0YXJnZXQsIGFkZGl0aW9uYWxfb3B0aW9ucywgc3VjY2VzcywgZXJyb3IpIHtcclxuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdmFyIHN1Y2Nlc3NQcm94eSwgZXJyb3JQcm94eTtcclxuXHJcbiAgICAgICAgICAgIHN1Y2Nlc3NQcm94eSA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAvL3ZhciBwYXJzZWQgPSBKU09OLnBhcnNlKGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhcmdzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXJyb3JQcm94eSA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAvL3ZhciBwYXJzZWQgPSBKU09OLnBhcnNlKGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGFyZ3MpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL0FkZCBkZWZhdWx0IHBhcmFtc1xyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRfb2JqID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50X29iaiA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gJ2Jlc3QnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcInN0cmluZ1wiICYmIHRhcmdldCAhPT0gXCJhbGxcIiAmJiB0YXJnZXQgIT09IFwiYmVzdFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3Qoe21lc3NhZ2U6ICdcIicgKyB0YXJnZXQgKyAnXCIgaXMgbm90IGEgdmFsaWQgdGFyZ2V0LiBWYWxpZCB0YXJnZXRzIGFyZSBcImFsbFwiIGFuZCBcImJlc3RcIi4nfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFkZGl0aW9uYWxfb3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBhZGRpdGlvbmFsX29wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFkZGl0aW9uYWxfb3B0aW9ucy5tZXRob2RfcmVzcG9uc2VfdGltZW91dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBhZGRpdGlvbmFsX29wdGlvbnMubWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXQgPSBjb25maWd1cmF0aW9uLm1ldGhvZF9yZXNwb25zZV90aW1lb3V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhZGRpdGlvbmFsX29wdGlvbnMud2FpdF9mb3JfbWV0aG9kX3RpbWVvdXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbF9vcHRpb25zLndhaXRfZm9yX21ldGhvZF90aW1lb3V0ID0gY29uZmlndXJhdGlvbi53YWl0X2Zvcl9tZXRob2RfdGltZW91dDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vQ2hlY2sgaWYgdGhlIGFyZ3VtZW50cyBhcmUgYW4gb2JqZWN0XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRfb2JqICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KHttZXNzYWdlOiAnVGhlIG1ldGhvZCBhcmd1bWVudHMgbXVzdCBiZSBhbiBvYmplY3QuJ30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1ldGhvZF9maWx0ZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2RfZmlsdGVyID0ge25hbWU6IG1ldGhvZF9maWx0ZXJ9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VydmVycyA9IHNlcnZlcnNfZm9yX21ldGhvZF9hbmRfdGFyZ2V0KG1ldGhvZF9maWx0ZXIsIHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2VydmVycy5sZW5ndGggPT09IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpbnZva2VfdW5leGlzdGluZyhtZXRob2RfZmlsdGVyLCBhcmd1bWVudF9vYmosIHRhcmdldCwgYWRkaXRpb25hbF9vcHRpb25zLCBzdWNjZXNzUHJveHksIGVycm9yUHJveHkpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXJ2ZXJzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbC5jb25zb2xlICE9PSB1bmRlZmluZWQgJiYgY29uZmlndXJhdGlvbi5kZWJ1ZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCc+Pj4gSW52b2tpbmcgXCInICsgbWV0aG9kX2ZpbHRlci5uYW1lICsgJ1wiIG9uIDEgc2VydmVyJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuaW52b2tlKG1ldGhvZF9maWx0ZXIsIGFyZ3VtZW50X29iaiwgc2VydmVyc1swXSwgYWRkaXRpb25hbF9vcHRpb25zLCBzdWNjZXNzUHJveHksIGVycm9yUHJveHkpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuY29uc29sZSAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZ3VyYXRpb24uZGVidWcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPj4+IEludm9raW5nIFwiJyArIG1ldGhvZF9maWx0ZXIubmFtZSArICdcIiBvbiAnICsgc2VydmVycy5sZW5ndGggKyAnIHNlcnZlcnMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpbnZva2Vfb25fYWxsKG1ldGhvZF9maWx0ZXIsIGFyZ3VtZW50X29iaiwgc2VydmVycywgYWRkaXRpb25hbF9vcHRpb25zLCBzdWNjZXNzUHJveHksIGVycm9yUHJveHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBoZWxwZXJzLnByb21pc2lmeShwcm9taXNlLCBzdWNjZXNzLCBlcnJvcik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vQ2FsbGVkIHdoZW4gdGhlIHVzZXIgdHJpZXMgdG8gaW52b2tlIGEgbWV0aG9kIHdoaWNoIGRvZXMgbm90IGV4aXN0XHJcbiAgICBmdW5jdGlvbiBpbnZva2VfdW5leGlzdGluZyhtZXRob2RfZmlsdGVyLCBhcmd1bWVudF9vYmosIHRhcmdldCwgYWRkaXRpb25hbF9vcHRpb25zLCBzdWNjZXNzLCBlcnJvcil7XHJcbiAgICAgICAgdmFyIHNlcnZlcl9mb3VuZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZihhZGRpdGlvbmFsX29wdGlvbnMud2FpdF9mb3JfbWV0aG9kX3RpbWVvdXQgPT09IDApe1xyXG4gICAgICAgICAgICBjYWxsX2Vycm9yKCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24uc2VydmVyX21ldGhvZF9hZGRlZCA9IGNvbmZpZ3VyYXRpb24uc2VydmVyX21ldGhvZF9hZGRlZC5maWx0ZXIoZnVuY3Rpb24oY2FsbGJhY2spe3JldHVybiBjYWxsYmFjayAhPT0gbmV3X3NlcnZlcjt9KTtcclxuICAgICAgICAgICAgICAgIGlmKCFzZXJ2ZXJfZm91bmQpe2NhbGxfZXJyb3IoKTt9XHJcbiAgICAgICAgICAgIH0sYWRkaXRpb25hbF9vcHRpb25zLndhaXRfZm9yX21ldGhvZF90aW1lb3V0KTtcclxuXHJcbiAgICAgICAgICAgIHJlZ2lzdGVyX2NhbGxiYWNrKFwic2VydmVyX21ldGhvZF9hZGRlZFwiLCBpZGVudGl0eSwgbmV3X3NlcnZlcik7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG5ld19zZXJ2ZXIoKXtcclxuICAgICAgICAgICAgaWYoc2VydmVyX2ZvdW5kKXtyZXR1cm47fVxyXG4gICAgICAgICAgICB2YXIgc2VydmVyID0gc2VydmVyc19mb3JfbWV0aG9kX2FuZF90YXJnZXQobWV0aG9kX2ZpbHRlciwgdGFyZ2V0KVswXTtcclxuICAgICAgICAgICAgaWYoc2VydmVyICE9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgc2VydmVyX2ZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmludm9rZShtZXRob2RfZmlsdGVyLCBhcmd1bWVudF9vYmosIHNlcnZlciwgYWRkaXRpb25hbF9vcHRpb25zLCBzdWNjZXNzLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY2FsbF9lcnJvcigpe1xyXG4gICAgICAgICAgICAvL0NoZWNrIGlmIHRoZSBtZXRob2QgZXhpc3RzIGFuZCBpZiBpdCBkb2VzbnQnLCByZXR1cm4gYW4gZXJyb3JcclxuICAgICAgICAgICAgaWYgKGdldF9tZXRob2RzKG1ldGhvZF9maWx0ZXIpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kX2ZpbHRlcixcclxuICAgICAgICAgICAgICAgICAgICBjYWxsZWRfd2l0aDogYXJndW1lbnRfb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJIGNvdWxkIG5vdCBmaW5kIGEgbWV0aG9kIHdpdGggdGhvc2UgcHJvcGVydGllczogJyArIEpTT04uc3RyaW5naWZ5KG1ldGhvZF9maWx0ZXIpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZF9maWx0ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkX3dpdGg6IGFyZ3VtZW50X29iaixcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSSBjb3VsZCBub3QgZmluZCBzZXJ2ZXJzIHdpdGggdGhlc2UgcHJvcGVydGllczogJyArIEpTT04uc3RyaW5naWZ5KHRhcmdldClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy9DYWxsZWQgd2hlbiB0aGUgaW52b2tlcyBhIG1ldGhvZCB3aXRoIG11bHRpcGxlIHRhcmdldHNcclxuICAgIC8vQ2FsbHMgYSBtZXRob2QgZm9yIGFsbCBzZXJ2ZXJzIGFuZCB1bmlmaWVzIHRoZSByZXN1bHRzIHRoZXkgcmV0dXJuIGludG8gb25lOlxyXG4gICAgZnVuY3Rpb24gaW52b2tlX29uX2FsbChtZXRob2QsIGFyZ3VtZW50X29iaiwgc2VydmVycywgYWRkaXRpb25hbF9vcHRpb25zLCBzdWNjZXNzLCBlcnJvcil7XHJcbiAgICAgICAgLy9IZXJlIHdlIHdpbGwgc3RvcmUgdGhlIHJlc3VsdHMgdGhhdCB0aGUgc2VydmVycyByZXR1cm5cclxuICAgICAgICB2YXIgc3VjY2Vzc2VzID0gW107XHJcbiAgICAgICAgdmFyIGVycm9ycyA9IFtdO1xyXG4gICAgICAgIC8vVGhlc2UgYXJlIHRoZSBjYWxsYmFja3NcclxuICAgICAgICB2YXIgc3VjY2Vzc19jYWxsYmFjayA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgc3VjY2Vzc2VzLnB1c2gocmVzdWx0KTtcclxuICAgICAgICAgICAgc2VuZF9yZXNwb25zZShzdWNjZXNzZXMsIGVycm9ycyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgZXJyb3JfY2FsbGJhY2sgPSBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIHNlbmRfcmVzcG9uc2Uoc3VjY2Vzc2VzLCBlcnJvcnMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9DYWxsIHRoZSBtZXRob2QgZm9yIGFsbCB0YXJnZXRzXHJcbiAgICAgICAgc2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UuaW52b2tlKG1ldGhvZCwgYXJndW1lbnRfb2JqLCBzZXJ2ZXIsIGFkZGl0aW9uYWxfb3B0aW9ucywgc3VjY2Vzc19jYWxsYmFjaywgZXJyb3JfY2FsbGJhY2spO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgLy9DYWxscyB0aGUgbWFpbiBzdWNjZXNzIGFuZCBlcnJvciBjYWxsYmFja3Mgd2l0aCB0aGUgYWdncmVnYXRlZCByZXN1bHRzXHJcbiAgICAgICAgZnVuY3Rpb24gc2VuZF9yZXNwb25zZSgpIHtcclxuICAgICAgICAgICAgLy93YWl0IHRpbGwgZXZlcnlib2R5IGlzIGZpbmlzaGVkXHJcbiAgICAgICAgICAgIGlmIChzdWNjZXNzZXMubGVuZ3RoICsgZXJyb3JzLmxlbmd0aCA8IHNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9FeGVjdXRlIHRoZSBcInN1Y2Nlc3NcIiBjYWxsYmFja1xyXG4gICAgICAgICAgICBpZiAoc3VjY2Vzc2VzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHN1Y2Nlc3Nlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwgc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXRob2QgPSBzdWNjZXNzLm1ldGhvZDtcclxuICAgICAgICAgICAgICAgICAgICBvYmouY2FsbGVkX3dpdGggPSBzdWNjZXNzLmNhbGxlZF93aXRoO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5yZXR1cm5lZCA9IHN1Y2Nlc3MucmV0dXJuZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmFsbF9yZXR1cm5fdmFsdWVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlZF9ieTogc3VjY2Vzcy5leGVjdXRlZF9ieSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQ6IHN1Y2Nlc3MucmV0dXJuZWRcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBvYmouZXhlY3V0ZWRfYnkgPSBzdWNjZXNzLmV4ZWN1dGVkX2J5O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgICAgICB9LCB7IGFsbF9yZXR1cm5fdmFsdWVzOiBbXSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL0lmIHdlIGdldCBlcnJvcnMgZnJvbSBvbmUgb2YgdGhlIHNlcnZlcnMgYWRkIHRoZW0gdG8gdGhlIHN1Y2Nlc3Mgb2JqZWN0IHRoYXQgd2lsbCBiZSByZXNvbHZlZC5cclxuICAgICAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFsbF9lcnJvcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hbGxfZXJyb3JzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9leGVjdXRlZF9ieSA6IG9iai5leGVjdXRlZF9ieSwgLy8gd2UgZG9uJ3QgZ2V0IGV4ZWN1dGVkX2J5IG9iamVjdCBmcm9tIHRoZSBlcnJvciByZXNwb25zZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA6IG9iai5tZXRob2QubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgOiBvYmoubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzKHJlc3VsdCk7XHJcblxyXG4gICAgICAgICAgICB9ZWxzZSBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkgeyAvL0V4ZWN1dGUgdGhlIFwiZXJyb3JcIiBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgZXJyb3IoZXJyb3JzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXRob2QgPSBlcnJvci5tZXRob2Q7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmNhbGxlZF93aXRoID0gZXJyb3IuY2FsbGVkX3dpdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5hbGxfZXJyb3JzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlZF9ieTogZXJyb3IuZXhlY3V0ZWRfYnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvL29iai5leGVjdXRlZF9ieSA9IHN1Y2Nlc3MuZXhlY3V0ZWRfYnk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICAgICAgICAgIH0sIHsgYWxsX2Vycm9yczogW10gfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICB2YXIgcmVnaXN0ZXJfY2FsbGJhY2sgPSBoZWxwZXJzLnNhdmVfY2FsbGJhY2tfaW4uYmluZCh0aGlzLCBjb25maWd1cmF0aW9uKTtcclxuXHJcbiAgICB2YXIgYXBwbHlfb25fc2VydmVycyA9IGFwcGx5X29uLmJpbmQobnVsbCwgc2VydmVycy5nZXRfc2VydmVycyk7XHJcbiAgICB2YXIgYXBwbHlfb25fbWV0aG9kcyA9IGFwcGx5X29uLmJpbmQobnVsbCwgc2VydmVycy5nZXRfbWV0aG9kcyk7XHJcbiAgICB2YXIgaWRlbnRpdHkgPSBmdW5jdGlvbihhKXtyZXR1cm4gYTt9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW52b2tlOiBpbnZva2UsXHJcbiAgICAgICAgbWV0aG9kOiBnZXRfbWV0aG9kLFxyXG4gICAgICAgIHNlcnZlcnM6IGdldF9zZXJ2ZXJzLFxyXG4gICAgICAgIG1ldGhvZHM6IGdldF9tZXRob2RzLFxyXG4gICAgICAgIG1ldGhvZHNfZm9yX2luc3RhbmNlOiBnZXRfbWV0aG9kc19mb3JfaW5zdGFuY2UsXHJcbiAgICAgICAgbWV0aG9kX2FkZGVkOiByZWdpc3Rlcl9jYWxsYmFjay5iaW5kKG51bGwsIFwibWV0aG9kX2FkZGVkXCIsIGFwcGx5X29uX21ldGhvZHMpLFxyXG4gICAgICAgIG1ldGhvZF9yZW1vdmVkOiByZWdpc3Rlcl9jYWxsYmFjay5iaW5kKG51bGwsIFwibWV0aG9kX3JlbW92ZWRcIiwgaWRlbnRpdHkpLFxyXG4gICAgICAgIHNlcnZlcl9hZGRlZDogcmVnaXN0ZXJfY2FsbGJhY2suYmluZChudWxsLCBcInNlcnZlcl9hZGRlZFwiLCBhcHBseV9vbl9zZXJ2ZXJzKSxcclxuICAgICAgICBzZXJ2ZXJfcmVtb3ZlZDogcmVnaXN0ZXJfY2FsbGJhY2suYmluZChudWxsLCBcInNlcnZlcl9yZW1vdmVkXCIsIGlkZW50aXR5KSxcclxuICAgICAgICBzZXJ2ZXJfbWV0aG9kX2FkZGVkOiByZWdpc3Rlcl9jYWxsYmFjay5iaW5kKG51bGwsIFwic2VydmVyX21ldGhvZF9hZGRlZFwiLCBpZGVudGl0eSksXHJcbiAgICAgICAgc2VydmVyX21ldGhvZF9yZW1vdmVkOiByZWdpc3Rlcl9jYWxsYmFjay5iaW5kKG51bGwsIFwic2VydmVyX21ldGhvZF9yZW1vdmVkXCIsIGlkZW50aXR5KSxcclxuICAgICAgICBwYXJzZV9zaWduYXR1cmU6IGhlbHBlcnMuc2lnbmF0dXJlX3BhcnNlX2ZyaWVuZGx5XHJcbiAgICB9O1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuLy9GaWx0ZXJzIGFuIGFycmF5IG9mIHNlcnZlcnMgYW5kIHJldHVybnMgdGhlIG9uZXMgd2hpY2ggbWF0Y2ggdGhlIHRhcmdldCBjcml0ZXJpYVxyXG5mdW5jdGlvbiBmaWx0ZXJfYnlfdGFyZ2V0KHRhcmdldCwgc2VydmVycyl7XHJcbiAgICAvL0lmIHRoZSB1c2VyIHNwZWNpZmllZCB0YXJnZXQgYXMgc3RyaW5nOlxyXG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gJ2FsbCcpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gc2VydmVycztcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCA9PT0gJ2Jlc3QnKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHNlcnZlcnNbMF0hPT11bmRlZmluZWQ/W3NlcnZlcnNbMF1dOltdOyAgLy9JZiB0aGUgdXNlciBzcGVjaWZpZWQgdGhlIHRhcmdldCBhcyBzZXJ2ZXIgZmlsdGVyXHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdBcnJheScpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gW3RhcmdldF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB1bmV4aXN0aW5nX3NlcnZlcnMgPSBbXTtcclxuICAgICAgICAvL1JldHJpZXZlIGFsbCBzZXJ2ZXJzIHRoYXQgbWF0Y2ggdGhlIGZpbHRlcnNcclxuICAgICAgICB0YXJnZXQgPSB0YXJnZXQucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVzLCBmaWx0ZXIpIHtcclxuICAgICAgICAgICAgLy9BZGQgbWF0Y2hlcyBmb3IgZWFjaCBmaWx0ZXJcclxuICAgICAgICAgICAgdmFyIG15X21hdGNoZXMgPSBzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAoc2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VfbWF0Y2goZmlsdGVyLCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXMuY29uY2F0KG15X21hdGNoZXMpO1xyXG4gICAgICAgIH0sIFtdKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8vTWF0Y2hlcyBhIHNlcnZlciBkZWZpbml0aW9uIGFnYWluc3QgYSBzZXJ2ZXIgZmlsdGVyXHJcbmZ1bmN0aW9uIGluc3RhbmNlX21hdGNoKGluc3RhbmNlX2ZpbHRlciwgaW5zdGFuY2VfZGVmaW5pdGlvbikge1xyXG4gICAgcmV0dXJuIGNvbnRhaW5zX3Byb3BzKGluc3RhbmNlX2ZpbHRlciwgaW5zdGFuY2VfZGVmaW5pdGlvbik7XHJcbn1cclxuXHJcblxyXG4vL01hdGNoZXMgYSBtZXRob2QgZGVmaW5pdGlvbiBhZ2FpbnN0IGEgbWV0aG9kIGZpbHRlclxyXG5mdW5jdGlvbiBtZXRob2RfbWF0Y2gobWV0aG9kX2ZpbHRlciwgbWV0aG9kX2RlZmluaXRpb24pIHtcclxuICAgIFtcclxuICAgICAgICAnYWNjZXB0cycsXHJcbiAgICAgICAgJ3JldHVybnMnXHJcbiAgICBdLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICBpZiAobWV0aG9kX2ZpbHRlcltwcm9wXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG1ldGhvZF9maWx0ZXJbcHJvcF0gPSBoZWxwZXJzLnNpZ25hdHVyZV9ub3JtYWxpemUobWV0aG9kX2ZpbHRlcltwcm9wXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY29udGFpbnNfcHJvcHMobWV0aG9kX2ZpbHRlciwgbWV0aG9kX2RlZmluaXRpb24pO1xyXG59XHJcblxyXG5cclxuLy9IZWxwZXJzXHJcblxyXG4vKlxyXG4gZnVuY3Rpb24gY29udGFpbnNfcHJvcHMoZmlsdGVyLCBvYmplY3QpIHtcclxuIHZhciBtYXRjaCA9IHRydWU7XHJcbiBPYmplY3Qua2V5cyhmaWx0ZXIpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuIGlmIChTdHJpbmcoZmlsdGVyW3Byb3BdKS50b0xvd2VyQ2FzZSgpICE9PSBTdHJpbmcob2JqZWN0W3Byb3BdKS50b0xvd2VyQ2FzZSgpKSB7XHJcbiBtYXRjaCA9IGZhbHNlO1xyXG4gfVxyXG4gfSk7XHJcbiByZXR1cm4gbWF0Y2g7XHJcbiB9XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gY29udGFpbnNfcHJvcHMoZmlsdGVyLCBvYmplY3QpIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWx0ZXIpLnJlZHVjZShmdW5jdGlvbiAobWF0Y2gsIHByb3ApIHtcclxuICAgICAgICBpZiAoZmlsdGVyW3Byb3BdLmNvbnN0cnVjdG9yID09PSBSZWdFeHApe1xyXG4gICAgICAgICAgICBpZighZmlsdGVyW3Byb3BdLnRlc3Qob2JqZWN0W3Byb3BdKSkge3JldHVybiBmYWxzZTt9XHJcbiAgICAgICAgICAgIGVsc2V7cmV0dXJuIG1hdGNoO31cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZihTdHJpbmcoZmlsdGVyW3Byb3BdKS50b0xvd2VyQ2FzZSgpICE9PSBTdHJpbmcob2JqZWN0W3Byb3BdKS50b0xvd2VyQ2FzZSgpKXtyZXR1cm4gZmFsc2U7fVxyXG4gICAgICAgICAgICBlbHNle3JldHVybiBtYXRjaDt9XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdHJ1ZSk7XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkKSB7XHJcbiAgICB2YXIgc3ogPSBhcnJheS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3o7IGluZGV4KyspIHtcclxuICAgICAgICBpZiAocHJlZChhcnJheVtpbmRleF0pID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheVtpbmRleF07XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBhcHBseV9vbihvYmplY3RzLCBmdW5jKXtcclxuICAgIHJldHVybiBvYmplY3RzKCkubWFwKGZ1bmMpO1xyXG59XHJcbiIsIi8qXHJcblRoZSBJbnZjYXRpb25zc3RhdGUgbW9kdWxlIGhhbmRsZXMgQUdNIG1ldGhvZCBpbnZvY2F0aW9ucy4gdmlhIHRoZSAnaW52b2tlJyBtZXRob2RcclxuSXQgc2VuZHMgYW5kIHJlY2VpdmVzIGFsbCBpbnZvY2F0aW9uLXJlbGF0ZWQgbWVzc2FnZXMsIHZpYSB0aGUgXCJwcm9jZXNzX3Jlc3BvbnNlXCIgbWV0aG9kXHJcbnRoYXQgaXQgZXhwb3NlcyBhbmQgdmlhIHRoZSBcInNlbmRfcmVxdWVzdFwiIGNhbGxiYWNrXHJcblxyXG4qL1xyXG5cclxudmFyIGhlbHBlcnMgPSByZXF1aXJlKFwiLi9hZ21faGVscGVyc1wiKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29uZmlndXJhdGlvbiwgaW5zdGFuY2UsIHNlbmRfcmVxdWVzdCl7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0Ly9IZXJlIHdlIHN0b3JlIGFsbCBwZW5kaW5nIGNhbGxiYWNrc1xyXG4gICAgdmFyIHBlbmRpbmdfY2FsbGJhY2tzID0ge307XHJcblxyXG5cclxuXHQvL0ludm9rZXMgYW4gQUdNIG1ldGhvZCB0byBhIHNpbmdsZSBBR00gc2VydmVyLCBnaXZlbiB2YWxpZCBpbnB1dC5cclxuXHRmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmd1bWVudF9vYmosIHRhcmdldCwgc3R1ZmYsIHN1Y2Nlc3MsIGVycm9yKXtcclxuXHRcdCAvL0dlbmVyYXRlIGEgdW5pcXVlIGludm9jYXRpb24gSUQsIGZvciB0aGlzIGludm9jYXRpb25cclxuICAgICAgICAgdmFyIGludm9jYXRpb25faWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAwMDAwMDAwMDApO1xyXG5cclxuICAgICAgICAvL1JlZ2lzdGVyIHRoZSB1c2VyJ3MgY2FsbGJhY2tzXHJcbiAgICAgICAgcmVnaXN0ZXJfaW52b2NhdGlvbihpbnZvY2F0aW9uX2lkLCB7bWV0aG9kOm1ldGhvZCwgY2FsbGVkX3dpdGg6YXJndW1lbnRfb2JqfSxzdWNjZXNzLCBlcnJvciwgc3R1ZmYubWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXQpO1xyXG5cclxuICAgICAgICAvL0dldCBhIHJlc3BvbnNlIHN1YmplY3QgZm9yIHRoaXMgaW52b2NhdGlvblxyXG4gICAgICAgIGluc3RhbmNlLnJlc3BvbnNlX3N1YmplY3QobWV0aG9kLCBmdW5jdGlvbihyZXNwb25zZV9zdWJqZWN0KXtcclxuXHJcbiAgICAgICAgICAgICAvL0NvbnN0cnVjdCBhIG1lc3NhZ2VcclxuICAgICAgICAgICAgIHZhciBtZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICBNZXRob2RSZXF1ZXN0U3ViamVjdDp0YXJnZXQucmVxdWVzdF9zdWJqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICBNZXRob2RSZXNwb25zZVN1YmplY3Q6cmVzcG9uc2Vfc3ViamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgQ2xpZW50Omluc3RhbmNlLmluZm8oKSxcclxuICAgICAgICAgICAgICAgICAgICAgQ29udGV4dDp7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBBcmd1bWVudHNKc29uOiBhcmd1bWVudF9vYmosXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBJbnZvY2F0aW9uSWQ6aW52b2NhdGlvbl9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdFR5cGU6c3R1ZmYub2JqZWN0X3R5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBEaXNwbGF5Q29udGV4dDpzdHVmZi5kaXNwbGF5X2NvbnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBNZXRob2ROYW1lOm1ldGhvZC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgRXhlY3V0aW9uU2VydmVyOnRhcmdldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIFRpbWVvdXQ6c3R1ZmYubWV0aG9kX3Jlc3BvbnNlX3RpbWVvdXRcclxuICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAvL1NlbmQgaXRcclxuXHJcbiAgICAgICAgICAgICBzZW5kX3JlcXVlc3QobWVzc2FnZSk7XHJcblx0XHRcdCBpZihnbG9iYWwuY29uc29sZSE9PXVuZGVmaW5lZCYmIGNvbmZpZ3VyYXRpb24uZGVidWc9PT10cnVlKXtcclxuXHRcdFx0XHRjb25zb2xlLmRlYnVnKFwiJWM+Pj4gc2VuZGluZyBNZXRob2RJbnZvY2F0aW9uUmVxdWVzdE1lc3NhZ2VcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yOmhzbGEoMTk4LCA1MSUsIDc5JSwgMC41KVwiKTtcclxuXHRcdFx0XHRjb25zb2xlLmRlYnVnKFwiJWNcIitKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgXCJiYWNrZ3JvdW5kLWNvbG9yOmhzbGEoMTk4LCA1MSUsIDc5JSwgMC41KVwiKTtcclxuXHRcdFx0fVxyXG5cclxuICAgICAgICB9KTtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0Ly9BZGRzIGNhbGxiYWNrcyBmb3IgYSBnaXZlbiBpbnZvY2F0aW9uIElEXHJcbiAgICBmdW5jdGlvbiByZWdpc3Rlcl9pbnZvY2F0aW9uKGludm9jYXRpb25faWQsIHJlc3BvbnNlLCBzdWNjZXNzLCBlcnJvciwgdGltZW91dCl7XHJcbiAgICAgICAgLy9BZGRzIHRoZSBjYWxsYmFja3NcclxuICAgICAgICBwZW5kaW5nX2NhbGxiYWNrc1tpbnZvY2F0aW9uX2lkXSA9IHtyZXNwb25zZTpyZXNwb25zZSwgc3VjY2VzczpzdWNjZXNzLCBlcnJvcjplcnJvcn07XHJcbiAgICAgICAgLy9TY2hlZHVsZXMgdG8gdGhyb3cgYSB0aW1lb3V0IGlmIG5vYm9keSBhbnN3ZXJzXHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZihwZW5kaW5nX2NhbGxiYWNrc1tpbnZvY2F0aW9uX2lkXT09PXVuZGVmaW5lZCl7cmV0dXJuO31cclxuICAgICAgICAgICAgZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOnJlc3BvbnNlLm1ldGhvZCwgY2FsbGVkX3dpdGg6cmVzcG9uc2UuYXJndW1lbnRfb2JqLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTpcIlRpbWVvdXQgcmVhY2hlZFwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkZWxldGUgcGVuZGluZ19jYWxsYmFja3NbaW52b2NhdGlvbl9pZF07XHJcbiAgICAgICAgfSwgdGltZW91dCk7XHJcbiAgICB9XHJcblxyXG5cdGZ1bmN0aW9uIHByb2Nlc3NfbWV0aG9kX3Jlc3BvbnNlKG1lc3NhZ2Upe1xyXG5cdFx0Ly9GaW5kcyB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tcclxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBwZW5kaW5nX2NhbGxiYWNrc1ttZXNzYWdlLkludm9jYXRpb25JZF07XHJcbiAgICAgICAgaWYoY2FsbGJhY2shPT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICBpZihnbG9iYWwuY29uc29sZSE9PXVuZGVmaW5lZCYmIGNvbmZpZ3VyYXRpb24uZGVidWc9PT10cnVlKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCIlYzw8PCByZWNlaXZpbmcgTWV0aG9kSW52b2NhdGlvblJlc3VsdE1lc3NhZ2VcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yOmhzbGEoMTE4LCA1MSUsIDc5JSwgMC41KVwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCIlY1wiK0pTT04uc3RyaW5naWZ5KG1lc3NhZ2UpLCBcImJhY2tncm91bmQtY29sb3I6aHNsYSgxMTgsIDUxJSwgNzklLCAwLjUpXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vSWYgdGhlIHNlcnZlciByZXR1cm5lZCBzdWNjZXNzLCBleGVjdXRlIHRoZSBzdWNjZXNzIGNhbGxiYWNrXHJcbiAgICAgICAgICAgIGlmKG1lc3NhZ2UuU3RhdHVzID09PSAwJiZ0eXBlb2YgY2FsbGJhY2suc3VjY2Vzcz09PVwiZnVuY3Rpb25cIil7XHJcbiAgICAgICAgICAgICAgICAvL3BhcnNlIHRoZSByZXN1bHRcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBtZXNzYWdlLlJlc3VsdENvbnRleHRKc29uO1xyXG5cdFx0XHRcdC8vSWYgdGhlIHJlc3VsdCBpcyBhbiBlbXB0eSBvYmplY3QsIHRoZXJlIGlzIG5vIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgaWYoT2JqZWN0LmtleXMocmVzdWx0KS5sZW5ndGg9PT0wKXtyZXN1bHQgPSB1bmRlZmluZWQ7fVxyXG5cclxuICAgICAgICAgICAgICAgIC8vTG9nIHRoYXQgd2UgcmVjZWl2ZWQgYSByZXN1bHRcclxuICAgICAgICAgICAgICAgIGlmKGdsb2JhbC5jb25zb2xlIT09dW5kZWZpbmVkICYmIGNvbmZpZ3VyYXRpb24uZGVidWc9PT10cnVlKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPDw8ICBcIicrY2FsbGJhY2sucmVzcG9uc2UubWV0aG9kLm5hbWUrJ1wiIHdhcyBleGVjdXRlZCBieSAnK0pTT04uc3RyaW5naWZ5KGhlbHBlcnMucHJlcHJvY2Vzc19zZXJ2ZXIobWVzc2FnZS5TZXJ2ZXIpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL0V4ZWN1dGUgdGhlIHN1Y2Nlc3MgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLnN1Y2Nlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDpjYWxsYmFjay5yZXNwb25zZS5tZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVkX3dpdGg6Y2FsbGJhY2sucmVzcG9uc2UuY2FsbGVkX3dpdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZWRfYnk6aGVscGVycy5wcmVwcm9jZXNzX3NlcnZlcihtZXNzYWdlLlNlcnZlciksXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQ6cmVzdWx0LFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6bWVzc2FnZS5SZXN1bHRNZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ19kZXRhaWxzOm1lc3NhZ2UuUmVzdWx0TG9nRGV0YWlsc1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAvL0Vsc2UsIHJldHVybiBhbiBlcnJvclxyXG4gICAgICAgICAgICB9ZWxzZSBpZih0eXBlb2YgY2FsbGJhY2suZXJyb3I9PT1cImZ1bmN0aW9uXCIpe1xyXG4gICAgICAgICAgICAgICBpZihnbG9iYWwuY29uc29sZSE9PXVuZGVmaW5lZCAmJiBjb25maWd1cmF0aW9uLmRlYnVnPT09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPDw8ICBcIicrY2FsbGJhY2sucmVzcG9uc2UubWV0aG9kLm5hbWUrJ1wiIHdhcyBleGVjdXRlZCB3aXRoIGVycm9yIGJ5ICcrSlNPTi5zdHJpbmdpZnkoaGVscGVycy5wcmVwcm9jZXNzX3NlcnZlcihtZXNzYWdlLlNlcnZlcikpKTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBjYWxsYmFjay5lcnJvcih7XHJcbiAgICAgICAgICAgICAgICAgICBtZXRob2Q6Y2FsbGJhY2sucmVzcG9uc2UubWV0aG9kLFxyXG4gICAgICAgICAgICAgICAgICAgY2FsbGVkX3dpdGg6Y2FsbGJhY2sucmVzcG9uc2UuY2FsbGVkX3dpdGgsXHJcbiAgICAgICAgICAgICAgICAgICBtZXNzYWdlOm1lc3NhZ2UuUmVzdWx0TWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgIGxvZ19kZXRhaWxzOm1lc3NhZ2UuUmVzdWx0TG9nRGV0YWlscyxcclxuICAgICAgICAgICAgICAgICAgIHN0YXR1czptZXNzYWdlLnN0YXR1c1xyXG4gICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cdFx0XHQvL0ZpbmFsbHksIHJlbW92ZSB0aGUgY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nX2NhbGxiYWNrc1ttZXNzYWdlLkludm9jYXRpb25JZF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7cHJvY2Vzc19tZXRob2RfcmVzcG9uc2U6cHJvY2Vzc19tZXRob2RfcmVzcG9uc2UsIGludm9rZTppbnZva2V9O1xyXG59O1xyXG4iLCIvKlxyXG5UaGUgTWV0aG9kc3RhdGUgbW9kdWxlLCBrZWVwcyB0aGUgc3RhdGUgb2YgYXZhaWxhYmxlIEFHTSBtZXRob2RzIGluIHRoZSBuZXR3b3JrLlxyXG4qL1xyXG5cclxudmFyIGhlbHBlcnMgPSByZXF1aXJlKFwiLi9hZ21faGVscGVyc1wiKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29uZmlndXJhdGlvbil7XHJcblx0Ly9BIGxpc3Qgb2YgYWxsIGF2YWlsYWJsZSBBR00gbWV0aG9kc1xyXG5cdHZhciBtZXRob2RzID0ge307XHJcblxyXG5cdC8vU2F2ZSB0aGUgcmVmZXJlbmNlIHRvIHRoZSBtZXRyaWMgZnVuY3Rpb24gaWYgaXQgZXhpc3RzXHJcblx0dmFyIG9iamVjdE1ldHJpYyA9IChjb25maWd1cmF0aW9uLm1ldHJpY3MhPT11bmRlZmluZWQpP2NvbmZpZ3VyYXRpb24ubWV0cmljcy5udW1iZXJNZXRyaWMuYmluZChjb25maWd1cmF0aW9uLm1ldHJpY3MpOmZ1bmN0aW9uKCl7fTtcclxuXHJcbiAgICAvL0FkZHMgYSBuZXcgc2VydmVyIHRvIGEgbWV0aG9kLiBDcmVhdGVzIHRoZSBtZXRob2QgaWYgaXQgaXMgbm90IGNyZWF0ZWQgcHJldmlvdXNseS5cclxuICAgIGZ1bmN0aW9uIGFkZF9zZXJ2ZXJfdG9fbWV0aG9kKG1ldGhvZF9pbmZvLCBzZXJ2ZXJfaWQsIHNlcnZlcl9pbmZvKXtcclxuICAgICAgICAvL0dldCB0aGUgbWV0aG9kIElEXHJcbiAgICAgICAgdmFyIG1ldGhvZF9pZCA9IGdldF9tZXRob2RfaWQobWV0aG9kX2luZm8pO1xyXG5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgLy9PbmUgbWV0aG9kIGNhbiBoYXZlIHNldmVyYWwgcmVxdWVzdCBzdWJqZWN0cyBwZXIgc2VydmVyLlxyXG4gICAgICAgIC8vU28gdGhlIHJlcXVlc3Qgc3ViamVjdCBpcyBhY3R1YWxseSBub3QgYSBwcm9wZXJ0eSBvZiB0aGUgbWV0aG9kXHJcbiAgICAgICAgdmFyIHJlcXVlc3Rfc3ViamVjdCA9IG1ldGhvZF9pbmZvLnJlcXVlc3Rfc3ViamVjdDtcclxuICAgICAgICBkZWxldGUgIG1ldGhvZF9pbmZvLnJlcXVlc3Rfc3ViamVjdDtcclxuXHJcblxyXG5cdFx0Ly9Db3B5IHRoZSBtZXRob2QgYW5kIHNlcnZlciBvYmplY3RzIHRvIGEgZm9ybWF0IHN1aXRhYmxlIGZvciBzZW5kaW5nIHRvIHVzZXJzXHJcbiAgICAgICAgdmFyIG1ldGhvZF9pbmZvX2ZyaWVuZGx5ID0gaGVscGVycy5jbG9uZV9vYmplY3QobWV0aG9kX2luZm8pO1xyXG4gICAgXHR2YXIgc2VydmVyX2luZm9fZnJpZW5kbHkgPSBoZWxwZXJzLmNsb25lX29iamVjdChzZXJ2ZXJfaW5mbyk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgdmFyIG1ldGhvZCA9IG1ldGhvZHNbbWV0aG9kX2lkXTtcclxuXHJcbiAgICAgICAgLy9JZiB0aGUgbWV0aG9kIGRvZXMgbm90IGV4aXN0LCBjcmVhdGUgaXRcclxuICAgICAgICBpZihtZXRob2QgPT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgLy9TYXZlIHRoZSBpbmZvXHJcbiAgICAgICAgICAgIG1ldGhvZCA9IG1ldGhvZHNbbWV0aG9kX2lkXSA9IHtpbmZvOm1ldGhvZF9pbmZvLCBzZXJ2ZXJzOnt9fTtcclxuXHRcdFx0Ly9BZGQgcmVxdWVzdF9zdWJqZWN0XHJcbiAgICAgICAgICBcdG1ldGhvZCA9IGFkZF9yZXF1ZXN0X3N1YmplY3QobWV0aG9kLCBzZXJ2ZXJfaWQsIHJlcXVlc3Rfc3ViamVjdCk7XHJcblxyXG4gICAgICAgICAgICAgLy9FeGVjdXRlIHVzZXIgY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIGhlbHBlcnMuZXhlY3V0ZV9hbGxfd2l0aChjb25maWd1cmF0aW9uLm1ldGhvZF9hZGRlZCwgbWV0aG9kX2luZm9fZnJpZW5kbHkpO1xyXG4gICAgICAgICAgICAvL0xvZyBhbmQgcHVibGlzaCBtZXRyaWNzXHJcbiAgICAgICAgICAgIGlmKGdsb2JhbC5jb25zb2xlIT09dW5kZWZpbmVkICYmIGNvbnNvbGUudGFibGUhPT11bmRlZmluZWQgJiYgY29uZmlndXJhdGlvbi5kZWJ1Zz09PXRydWUpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCI+Pj4+Pj4gTmV3IG1ldGhvZCBkZXRlY3RlZDogXCIrSlNPTi5zdHJpbmdpZnkobWV0aG9kX2luZm9fZnJpZW5kbHkpKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUudGFibGUoZ2V0X21ldGhvZHMoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHRcdFx0b2JqZWN0TWV0cmljKFwiTWV0aG9kcyB0b3RhbCBjb3VudFwiLCBPYmplY3Qua2V5cyhtZXRob2RzKS5sZW5ndGgpO1xyXG4gICAgICAgIH1lbHNle1xyXG5cdFx0XHQvL0Vsc2UsIGp1c3QgYWRkIHRoZSByZXF1ZXN0IHN1YmplY3RcclxuICAgICAgICBcdG1ldGhvZCA9IGFkZF9yZXF1ZXN0X3N1YmplY3QobWV0aG9kLCBzZXJ2ZXJfaWQsIHJlcXVlc3Rfc3ViamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vRXhlY3V0ZSB1c2VyIGNhbGxiYWNrc1xyXG4gICAgICAgIGhlbHBlcnMuZXhlY3V0ZV9hbGxfd2l0aChjb25maWd1cmF0aW9uLnNlcnZlcl9tZXRob2RfYWRkZWQsIHttZXRob2Q6bWV0aG9kX2luZm9fZnJpZW5kbHksIHNlcnZlcjpzZXJ2ZXJfaW5mb19mcmllbmRseX0pO1xyXG4gICAgfVxyXG5cclxuXHQvL0FkZHMgcmVxdWVzdCBzdWJqZWN0IGZvciBzZXJ2ZXIgYW5kIG1ldGhvZFxyXG4gICAgZnVuY3Rpb24gYWRkX3JlcXVlc3Rfc3ViamVjdChtZXRob2QsIHNlcnZlcl9pZCwgcmVxdWVzdF9zdWJqZWN0KXtcclxuICAgIFx0bWV0aG9kLnNlcnZlcnNbc2VydmVyX2lkXSA9IHJlcXVlc3Rfc3ViamVjdDtcclxuICAgIFx0cmV0dXJuIG1ldGhvZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy9SZW1vdmVzIGEgc2VydmVyIGZyb20gYSBtZXRob2QuIERlbGV0ZXMgdGhlIG1ldGhvZCBpZiB0aGVyZSBhcmUgbm8gbW9yZSBzZXJ2ZXJzIGxlZnQuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVfc2VydmVyX2Zyb21fbWV0aG9kKG1ldGhvZF9pZCwgc2VydmVyX2lkLCBzZXJ2ZXJfaW5mbykge1xyXG4gICAgICAvL09idGFpbiBpbmZvIGFib3V0IHRoZSBtZXRob2QgYmVmb3JlIHJlbW92aW5nIGl0LlxyXG4gICAgICB2YXIgbWV0aG9kX2luZm9fZnJpZW5kbHkgPSBnZXRfbWV0aG9kKG1ldGhvZF9pZCk7XHJcbiAgICAgIHZhciBzZXJ2ZXJfaW5mb19mcmllbmRseSA9IGhlbHBlcnMuY2xvbmVfb2JqZWN0KHNlcnZlcl9pbmZvKTtcclxuXHJcblxyXG4gICAgICAvL1JlbW92ZSB0aGUgc2VydmVyIGZyb20gdGhlIGxpc3RcclxuICAgICAgdmFyIHNlcnZlcnMgPSBtZXRob2RzW21ldGhvZF9pZF0uc2VydmVycztcclxuICAgICAgZGVsZXRlIHNlcnZlcnNbc2VydmVyX2lkXTtcclxuICAgICAgLy9SZW1vdmUgdGhlIG1ldGhvZCBpZiB0aGVyZSBhcmVuJ3QgYW55IHNlcnZlcnMgbGVmdFxyXG4gICAgICBpZiAoT2JqZWN0LmtleXMoc2VydmVycykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gY29uZmlndXJhdGlvbi5vbl9tZXRob2RfcmVtb3ZlZDtcclxuICAgICAgICBoZWxwZXJzLmV4ZWN1dGVfYWxsX3dpdGgoY29uZmlndXJhdGlvbi5tZXRob2RfcmVtb3ZlZCwgbWV0aG9kX2luZm9fZnJpZW5kbHkpO1xyXG4gICAgICAgIC8vcmVtb3ZlIG1ldGhvZFxyXG4gICAgICAgIGRlbGV0ZSBtZXRob2RzW21ldGhvZF9pZF07XHJcbiAgICAgICAgLy9Mb2cgYW5kIG1ldHJpY3NcclxuICAgICAgICBpZiAoZ2xvYmFsLmNvbnNvbGUgIT09IHVuZGVmaW5lZCAmJiBjb25zb2xlLnRhYmxlICE9PSB1bmRlZmluZWQgJiYgY29uZmlndXJhdGlvbi5kZWJ1ZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCI8PDw8PDwgTWV0aG9kIHN0b3BwZWQgYmVpbmcgYXZhaWxhYmxlOiBcIiArIEpTT04uc3RyaW5naWZ5KG1ldGhvZF9pbmZvX2ZyaWVuZGx5KSk7XHJcbiAgICAgICAgICBjb25zb2xlLnRhYmxlKGdldF9tZXRob2RzKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYmplY3RNZXRyaWMoXCJNZXRob2RzIHRvdGFsIGNvdW50XCIsIE9iamVjdC5rZXlzKG1ldGhvZHMpLmxlbmd0aCk7XHJcbiAgICAgIH1cclxuICAgICAgLy9FeGVjdXRlIHVzZXIgY2FsbGJhY2tzXHJcbiAgICAgIGhlbHBlcnMuZXhlY3V0ZV9hbGxfd2l0aChjb25maWd1cmF0aW9uLnNlcnZlcl9tZXRob2RfcmVtb3ZlZCwge1xyXG4gICAgICAgIG1ldGhvZDogbWV0aG9kX2luZm9fZnJpZW5kbHksXHJcbiAgICAgICAgc2VydmVyOiBzZXJ2ZXJfaW5mb19mcmllbmRseVxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG5cdC8vR2VuZXJhdGVzIGEgdW5pcXVlIGlmIGZvciBhIG1ldGhvZFxyXG4gICAgZnVuY3Rpb24gZ2V0X21ldGhvZF9pZChtKXtcclxuXHRcdC8vU2V0dGluZyBwcm9wZXJpZXMgdG8gZGVmYXVsdHM6XHJcblx0XHR2YXIgYWNjZXB0cyA9IG0uYWNjZXB0cyAhPT11bmRlZmluZWQ/bS5hY2NlcHRzOlwiXCI7XHJcblx0XHR2YXIgcmV0dXJucyA9IG0ucmV0dXJucyAhPT11bmRlZmluZWQ/bS5yZXR1cm5zOlwiXCI7XHJcblx0XHR2YXIgdmVyc2lvbiA9ICBtLnZlcnNpb24gIT09dW5kZWZpbmVkP20udmVyc2lvbjowO1xyXG5cdFx0cmV0dXJuIChtLm5hbWUrYWNjZXB0cytyZXR1cm5zK3ZlcnNpb24pLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vUmV0cmlldmUgYWxsIG1ldGhvZHNcclxuICAgIGZ1bmN0aW9uIGdldF9tZXRob2RzKCl7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG1ldGhvZHMpLm1hcChmdW5jdGlvbihtZXRob2Qpe1xyXG4gICAgICAgICAgICByZXR1cm4gaGVscGVycy5jbG9uZV9vYmplY3QobWV0aG9kc1ttZXRob2RdLmluZm8pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy9SZXRyaWV2ZSBhbiBhcnJheSBvZiB0aGUgSUQncyBvZiB0aGUgc2VydmVycyBmb3IgYSBtZXRob2RcclxuICAgIGZ1bmN0aW9uIGdldF9zZXJ2ZXJzX2Zvcl9tZXRob2QobWV0aG9kX2luZm8pe1xyXG4gICAgICAgIHZhciBtZXRob2QgPSBtZXRob2RzW2dldF9tZXRob2RfaWQobWV0aG9kX2luZm8pXTtcclxuICAgICAgICBpZihtZXRob2QgIT09dW5kZWZpbmVkKXtyZXR1cm4gbWV0aG9kLnNlcnZlcnM7fVxyXG4gICAgICAgIGVsc2V7cmV0dXJuIHt9O31cclxuICAgIH1cclxuXHJcbiAgICAvL1JldHJpZXZlcyBhIGNvcHkgb2YgdGhlIG1ldGhvZCwgYnkgaXRzIElEXHJcbiAgICBmdW5jdGlvbiBnZXRfbWV0aG9kKG1ldGhvZF9pZCl7XHJcbiAgICAgICAgaWYodHlwZW9mIG1ldGhvZF9pZCA9PT0gXCJvYmplY3RcIil7bWV0aG9kX2lkID0gZ2V0X21ldGhvZF9pZChtZXRob2RfaWQpO31cclxuICAgICAgICBpZihtZXRob2RzW21ldGhvZF9pZF0hPT11bmRlZmluZWQpXHJcbiAgICAgICAgLy9XZSBjbG9uZSB0aGUgbWV0aG9kIGRlZmluaXRpb24gc28gaXQgY2FuIGJlIG11dGF0ZWQgd2l0aG91dCBhZmZlY3RpbmcgdGhlIG9yaWdpbmFsXHJcbiAgICAgICAgcmV0dXJuIGhlbHBlcnMuY2xvbmVfb2JqZWN0KG1ldGhvZHNbbWV0aG9kX2lkXS5pbmZvKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0X21ldGhvZHM6Z2V0X21ldGhvZHMsXHJcbiAgICAgICAgICAgIGdldF9tZXRob2Q6Z2V0X21ldGhvZCxcclxuICAgICAgICAgICAgZ2V0X21ldGhvZF9pZDpnZXRfbWV0aG9kX2lkLFxyXG4gICAgICAgICAgICBhZGRfc2VydmVyX3RvX21ldGhvZDphZGRfc2VydmVyX3RvX21ldGhvZCxcclxuICAgICAgICAgICAgcmVtb3ZlX3NlcnZlcl9mcm9tX21ldGhvZDpyZW1vdmVfc2VydmVyX2Zyb21fbWV0aG9kLFxyXG4gICAgICAgICAgICBnZXRfc2VydmVyc19mb3JfbWV0aG9kOmdldF9zZXJ2ZXJzX2Zvcl9tZXRob2RcclxuICAgICAgICAgICAgfTtcclxuXHJcbn07XHJcbiIsIi8qXHJcblRoZSBTZXJ2ZXJzdGF0ZSBtb2R1bGUgcHJvY2Vzc2VzIHNlcnZlciBwcmVzZW5jZXMgYW5kIGtlZXBzIHRoZSBzdGF0ZSBvZiBhdmFpbGFibGUgQUdNIHNlcnZlcnMgaW4gdGhlIG5ldHdvcmsuXHJcbiovXHJcbnZhciBoZWxwZXJzID0gcmVxdWlyZShcIi4vYWdtX2hlbHBlcnNcIik7XHJcblxyXG52YXIgZ2V0X3NlcnZlcl9pZCA9IGhlbHBlcnMuZ2V0X3NlcnZlcl9pZDtcclxuXHJcbnZhciBjbGllbnRfbWV0aG9kc3RhdGUgPSByZXF1aXJlKFwiLi9hZ21fY2xpZW50X21ldGhvZHN0YXRlXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uLCBpbnN0YW5jZSl7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0Ly9BIGxpc3Qgb2YgYWxsIHRoZSBzZXJ2ZXJzIGluIHRoZSBuZXR3b3JrXHJcblx0dmFyIHNlcnZlcnMgPSB7fTtcclxuXHJcblx0Ly9JbnN0YW50aWF0ZXMgdGhlIFwibWV0aG9kc3RhdGVcIiBtb2R1bGVcclxuICAgIHZhciBtZXRob2RzID0gY2xpZW50X21ldGhvZHN0YXRlKGNvbmZpZ3VyYXRpb24pO1xyXG5cclxuXHJcblx0Ly9Qcm9jZXNzZXMgYSBwcmVzZW5jZSBtZXNzYWdlIGZyb20gYSBzZXJ2ZXJcclxuICAgIGZ1bmN0aW9uIHByb2Nlc3NfcHJlc2VuY2UocHJlc2VuY2UsIGlzX3ByZXNlbmNlKXtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKHByZXNlbmNlLkluc3RhbmNlKVxyXG5cdFx0Ly9HZXQgc2VydmVyIGluZm8uXHJcblx0XHR2YXIgc2VydmVyaW5mbyA9IGhlbHBlcnMucHJlcHJvY2Vzc19zZXJ2ZXIocHJlc2VuY2UuSW5zdGFuY2UpO1xyXG5cclxuICAgICAgICAvL0lmIGl0IGlzIGEgbmV3IHNlcnZlciwgcmVnaXN0ZXIgaXQuXHJcblx0XHRpZighZXhpc3RzKHNlcnZlcmluZm8pKXtcclxuXHRcdFx0YWRkX3NlcnZlcihzZXJ2ZXJpbmZvKTtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0aWYoIShpc19wcmVzZW5jZSAmJiBwcmVzZW5jZS5QdWJsaXNoaW5nSW50ZXJ2YWwgPT09IDApKXtcclxuXHRcdFx0Ly9EbyBub3RoaW5nIGZvciBwcmVzZW5jZSBtZXNzYWdlcyB3aXRoIGludGVydmFsIDBcclxuXHRcdFx0Ly9UYWtlIGNhcmUgb2YgdGhlIHRpbWVvdXRzXHJcblx0XHRcdHNldF90aW1lb3V0KHNlcnZlcmluZm8sIHByZXNlbmNlLlB1Ymxpc2hpbmdJbnRlcnZhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblx0XHQvL0ZpbmFsbHksIHVwZGF0ZSB0aGUgbWV0aG9kc1xyXG5cdFx0aWYocHJlc2VuY2UuTWV0aG9kRGVmaW5pdGlvbnMhPT11bmRlZmluZWQpe1xyXG5cdFx0XHR1cGRhdGVfbWV0aG9kcyhzZXJ2ZXJpbmZvLCBwcmVzZW5jZS5NZXRob2REZWZpbml0aW9ucyk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Ly9UaGlzIGZ1bmN0aW9uIHNldHMgYSB0aW1lb3V0IHdoaWNoIHJlbW92ZXMgdGhlIHNlcnZlciB1bmxlc3NcclxuXHQvL3RoZSBmdW5jdGlvbiBpcyBjYWxsZWQgYWdhaW4gYmVmb3JlIHRoZSB0aW1lb3V0IGlzIG92ZXJcclxuICAgIGZ1bmN0aW9uIHNldF90aW1lb3V0KHNlcnZlcmluZm8sIGR1cmF0aW9uKXtcclxuXHJcblx0XHRpZihkdXJhdGlvbiA9PT0tMSkgcmV0dXJuO1xyXG5cdFx0IC8vUmV0cmlldmUgdGhlIHNlcnZlclxyXG4gICAgICAgICB2YXIgc2VydmVyX2lkID0gZ2V0X3NlcnZlcl9pZChzZXJ2ZXJpbmZvKTtcclxuICAgICAgICAgdmFyIHNlcnZlciA9IHNlcnZlcnNbc2VydmVyX2lkXTtcclxuICAgICAgICAgLy9TdG9wIHRoZSBwcmV2aW91cyB0aW1lb3V0XHJcbiAgICAgICAgIGlmKHNlcnZlci5ib21iICE9PXVuZGVmaW5lZCl7XHJcblx0XHRcdGNsZWFyVGltZW91dChzZXJ2ZXIuYm9tYik7XHJcbiAgICAgICAgIH1cclxuXHRcdCAvL1NldCBhIG5ldyBvbmVcclxuXHRcdCBzZXJ2ZXIuYm9tYiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHRcdFx0cmVtb3ZlX3NlcnZlcihzZXJ2ZXJpbmZvKTtcclxuXHRcdCB9LCBkdXJhdGlvbipjb25maWd1cmF0aW9uLnJlbW92ZV9zZXJ2ZXJfb25fbl9taXNzaW5nX2hlYXJ0YmVhdHMrMSk7XHJcblxyXG4gICAgfVxyXG4gICAgLy9DaGVja3MgaWYgYSBzZXJ2ZXJzIGV4aXN0c1xyXG4gICAgZnVuY3Rpb24gZXhpc3RzKHNlcnZlcmluZm8pe1xyXG4gICAgICAgIHZhciBzZXJ2ZXJfaWQgPSBnZXRfc2VydmVyX2lkKHNlcnZlcmluZm8pO1xyXG4gICAgICAgIHJldHVybiBzZXJ2ZXJzW3NlcnZlcl9pZF0hPT11bmRlZmluZWQ7XHJcbiAgICB9XHJcblx0Ly9SZWdpc3RlciBhIHNlcnZlclxyXG5cdGZ1bmN0aW9uIGFkZF9zZXJ2ZXIoc2VydmVyaW5mbyl7XHJcbiAgICAgICAgLy9PYnRhaW4gYSBzZXJ2ZXIgSUQgYW5kIHN0b3JlIHRoZSBuZXcgc2VydmVyXHJcbiAgICAgICAgdmFyIHNlcnZlcl9pZCA9IGdldF9zZXJ2ZXJfaWQoc2VydmVyaW5mbyk7XHJcblx0XHRzZXJ2ZXJzW3NlcnZlcl9pZF0gPSB7aW5mbzpzZXJ2ZXJpbmZvLCBtZXRob2RzOltdLCBib21iOnVuZGVmaW5lZH07XHJcblxyXG5cdFx0Ly9Mb2cgaW4gY29uc29sZVxyXG4gICAgICAgIGlmKGdsb2JhbC5jb25zb2xlIT09dW5kZWZpbmVkICYmIGNvbnNvbGUudGFibGUhPT11bmRlZmluZWQgJiYgY29uZmlndXJhdGlvbi5kZWJ1Zz09PXRydWUpe1xyXG4gICAgICAgIFx0Y29uc29sZS5sb2coXCI+Pj4+Pj4gTmV3IHNlcnZlciBkZXRlY3RlZDogXCIrSlNPTi5zdHJpbmdpZnkoc2VydmVyaW5mbykpO1xyXG4gICAgICAgICAgICBjb25zb2xlLnRhYmxlKGdldF9zZXJ2ZXJzKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9FeGVjdXRlIHVzZXIgY2FsbGJhY2tzXHJcbiAgICAgICAgaGVscGVycy5leGVjdXRlX2FsbF93aXRoKGNvbmZpZ3VyYXRpb24uc2VydmVyX2FkZGVkLCBzZXJ2ZXJpbmZvKTtcclxuXHJcblx0XHRyZXR1cm4gc2VydmVyX2lkO1xyXG5cdH1cclxuXHQvL1VucmVnaXN0ZXJzIGEgc2VydmVyXHJcblx0ZnVuY3Rpb24gcmVtb3ZlX3NlcnZlcihzZXJ2ZXJpbmZvKXtcclxuXHRcdC8vT2J0YWluIGEgc2VydmVyIElEXHJcbiAgICAgICAgdmFyIHNlcnZlcl9pZCA9IGdldF9zZXJ2ZXJfaWQoc2VydmVyaW5mbyk7XHJcbiAgICAgICAgLy9SZW1vdmUgdGhlIHNlcnZlcidzIG1ldGhvZHNcclxuICAgICAgICBzZXJ2ZXJzW3NlcnZlcl9pZF0ubWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZF9pZCl7XHJcbiAgICAgICAgICAgIG1ldGhvZHMucmVtb3ZlX3NlcnZlcl9mcm9tX21ldGhvZChtZXRob2RfaWQsIHNlcnZlcl9pZCwgc2VydmVyaW5mbyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9SZW1vdmUgdGhlIHNlcnZlciBpdHNlbGZcclxuICAgICAgICBkZWxldGUgc2VydmVyc1tzZXJ2ZXJfaWRdO1xyXG4gICAgICAgIC8vTG9nIGluIGNvbnNvbGVcclxuICAgICAgICAgaWYoZ2xvYmFsLmNvbnNvbGUhPT11bmRlZmluZWQgJiYgY29uc29sZS50YWJsZSE9PXVuZGVmaW5lZCAmJiBjb25maWd1cmF0aW9uLmRlYnVnPT09dHJ1ZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiPDw8PDw8IFNlcnZlciBzdG9wcGVkIGJlaW5nIGF2YWlsYWJsZTpcIitKU09OLnN0cmluZ2lmeShzZXJ2ZXJpbmZvKSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUudGFibGUoZ2V0X3NlcnZlcnMoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAgLy9FeGVjdXRlIHVzZXIgY2FsbGJhY2tzXHJcbiAgICAgICAgaGVscGVycy5leGVjdXRlX2FsbF93aXRoKGNvbmZpZ3VyYXRpb24uc2VydmVyX3JlbW92ZWQsIHNlcnZlcmluZm8pO1xyXG5cdH1cclxuXHJcbiAgICAvL1VwZGF0ZXMgdGhlIG1ldGhvZHMgb2YgYSBzZXJ2ZXJcclxuXHRmdW5jdGlvbiB1cGRhdGVfbWV0aG9kcyhzZXJ2ZXJpbmZvLCBuZXdfbWV0aG9kcyl7XHJcbiAgICAgICAgdmFyIHNlcnZlcl9pZCA9IGdldF9zZXJ2ZXJfaWQoc2VydmVyaW5mbyk7XHJcbiAgICAgICAgLy9HZXQgYW4gYXJyYXkgb2YgdGhlIG1ldGhvZHMgdGhlIHNlcnZlciBoYWQgYmVmb3JlIHdlIHN0YXJ0ZWQgdGhpc1xyXG5cdFx0dmFyIG9sZF9tZXRob2RzX2lkcyA9IHNlcnZlcnNbc2VydmVyX2lkXS5tZXRob2RzO1xyXG4gICAgICAgIC8vR2V0IGFuIGFycmF5IG9mIHRoZSBtZXRob2RzIHRoYXQgdGhlIHNlcnZlciBoYXMgbm93XHJcbiAgICAgICAgbmV3X21ldGhvZHMgPSBuZXdfbWV0aG9kcy5tYXAoaGVscGVycy5wcmVwcm9jZXNzX21ldGhvZCkucmVkdWNlKGZ1bmN0aW9uKG9iaiwgbWV0aG9kKXtcclxuICAgICAgICAgICBvYmpbbWV0aG9kcy5nZXRfbWV0aG9kX2lkKG1ldGhvZCldID0gbWV0aG9kO1xyXG4gICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgfSwge30pO1xyXG4gICAgICAgIC8vRm9yIGVhY2ggb2YgdGhlIG9sZCBtZXRob2RzXHJcbiAgICAgICAgb2xkX21ldGhvZHNfaWRzLmZvckVhY2goZnVuY3Rpb24obWV0aG9kX2lkKXtcclxuICAgICAgICAgICAgLy9DaGVjayBpZiBpdCBpcyBzdGlsbCB0aGVyZVxyXG4gICAgICAgICAgICBpZihuZXdfbWV0aG9kc1ttZXRob2RfaWRdPT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgLy9JZiBpdCBpc24ndCwgcmVtb3ZlIGl0XHJcbiAgICAgICAgICAgICAgIG1ldGhvZHMucmVtb3ZlX3NlcnZlcl9mcm9tX21ldGhvZChtZXRob2RfaWQsIHNlcnZlcl9pZCwgc2VydmVyaW5mbyk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgLy9JZiBpdCBpcyB0aGVyZSBpbiBib3RoIHRoZSBvbGQgYXJyYXkgYW5kIHRoZSBuZXcgb25lLCB3ZSBkb24ndCBuZWVkIHRvIGFkZCBpdCBhZ2FpblxyXG4gICAgICAgICAgICAgICAgbmV3X21ldGhvZHNbbWV0aG9kX2lkXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vTm93IGFkZCB0aGUgbmV3IG1ldGhvZHNcclxuICAgICAgICB2YXIgbmV3X21ldGhvZHNfaWRzID0gT2JqZWN0LmtleXMobmV3X21ldGhvZHMpO1xyXG4gICAgICAgIG5ld19tZXRob2RzX2lkcy5mb3JFYWNoKGZ1bmN0aW9uKGlkKXtcclxuICAgICAgICAgICAgaWYobmV3X21ldGhvZHNbaWRdIT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIG1ldGhvZHMuYWRkX3NlcnZlcl90b19tZXRob2QobmV3X21ldGhvZHNbaWRdLCBzZXJ2ZXJfaWQsIHNlcnZlcmluZm8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9Ob3cgYWxsIHdlIGhhdmUgdG8gZG8gaXMgcmVwbGFjZSB0aGUgbGlzdCBvZiBtZXRob2RzIHRoZSBzZXJ2ZXIgaGFzXHJcbiAgICAgICAgc2VydmVyc1tzZXJ2ZXJfaWRdLm1ldGhvZHMgPSBuZXdfbWV0aG9kc19pZHM7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vR2V0IGFsbCBzZXJ2ZXJzIGZvciBhIGdpdmVuIG1ldGhvZFxyXG4gICAgZnVuY3Rpb24gZ2V0X3NlcnZlcnMobWV0aG9kLCBpbmNsdWRlX3JlcXVlc3Rfc3ViamVjdCl7XHJcbiAgICAgICAgdmFyIHNlcnZlcl9pZHM7XHJcblx0XHQvL0lmIHRoZXJlIGlzbid0IGEgbWV0aG9kIGdldCB0aGUgSUQncyBvZiBhbGwgc2VydmVyc1xyXG4gICAgICAgIGlmKG1ldGhvZCA9PT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgIHNlcnZlcl9pZHMgPSBPYmplY3Qua2V5cyhzZXJ2ZXJzKTtcclxuXHRcdC8vRWxzZSwgZ2V0IGEgbGlzdCBvZiB0aGUgc2VydmVycyB0aGF0IGhhdmUgdGhlIG1ldGhvZFxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgIHZhciBpZHNfdG9fcmVxdWVzdF9zdWJqZWN0cyA9IG1ldGhvZHMuZ2V0X3NlcnZlcnNfZm9yX21ldGhvZChtZXRob2QpO1xyXG4gICAgICAgICAgIHNlcnZlcl9pZHMgPSBPYmplY3Qua2V5cyhpZHNfdG9fcmVxdWVzdF9zdWJqZWN0cyk7XHJcbiAgICAgICAgfVxyXG5cdFx0Ly9Gb3JtYXQgdGhlIGxpc3RcclxuICAgICAgICByZXR1cm4gc2VydmVyX2lkcy5tYXAoZnVuY3Rpb24oc2VydmVyX2lkKXtcclxuICAgICAgICAgICAgdmFyIHNlcnZlciA9ICBoZWxwZXJzLmNsb25lX29iamVjdChzZXJ2ZXJzW3NlcnZlcl9pZF0uaW5mbyk7XHJcbiAgICAgICAgICAgIC8vSW5jbHVkZSB0aGUgcmVxdWVzdCBzdWJqZWN0IGZvciBlYWNoIHNlcnZlciBmb3IgZWFjaCBtZXRob2Q6XHJcbiAgICAgICAgICAgIGlmKGluY2x1ZGVfcmVxdWVzdF9zdWJqZWN0KXtzZXJ2ZXIucmVxdWVzdF9zdWJqZWN0ID0gaWRzX3RvX3JlcXVlc3Rfc3ViamVjdHNbc2VydmVyX2lkXTt9XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJ2ZXI7XHJcbiAgICAgICAgfSkuc29ydChjb21wYXJlX3NlcnZlcnMpO1xyXG4gICAgfVxyXG4gICAgLy9BIGNvbXBhcmVyIGZ1bmN0aW9uLiBTb3J0cyB0aGUgc2VydmVycyBiYXNlZCBvbiBhdmFpbGFiaWxpdHlcclxuICAgIGZ1bmN0aW9uIGNvbXBhcmVfc2VydmVycyhzZXJ2ZXIxLCBzZXJ2ZXIyKXtcclxuXHRcdHZhciBzMSA9IDA7XHJcblx0XHR2YXIgczIgPSAwO1xyXG5cdFx0Ly8rMiBpZiB0aGUgc2VydmVyIGlzIG9uIHRoZSBzYW1lIG1hY2hpbmVcclxuXHRcdGlmKHNlcnZlcjEubWFjaGluZSA9PT1pbnN0YW5jZS5tYWNoaW5lKXtzMSA9IHMxKzI7fVxyXG5cdFx0aWYoc2VydmVyMi5tYWNoaW5lID09PWluc3RhbmNlLm1hY2hpbmUpe3MyID0gczIrMjt9XHJcblx0XHQvLysxIGlmIGl0IHJ1bnMgdW5kZXIgdGhlIHNhbWUgdXNlclxyXG5cdFx0aWYoc2VydmVyMS51c2VyID09PSBpbnN0YW5jZS51c2VyKXtzMSA9IHMxKzE7fVxyXG5cdFx0aWYoc2VydmVyMi51c2VyID09PSBpbnN0YW5jZS51c2VyKXtzMiA9IHMyKzE7fVxyXG5cdFx0cmV0dXJuIHMyIC0gczE7XHJcblx0fVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldF9tZXRob2RfaWRzKHNlcnZlcil7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZlcnNbZ2V0X3NlcnZlcl9pZChzZXJ2ZXIpXS5tZXRob2RzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvL0dldCBhbGwgbWV0aG9kcyBmb3IgYSBnaXZlbiBzZXJ2ZXJcclxuXHRmdW5jdGlvbiBnZXRfbWV0aG9kcyhzZXJ2ZXIpe1xyXG4gICAgICAgIC8vSWYgdGhlcmUgaXMgbm8gc2VydmVyIHNwZWNpZmllZCwgcmV0dXJuIGFsbFxyXG4gICAgICAgIGlmKHNlcnZlciA9PT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kcy5nZXRfbWV0aG9kcygpO1xyXG4gICAgICAgIC8vRWxzZSwgZ2V0IHRoZSBtZXRob2RzIGZyb20gdGhlIHNlcnZlciBvYmplY3RcclxuICAgICAgICB9ZWxzZSBpZihleGlzdHMoc2VydmVyKSl7XHJcbiAgICAgICAgICAgICByZXR1cm4gZ2V0X21ldGhvZF9pZHMoc2VydmVyKS5tYXAoZnVuY3Rpb24obWV0aG9kX2lkKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZXRob2RzLmdldF9tZXRob2QobWV0aG9kX2lkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgLy9JZiB0aGUgc2VydmVyIGlzIHNwZWNpZmllZCwgYnV0IGl0IGRvZXMgbm90IGV4aXN0LCByZXR1cm4gYW4gZW1wdHkgYXJyYXlcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuXHR9XHJcblxyXG4gICAgcmV0dXJuIHtwcm9jZXNzX3ByZXNlbmNlOnByb2Nlc3NfcHJlc2VuY2UsXHJcbiAgICAgICAgICAgIGdldF9tZXRob2RzOmdldF9tZXRob2RzLFxyXG4gICAgICAgICAgICBnZXRfbWV0aG9kX2lkczpnZXRfbWV0aG9kX2lkcyxcclxuICAgICAgICAgICAgZ2V0X3NlcnZlcnM6Z2V0X3NlcnZlcnMsXHJcbiAgICAgICAgICAgXHRnZXRfbWV0aG9kOm1ldGhvZHMuZ2V0X21ldGhvZCxcclxuICAgICAgICAgICAgZXhpc3RzOmV4aXN0cyxcclxuXHRcdFx0Y29tcGFyZV9zZXJ2ZXJzOmNvbXBhcmVfc2VydmVyc1xyXG4gICAgICAgICAgICB9O1xyXG59O1xyXG4iLCJ2YXIgZGF0YXR5cGVzPVtcIkJvb2xcIiwgXCJJbnRcIiwgXCJEb3VibGVcIiwgXCJMb25nXCIsIFwiU3RyaW5nXCIsIFwiRGF0ZVRpbWVcIl07XHJcblxyXG5mdW5jdGlvbiBzaWduYXR1cmVfc3RyaW5naWZ5KGFycmF5KXtcclxuXHQvL05vIHNpZ25hdHVyZSAtIHJldHVybiB1bmRlZmluZWQgKHRoZSBkZWZhdWx0IHVuZGVmaW5lZCB2YWx1ZSBpbiBBR00gZm9yIHRoaXMgcHJvcGVydHkgaXMgZW1wdHkgc3RyaW5nKVxyXG5cdGlmKGFycmF5PT09dW5kZWZpbmVkfHxhcnJheSA9PT1cIlwiKXtyZXR1cm4gXCJcIjt9XHJcblx0dHJ5IHtcclxuXHRcdHJldHVybiBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpe1xyXG5cdFx0XHRpZiAoYS5OYW1lID4gYi5OYW1lKVxyXG5cdFx0XHRcdHJldHVybiAxO1xyXG5cdFx0XHRpZiAoYS5OYW1lIDwgYi5OYW1lKVxyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fSlcclxuXHRcdC5tYXAoZnVuY3Rpb24ocGFyKXtcclxuXHRcdFx0dmFyIHJlcSA9XCI/XCI7XHJcblx0XHRcdGlmKHBhci5Jc1JlcXVpcmVkKXtyZXEgPVwiXCI7fVxyXG5cdFx0XHR2YXIgYXJyID1cIlwiO1xyXG5cdFx0XHRpZihwYXIuaXNBcnJheSl7YXJyID1cIltdXCI7fVxyXG5cclxuXHRcdFx0dmFyIGRhdGFfdHlwZSA9IGRhdGF0eXBlc1twYXJzZUludChwYXIuVHlwZSldO1xyXG5cdFx0XHRpZihkYXRhX3R5cGU9PT11bmRlZmluZWQpe3Rocm93IFwiSW52YWxpZCBkYXRhdHlwZSBcIitwYXIuVHlwZTt9XHJcblxyXG5cdFx0XHRyZXR1cm4gZGF0YV90eXBlK3JlcSthcnIrXCIgXCIrcGFyLk5hbWU7XHJcblx0XHR9KS5qb2luKFwiLCBcIik7XHJcblx0fSBjYXRjaChlKSB7XHJcblx0XHRyZXR1cm4gXCJcIjtcclxuXHR9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzaWduYXR1cmVfcGFyc2Uoc3RyaW5nKXtcclxuXHQgaWYoc3RyaW5nPT09dW5kZWZpbmVkfHxzdHJpbmcgPT09XCJcIil7cmV0dXJuIHVuZGVmaW5lZDt9XHJcblx0IHJldHVybiBzdHJpbmcuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbihhcmd1bWVudCl7XHJcblx0XHQgdmFyIGFyZyA9IHt9O1xyXG5cdFx0IHZhciBwID0gYXJndW1lbnQudHJpbSgpLnNwbGl0KFwiIFwiKTtcclxuXHRcdCBpZiAocC5sZW5ndGghPT0yKXt0aHJvdyBcIkludmFsaWQgYXJndW1lbnQ6IFwiK2FyZ3VtZW50K1wiLlwiO31cclxuXHJcblx0XHQgYXJnLk5hbWUgPSBwWzFdO1xyXG5cclxuXHRcdCB2YXIgZGF0YSA9IHBbMF07XHJcblxyXG5cdFx0IGFyZy5pc0FycmF5ID0gZmFsc2U7XHJcblxyXG5cdFx0IGlmKGRhdGEuaW5kZXhPZihcIltdXCIpIT09LTEpe1xyXG5cdFx0XHQgZGF0YSA9IGRhdGEucmVwbGFjZShcIltdXCIsIFwiXCIpO1xyXG5cdFx0XHQgYXJnLmlzQXJyYXkgPSB0cnVlO1xyXG5cdFx0IH1cclxuXHJcblx0XHQgYXJnLklzUmVxdWlyZWQgPSB0cnVlO1xyXG5cdFx0IGlmKGRhdGEuaW5kZXhPZihcIj9cIikhPT0tMSl7XHJcblx0XHRcdCBkYXRhID0gZGF0YS5yZXBsYWNlKFwiP1wiLCBcIlwiKTtcclxuXHRcdFx0IGFyZy5Jc1JlcXVpcmVkID0gZmFsc2U7XHJcblx0XHQgfVxyXG5cclxuXHRcdCB2YXIgYXJnX3R5cGUgPSBkYXRhdHlwZXMuaW5kZXhPZihkYXRhKTtcclxuXHRcdCBpZihhcmdfdHlwZSE9PS0xKXtcclxuXHRcdFx0YXJnLlR5cGUgPSBhcmdfdHlwZStcIlwiO1xyXG5cdFx0IH1lbHNle1xyXG5cdFx0XHQgdGhyb3cgXCJJbnZhbGlkIGRhdGF0eXBlOiBcIitkYXRhK1wiLiBUaGUgYWNjZXB0ZWQgZGF0YXR5cGVzIGFyZSBJbnQsIERvdWJsZSwgTG9uZywgRGF0ZVRpbWUsIEJvb2wgYW5kIFN0cmluZ1wiO1xyXG5cdFx0IH1cclxuXHJcblx0XHQgcmV0dXJuIGFyZztcclxuXHJcblx0IH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaWduYXR1cmVfcGFyc2VfZnJpZW5kbHkoc3RyaW5nKXtcclxuXHRyZXR1cm4gc2lnbmF0dXJlX3BhcnNlKHN0cmluZykucmVkdWNlKGZ1bmN0aW9uKG9iaiwgYXJnKXtcclxuXHRcdG9ialthcmcuTmFtZV0gPSB7dHlwZTpkYXRhdHlwZXNbcGFyc2VJbnQoYXJnLlR5cGUpXSwgaXNfYXJyYXk6YXJnLmlzQXJyYXksIGlzX3JlcXVpcmVkOmFyZy5Jc1JlcXVpcmVkfTtcclxuXHRcdHJldHVybiBvYmo7XHJcblx0fSx7fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNpZ25hdHVyZV9ub3JtYWxpemUoc3RyaW5nKXtcclxuXHRyZXR1cm4gc2lnbmF0dXJlX3N0cmluZ2lmeShzaWduYXR1cmVfcGFyc2Uoc3RyaW5nKSk7XHJcbn1cclxuXHJcblxyXG4vL0NvbnZlcnRzIHNlcnZlciBwcm9wZXJ0aWVzIGZyb20gY2FtZWwgdG8gc25ha2UgY2FzZVxyXG5mdW5jdGlvbiBwcmVwcm9jZXNzX3NlcnZlcihtKXtcclxuXHRyZXR1cm57XHJcblx0XHRtYWNoaW5lOm0uTWFjaGluZU5hbWUsXHJcblx0XHRwaWQ6bS5Qcm9jZXNzSWQsXHJcblx0XHRzdGFydGVkOm0uUHJvY2Vzc1N0YXJ0VGltZSxcclxuXHRcdHVzZXI6bS5Vc2VyTmFtZSxcclxuXHRcdGFwcGxpY2F0aW9uOm0uQXBwbGljYXRpb25OYW1lLFxyXG5cdFx0ZW52aXJvbm1lbnQ6bS5FbnZpcm9ubWVudCxcclxuXHRcdHJlZ2lvbjptLlJlZ2lvbixcclxuXHRcdHNlcnZpY2VfbmFtZTptLlNlcnZpY2VOYW1lLFxyXG5cdFx0bWV0cmljc19yZXBvc2l0b3J5X2lkOm0uTWV0cmljc1JlcG9zaXRvcnlJZCxcclxuXHRcdHN0YXRlOm0uU3RhdGVcclxuXHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbG9uZV9vYmplY3QobWV0aG9kKXtcclxuXHR2YXIgbmV3X21ldGhvZCA9e307XHJcblx0Zm9yKHZhciBpIGluIG1ldGhvZCl7XHJcblx0XHQvL1JlbW92ZSB1bmRlZmluZWQgdmFsdWVzIGZyb20gb2JqZWN0IGJlZm9yZSBwYXNzaW5nIGl0IHRvIHRoZSB1c2VyXHJcblx0XHRpZihtZXRob2RbaV0hPT11bmRlZmluZWQmJm1ldGhvZFtpXSE9PVwiXCImJm1ldGhvZFtpXSE9PTApe1xyXG5cdFx0XHRuZXdfbWV0aG9kW2ldID0gbWV0aG9kW2ldO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gbmV3X21ldGhvZDtcclxufVxyXG5cclxuXHQvL0hlbHBlcjogcHJlcHJvY2Vzc2VzIHRoZSBtZXRob2QgZGVmaW5pdGlvblxyXG5mdW5jdGlvbiBwcmVwcm9jZXNzX21ldGhvZChtZXRob2RfaW5mbyl7XHJcblx0dmFyIG1ldGhvZCA9IG1ldGhvZF9pbmZvLk1ldGhvZDtcclxuXHRyZXR1cm57XHJcblx0XHRuYW1lOm1ldGhvZC5OYW1lLFxyXG5cdFx0YWNjZXB0czptZXRob2QuSW5wdXRTaWduYXR1cmUsXHJcblx0XHRyZXR1cm5zOm1ldGhvZC5SZXN1bHRTaWduYXR1cmUsXHJcblx0XHRyZXF1ZXN0X3N1YmplY3Q6bWV0aG9kX2luZm8uTWV0aG9kUmVxdWVzdFN1YmplY3QsXHJcblx0XHRkZXNjcmlwdGlvbjptZXRob2QuRGVzY3JpcHRpb24sXHJcblx0XHRkaXNwbGF5X25hbWU6bWV0aG9kLkRpc3BsYXlOYW1lLFxyXG5cdFx0dmVyc2lvbjptZXRob2QuVmVyc2lvbixcclxuXHRcdG9iamVjdF90eXBlczptZXRob2QuT2JqZWN0VHlwZVJlc3RyaWN0aW9uc1xyXG5cdH07XHJcbn1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHNhdmVfY2FsbGJhY2tfaW4oY2FsbGJhY2tfb2JqLCBldmVudCwgb25fY2FsbGJhY2tfYWRkLCBjYWxsYmFjayl7XHJcblx0XHRpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKXtcclxuXHRcdFx0Y2FsbGJhY2tfb2JqW2V2ZW50XSA9IGNhbGxiYWNrX29ialtldmVudF18fFtdO1xyXG5cdFx0XHRjYWxsYmFja19vYmpbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xyXG5cdFx0XHRvbl9jYWxsYmFja19hZGQoY2FsbGJhY2spO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHRocm93ICdcIicrZXZlbnQrJ1wiIG11c3QgYmUgY2FsbGVkIHdpdGggYSBmdW5jdGlvbiBhcyBhbiBhcmd1bWVudCc7XHJcblx0XHR9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBleGVjdXRlX2FsbF93aXRoKGNhbGxiYWNrcywgaW5wdXQpe1xyXG5cdGlmKHR5cGVvZiBjYWxsYmFja3MgPT09XCJvYmplY3RcIil7XHJcblx0XHRjYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjayl7XHJcblx0XHRcdGNhbGxiYWNrKGlucHV0KTtcclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG5cclxuLy9HZW5lcmF0ZXMgYSB1bmlxdWUgSUQgZm9yIGEgc2VydmVyXHJcbmZ1bmN0aW9uIGdldF9zZXJ2ZXJfaWQoc2VydmVyaW5mbyl7XHJcblx0aWYoc2VydmVyaW5mbz09PXVuZGVmaW5lZCl7cmV0dXJuIHVuZGVmaW5lZDt9XHJcblx0Ly9UaGUgbWF0Y2hpbmcgaXMgY2FzZS1pbnNlbnNpdGl2ZVxyXG5cdHJldHVybiAoc2VydmVyaW5mby5hcHBsaWNhdGlvbitzZXJ2ZXJpbmZvLnVzZXIpLnRvTG93ZXJDYXNlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb21pc2lmeShwcm9taXNlLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spe1xyXG4gICAgaWYgKHR5cGVvZiBzdWNjZXNzQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVycm9yQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZih0eXBlb2Ygc3VjY2Vzc0NhbGxiYWNrICE9PSAnZnVuY3Rpb24nKXtcclxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2sgPSBmdW5jdGlvbihhcmdzKXtcclxuICAgICAgICAgICAgaWYoZ2xvYmFsLmNvbnNvbGUhPT11bmRlZmluZWQgJiYgYWdtLmRlYnVnPT09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3MhXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1lbHNlIGlmKHR5cGVvZiBlcnJvckNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKXtcclxuICAgICAgICBlcnJvckNhbGxiYWNrID0gZnVuY3Rpb24oYXJncyl7XHJcbiAgICAgICAgICAgIGlmKGdsb2JhbC5jb25zb2xlIT09dW5kZWZpbmVkICYmIGFnbS5kZWJ1Zz09PXRydWUpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBbiBlcnJvciBvY2N1cnJlZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb21pc2UudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRnZXRfc2VydmVyX2lkOmdldF9zZXJ2ZXJfaWQsXHJcblx0ZXhlY3V0ZV9hbGxfd2l0aDpleGVjdXRlX2FsbF93aXRoLFxyXG5cdHNhdmVfY2FsbGJhY2tfaW46c2F2ZV9jYWxsYmFja19pbixcclxuXHRzaWduYXR1cmVfc3RyaW5naWZ5OnNpZ25hdHVyZV9zdHJpbmdpZnksXHJcblx0c2lnbmF0dXJlX3BhcnNlOnNpZ25hdHVyZV9wYXJzZSxcclxuXHRzaWduYXR1cmVfcGFyc2VfZnJpZW5kbHk6c2lnbmF0dXJlX3BhcnNlX2ZyaWVuZGx5LFxyXG5cdHNpZ25hdHVyZV9ub3JtYWxpemU6c2lnbmF0dXJlX25vcm1hbGl6ZSxcclxuXHRwcmVwcm9jZXNzX3NlcnZlcjpwcmVwcm9jZXNzX3NlcnZlcixcclxuXHRwcmVwcm9jZXNzX21ldGhvZDpwcmVwcm9jZXNzX21ldGhvZCxcclxuXHRjbG9uZV9vYmplY3Q6Y2xvbmVfb2JqZWN0LFxyXG5cdHByb21pc2lmeTpwcm9taXNpZnlcclxufTtcclxuIiwiLypcclxuVGhlIEFHTSBpbnN0YW5jZSBjb2xsZWN0cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbWFjaGluZSB3ZSBhcmUgaW4sIFxyXG5hbmQgaW50ZXJhY3RzIHdpdGggdGhlIC5ORVQgZ2F0ZXdheSBpbiBvdGhlciB3YXlzLCBcclxudG8gZGVsaXZlciBmdWxsIEFHTSBjb21wYXRpYmlsaXR5IHRvIEFHTS5KUy5cclxuXHJcblRvIGRvIHNvLCBpdCByZWxpZXMgb24gdGhlIGRlZmF1bHQgQUdNIGNsaWVudC5cclxuKi9cclxuXHJcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudCB8fCBnbG9iYWwucHJvY2VzcztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYywgY29ubmVjdGlvbil7XHJcblx0dmFyIGluc3RhbmNlID0ge307XHJcblx0Ly9HZW5lcmF0ZSBkZWZhdWx0IGluc3RhbmNlIHByb3BlcnRpZXNcclxuXHRpbnN0YW5jZS5BcHBsaWNhdGlvbk5hbWUgPSBkb2N1bWVudC50aXRsZStNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAwMDAwMDAwMCk7XHJcblx0aW5zdGFuY2UuUHJvY2Vzc0lkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjEwMDAwMDAwMDApO1xyXG5cdGluc3RhbmNlLlByb2Nlc3NTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgXHJcbiAgICBcclxuXHQvL0FwcGx5IHVzZXItc3VibWl0dGVkIGluc3RhbmNlIHByb3BlcnRpZXMgXHJcblx0aWYodHlwZW9mIGMgPT09IFwib2JqZWN0XCIpe1xyXG4gICAgICAgIGlmKGMuYXBwbGljYXRpb24hPT11bmRlZmluZWQpe2luc3RhbmNlLkFwcGxpY2F0aW9uTmFtZSA9IGMuYXBwbGljYXRpb247fVxyXG5cdFx0aW5zdGFuY2UuTWFjaGluZU5hbWU9Yy5tYWNoaW5lO1xyXG5cdFx0aW5zdGFuY2UuVXNlck5hbWU9Yy51c2VyO1xyXG5cdFx0aW5zdGFuY2UuRW52aXJvbm1lbnQ9Yy5lbnZpcm9ubWVudDtcclxuXHRcdGluc3RhbmNlLlJlZ2lvbj1jLnJlZ2lvbjtcclxuXHRcdGluc3RhbmNlLlNlcnZpY2VOYW1lPWMuc2VydmljZV9uYW1lO1xyXG5cdFx0aW5zdGFuY2UuTWV0cmljc1JlcG9zaXRvcnlJZD1jLm1ldHJpY3NfcmVwb3NpdG9yeV9pZDtcclxuXHRcdGluc3RhbmNlLlN0YXRlPTE7XHJcblx0fVxyXG4gICAgdmFyIGlkZW50aXR5X3VwZGF0ZWQgPSBmYWxzZTtcclxuICAgIGNvbm5lY3Rpb24ub24oXCJJbnN0YW5jZVwiLCBmdW5jdGlvbihpKXtcclxuXHRcdGlmKGlkZW50aXR5X3VwZGF0ZWQpe3JldHVybjt9XHJcbiAgICAgICAgaWYoaW5zdGFuY2UuTWFjaGluZU5hbWU9PT11bmRlZmluZWQpe2luc3RhbmNlLk1hY2hpbmVOYW1lID0gaS5NYWNoaW5lTmFtZTt9XHJcbiAgICAgICAgaWYoaW5zdGFuY2UuVXNlck5hbWU9PT11bmRlZmluZWQpe2luc3RhbmNlLlVzZXJOYW1lID0gaS5Vc2VyTmFtZTt9XHJcbiAgICAgICAgaWYoaW5zdGFuY2UuRW52aXJvbm1lbnQ9PT11bmRlZmluZWQpe2luc3RhbmNlLkVudmlyb25tZW50ID0gaS5FbnZpcm9ubWVudDt9XHJcbiAgICAgICAgaWYoaW5zdGFuY2UuUmVnaW9uPT09dW5kZWZpbmVkKXtpbnN0YW5jZS5SZWdpb24gPSBpLlJlZ2lvbjt9XHJcbiAgICAgICAgaWYoaW5zdGFuY2UuU2VydmljZU5hbWU9PT11bmRlZmluZWQpe2luc3RhbmNlLlNlcnZpY2VOYW1lID0gaS5TZXJ2aWNlTmFtZTt9XHJcbiAgICAgICAgaWYoaW5zdGFuY2UuTWV0cmljc1JlcG9zaXRvcnlJZD09PXVuZGVmaW5lZCl7aW5zdGFuY2UuTWV0cmljc1JlcG9zaXRvcnlJZCA9IGkuTWV0cmljc1JlcG9zaXRvcnlJZDt9XHJcbiAgICAgICAgaWYoaW5zdGFuY2UuU3RhdGU9PT11bmRlZmluZWQpe2luc3RhbmNlLlN0YXRlID0gaS5TdGF0ZTt9XHJcbiAgICAgICAgaWYoZ2xvYmFsLmNvbnNvbGUhPT11bmRlZmluZWQmJiBnbG9iYWwuY29uc29sZS50YWJsZSE9PXVuZGVmaW5lZCAgJiYgYWdtLmRlYnVnPT09dHJ1ZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVjZWl2ZWQgaW5zdGFuY2Ugd2l0aCBpbmZvIGZyb20gR2F0ZXdheS5cIik7XHJcbiAgICAgICAgfVxyXG5cdFx0aWRlbnRpdHlfdXBkYXRlZCA9IHRydWU7XHJcbiAgICB9KTtcclxuXHQvL0NyZWF0ZSBhIG1ldGhvZCBmb3IgYWNjZXNzaW5nIGEgcHJvcGVydHlcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZV9nZXR0ZXIocHJvcGVydHkpe1xyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZVtwcm9wZXJ0eV07XHJcbiAgICB9XHJcblx0Ly9HZW5lcmF0ZXMgYSByZXF1ZXN0IHN1YmplY3QgZm9yIGEgbWV0aG9kXHJcblx0Ly9EZWxlZ2F0ZXMgaXQgdG8gdGhlIC5ORVQgZ2F0ZXdheSBpZiBpdCBpcyBvbmxpbmUsIFxyXG5cdC8vdG8gY3JlYXRlIHN1YmplY3RzIHdoaWNoIGFyZSB2YWxpZCBpbiB0aGUgc2NvcGUgb2YgdGhlIHRyYW5zcG9ydCB0aGF0IGlzIGJlaW5nIHVzZWQuXHJcbiAgICB2YXIgcmVxX3N1YmplY3QgPSAwO1xyXG5cdGZ1bmN0aW9uIHJlcXVlc3Rfc3ViamVjdChtZXRob2RfaWRlbnRpZmllciwgY2FsbGJhY2spe1xyXG4gICAgICAgIGNhbGxiYWNrKFwicmVxXCIrKHJlcV9zdWJqZWN0KyspK2luc3RhbmNlLlByb2Nlc3NJZCk7XHJcblx0fVxyXG4gICAgLy9HZW5lcmF0ZXMgYSByZXNwb25zZSBzdWJqZWN0IHN1YmplY3QgZm9yIGEgbWV0aG9kIGludm9jYXRpb25cclxuXHQvL0RlbGVnYXRlcyBpdCB0byB0aGUgLk5FVCBnYXRld2F5IGlmIGl0IGlzIG9ubGluZSwgXHJcblx0Ly90byBjcmVhdGUgc3ViamVjdHMgd2hpY2ggYXJlIHZhbGlkIGluIHRoZSBzY29wZSBvZiB0aGUgdHJhbnNwb3J0IHRoYXQgaXMgYmVpbmcgdXNlZC5cclxuICAgIHZhciByZXNwX3N1YmplY3QgPSAwO1xyXG5cdGZ1bmN0aW9uIHJlc3BvbnNlX3N1YmplY3QobWV0aG9kX2lkZW50aWZpZXIsIGNhbGxiYWNrKXtcclxuICAgICAgICBjYWxsYmFjayhcInJlc3BcIisocmVzcF9zdWJqZWN0KyspK2luc3RhbmNlLlByb2Nlc3NJZCk7XHRcclxuXHR9XHJcblx0Ly9SZXR1cm5zIGFsbCBpbnN0YW5jZSBwcm9wZXJ0aWVzXHJcbiAgICBmdW5jdGlvbiBpbmZvKCl7XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7cmVxdWVzdF9zdWJqZWN0OnJlcXVlc3Rfc3ViamVjdCwgXHJcbiAgICAgICAgICAgIHJlc3BvbnNlX3N1YmplY3Q6cmVzcG9uc2Vfc3ViamVjdCxcclxuICAgICAgICAgICAgaW5mbzppbmZvLFxyXG4gICAgICAgICAgICBhcHBsaWNhdGlvbjpjcmVhdGVfZ2V0dGVyKFwiQXBwbGljYXRpb25OYW1lXCIpLFxyXG4gICAgICAgICAgICBwaWQ6Y3JlYXRlX2dldHRlcihcIlByb2Nlc3NJZFwiKSxcclxuXHRcdFx0dXNlcjpjcmVhdGVfZ2V0dGVyKFwiVXNlck5hbWVcIiksXHJcblx0XHRcdG1hY2hpbmU6Y3JlYXRlX2dldHRlcihcIk1hY2hpbmVOYW1lXCIpXHJcblxyXG4gICAgICAgICAgfTsgICBcclxuXHJcbn07XHJcbiIsInZhciBQcm9taXNlID0gcmVxdWlyZSgnZXM2LXByb21pc2UnKS5Qcm9taXNlO1xyXG52YXIgaCA9IHJlcXVpcmUoXCIuL2FnbV9oZWxwZXJzXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbikge1xyXG4gICAgZnVuY3Rpb24gcGFyYW1Ub0pzb24ocGFyYW0sIHN0cmluZ1Byb3BOYW1lLCBvYmplY3RQcm9wTmFtZSkge1xyXG4gICAgICAgIHZhciBvYmogPSB7fTtcclxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG9ialtzdHJpbmdQcm9wTmFtZV0gPSBwYXJhbTtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvcE5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcmFtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvYmpbb2JqZWN0UHJvcE5hbWVdID0gcGFyYW07XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIHBhcnNpbmcgZGF0ZXMgcHJvcGVybHlcclxuICAgIGZ1bmN0aW9uIGFnbVBhcnNlKHN0cikge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0ciwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHByZS1zZWVkIC0gdGhpcyBzaG91bGQgYmUgYSBiaXQgZmFzdGVyIHRoYW4gaW5kZXhPZlxyXG4gICAgICAgICAgICBpZiAodlswXSAhPT0gZGF0ZVRpbWVJZGVudGlmaWVyWzBdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHYuaW5kZXhPZihkYXRlVGltZUlkZW50aWZpZXIpICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHVuaXhUaW1lc3RhbXBNcyA9IHYuc3Vic3RyKGxlbk9mSWRlbnRpdGlmaWVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHBhcnNlRmxvYXQodW5peFRpbWVzdGFtcE1zKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyBhIHRhcmdldCBhcmd1bWVudCB0byBvYmplY3QgcmVhZHkgdG8gYmUgcGFzc2VkIHRvIEFnbSBmYWNhZGVcclxuICAgICAqIEBwYXJhbSB0YXJnZXRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdGFyZ2V0QXJnVG9PYmplY3QodGFyZ2V0KXtcclxuXHJcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0IHx8ICdiZXN0JztcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCAhPT0gXCJhbGxcIiAmJiB0YXJnZXQgIT09IFwiYmVzdFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHRhcmdldCArICdcIiBpcyBub3QgYSB2YWxpZCB0YXJnZXQuIFZhbGlkIHRhcmdldHMgYXJlIFwiYWxsXCIgYW5kIFwiYmVzdFwiLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB7dGFyZ2V0IDogdGFyZ2V0fTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdBcnJheScpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IFt0YXJnZXRdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQubWFwKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udmVydEluc3RhbmNlVG9SZWdleChlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge3NlcnZlckZpbHRlcjogdGFyZ2V0fTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29udmVydEluc3RhbmNlVG9SZWdleChpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZV9jb252ZXJ0ZWQgPSB7fTtcclxuXHJcbiAgICAgICAgT2JqZWN0LmtleXMoaW5zdGFuY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gaW5zdGFuY2Vba2V5XTtcclxuICAgICAgICAgICAgaW5zdGFuY2VfY29udmVydGVkW2tleV0gPSBwcm9wVmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIGRvIGV4YWN0IG1hdGNoaW5nIGlmIHVzZXIgcGFzc2VkIGEgc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZV9jb252ZXJ0ZWRba2V5XSA9IFwiXlwiICsgaW5zdGFuY2Vba2V5XSArIFwiJFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluc3RhbmNlW2tleV0uY29uc3RydWN0b3IgPT09IFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VfY29udmVydGVkW2tleV0gPSBpbnN0YW5jZVtrZXldLnNvdXJjZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlX2NvbnZlcnRlZFtrZXldID0gaW5zdGFuY2Vba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZV9jb252ZXJ0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHJlc3VsdCA9IHtcclxuXHJcbiAgICAgICAgLy8gUmVnaXN0ZXJzIGEgSmF2YVNjcmlwdCBmdW5jdGlvbiBhcyBhbiBBR00gbWV0aG9kLCB0aHVzIG1ha2luZyBpdCBhdmFpbGFibGUgb3RoZXIgQUdNIGluc3RhbmNlcyBvbiB0aGUgc2FtZSB0cmFuc3BvcnQuXHJcbiAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIChtZXRob2RJbmZvLCBjYWxsYmFjaykge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUucmVnaXN0ZXIocGFyYW1Ub0pzb24obWV0aG9kSW5mbywgXCJuYW1lXCIpLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGFyZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjayhKU09OLnBhcnNlKGFyZykpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdW5yZWdpc3RlcjogZnVuY3Rpb24gKG1ldGhvZEZpbHRlcikge1xyXG4gICAgICAgICAgICB0aGlzLmFnbUZhY2FkZS51bnJlZ2lzdGVyKHBhcmFtVG9Kc29uKG1ldGhvZEZpbHRlciwgXCJuYW1lXCIpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBJbnZva2VzIGFuIEFHTSBtZXRob2QgYXN5bmNocm9ub3VzbHkuXHJcbiAgICAgICAgaW52b2tlOiBmdW5jdGlvbiAobWV0aG9kRmlsdGVyLCBhcmdzLCB0YXJnZXQsIG9wdGlvbnMsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3VjY2Vzc1Byb3h5LCBlcnJvclByb3h5O1xyXG5cclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3NQcm94eSA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnNlZCA9IEpTT04ucGFyc2UoYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwYXJzZWQpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGVycm9yUHJveHkgPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBKU09OLnBhcnNlKGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChwYXJzZWQpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYXJncyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJncyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3Qoe21lc3NhZ2U6ICdUaGUgbWV0aG9kIGFyZ3VtZW50cyBtdXN0IGJlIGFuIG9iamVjdC4nfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXRBcmdUb09iamVjdCh0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLmludm9rZShcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbVRvSnNvbihtZXRob2RGaWx0ZXIsIFwibmFtZVwiKSxcclxuICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShhcmdzKSxcclxuICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh0YXJnZXQpLFxyXG4gICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NQcm94eSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvclByb3h5XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGgucHJvbWlzaWZ5KHByb21pc2UsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gUmVnaXN0ZXJzIGEgaGFuZGxlciB3aGljaCBub3RpZmllcyB5b3Ugd2hlbiBhIG5ldyBBR00gbWV0aG9kIGlzIGF2YWlsYWJsZS5cclxuICAgICAgICBtZXRob2RBZGRlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLm1ldGhvZEFkZGVkKGNhbGxiYWNrKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBSZWdpc3RlcnMgYSBoYW5kbGVyIHdoaWNoIG5vdGlmaWVzIHlvdSB3aGVuIGFuIEFHTSBtZXRob2Qgc3RvcHMgYmVpbmcgYXZhaWxhYmxlLlxyXG4gICAgICAgIG1ldGhvZFJlbW92ZWQ6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLmFnbUZhY2FkZS5tZXRob2RSZW1vdmVkKGNhbGxiYWNrKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXJ2ZXJBZGRlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLnNlcnZlckFkZGVkKGNhbGxiYWNrKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXJ2ZXJSZW1vdmVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5hZ21GYWNhZGUuc2VydmVyUmVtb3ZlZChjYWxsYmFjayk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2VydmVyTWV0aG9kQWRkZWQ6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLmFnbUZhY2FkZS5zZXJ2ZXJNZXRob2RBZGRlZChjYWxsYmFjayk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2VydmVyTWV0aG9kUmVtb3ZlZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLnNlcnZlck1ldGhvZFJlbW92ZWQoY2FsbGJhY2spO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFJldHJpZXZlcyBhIGxpc3Qgb2YgQUdNIHNlcnZlcnMgKGluc3RhbmNlcykgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBtZXRob2QuXHJcbiAgICAgICAgc2VydmVyczogZnVuY3Rpb24gKG1ldGhvZEZpbHRlcikge1xyXG4gICAgICAgICAgICB2YXIganNvblJlc3VsdCA9IHRoaXMuYWdtRmFjYWRlLnNlcnZlcnMoSlNPTi5zdHJpbmdpZnkobWV0aG9kRmlsdGVyKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhZ21QYXJzZShqc29uUmVzdWx0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBSZXRyaWV2ZXMgYSBsaXN0IG9mIG1ldGhvZHMgdGhhdCBtYXRjaGVzIGEgZ2l2ZW4gZmlsdGVyLiBZb3UgY2FuIHVzZSB0aGlzIHRvIGNoZWNrIGlmIGEgZ2l2ZW4gbWV0aG9kIGV4aXN0cy5cclxuICAgICAgICBtZXRob2RzOiBmdW5jdGlvbiAobWV0aG9kRmlsdGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBqc29uUmVzdWx0ID0gdGhpcy5hZ21GYWNhZGUubWV0aG9kcyhKU09OLnN0cmluZ2lmeShtZXRob2RGaWx0ZXIpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFnbVBhcnNlKGpzb25SZXN1bHQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG1ldGhvZHNGb3JJbnN0YW5jZTogZnVuY3Rpb24gKGluc3RhbmNlRmlsdGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBqc29uUmVzdWx0ID0gdGhpcy5hZ21GYWNhZGUubWV0aG9kc0Zvckluc3RhbmNlKEpTT04uc3RyaW5naWZ5KGluc3RhbmNlRmlsdGVyKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhZ21QYXJzZShqc29uUmVzdWx0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBzdHJlYW1pbmcgc3VwcG9ydFxyXG4gICAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmFyZ3MgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmFyZ3VtZW50cyB8fCB7fSk7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLnRhcmdldCA9IHRhcmdldEFyZ1RvT2JqZWN0KG9wdGlvbnMudGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFnbUZhY2FkZS5zdWJzY3JpYmUyKG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyksXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oc3RyZWFtKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3Ipe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaC5wcm9taXNpZnkocHJvbWlzZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjcmVhdGVTdHJlYW06IGZ1bmN0aW9uKHN0cmVhbURlZiwgY2FsbGJhY2tzLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spe1xyXG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyZWFtRGVmID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtRGVmID0ge25hbWU6IHN0cmVhbURlZn07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFjYWxsYmFja3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYWdtRmFjYWRlLmNyZWF0ZVN0cmVhbTIoXHJcbiAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoc3RyZWFtRGVmKSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gd3JhcCB0byB0cmFuc2Zvcm0gcGFyYW1zXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnN1YnNjcmlwdGlvblJlcXVlc3RIYW5kbGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gLSB3cmFwIHRvIHRyYW5zZm9ybSBwYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3Vic2NyaXB0aW9uQWRkZWRIYW5kbGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gLSB3cmFwIHRvIHRyYW5zZm9ybSBwYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3Vic2NyaXB0aW9uUmVtb3ZlZEhhbmRsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3VjY2VzcyBoYW5kbGVyXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN0cmVhbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBlcnJvciBoYW5kbGVyXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBoLnByb21pc2lmeShwcm9taXNlLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmVzdWx0LnZlcnNpb24gPSBcIjIuMS4zXCI7XHJcblxyXG4gICAgLy8gYWRkIG1ldHJpY3NcclxuICAgIGlmIChjb25maWd1cmF0aW9uICE9PSB1bmRlZmluZWQgJiYgY29uZmlndXJhdGlvbi5tZXRyaWNzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb25maWd1cmF0aW9uLm1ldHJpY3MubWV0cmljc0lkZW50aXR5ID0gY29uZmlndXJhdGlvbi5tZXRyaWNzLmlkZW50aXR5O1xyXG5cclxuXHJcbiAgICAgICAgLy8gcXVpY2sgYW5kIGRpcnR5IC0gd2UgbmVlZCB0byBzdHJpbmdpZnkgdGhlIGNvbmZpZ3VyYXRpb24gc28gd2UgbmVlZCB0byByZXBsYWNlIHRoZSBtZXRyaWNzIG9iamVjdCAod2hpY2ggaGFzIGNpcmN1bGFyIHJlZmVyZW5jZXMpXHJcbiAgICAgICAgLy8gd2l0aCBhbiBvYmplY3QgdGhhdCBob2xkcyBvbmx5IHRoZSBwcm9wZXJ0aWVzIG5lZWRlZFxyXG4gICAgICAgIHZhciBtZXRyaWNzQ29uZmlnID0ge1xyXG4gICAgICAgICAgICBtZXRyaWNzSWRlbnRpdHk6IGNvbmZpZ3VyYXRpb24ubWV0cmljcy5tZXRyaWNzSWRlbnRpdHksXHJcbiAgICAgICAgICAgIHBhdGg6IGNvbmZpZ3VyYXRpb24ubWV0cmljcy5wYXRoXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25maWd1cmF0aW9uLm1ldHJpY3MgPSBtZXRyaWNzQ29uZmlnO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvL2NyZWF0ZSBuZXcgQUdNIGZhw6dhZGUgZm9yIHRoaXMgaW5zdGFuY2VcclxuICAgIHZhciBmYWNhZGUgPSBnbG9iYWwuaHRtbENvbnRhaW5lci5qc0FnbUZhY2FkZTtcclxuICAgIHJlc3VsdC5pbnN0YW5jZSA9IGZhY2FkZS5pbml0KEpTT04uc3RyaW5naWZ5KGNvbmZpZ3VyYXRpb24pKTtcclxuICAgIHJlc3VsdC5hZ21GYWNhZGUgPSBmYWNhZGU7XHJcblxyXG4gICAgLy8gZGF0ZSBwYXJzaW5nXHJcbiAgICB2YXIgZGF0ZVRpbWVJZGVudGlmaWVyID0gcmVzdWx0LmFnbUZhY2FkZS5qc29uVmFsdWVEYXRlUHJlZml4O1xyXG4gICAgdmFyIGxlbk9mSWRlbnRpdGlmaWVyID0gZGF0ZVRpbWVJZGVudGlmaWVyLmxlbmd0aDtcclxuXHJcbiAgICAvLyBkZXByZWNhdGVkIEFQSVxyXG4gICAgcmVzdWx0LmNyZWF0ZV9zdHJlYW0gPSByZXN1bHQuY3JlYXRlU3RyZWFtO1xyXG4gICAgcmVzdWx0Lm1ldGhvZHNfZm9yX2luc3RhbmNlID0gcmVzdWx0Lm1ldGhvZHNGb3JJbnN0YW5jZTtcclxuICAgIHJlc3VsdC5tZXRob2RfYWRkZWQgPSByZXN1bHQubWV0aG9kQWRkZWQ7XHJcbiAgICByZXN1bHQubWV0aG9kX3JlbW92ZWQgPSByZXN1bHQubWV0aG9kUmVtb3ZlZDtcclxuICAgIHJlc3VsdC5zZXJ2ZXJfYWRkZWQgPSByZXN1bHQuc2VydmVyQWRkZWQ7XHJcbiAgICByZXN1bHQuc2VydmVyX3JlbW92ZWQgPSByZXN1bHQuc2VydmVyUmVtb3ZlZDtcclxuICAgIHJlc3VsdC5zZXJ2ZXJfbWV0aG9kX2FkZGVkID0gcmVzdWx0LnNlcnZlck1ldGhvZEFkZGVkO1xyXG4gICAgcmVzdWx0LnNlcnZlcl9tZXRob2RfcmVtb3ZlZCA9IHJlc3VsdC5zZXJ2ZXJNZXRob2RSZW1vdmVkO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbiIsIi8qXHJcblRoZSBBR00gU2VydmVyIGFsbG93cyB1c2VycyByZWdpc3RlciBBR00gbWV0aG9kcy5cclxuSXQgZXhwb3NlcyB0aGVzZSBtZXRob2RzIHRvIEFHTSBjbGllbnRzICh1c2luZyBwcmVzZW5jZSBtZXNzYWdlcykgYW5kIGxpc3RlbnMgZm9yIHRoZWlyIGludm9jYXRpb25cclxuKi9cclxuXHJcbnZhciBoZWxwZXJzID0gcmVxdWlyZShcIi4vYWdtX2hlbHBlcnNcIik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNvbm5lY3Rpb24sIGluc3RhbmNlLCBjb25maWd1cmF0aW9uKXtcclxuXHJcbiAgICAvL1ZhbGlkYXRlIGNvbmZpZ3VyYXRpb25cclxuICAgIGlmKHR5cGVvZiBjb25maWd1cmF0aW9uIT09XCJvYmplY3RcIil7XHJcblx0XHRjb25maWd1cmF0aW9uID0ge307XHJcblxyXG5cdCAgICBpZihnbG9iYWwuY29uc29sZSE9PXVuZGVmaW5lZCAmJiBjb25maWd1cmF0aW9uLmRlYnVnPT09dHJ1ZSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDcmVhdGluZyBhbiBBR00gc2VydmVyIHdpdGggZGVmYXVsdCBjb25maWd1cmF0aW9uLicpO1xyXG4gICAgICAgIH1cclxuXHR9XHJcbiAgICAvL0FkZCBkZWZhdWx0c1xyXG4gICAgaWYodHlwZW9mIGNvbmZpZ3VyYXRpb24uaGVhcmJlYXRfaW50ZXJ2YWwhPT1cIm51bWJlclwiKXtcclxuICAgICAgICBjb25maWd1cmF0aW9uLmhlYXJiZWF0X2ludGVydmFsID0gNTAwMDtcclxuICAgIH1cclxuXHJcbiAgICBpZih0eXBlb2YgY29uZmlndXJhdGlvbi5wcmVzZW5jZV9pbnRlcnZhbCE9PVwibnVtYmVyXCIpe1xyXG4gICAgICAgIGNvbmZpZ3VyYXRpb24ucHJlc2VuY2VfaW50ZXJ2YWwgPSAxMDAwMDtcclxuICAgIH1cclxuXHJcbiAgICAvL1NhdmUgdGhlIHJlZmVyZW5jZSB0byB0aGUgbWV0cmljIGZ1bmN0aW9uIGlmIGl0IGV4aXN0c1xyXG4gICAgdmFyIG1ldHJpYyA9IChjb25maWd1cmF0aW9uLm1ldHJpY3MhPT11bmRlZmluZWQpP2NvbmZpZ3VyYXRpb24ubWV0cmljcy5udW1iZXJNZXRyaWMuYmluZChjb25maWd1cmF0aW9uLm1ldHJpY3MpOmZ1bmN0aW9uKCl7fTtcclxuICAgIC8vQW4gYXJyYXkgb2YgdGhlIHNlcnZlcidzIG1ldGhvZHNcclxuICAgIHZhciBtZXRob2RzID0gW107XHJcblxyXG4gICAgdmFyIHByZXNlbmNlX3RpbWVyO1xyXG5cclxuICAgIHZhciBoZWFydGJlYXRfdGltZXI7XHJcblxyXG4gICAgaWYoaGVhcnRiZWF0X3RpbWVyPT09dW5kZWZpbmVkKXtcclxuICAgICAgICBoZWFydGJlYXRfdGltZXIgPSBzZXRJbnRlcnZhbChzZW5kX2hlYXJ0YmVhdCwgY29uZmlndXJhdGlvbi5oZWFyYmVhdF9pbnRlcnZhbCk7XHJcbiAgICB9XHJcblxyXG5cdC8vUmVnaXN0ZXJzIGEgbmV3IG1ldGhvZCBpbiBBR01cclxuXHRmdW5jdGlvbiByZWdpc3RlcihtZXRob2RfZGVmaW5pdGlvbiwgdGhlX2Z1bmN0aW9uKXtcclxuXHRcdGlmKHR5cGVvZiBtZXRob2RfZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIil7bWV0aG9kX2RlZmluaXRpb24gPSB7bmFtZTptZXRob2RfZGVmaW5pdGlvbn07fVxyXG5cdFx0Ly9HZXQgYSByZXF1ZXN0IHN1YmplY3QgZm9yIHRoaXMgbWV0aG9kXHJcblx0XHRpbnN0YW5jZS5yZXF1ZXN0X3N1YmplY3QobWV0aG9kX2RlZmluaXRpb24sIGZ1bmN0aW9uKHJlcXVlc3Rfc3ViamVjdCl7XHJcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBjb252ZXJ0X21ldGhvZChtZXRob2RfZGVmaW5pdGlvbik7XHJcbiAgICAgICAgICAgIG1ldGhvZC5NZXRob2RSZXF1ZXN0U3ViamVjdCA9IHJlcXVlc3Rfc3ViamVjdDtcclxuICAgICAgICAgICAgLy9BZGQgdGhlIG1ldGhvZCAoc3RvcmUgdGhlIHVuZm9ybWF0dGVkIGRlZmluaXRpb24gaW4gb3JkZXIgdG8gZG8gY2hlY2t1cHMgaW4gdGhlIHVucmVnaXN0ZXIgbWV0aG9kKVxyXG4gICAgICAgICAgICBtZXRob2RzLnB1c2goe21ldGhvZDptZXRob2QsIGRlZmluaXRpb246bWV0aG9kX2RlZmluaXRpb24sIHRoZV9mdW5jdGlvbjp0aGVfZnVuY3Rpb259KTtcclxuICAgICAgICAgICAgLy9TZW5kIHByZXNlbmNlIHNvIHRoZSBjbGllbnRzIGtub3cgd2UgaGF2ZSBpdFxyXG4gICAgICAgICAgICBzZW5kX3ByZXNlbmNlKCk7XHJcbiAgICAgICAgICAgIC8vU3RhcnQgc2VuZGluZyBwcmVzZW5jZSByZWd1bGFyaWx5IChpZiB3ZSBhcmVuJ3QgYWxyZWFkeSBkb2luZyBpdClcclxuICAgICAgICAgICAgaWYocHJlc2VuY2VfdGltZXI9PT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgcHJlc2VuY2VfdGltZXIgPSBzZXRJbnRlcnZhbChzZW5kX3ByZXNlbmNlLCBjb25maWd1cmF0aW9uLnByZXNlbmNlX2ludGVydmFsKTtcclxuICAgICAgICAgICAgfVxyXG5cdFx0XHRcdFx0XHRtZXRyaWMoXCJSZWdpc3RlcmVkIG1ldGhvZHNcIiwgbWV0aG9kcy5sZW5ndGgpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcblx0fVxyXG5cdHZhciBpbnZvY2F0aW9ucyA9IDA7XHJcblxyXG5cdC8vTGlzdGVucyBmb3IgbWV0aG9kIGludm9jYXRpb25zXHJcblx0Y29ubmVjdGlvbi5vbihcIk1ldGhvZEludm9jYXRpb25SZXF1ZXN0TWVzc2FnZVwiLGZ1bmN0aW9uKG1lc3NhZ2Upe1xyXG4gICAgICAgIC8vRmluZCB0aGUgbWV0aG9kXHJcbiAgICAgICAgdmFyIG1ldGhvZDtcclxuXHRcdG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtKXtcclxuICAgICAgICAgICAgaWYobS5tZXRob2QuTWV0aG9kUmVxdWVzdFN1YmplY3QgPT09bWVzc2FnZS5NZXRob2RSZXF1ZXN0U3ViamVjdCl7XHJcbiAgICAgICAgICAgICAgICBtZXRob2QgPSBtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblx0aWYobWV0aG9kPT09dW5kZWZpbmVkKXtyZXR1cm47fVxyXG4gICAgICAgIGlmKGdsb2JhbC5jb25zb2xlIT09dW5kZWZpbmVkJiYgY29uZmlndXJhdGlvbi5kZWJ1Zz09PXRydWUpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiJWM8PDwgcmVjZWl2aW5nIE1ldGhvZEludm9jYXRpb25SZXF1ZXN0TWVzc2FnZVwiLCBcImJhY2tncm91bmQtY29sb3I6aHNsYSgxOTgsIDUxJSwgNzklLCAwLjUpXCIpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiJWNcIitKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgXCJiYWNrZ3JvdW5kLWNvbG9yOmhzbGEoMTk4LCA1MSUsIDc5JSwgMC41KVwiKTtcclxuICAgICAgICB9XHJcblx0XHRcdFx0bWV0cmljKFwiSW52b2NhdGlvbnMgY291bnRcIiwgaW52b2NhdGlvbnMrKyk7XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgdmFyIGVycm9yO1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICBcdC8vRXhlY3V0ZSBpdCBhbmQgc2F2ZSB0aGUgcmVzdWx0XHJcbiAgICAgICAgXHRyZXN1bHQgPSBtZXRob2QudGhlX2Z1bmN0aW9uKG1lc3NhZ2UuQ29udGV4dC5Bcmd1bWVudHNKc29uKTtcclxuXHRcdH1jYXRjaChlKXtcclxuXHRcdFx0aWYodHlwZW9mIGUgPT09XCJzdHJpbmdcIil7XHJcblx0XHRcdFx0ZXJyb3IgPSBlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYodHlwZW9mIGUubWVzc2FnZSA9PSAnc3RyaW5nJyl7XHJcblx0XHRcdFx0ZXJyb3IgPSBlLm1lc3NhZ2U7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdGVycm9yID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ly9UaGUgQUdNIGxpYnJhcnkgb25seSB0cmFuc2ZlcnMgb2JqZWN0cy4gSWYgdGhlIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0LCBwdXQgaXQgaW4gb25lXHJcbiAgICAgICAgaWYodHlwZW9mIHJlc3VsdCE9PVwib2JqZWN0XCJ8fHJlc3VsdC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpe1xyXG4gICAgICAgICAgICByZXN1bHQgPSB7X3Jlc3VsdDpyZXN1bHR9O1xyXG4gICAgICAgIH1cclxuXHRcdC8vRG9uJ3Qgc2VuZCByZXN1bHQgaWYgdGhlIGNsaWVudCBkb2VzIG5vdCByZXF1aXJlIGl0XHJcblx0XHRpZihtZXNzYWdlLk1ldGhvZFJlc3BvbnNlU3ViamVjdD09PVwibnVsbFwiKXtyZXR1cm47fVxyXG5cclxuXHRcdHZhciByZXN1bHRfbWVzc2FnZSA9IHtcclxuXHRcdFx0TWV0aG9kUmVxdWVzdFN1YmplY3Q6bWVzc2FnZS5NZXRob2RSZXF1ZXN0U3ViamVjdCxcclxuXHRcdFx0TWV0aG9kUmVzcG9uc2VTdWJqZWN0Om1lc3NhZ2UuTWV0aG9kUmVzcG9uc2VTdWJqZWN0LFxyXG5cdFx0XHRNZXRob2ROYW1lOm1ldGhvZC5tZXRob2QuTWV0aG9kLk5hbWUsXHJcbiAgICAgICAgICAgIEludm9jYXRpb25JZDptZXNzYWdlLkNvbnRleHQuSW52b2NhdGlvbklkLFxyXG4gICAgICAgICAgICBSZXN1bHRDb250ZXh0SnNvbjpyZXN1bHQsXHJcblx0XHRcdFNlcnZlcjppbnN0YW5jZS5pbmZvKCksXHJcblx0XHRcdFJlc3VsdE1lc3NhZ2U6ZXJyb3IsXHJcblx0XHRcdFN0YXR1czooZXJyb3IgPT09IHVuZGVmaW5lZCk/MDoxXHJcblx0XHR9O1xyXG5cdFx0Ly9TZW5kIHJlc3VsdFxyXG4gICAgICAgIGNvbm5lY3Rpb24uc2VuZChcIk1ldGhvZEludm9jYXRpb25SZXN1bHRNZXNzYWdlXCIsIHJlc3VsdF9tZXNzYWdlKTtcclxuXHJcblx0XHRpZihnbG9iYWwuY29uc29sZSE9PXVuZGVmaW5lZCYmIGNvbmZpZ3VyYXRpb24uZGVidWc9PT10cnVlKXtcclxuXHRcdFx0Y29uc29sZS5kZWJ1ZyhcIiVjPj4+IHNlbmRpbmcgTWV0aG9kSW52b2NhdGlvblJlc3VsdE1lc3NhZ2VcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yOmhzbGEoMTE4LCA1MSUsIDc5JSwgMC41KVwiKTtcclxuXHRcdFx0Y29uc29sZS5kZWJ1ZyhcIiVjXCIrSlNPTi5zdHJpbmdpZnkocmVzdWx0X21lc3NhZ2UpLCBcImJhY2tncm91bmQtY29sb3I6aHNsYSgxMTgsIDUxJSwgNzklLCAwLjUpXCIpO1xyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHJcblxyXG5cclxuXHQvL0NvbnN0cnVjdHMgYSBoZWFydGJlYXQgbWVzc2FnZVxyXG5cdGZ1bmN0aW9uIGNvbnN0cnVjdF9oZWFydGJlYXQoKXtcclxuXHRcdHJldHVybntcclxuXHRcdFx0UHVibGlzaGluZ0ludGVydmFsOmNvbmZpZ3VyYXRpb24uaGVhcmJlYXRfaW50ZXJ2YWwsXHJcblx0XHRcdEluc3RhbmNlOmluc3RhbmNlLmluZm8oKVxyXG5cdFx0fTtcclxuXHR9XHJcblx0Ly9Db25zdHJ1Y3RzIGEgcHJlc2VuY2UgbWVzc2FnZVxyXG5cdGZ1bmN0aW9uIGNvbnN0cnVjdF9wcmVzZW5jZSgpe1xyXG5cdFx0dmFyIHAgPSB7XHJcbiAgICAgICAgICAgIFB1Ymxpc2hpbmdJbnRlcnZhbDpjb25maWd1cmF0aW9uLnByZXNlbmNlX2ludGVydmFsLFxyXG4gICAgICAgICAgICBJbnN0YW5jZTppbnN0YW5jZS5pbmZvKClcclxuICAgICAgICB9O1xyXG5cdFx0cC5NZXRob2REZWZpbml0aW9ucyA9IG1ldGhvZHMubWFwKGZ1bmN0aW9uKG1ldGhvZCl7XHJcblx0XHRcdHJldHVybiBtZXRob2QubWV0aG9kO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcDtcclxuXHR9XHJcblxyXG4gICAgLy9UcnVlIGlmIHdlIHNob3VsZCBiZSBicm9hZGNhc3RpbmcgcHJlc2VuY2VzIGFuZCBoZWFydGJlYXRzLCBmYWxzZSBvdGhlcndpc2VcclxuICAgIHZhciBicm9hZGNhc3RpbmcgPSB0cnVlO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXJ0KCl7XHJcbiAgICAgICAgYnJvYWRjYXN0aW5nID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdG9wKCl7XHJcbiAgICAgICAgYnJvYWRjYXN0aW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy9TZW5kcyBhIHByZXNlbmNlXHJcbiAgICBmdW5jdGlvbiBzZW5kX3ByZXNlbmNlKCl7XHJcbiAgICAgICAgaWYoYnJvYWRjYXN0aW5nKSB7Y29ubmVjdGlvbi5zZW5kKFwiU2VydmVyUHJlc2VuY2VNZXNzYWdlXCIsIGNvbnN0cnVjdF9wcmVzZW5jZSgpKTt9XHJcbiAgICB9XHJcblxyXG4gICAgLy9TZW5kcyBhIGhlYXJ0YmVhdFxyXG4gICAgZnVuY3Rpb24gc2VuZF9oZWFydGJlYXQoKXtcclxuICAgICAgICBpZihicm9hZGNhc3Rpbmcpe2Nvbm5lY3Rpb24uc2VuZChcIlNlcnZlckhlYXJ0YmVhdE1lc3NhZ2VcIiwgY29uc3RydWN0X2hlYXJ0YmVhdCgpKTt9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cdC8vQ29udmVydHMgdGhlIG1ldGhvZCBkZWZpbml0aW9uIGZyb20gY2FtZWwgY2FzZSB0byBzbmFrZSBjYXNlXHJcbiAgICBmdW5jdGlvbiBjb252ZXJ0X21ldGhvZChtZXRob2RfaWRlbnRpZmllcil7XHJcbiAgICAgICAgLy9JZiB3ZSBhcmUgZ2l2ZW4gYSBzdHJpbmcgaW5zdGVhZCBvZiBhbiBvYmplY3QsIHdlIHByZXN1bWUgdGhhdCBpcyB0aGUgbWV0aG9kJ3MgbmFtZTpcclxuICAgICAgICBpZih0eXBlb2YgbWV0aG9kX2lkZW50aWZpZXIgPT09IFwic3RyaW5nXCIpe21ldGhvZF9pZGVudGlmaWVyID0ge25hbWU6bWV0aG9kX2lkZW50aWZpZXJ9O31cclxuXHJcbiAgICAgICAgLy9TZXQgZGVmYXVsdCB2YWx1ZXNcclxuICAgICAgICBpZih0eXBlb2YgbWV0aG9kX2lkZW50aWZpZXIudmVyc2lvbiE9PVwibnVtYmVyXCIpe21ldGhvZF9pZGVudGlmaWVyLnZlcnNpb249MDt9XHJcblxyXG5cclxuICAgICAgICAvL0NvbnZlcnQgdGhlIG1ldGhvZCBkZWZpbml0aW9uIHRvIHRoZSBmb3JtYXQgdGhhdCBBR00gcmVxdWlyZXNcclxuICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIE1ldGhvZDoge1xyXG4gICAgICAgICAgICAgIE5hbWU6IG1ldGhvZF9pZGVudGlmaWVyLm5hbWUsXHJcbiAgICAgICAgICAgICAgSW5wdXRTaWduYXR1cmU6IG1ldGhvZF9pZGVudGlmaWVyLmFjY2VwdHMsXHJcbiAgICAgICAgICAgICAgUmVzdWx0U2lnbmF0dXJlOiBtZXRob2RfaWRlbnRpZmllci5yZXR1cm5zLFxyXG4gICAgICAgICAgICAgIERlc2NyaXB0aW9uOiBtZXRob2RfaWRlbnRpZmllci5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICBEaXNwbGF5TmFtZTogbWV0aG9kX2lkZW50aWZpZXIuZGlzcGxheV9uYW1lLFxyXG4gICAgICAgICAgICAgIFZlcnNpb246IG1ldGhvZF9pZGVudGlmaWVyLnZlcnNpb24sXHJcbiAgICAgICAgICAgICAgT2JqZWN0VHlwZVJlc3RyaWN0aW9uczogbWV0aG9kX2lkZW50aWZpZXIub2JqZWN0X3R5cGVzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zX3Byb3BzKGZpbHRlciwgb2JqZWN0KXtcclxuICAgICAgICB2YXIgbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGZpbHRlcikuZm9yRWFjaChmdW5jdGlvbihwcm9wKXtcclxuICAgICAgICAgICAgaWYoZmlsdGVyW3Byb3BdIT09b2JqZWN0W3Byb3BdKXttYXRjaCA9IGZhbHNlO31cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbWF0Y2g7XHJcblx0fVxyXG5cclxuICAgIC8vVW5yZWdpc3RlcnMgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgQUdNIG1ldGhvZFxyXG4gICAgZnVuY3Rpb24gdW5yZWdpc3RlcihtZXRob2RfZmlsdGVyKXtcclxuICAgIFx0aWYodHlwZW9mIG1ldGhvZF9maWx0ZXIgPT09IFwic3RyaW5nXCIpe21ldGhvZF9maWx0ZXIgPSB7bmFtZTptZXRob2RfZmlsdGVyfTt9XHJcbiAgICAgICAgbWV0aG9kcyA9IG1ldGhvZHMuZmlsdGVyKGZ1bmN0aW9uKG1ldGhvZCl7XHJcbiAgICAgICAgICAgICByZXR1cm4gIWNvbnRhaW5zX3Byb3BzKG1ldGhvZF9maWx0ZXIsIG1ldGhvZC5kZWZpbml0aW9uKTtcclxuICAgICAgICB9KTtcclxuXHRcdFx0XHRtZXRyaWMoXCJSZWdpc3RlcmVkIG1ldGhvZHNcIiwgbWV0aG9kcy5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuXHJcblx0cmV0dXJuIHtyZWdpc3RlcjpyZWdpc3RlciwgdW5yZWdpc3Rlcjp1bnJlZ2lzdGVyLCBzdGFydDpzdGFydCwgc3RvcDpzdG9wfTtcclxufTtcclxuIiwidmFyIGFwcGxpY2F0aW9uID0gcmVxdWlyZShcIi4vYXBwbGljYXRpb25cIik7XHJcbnZhciBpbnN0YW5jZSA9IHJlcXVpcmUoXCIuL2luc3RhbmNlXCIpO1xyXG52YXIgaGVscGVycyA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5hcHBfbWFuYWdlciA9IGZ1bmN0aW9uIGFwcF9tYW5hZ2VyKGFnbSwgd2luZG93cykge1xyXG5cdHZhciBhcHBzID0gYXBwbGljYXRpb24oYWdtLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gaW5zdGFuY2VzO1xyXG5cdH0pO1xyXG5cdHZhciBpbnN0YW5jZXMgPSBpbnN0YW5jZShhZ20sIGFwcHMpO1xyXG5cdHZhciBtYW5hZ2VyID0ge1xyXG5cdFx0YXBwbGljYXRpb25zOiBhcHBzLmFsbCxcclxuXHRcdGFwcGxpY2F0aW9uOiBhcHBzLmdldF9ieV9pZCxcclxuXHRcdG9uX2FwcF9hZGRlZDogaGVscGVycy5hZGRfY2FsbGJhY2soXCJhZGRlZFwiKS5iaW5kKGFwcHMpLFxyXG5cdFx0b25fYXBwX2F2YWlsYWJsZTogaGVscGVycy5hZGRfY2FsbGJhY2soXCJhdmFpbGFibGVcIikuYmluZChhcHBzKSxcclxuXHRcdG9uX2FwcF9yZW1vdmVkOiBoZWxwZXJzLmFkZF9jYWxsYmFjayhcInJlbW92ZWRcIikuYmluZChhcHBzKSxcclxuXHRcdG9uX2FwcF91bmF2YWlsYWJsZTogaGVscGVycy5hZGRfY2FsbGJhY2soXCJ1bmF2YWlsYWJsZVwiKS5iaW5kKGFwcHMpLFxyXG5cclxuXHRcdGluc3RhbmNlczogaW5zdGFuY2VzLmFsbCxcclxuXHRcdG9uX2luc3RhbmNlX3N0YXJ0ZWQ6IGhlbHBlcnMuYWRkX2NhbGxiYWNrKFwic3RhcnRlZFwiKS5iaW5kKGluc3RhbmNlcyksXHJcblx0XHRvbl9pbnN0YW5jZV9zdG9wcGVkOiBoZWxwZXJzLmFkZF9jYWxsYmFjayhcInN0b3BwZWRcIikuYmluZChpbnN0YW5jZXMpLFxyXG5cclxuXHRcdGdldF9icmFuY2hlczogZnVuY3Rpb24gKHN1Y2Nlc3MsIGVycm9yKSB7XHJcblx0XHRcdGFnbS5pbnZva2UoXCJUNDIuQUNTLkdldEJyYW5jaGVzXCIsIHt9LCBcImJlc3RcIiwge30sIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0aWYgKHN1Y2Nlc3MpIHtcclxuXHRcdFx0XHRcdHN1Y2Nlc3MoaGVscGVycy52YWxzKGUucmV0dXJuZWQuQnJhbmNoZXMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIGVycm9yKTtcclxuXHRcdH0sXHJcblx0XHRnZXRfY3VycmVudF9icmFuY2g6IGZ1bmN0aW9uIChzdWNjZXNzLCBlcnJvcikge1xyXG5cdFx0XHRhZ20uaW52b2tlKFwiVDQyLkFDUy5HZXRDdXJyZW50QnJhbmNoXCIsIHt9LCBcImJlc3RcIiwge30sIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0aWYgKHN1Y2Nlc3MpIHtcclxuXHRcdFx0XHRcdHN1Y2Nlc3MoZS5yZXR1cm5lZC5CcmFuY2gpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgZXJyb3IpO1xyXG5cdFx0fSxcclxuXHRcdHNldF9jdXJyZW50X2JyYW5jaDogZnVuY3Rpb24gKGJyYW5jaCwgc3VjY2VzcywgZXJyb3IpIHtcclxuXHRcdFx0YWdtLmludm9rZShcIlQ0Mi5BQ1MuU2V0Q3VycmVudEJyYW5jaFwiLCB7QnJhbmNoOiBicmFuY2h9LCBcImJlc3RcIiwge30sIHN1Y2Nlc3MsIGVycm9yKTtcclxuXHRcdH0sXHJcblx0XHRjdXJyZW50X3VzZXI6IGZ1bmN0aW9uIChzdWNjZXNzLCBlcnJvcikge1xyXG5cdFx0XHRhZ20uaW52b2tlKFwiVDQyLkFDUy5HZXRVc2VyXCIsIHt9LCBcImJlc3RcIiwge30sIHN1Y2Nlc3MsIGVycm9yKTtcclxuXHRcdH0sXHJcblx0XHRnZXRfZnVuY3Rpb25hbF9lbnRpdGxlbWVudDogZnVuY3Rpb24gKGZuLCBzdWNjZXNzLCBlcnJvcikge1xyXG5cdFx0XHRhZ20uaW52b2tlKFwiVDQyLkFDUy5HZXRGdW5jdGlvbmFsRW50aXRsZW1lbnRcIiwge0Z1bmN0aW9uOiBmbn0sIFwiYmVzdFwiLCB7fSwgZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRpZiAoc3VjY2Vzcykge1xyXG5cdFx0XHRcdFx0c3VjY2VzcyhlLnJldHVybmVkLkVudGl0bGVtZW50KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIGVycm9yKTtcclxuXHRcdH0sXHJcblx0XHRnZXRfZnVuY3Rpb25hbF9lbnRpdGxlbWVudF9icmFuY2g6IGZ1bmN0aW9uIChmbiwgYnIsIHN1Y2Nlc3MsIGVycm9yKSB7XHJcblx0XHRcdGFnbS5pbnZva2UoXCJUNDIuQUNTLkdldEZ1bmN0aW9uYWxFbnRpdGxlbWVudFwiLCB7RnVuY3Rpb246IGZuLCBCcmFuY2g6IGJyfSwgXCJiZXN0XCIsIHt9LCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdGlmIChzdWNjZXNzKSB7XHJcblx0XHRcdFx0XHRzdWNjZXNzKGUucmV0dXJuZWQuRW50aXRsZW1lbnQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgZXJyb3IpO1xyXG5cdFx0fSxcclxuXHRcdGNhbl9pOiBmdW5jdGlvbiAoZm4sIHN1Y2Nlc3MsIGVycm9yKSB7XHJcblx0XHRcdGFnbS5pbnZva2UoXCJUNDIuQUNTLkNhbklcIiwge0Z1bmN0aW9uOiBmbn0sIFwiYmVzdFwiLCB7fSwgc3VjY2VzcywgZXJyb3IpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRjYW5faV9icmFuY2g6IGZ1bmN0aW9uKGZuLCBicmFuY2gsIHN1Y2Nlc3MsIGVycm9yKSB7XHJcblx0XHRcdGFnbS5pbnZva2UoXCJUNDIuQUNTLkNhbklcIiwge0Z1bmN0aW9uOiBmbiwgQnJhbmNoOiBicmFuY2h9LCBcImJlc3RcIiwge30sIHN1Y2Nlc3MsIGVycm9yKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0ZXhpdDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRhZ20uaW52b2tlKFwiVDQyLkFDUy5TaHV0ZG93blwiLCB7fSwgXCJhbGxcIiwge30sXHJcblx0XHRcdFx0ZnVuY3Rpb24gKGEpIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGEpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0ZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGUpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRfdHJpZ2dlcl9hcHBfZXZlbnQ6IGFwcHMuX3RyaWdnZXIsXHJcblx0XHRfdHJpZ2dlcl9pbnN0YW5jZV9ldmVudDogaW5zdGFuY2VzLl90cmlnZ2VyXHJcblxyXG5cdH07XHJcblxyXG5cdGZ1bmN0aW9uIGNhbGxfd2l0aChwcm9wLCBmdW5jKSB7XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG5cdFx0XHRmdW5jKHJlc3VsdFtwcm9wXSk7XHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdC8vQ3JlYXRlIGV2ZW50IGJpbmRpbmdzXHJcblxyXG5cdC8vVGVsbCB0aGUgYXBwIHdoZW4gaXRzIGluc3RhbmNlcyBhcmUgYWRkZWQvcmVtb3ZlZFxyXG5cclxuXHRtYW5hZ2VyLm9uX2luc3RhbmNlX3N0YXJ0ZWQoZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcblx0XHRpZiAoaW5zdGFuY2UuYXBwbGljYXRpb24pIHtcclxuXHRcdFx0Ly9UcmlnZ2VyIFwiaW5zdGFuY2Vfc3RhcnRlZFwiIGV2ZW50IG9uIGFwcGxpY2F0aW9uXHJcblx0XHRcdG1hbmFnZXIuX3RyaWdnZXJfYXBwX2V2ZW50KFwiaW5zdGFuY2Vfc3RhcnRlZFwiLCBpbnN0YW5jZSwgaW5zdGFuY2UuYXBwbGljYXRpb24ubmFtZSk7XHJcblxyXG5cdFx0XHQvL1RyaWdnZXIgXCJ3aW5kb3dfb3BlbmVkXCIgZXZlbnQgb24gaW5zdGFuY2VcclxuXHRcdFx0dmFyIGNvbnRhaW5lcjtcclxuXHRcdFx0aWYgKHdpbmRvd3MpIHtcclxuXHRcdFx0XHR2YXIgaWQgPSAoaW5zdGFuY2UuY29udGV4dCAmJiBpbnN0YW5jZS5jb250ZXh0Lmd1aWQpID8gaW5zdGFuY2UuY29udGV4dC5ndWlkIDogaW5zdGFuY2UuaWQ7XHJcblx0XHRcdFx0Y29udGFpbmVyID0gaW5zdGFuY2UuYXBwbGljYXRpb24uY29uZmlndXJhdGlvbi5jb250YWluZXIuc3BsaXQoXCIuXCIpWzFdO1xyXG5cdFx0XHRcdGdsdWUuYWdtLmludm9rZShcIlQ0Mi5XbmQuRmluZEJ5SWRcIiwge3dpbmRvd0lkOiBpbnN0YW5jZS5pZH0sIHthcHBsaWNhdGlvbjogaW5zdGFuY2UuYXBwbGljYXRpb24uY29uZmlndXJhdGlvbi5jb250YWluZXJ9LCB7fSwgd2luZG93X29wZW5lZCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblx0XHRmdW5jdGlvbiB3aW5kb3dfb3BlbmVkKGEpIHtcclxuXHRcdFx0Ly9XcmFwIHRoZSB3aW5kb3cgaW4gYSB3aW5kb3cgb2JqZWN0LCB1c2luZyB0aGUgZ2x1ZSB3aW5kb3dzIGxpYlxyXG5cdFx0XHR2YXIgdyA9IGEucmV0dXJuZWQgW09iamVjdC5rZXlzKGEucmV0dXJuZWQpWzBdXTtcclxuXHRcdFx0dmFyIHdpbiA9IGdsdWUud2luZG93cy5fZnJvbV9ldmVudCh3LndpbmRvd05hbWUsIGNvbnRhaW5lciwgdy51cmwsIHcud2luZG93SWQpO1xyXG5cclxuXHRcdFx0Ly9UcmlnZ2VyIHRoZSB3aW5kb3cgb3BlbmVkIGV2ZW50XHJcblx0XHRcdG1hbmFnZXIuX3RyaWdnZXJfaW5zdGFuY2VfZXZlbnQoXCJ3aW5kb3dfYWRkZWRcIiwgd2luLCBpZCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHJcblx0fSk7XHJcblxyXG5cdG1hbmFnZXIub25faW5zdGFuY2Vfc3RvcHBlZChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHRcdGlmIChpbnN0YW5jZS5hcHBsaWNhdGlvbikge1xyXG5cdFx0XHRtYW5hZ2VyLl90cmlnZ2VyX2FwcF9ldmVudChcImluc3RhbmNlX3N0b3BwZWRcIiwgaW5zdGFuY2UsIGluc3RhbmNlLmFwcGxpY2F0aW9uLm5hbWUpO1xyXG5cclxuXHRcdFx0dmFyIGlkID0gKGluc3RhbmNlLmNvbnRleHQgJiYgaW5zdGFuY2UuY29udGV4dC5ndWlkKSA/IGluc3RhbmNlLmNvbnRleHQuZ3VpZCA6IGluc3RhbmNlLmlkO1xyXG5cdFx0XHRtYW5hZ2VyLl90cmlnZ2VyX2luc3RhbmNlX2V2ZW50KFwid2luZG93X3JlbW92ZWRcIiwge30sIGlkKTtcclxuXHJcblx0XHR9XHJcblxyXG5cclxuXHR9KTtcclxuXHJcblx0Ly9XaGVuIGFuIGFwcCBpcyByZW1vdmVkLCByZW1vdmUgYWxzbyBpdHMgaW5zdGFuY2VzXHJcblxyXG5cdG1hbmFnZXIub25fYXBwX3JlbW92ZWQoZnVuY3Rpb24gKGFwcCkge1xyXG5cdFx0YXBwLmluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG5cdFx0XHR2YXIgaWQgPSAoaW5zdGFuY2UuY29udGV4dCAmJiBpbnN0YW5jZS5jb250ZXh0Lmd1aWQpID8gaW5zdGFuY2UuY29udGV4dC5ndWlkIDogaW5zdGFuY2UuaWQ7XHJcblx0XHRcdG1hbmFnZXIuX3RyaWdnZXJfaW5zdGFuY2VfZXZlbnQoXCJzdG9wcGVkXCIsIHt9LCBpZCk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHR2YXIgYnJhbmNoX2NoYW5nZWRfY2FsbGJhY2s7XHJcblx0bWFuYWdlci5vbl9icmFuY2hlc19jaGFuZ2VkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblx0XHRicmFuY2hfY2hhbmdlZF9jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG5cdH07XHJcblxyXG5cdGZ1bmN0aW9uIG9uX2JyYW5jaF9jaGFuZ2VkKGUpIHtcclxuXHRcdGlmICh0eXBlb2YgYnJhbmNoX2NoYW5nZWRfY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xyXG5cdFx0XHRicmFuY2hfY2hhbmdlZF9jYWxsYmFjayhoZWxwZXJzLnZhbHMoZSkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gaGFuZGxlX2FwcF9yZWFkeShhcHApIHtcclxuXHRcdGlmIChhcHAuSXNSZWFkeSkge1xyXG5cdFx0XHRtYW5hZ2VyLl90cmlnZ2VyX2FwcF9ldmVudChcImF2YWlsYWJsZVwiLCBhcHApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdG1hbmFnZXIuX3RyaWdnZXJfYXBwX2V2ZW50KFwidW5hdmFpbGFibGVcIiwgYXBwKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGFwcF9mYWlsZWQoZSkge1xyXG5cdFx0bWFuYWdlci5fdHJpZ2dlcl9pbnN0YW5jZV9ldmVudChcImVycm9yXCIsIGUsIGUuQ29udGV4dC5ndWlkKTtcclxuXHR9XHJcblxyXG5cclxuXHRpZiAoYWdtICYmIGFnbS5zdWJzY3JpYmUpIHtcclxuXHJcblx0XHRtYW5hZ2VyLmFnbSA9IGFnbTtcclxuXHRcdHZhciBoYW5kbGVycyA9IFtcclxuXHRcdFx0e2V2ZW50OiBcIk9uQXBwbGljYXRpb25BZGRlZFwiLCB0cmlnZ2VyOiBcImFkZGVkXCIsIG9uOiBhcHBzfSxcclxuXHRcdFx0e2V2ZW50OiBcIk9uQXBwbGljYXRpb25SZW1vdmVkXCIsIHRyaWdnZXI6IFwicmVtb3ZlZFwiLCBvbjogYXBwc30sXHJcblx0XHRcdHtldmVudDogXCJPbkFwcGxpY2F0aW9uQ2hhbmdlZFwiLCB0cmlnZ2VyOiBcImNoYW5nZWRcIiwgb246IGFwcHN9LFxyXG5cdFx0XHR7ZXZlbnQ6IFwiT25BcHBsaWNhdGlvblN0YXJ0ZWRcIiwgdHJpZ2dlcjogXCJzdGFydGVkXCIsIG9uOiBpbnN0YW5jZXN9LFxyXG5cdFx0XHR7ZXZlbnQ6IFwiT25BcHBsaWNhdGlvblN0b3BwZWRcIiwgdHJpZ2dlcjogXCJzdG9wcGVkXCIsIG9uOiBpbnN0YW5jZXN9LFxyXG5cdFx0XHR7ZXZlbnQ6IFwiT25BcHBsaWNhdGlvbkFnbVNlcnZlclJlYWR5XCIsIHRyaWdnZXI6IFwiYWdtX3JlYWR5XCIsIG9uOiBpbnN0YW5jZXN9LFxyXG5cdFx0XHR7ZXZlbnQ6IFwiT25BcHBsaWNhdGlvblJlYWR5XCIsIGZ1bmM6IGhhbmRsZV9hcHBfcmVhZHl9LFxyXG5cdFx0XHR7ZXZlbnQ6IFwiT25CcmFuY2hlc01vZGlmaWVkXCIsIGZ1bmM6IG9uX2JyYW5jaF9jaGFuZ2VkfSxcclxuXHRcdFx0e2V2ZW50OiBcIk9uQXBwbGljYXRpb25TdGFydEZhaWxlZFwiLCByYXdfZnVuYzogYXBwX2ZhaWxlZH1cclxuXHRcdF07XHJcblxyXG5cclxuXHRcdGFnbS5zdWJzY3JpYmUoXCJUNDIuQUNTLk9uRXZlbnRcIiwge3RhcmdldDogXCJhbGxcIn0pXHJcblx0XHRcdC50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuXHJcblx0XHRcdFx0c3Vic2NyaXB0aW9uLm9uRGF0YShmdW5jdGlvbiAoc3RyZWFtRGF0YSkge1xyXG5cdFx0XHRcdFx0dmFyIGV2ZW50cyA9IHN0cmVhbURhdGEuZGF0YTtcclxuXHRcdFx0XHRcdGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuXHRcdFx0XHRcdFx0dmFyIG9iamVjdHMgPSBldmVudHNbaGFuZGxlci5ldmVudF07XHJcblx0XHRcdFx0XHRcdGlmIChvYmplY3RzKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChoYW5kbGVyLnJhd19mdW5jICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGhhbmRsZXIucmF3X2Z1bmMob2JqZWN0cyk7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRoZWxwZXJzLnZhbHMob2JqZWN0cykuZm9yRWFjaChmdW5jdGlvbiAob2JqZWN0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoaGFuZGxlci5vbiAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGhhbmRsZXIub24uX3RyaWdnZXIoaGFuZGxlci50cmlnZ2VyLCBvYmplY3QpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aGFuZGxlci5mdW5jKG9iamVjdCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH0pO1xyXG5cdH1cclxuXHJcblx0bWFuYWdlci52ZXJzaW9uID0gXCIyLjEuMFwiO1xyXG5cclxuXHRyZXR1cm4gbWFuYWdlcjtcclxufTtcclxuXHJcbmdsb2JhbC50aWNrNDIgPSBnbG9iYWwudGljazQyIHx8e307XHJcbmdsb2JhbC50aWNrNDIuYXBwX21hbmFnZXIgPSBnbG9iYWwuYXBwX21hbmFnZXI7XHJcbiIsInZhciBldmVudF9tYW5hZ2VyID0gcmVxdWlyZShcIi4vZXZlbnRfbWFuYWdlclwiKTtcclxudmFyIGhlbHBlcnMgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhZ20sIGluc3RhbmNlcykge1xyXG5cdHZhciBhcHBfcHJvdG8gPSBoZWxwZXJzLmFkZF9jYWxsYmFja3Moe1xyXG5cclxuXHRcdHN0YXJ0OiBmdW5jdGlvbiAocGFyYW1zLCBzdWNjZXNzLCBlcnJvcikge1xyXG5cdFx0XHRwYXJhbXMgPSBwYXJhbXMgfHwge307XHJcblx0XHRcdHBhcmFtcy5ndWlkID0gcGFyYW1zLmd1aWQgfHwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDApO1xyXG5cdFx0XHRpZiAoYWdtKSB7XHJcblx0XHRcdFx0YWdtLmludm9rZShcIlQ0Mi5BQ1MuU3RhcnRBcHBsaWNhdGlvblwiLCB7TmFtZTogdGhpcy5uYW1lLCBDb250ZXh0OiBwYXJhbXN9LCBcImJlc3RcIiwge30sIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0fSwgZXJyb3IpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBpbnN0YW5jZXMoKS5fdHJpZ2dlcihcImNyZWF0ZVwiLCB7Q29udGV4dDogcGFyYW1zfSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LCBbXCJhZGRlZFwiLCBcInJlbW92ZWRcIiwgXCJhdmFpbGFibGVcIiwgXCJ1bmF2YWlsYWJsZVwiLCBcImluc3RhbmNlX3N0YXJ0ZWRcIiwgXCJpbnN0YW5jZV9zdG9wcGVkXCIsIFwiY2hhbmdlZFwiXSwgXCJvbl9cIik7XHJcblxyXG4vL2NvbnN0cnVjdG9yLCBpbml0X2V2ZW50LCBpZF9maWVsZFxyXG5cclxuXHJcblx0ZnVuY3Rpb24gdXBkYXRlX2FwcChwcm9wcywgb2JqKSB7XHJcblx0XHRvYmoubmFtZSA9IHByb3BzLk5hbWU7XHJcblx0XHRvYmoudGl0bGUgPSBwcm9wcy5UaXRsZTtcclxuXHRcdG9iai52ZXJzaW9uID0gcHJvcHMuVmVyc2lvbjtcclxuXHRcdG9iai5pbnN0YW5jZXMgPSBbXTtcclxuXHRcdG9iai5jb25maWd1cmF0aW9uID0ge307XHJcblx0XHRvYmouY29uZmlndXJhdGlvbi5hdXRvX3N0YXJ0ID0gcHJvcHMuQXV0b1N0YXJ0O1xyXG5cdFx0b2JqLmNvbmZpZ3VyYXRpb24uY2FwdGlvbiA9IHByb3BzLkNhcHRpb247XHJcblx0XHRvYmouY29uZmlndXJhdGlvbi5oaWRkZW4gPSBwcm9wcy5Jc0hpZGRlbjtcclxuXHRcdG9iai5jb25maWd1cmF0aW9uLmNvbnRhaW5lciA9IHByb3BzLkFwcGxpY2F0aW9uTmFtZTtcclxuXHRcdC8vb2JqLmRpc2FibGVkID0gcHJvcHMuSXNEaXNhYmxlZDtcclxuXHRcdG9iai5jb25maWd1cmF0aW9uLmFsbG93X211bHRpcGxlID0gcHJvcHMuQWxsb3dNdWx0aXBsZTtcclxuXHRcdG9iai5hdmFpbGFibGUgPSBwcm9wcy5Jc1JlYWR5IHx8IGZhbHNlO1xyXG5cdFx0b2JqLmljb24gPSBwcm9wcy5JY29uO1xyXG5cdFx0cmV0dXJuIG9iajtcclxuXHR9XHJcblxyXG5cdHJldHVybiBldmVudF9tYW5hZ2VyKHtcclxuXHRcdGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlX2FwcChwcm9wcykge1xyXG5cdFx0XHRyZXR1cm4gdXBkYXRlX2FwcChwcm9wcywgT2JqZWN0LmNyZWF0ZShhcHBfcHJvdG8pKTtcclxuXHRcdH0sXHJcblx0XHR1cGRhdGU6IHVwZGF0ZV9hcHAsXHJcblx0XHRpbml0X2V2ZW50OiBcImFkZGVkXCIsXHJcblx0XHRleGl0X2V2ZW50OiBcInJlbW92ZWRcIixcclxuXHRcdGlkX2ZpZWxkOiBcIk5hbWVcIixcclxuXHRcdGNhbGxiYWNrczoge1xyXG5cdFx0XHRhdmFpbGFibGU6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0aGlzLmF2YWlsYWJsZSA9IHRydWU7XHJcblx0XHRcdH0sXHJcblx0XHRcdGNoYW5nZWQ6IGZ1bmN0aW9uIChwcm9wcykge1xyXG5cdFx0XHRcdHRoaXMuaWNvbiA9IHByb3BzLkljb247XHJcblx0XHRcdFx0dGhpcy50aXRsZSA9IHByb3BzLlRpdGxlO1xyXG5cdFx0XHRcdHRoaXMuY29uZmlndXJhdGlvbi5jYXB0aW9uID0gcHJvcHMuQ2FwdGlvbjtcclxuXHRcdFx0fSxcclxuXHRcdFx0dW5hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0aGlzLmF2YWlsYWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRpbnN0YW5jZV9zdGFydGVkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuXHRcdFx0XHR0aGlzLmluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0aW5zdGFuY2Vfc3RvcHBlZDogZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcblx0XHRcdFx0dGhpcy5pbnN0YW5jZXMgPSB0aGlzLmluc3RhbmNlcy5maWx0ZXIoZnVuY3Rpb24gKG15X2luc3RhbmNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbXlfaW5zdGFuY2UgIT09IGluc3RhbmNlO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG59O1xyXG4iLCJ2YXIgaGVscGVycyA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XHJcblxyXG5mdW5jdGlvbiBleGVjX2NhbGxiYWNrcyhvYmosIGFyciwgdmFsKSB7XHJcblx0aWYgKGFyciAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRhcnIuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuXHRcdFx0Y2FsbGJhY2suY2FsbChvYmosIHZhbCk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlX2Vudmlyb25tZW50KHNldHRpbmdzKSB7XHJcblx0dmFyIG9iamVjdHMgPSB7fTtcclxuXHR2YXIgZ2xvYmFsX2NhbGxiYWNrcyA9IHt9O1xyXG5cdHJldHVybiB7XHJcblx0XHRhbGw6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIGhlbHBlcnMudmFscyhvYmplY3RzKTtcclxuXHRcdH0sXHJcblx0XHRnZXRfYnlfaWQ6IGZ1bmN0aW9uIChpZCkge1xyXG5cdFx0XHRyZXR1cm4gb2JqZWN0c1tpZF07XHJcblx0XHR9LFxyXG5cdFx0X3RyaWdnZXI6IGZ1bmN0aW9uICh0eXBlLCBwcm9wcywgaWQpIHtcclxuXHRcdFx0aWQgPSBpZCB8fCAoIHR5cGVvZiBzZXR0aW5ncy5pZF9maWVsZCA9PT0gXCJmdW5jdGlvblwiID8gc2V0dGluZ3MuaWRfZmllbGQocHJvcHMpIDogcHJvcHNbc2V0dGluZ3MuaWRfZmllbGRdKTtcclxuXHJcblx0XHRcdC8vUXVpdCBpZiB3ZSByZWNlaXZlIGFuIGV2ZW50IGZvciBhbiBvYmplY3QgYmVmb3JlIGluaXRpYXRpbmcgaXQuXHJcblx0XHRcdGlmIChvYmplY3RzW2lkXSA9PT0gdW5kZWZpbmVkICYmICggdHlwZSAhPT0gc2V0dGluZ3MuaW5pdF9ldmVudCAmJiB0eXBlICE9PSBzZXR0aW5ncy5jcmVhdGVfZXZlbnQpKSB7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyAoXCJSZWNlaXZlZCAnXCIrdHlwZStcIicgZXZlbnQgYmVmb3JlICdcIitzZXR0aW5ncy5pbml0X2V2ZW50K1wiJ1wiKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHQvL0NyZWF0ZSBvciByZXRyaWV2ZSBhbiBvYmplY3QsIHJlcHJlc2VudGluZyB0aGUgZW50aXR5XHJcblx0XHRcdHZhciBvYmogPSBvYmplY3RzW2lkXSA9IG9iamVjdHNbaWRdIHx8IGluaXRfb2JqZWN0KHNldHRpbmdzLmNyZWF0ZShwcm9wcykpO1xyXG5cclxuXHRcdFx0aWYgKHR5cGUgPT09IHNldHRpbmdzLmluaXRfZXZlbnQpIHtcclxuXHRcdFx0XHQvL1F1aXQgaWYgd2UgcmVjZWl2ZSBhIGluaXQgZXZlbnQgZm9yIGFuIG9iamVjdCB0aGF0IGlzIGFscmVhZHkgYWN0aXZlXHJcblx0XHRcdFx0aWYgKG9iai5hY3RpdmUpIHtcclxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2cgKFwiUmVjZWl2ZWQgc2Vjb25kICdcIitzZXR0aW5ncy5pbml0X2V2ZW50K1wiJyBmb3IgYXBwIFwiK2lkKTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdC8vRWxzZSwgbWFrZSBpdCBhY3RpdmVcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0b2JqLmFjdGl2ZSA9IHRydWU7XHJcblx0XHRcdFx0XHRzZXR0aW5ncy51cGRhdGUocHJvcHMsIG9iaik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vV2hlbiB0aGUgZW50aXR5IGlzIHJlbW92ZWQsIHNldCBpdCB0byBub24tYWN0aXZlXHJcblx0XHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gc2V0dGluZ3MuZXhpdF9ldmVudCkge1xyXG5cdFx0XHRcdG9iai5hY3RpdmUgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0Ly9XaGVuIGEgY3JlYXRlIGV2ZW50IGlzIHJlY2VpdmVkLCBqdXN0IHJldHVybiB0aGUgb2JqZWN0IHdpdGhvdXQgZG9pbmcgYW55dGhpbmcgZWxzZVxyXG5cdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT09IHNldHRpbmdzLmNyZWF0ZV9ldmVudCkge1xyXG5cdFx0XHRcdHJldHVybiBvYmo7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvL0V4ZWN1dGUgc3lzdGVtIGNhbGxiYWNrc1xyXG5cdFx0XHRpZiAoc2V0dGluZ3MuY2FsbGJhY2tzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRzZXR0aW5ncy5jYWxsYmFja3NbdHlwZV0uY2FsbChvYmosIHByb3BzKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgZXJyb3JzIGluIHVzZXIgc3BlY2lmaWVkIGNhbGxiYWNrcyBkb2VzIG5vdFxyXG5cdFx0XHQvLyBicmVhayBvdXIgbGlicmFyeVxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdC8vRXhlY3V0ZSBnbG9iYWwgY2FsbGJhY2tzXHJcblx0XHRcdFx0ZXhlY19jYWxsYmFja3ModW5kZWZpbmVkLCBnbG9iYWxfY2FsbGJhY2tzW3R5cGVdLCBvYmopO1xyXG5cclxuXHRcdFx0XHQvL0V4ZWN1dGUgdXNlci1kZWZpbmVkIGNhbGxiYWNrcyB0aGF0IGFyZSBhdHRhY2hlZCB0byB0aGUgb2JqZWN0XHJcblx0XHRcdFx0ZXhlY19jYWxsYmFja3Mob2JqLCBvYmouY2FsbGJhY2tzW3R5cGVdLCBwcm9wcyk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2ggKGUpe1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly9XaGVuIHRoZSBlbnRpdHkgaXMgcmVtb3ZlZCwgcmVtb3ZlIGFsbCBjYWxsYmFja3MgKGFmdGVyIHlvdSBleGVjdXRlIHRoZW0pXHJcblx0XHRcdGlmICh0eXBlID09PSBzZXR0aW5ncy5leGl0X2V2ZW50KSB7XHJcblx0XHRcdFx0b2JqLmNhbGxiYWNrcyA9IHt9O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBvYmo7XHJcblxyXG5cdFx0fSxcclxuXHRcdC8vRXhwb3NlIHRoZSBnbG9iYWwgY2FsbGJhY2tzIG9iamVjdCBzbyB0aGF0IHVzZXIgY2FuIHJlZ2lzdGVyIHNvbWVcclxuXHRcdGNhbGxiYWNrczogZ2xvYmFsX2NhbGxiYWNrc1xyXG5cdH07XHJcbn07XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGluaXRfb2JqZWN0KG9iamVjdCkge1xyXG5cdG9iamVjdC5jYWxsYmFja3MgPSB7fTtcclxuXHRvYmplY3QuYWN0aXZlID0gZmFsc2U7XHJcblx0cmV0dXJuIG9iamVjdDtcclxufVxyXG4iLCJmdW5jdGlvbiBub29wKCl7fVxyXG5cclxuZnVuY3Rpb24gZXhlY19pZihjb25kaXRpb24pIHtcclxuXHRyZXR1cm4gZnVuY3Rpb24gKGFwcCwgY2FsbGJhY2spIHtcclxuXHRcdGlmIChjb25kaXRpb24oYXBwKSkge1xyXG5cdFx0XHRjYWxsYmFjay5jYWxsKGFwcCk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZXhwb3J0cy5hZGRfY2FsbGJhY2tzID0gZnVuY3Rpb24gYWRkX2NhbGxiYWNrcyhvYmplY3QsIGV2ZW50cywgcHJlZml4KSB7XHJcblx0ZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHRpZiAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiKSB7XHJcblx0XHRcdGV2ZW50ID0ge25hbWU6IGV2ZW50LCB0cmlnZ2VyX3doZW46IG5vb3B9O1xyXG5cdFx0fVxyXG5cclxuXHRcdG9iamVjdFtwcmVmaXggKyBldmVudC5uYW1lXSA9IGV4cG9ydHMuYWRkX2NhbGxiYWNrKGV2ZW50Lm5hbWUsIGV4ZWNfaWYoZXZlbnQudHJpZ2dlcl93aGVuKSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIG9iamVjdDtcclxuXHJcbn07XHJcblxyXG5leHBvcnRzLmFkZF9jYWxsYmFjayA9IGZ1bmN0aW9uIGFkZF9jYWxsYmFjaygga2V5LCBvbl9hZGQgKXtcclxuXHRyZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spe1xyXG5cdFx0dmFyIG9iaiA9IHRoaXMuY2FsbGJhY2tzO1xyXG5cdFx0aWYob2JqW2tleV09PT11bmRlZmluZWQpe29ialtrZXldID0gW2NhbGxiYWNrXTt9XHJcblx0XHRlbHNlIHtvYmpba2V5XS5wdXNoKGNhbGxiYWNrKTt9XHJcblx0XHRpZih0eXBlb2Ygb25fYWRkID09PSBcImZ1bmN0aW9uXCIpe29uX2FkZCh0aGlzLCBjYWxsYmFjayk7fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fTtcclxufTtcclxuXHJcbmV4cG9ydHMudmFscyA9IGZ1bmN0aW9uIHZhbHMob2JqKSB7XHJcblx0cmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChhcnIsIGtleSkge1xyXG5cdFx0YXJyLnB1c2gob2JqW2tleV0pO1xyXG5cdFx0cmV0dXJuIGFycjtcclxuXHR9LCBbXSk7XHJcbn07XHJcbiIsInZhciBldmVudF9tYW5hZ2VyID0gcmVxdWlyZShcIi4vZXZlbnRfbWFuYWdlclwiKTtcclxudmFyIGhlbHBlcnMgPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhZ20sIGFwcHMpIHtcclxuXHR2YXIgaW5zdGFuY2VfcHJvdG8gPSBoZWxwZXJzLmFkZF9jYWxsYmFja3Moe1xyXG5cdFx0c3RvcDogZnVuY3Rpb24gKHBhcmFtcywgc3VjY2VzcywgZXJyb3IpIHtcclxuXHRcdFx0YWdtLmludm9rZShcIlQ0Mi5BQ1MuU3RvcEFwcGxpY2F0aW9uXCIsIHtOYW1lOiB0aGlzLmFwcGxpY2F0aW9uLm5hbWUsIElkOiB0aGlzLmlkfSwgXCJiZXN0XCIsIHt9LCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGUpO1xyXG5cdFx0XHR9LCBlcnJvcik7XHJcblx0XHR9LFxyXG5cdFx0YWN0aXZhdGU6IGZ1bmN0aW9uIChwYXJhbXMsIHN1Y2Nlc3MsIGVycm9yKSB7XHJcblx0XHRcdGFnbS5pbnZva2UoXCJUNDIuQUNTLkFjdGl2YXRlQXBwbGljYXRpb25cIiwge05hbWU6IHRoaXMuYXBwbGljYXRpb24ubmFtZSwgSWQ6IHRoaXMuaWR9LCBcImJlc3RcIiwge30sIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coZSk7XHJcblx0XHRcdH0sIGVycm9yKTtcclxuXHRcdH1cclxuXHR9LCBbXHJcblx0XHR7XHJcblx0XHRcdG5hbWU6IFwid2luZG93X2FkZGVkXCIsIHRyaWdnZXJfd2hlbjogZnVuY3Rpb24gKGFwcCkge1xyXG5cdFx0XHRyZXR1cm4gYXBwLmFjdGl2ZSAmJiBhcHAubWFpbl93aW5kb3cgIT09IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdG5hbWU6IFwid2luZG93X3JlbW92ZWRcIiwgdHJpZ2dlcl93aGVuOiBmdW5jdGlvbiAoYXBwKSB7XHJcblx0XHRcdHJldHVybiBhcHAubWFpbl93aW5kb3cgPT09IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdG5hbWU6IFwic3RhcnRlZFwiLCB0cmlnZ2VyX3doZW46IGZ1bmN0aW9uIChhcHApIHtcclxuXHRcdFx0cmV0dXJuIGFwcC5pZCAhPT0gdW5kZWZpbmVkICYmIGFwcC5hY3RpdmU7XHJcblx0XHR9XHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRuYW1lOiBcInN0b3BwZWRcIiwgdHJpZ2dlcl93aGVuOiBmdW5jdGlvbiAoYXBwKSB7XHJcblx0XHRcdHJldHVybiBhcHAuaWQgIT09IHVuZGVmaW5lZCAmJiAhYXBwLmFjdGl2ZTtcclxuXHRcdH1cclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdG5hbWU6IFwiYWdtX3JlYWR5XCIsIHRyaWdnZXJfd2hlbjogZnVuY3Rpb24gKGFwcCkge1xyXG5cdFx0XHRyZXR1cm4gYXBwLmFjdGl2ZSAmJiBhcHAuYWdtICE9PSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRuYW1lOiBcImVycm9yXCIsIHRyaWdnZXJfd2hlbjogZnVuY3Rpb24gKGFwcCkge1xyXG5cdFx0XHRyZXR1cm4gYXBwLmVycm9yICE9PSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHR9LFxyXG5cdF0sIFwib25fXCIpO1xyXG5cclxuXHRmdW5jdGlvbiB1cGRhdGVfaW5zdGFuY2UocHJvcHMsIG9iaikge1xyXG5cdFx0b2JqLmlkID0gcHJvcHMuSWQ7XHJcblx0XHRvYmouYXBwbGljYXRpb24gPSBhcHBzLmdldF9ieV9pZChwcm9wcy5OYW1lKTtcclxuXHRcdG9iai5jb250ZXh0ID0gcHJvcHMuQ29udGV4dDtcclxuXHRcdHJldHVybiBvYmo7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGV2ZW50X21hbmFnZXIoe1xyXG5cdFx0Y3JlYXRlOiBmdW5jdGlvbiAocHJvcHMpIHtcclxuXHRcdFx0cmV0dXJuIHVwZGF0ZV9pbnN0YW5jZShwcm9wcywgT2JqZWN0LmNyZWF0ZShpbnN0YW5jZV9wcm90bykpO1xyXG5cdFx0fSxcclxuXHRcdHVwZGF0ZTogdXBkYXRlX2luc3RhbmNlLFxyXG5cdFx0Y3JlYXRlX2V2ZW50OiBcImNyZWF0ZVwiLFxyXG5cdFx0aW5pdF9ldmVudDogXCJzdGFydGVkXCIsXHJcblx0XHRleGl0X2V2ZW50OiBcInN0b3BwZWRcIixcclxuXHRcdGlkX2ZpZWxkOiBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRyZXR1cm4gZS5Db250ZXh0ICE9PSB1bmRlZmluZWQgJiYgZS5Db250ZXh0Lmd1aWQgIT09IHVuZGVmaW5lZCA/IGUuQ29udGV4dC5ndWlkIDogZS5JZDtcclxuXHRcdH0sXHJcblx0XHRjYWxsYmFja3M6IHtcclxuXHRcdFx0YWdtX3JlYWR5OiBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdC8vZ2V0IHRoZSBmaXJzdCBBR01cclxuXHRcdFx0XHR2YXIgc2VydmVyX25hbWUgPSBPYmplY3Qua2V5cyhlLkFnbVNlcnZlcnMpWzBdO1xyXG5cdFx0XHRcdC8vQXR0YWNoIGl0IHRvIHRoZSBvYmplY3RcclxuXHRcdFx0XHR0aGlzLmFnbSA9IGNvbnZlcnRfYWdtX2luc3RhbmNlKGUuQWdtU2VydmVyc1tzZXJ2ZXJfbmFtZV0pO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRlcnJvcjogZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHR0aGlzLmVycm9yID0gZTtcclxuXHRcdFx0fSxcclxuXHRcdFx0d2luZG93X2FkZGVkOiBmdW5jdGlvbiAod2luKSB7XHJcblx0XHRcdFx0dGhpcy5tYWluX3dpbmRvdyA9IHdpbjtcclxuXHRcdFx0XHR0aGlzLndpbmRvd3MgPSB0aGlzLndpbmRvd3MgfHwgW107XHJcblx0XHRcdFx0dGhpcy53aW5kb3dzLnB1c2god2luKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0d2luZG93X3JlbW92ZWQ6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR0aGlzLm1haW5fd2luZG93ID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdHRoaXMud2luZG93cyA9IFtdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gY29udmVydF9hZ21faW5zdGFuY2UoYWdtKSB7XHJcblx0cmV0dXJuIHtcclxuXHRcdG1hY2hpbmU6IGFnbS5tYWNoaW5lTmFtZSxcclxuXHRcdHVzZXI6IGFnbS51c2VyTmFtZSxcclxuXHRcdGVudmlyb25tZW50OiBhZ20uZW52aXJvbm1lbnQsXHJcblx0XHRhcHBsaWNhdGlvbjogYWdtLmFwcGxpY2F0aW9uTmFtZVxyXG5cclxuXHR9O1xyXG59XHJcbiIsIi8qKlxyXG4gKiBAbW9kdWxlIGFwcGNvbmZpZ1xyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIF8gPSByZXF1aXJlKCcuL3V0aWwnKTtcclxudmFyIE1vZGVsID0gcmVxdWlyZSgnLi9tb2RlbCcpO1xyXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xyXG5cclxudmFyIGV2ZW50cyA9IHtcclxuICBjb25uZWN0OiAnY29ubmVjdCcsXHJcbiAgZGlzY29ubmVjdDogJ2Rpc2Nvbm5lY3QnLFxyXG4gIHVwZGF0ZTogJ3VwZGF0ZScsXHJcbiAgc3RhdHVzOiAnc3RhdHVzJ1xyXG59O1xyXG5cclxudmFyIEV2ZW50QnVzID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBzdWJzY3JpcHRpb25zQnlUeXBlO1xyXG4gIHZhciBvbiA9IGZ1bmN0aW9uICh0eXBlLCBvbmNlLCBjYWxsYmFjaywgc2NvcGUpIHtcclxuICAgIGlmICghXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcclxuICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgb25jZTogb25jZSxcclxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxyXG4gICAgICBzY29wZTogc2NvcGVcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zQnlUeXBlW3R5cGVdO1xyXG4gICAgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb25zID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uc0J5VHlwZVt0eXBlXSA9IFtdO1xyXG4gICAgfVxyXG4gICAgc3Vic2NyaXB0aW9uLmlkID0gc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbikgLSAxO1xyXG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcclxuICB9O1xyXG5cclxuICB2YXIgZW1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG4gICAgdmFyIHR5cGUgPSBhcmdzLnNwbGljZSgwLCAxKVswXTtcclxuICAgIHZhciBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uc0J5VHlwZVt0eXBlXTtcclxuICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnNCeVR5cGVbdHlwZV0gPSBbXTtcclxuICAgIH1cclxuICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHN1YnNjcmlwdGlvbi5jYWxsYmFjay5hcHBseShzdWJzY3JpcHRpb24uc2NvcGUsIGFyZ3MpO1xyXG4gICAgICB9IGNhdGNoICh4KSB7XHJcbiAgICAgICAgXy53YXJuKCdFeGNlcHRpb24gZHVyaW5nIGV4ZWN1dGlvbiBvZiBjYWxsYmFjaycsIHN1YnNjcmlwdGlvbiwgYXJncywgeCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHN1YnNjcmlwdGlvbi5vbmNlKSB7XHJcbiAgICAgICAgb2ZmKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcbiAgdmFyIG9mZiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgIHZhciBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uc0J5VHlwZVtzdWJzY3JpcHRpb24udHlwZV07XHJcbiAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zW3N1YnNjcmlwdGlvbi5pZF07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHJlc3VtZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9uLmlkID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXR1cm4gb24oc3Vic2NyaXB0aW9uLnR5cGUsIHN1YnNjcmlwdGlvbi5vbmNlLCBzdWJzY3JpcHRpb24uY2FsbGJhY2ssIHN1YnNjcmlwdGlvbi5zY29wZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnNCeVR5cGVbc3Vic2NyaXB0aW9uLnR5cGVdO1xyXG4gICAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnNCeVR5cGVbc3Vic2NyaXB0aW9uLnR5cGVdID0gW107XHJcbiAgICAgIH1cclxuICAgICAgc3Vic2NyaXB0aW9uc1tzdWJzY3JpcHRpb24uaWRdID0gc3Vic2NyaXB0aW9uO1xyXG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciByZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9uc0J5VHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgT2JqZWN0LmtleXMoc3Vic2NyaXB0aW9uc0J5VHlwZSkuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uc0J5VHlwZVt0eXBlXTtcclxuICAgICAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uLmlkO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHN1YnNjcmlwdGlvbnNCeVR5cGUgPSB7fTtcclxuICB9O1xyXG4gIHJlc2V0KCk7XHJcbiAgcmV0dXJuIHtcclxuICAgIG9uOiBvbixcclxuICAgIGVtaXQ6IGVtaXQsXHJcbiAgICBvZmY6IG9mZixcclxuICAgIHJlc3VtZTogcmVzdW1lLFxyXG4gICAgcmVzZXQ6IHJlc2V0XHJcblxyXG4gIH07XHJcbn07XHJcblxyXG52YXIgQXBwQ29uZmlnID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICB2YXIgZGVmYXVsdExpc3RlbiAgPSB0cnVlO1xyXG4gIHZhciBnYXRld2F5O1xyXG4gIHZhciBpbml0R2F0ZXdheTtcclxuICB2YXIgYnVzID0gbmV3IEV2ZW50QnVzKCk7XHJcbiAgdmFyIG1vZGVsID0gbmV3IE1vZGVsKGJ1cyk7XHJcblxyXG4gIHZhciByb290ID0gcmVxdWlyZSgnLi9wcm9wcycpKG1vZGVsLnJvb3QpO1xyXG4gIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgdmFyIGdhdGV3YXlDb25uZWN0aW9uO1xyXG4gIHZhciBwb2xsaW5nSW50ZXJ2YWxJZDtcclxuICB2YXIgY2xlYXJQb2xsaW5nSW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIHBvbGxpbmdJbnRlcnZhbElkICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBjbGVhckludGVydmFsKHBvbGxpbmdJbnRlcnZhbElkKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBQdWJsaWMgQVBJXHJcbiAgc2VsZi5pbml0ID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XHJcbiAgICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHt9O1xyXG4gICAgdmFyIGlzSWRlbnRpdHlWYWxpZCA9IHR5cGVvZiBzZXR0aW5ncy5pZGVudGl0eSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgT2JqZWN0LmtleXMoc2V0dGluZ3MuaWRlbnRpdHkpLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgaWYgKGlzSWRlbnRpdHlWYWxpZCkge1xyXG4gICAgICBzZWxmLmlkZW50aXR5ID0gc2V0dGluZ3MuaWRlbnRpdHk7XHJcbiAgICB9XHJcbiAgICBkZWZhdWx0TGlzdGVuID0gc2V0dGluZ3MuZGVmYXVsdExpc3RlbiB8fCBkZWZhdWx0TGlzdGVuO1xyXG4gICAgaWYgKCFzZWxmLmlkZW50aXR5KSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lkZW50aXR5IG11c3QgYmUgbm9uIGVtcHR5IG9iamVjdC4nKTtcclxuICAgIH1cclxuXHJcbiAgICBtb2RlbC5zZXBhcmF0b3IgPSBzZXR0aW5ncy5kZWZhdWx0U2VwYXJhdG9yIHx8IG1vZGVsLnNlcGFyYXRvcjtcclxuXHJcbiAgICBzZWxmLnNjaGVtYSA9IHNldHRpbmdzLnNjaGVtYSB8fCBzZWxmLnNjaGVtYSB8fCAnQXBwbGljYXRpb25Db25maWd1cmF0aW9uJztcclxuXHJcbiAgICBpbml0R2F0ZXdheSA9IF8uaXNGdW5jdGlvbihzZXR0aW5ncy5nYXRld2F5KSA/XHJcbiAgICAgIHNldHRpbmdzLmdhdGV3YXkgOlxyXG4gICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5nYXRld2F5ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgc2V0dGluZ3MuZ2F0ZXdheSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmdhdGV3YXkuaW5zdGFuY2UgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICBzZXR0aW5ncy5nYXRld2F5Lmluc3RhbmNlID0gXy51dWlkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXF1aXJlKCcuL2dhdGV3YXknKShzZXR0aW5ncy5nYXRld2F5KTtcclxuICAgICAgfTtcclxuICB9O1xyXG5cclxuICBzZWxmLmNvbm5lY3QgPSBmdW5jdGlvbiAobGlzdGVuLCBjYWxsYmFjaywgc2NvcGUpIHtcclxuICAgIGNsZWFyUG9sbGluZ0ludGVydmFsKCk7XHJcbiAgICB2YXIgc3Vic2NyaXB0aW9uO1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24obGlzdGVuKSkge1xyXG4gICAgICAgIGNhbGxiYWNrID0gbGlzdGVuO1xyXG4gICAgICAgIHNjb3BlID0gY2FsbGJhY2s7XHJcbiAgICAgICAgbGlzdGVuID0gZGVmYXVsdExpc3RlbjtcclxuICAgICAgfVxyXG4gICAgICBzdWJzY3JpcHRpb24gPSBidXMub24oZXZlbnRzLmNvbm5lY3QsIHRydWUsIGNhbGxiYWNrLCBzY29wZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGVycm9yO1xyXG4gICAgaWYgKCFzZWxmLmlkZW50aXR5KSB7XHJcbiAgICAgIGVycm9yID0gJ2lkZW50aXR5IGlzIG5vdCBzcGVjaWZpZWQuIGRpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgaW5pdCgpPyc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIWdhdGV3YXkpIHtcclxuICAgICAgICBnYXRld2F5ID0gaW5pdEdhdGV3YXkoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWxpc3Rlbikge1xyXG4gICAgICAgIGdhdGV3YXlDb25uZWN0aW9uID1cclxuICAgICAgICAgIGdhdGV3YXkuY29ubmVjdChcclxuICAgICAgICAgICAgc2VsZi5zY2hlbWEsXHJcbiAgICAgICAgICAgIHNlbGYuaWRlbnRpdHksXHJcbiAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IsIHNuYXBzaG90LCB1cGRhdGVzKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIG1vZGVsLmFwcGx5U25hcHNob3Qoc25hcHNob3QpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBidXMuZW1pdChldmVudHMuY29ubmVjdCwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IsIHN0YXR1cykge1xyXG4gICAgICAgICAgICAgIGJ1cy5lbWl0KGV2ZW50cy5zdGF0dXMsIGVycm9yLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgY29ubmVjdEVtaXR0ZWQgPSBmYWxzZTtcclxuICAgICAgICBnYXRld2F5Q29ubmVjdGlvbiA9IGdhdGV3YXkuY29ubmVjdChcclxuICAgICAgICAgIHNlbGYuc2NoZW1hLFxyXG4gICAgICAgICAgc2VsZi5pZGVudGl0eSxcclxuICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IsIHNuYXBzaG90LCB1cGRhdGVzKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc25hcHNob3QgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgbW9kZWwuYXBwbHlTbmFwc2hvdChzbmFwc2hvdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgIG1vZGVsLmFwcGx5VXBkYXRlcyh1cGRhdGVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWNvbm5lY3RFbWl0dGVkKSB7XHJcbiAgICAgICAgICAgICAgY29ubmVjdEVtaXR0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIGJ1cy5lbWl0KGV2ZW50cy5jb25uZWN0LCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IsIHN0YXR1cykge1xyXG4gICAgICAgICAgICB2YXIgTElTVEVOX05PVF9TVVBQT1JURUQgPSA4O1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzLmNvZGUgPT09IExJU1RFTl9OT1RfU1VQUE9SVEVEKSB7XHJcbiAgICAgICAgICAgICAgcG9sbGluZ0ludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBnYXRld2F5LmRpc2Nvbm5lY3QoZ2F0ZXdheUNvbm5lY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgZ2F0ZXdheUNvbm5lY3Rpb24gPSBnYXRld2F5LmNvbm5lY3Qoc2VsZi5zY2hlbWEsIHNlbGYuaWRlbnRpdHksIGZhbHNlLCBmdW5jdGlvbiAoZXJyb3IsIHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgICAgICAgIG1vZGVsLmFwcGx5U25hcHNob3Qoc25hcHNob3QsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBzZXRUaW1lb3V0KGJ1cy5lbWl0LCAwLCBldmVudHMuY29ubmVjdCwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdWJzY3JpcHRpb247XHJcblxyXG4gIH07XHJcblxyXG4gIHNlbGYucHJvcHMgPSBmdW5jdGlvbiAoc2VjdGlvbiwgc2VwYXJhdG9yKSB7XHJcbiAgICByZXR1cm4gcm9vdC5wcm9wcyhzZWN0aW9uLCBzZXBhcmF0b3IpO1xyXG4gIH07XHJcblxyXG4gIHNlbGYubW9kaWZ5ID0gZnVuY3Rpb24gKG1vZGlmaWNhdGlvbnMsIGNhbGxiYWNrLCBzY29wZSkge1xyXG4gICAgaWYgKHR5cGVvZiBtb2RpZmljYXRpb25zID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBtb2RpZmljYXRpb25zID0gW21vZGlmaWNhdGlvbnNdO1xyXG4gICAgfVxyXG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGJ1cy5vbihldmVudHMudXBkYXRlLCB0cnVlLCBjYWxsYmFjaywgc2NvcGUpO1xyXG5cclxuICAgIHJldHVybiBzdWJzY3JpcHRpb247XHJcbiAgfTtcclxuXHJcbiAgc2VsZi5vbkNvbm5lY3QgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNjb3BlKSB7XHJcbiAgICByZXR1cm4gYnVzLm9uKGV2ZW50cy5jb25uZWN0LCBmYWxzZSwgY2FsbGJhY2ssIHNjb3BlKTtcclxuXHJcbiAgfTtcclxuXHJcbiAgc2VsZi5vbkRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNjb3BlKSB7XHJcbiAgICByZXR1cm4gYnVzLm9uKGV2ZW50cy5kaXNjb25uZWN0LCBmYWxzZSwgY2FsbGJhY2ssIHNjb3BlKTtcclxuICB9O1xyXG5cclxuICBzZWxmLm9mZiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgIGlmIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgYnVzLm9mZihzdWJzY3JpcHRpb24pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNlbGYub24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIGJ1cy5yZXN1bWUoc3Vic2NyaXB0aW9uKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzZWxmLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNjb3BlKSB7XHJcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICBidXMub24oZXZlbnRzLmRpc2Nvbm5lY3QsIHRydWUsIGNhbGxiYWNrLCBzY29wZSk7XHJcbiAgICB9XHJcbiAgICBjbGVhclBvbGxpbmdJbnRlcnZhbCgpO1xyXG4gICAgaWYgKHR5cGVvZiBnYXRld2F5ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBnYXRld2F5LmRpc2Nvbm5lY3QoZ2F0ZXdheUNvbm5lY3Rpb24sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIGJ1cy5lbWl0KGV2ZW50cy5kaXNjb25uZWN0LCBlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gICAgICBnYXRld2F5ID0gdW5kZWZpbmVkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnVzLmVtaXQoZXZlbnRzLmRpc2Nvbm5lY3QsICdub3QgY29ubmVjdGVkJyk7XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuXHJcbkFwcENvbmZpZy5wcm90b3R5cGUuaWRlbnRpdHlFcXVhbCA9IGhlbHBlcnMuaWRlbnRpdHlFcXVhbDtcclxuQXBwQ29uZmlnLnByb3RvdHlwZS5pZGVudGl0eVRvU3RyaW5nID0gaGVscGVycy5pZGVudGl0eVRvU3RyaW5nO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIG5ldyBBcHBDb25maWcoKTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGdhdGV3YXlDb25uZWN0aW9uID0gcmVxdWlyZSgndGljazQyLWdhdGV3YXktY29ubmVjdGlvbicpO1xyXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xyXG52YXIgaWRlbnRpdHlUb1N0cmluZyA9IGhlbHBlcnMuaWRlbnRpdHlUb1N0cmluZztcclxudmFyIFBST0RVQ1QgPSAnYXBwY29uZmlnJztcclxuXHJcbnZhciBHYXRld2F5VHJhbnNwb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICB2YXIgY29ubmVjdGlvbjtcclxuICB2YXIgZGF0YUhhbmRsZXJzID0ge307XHJcbiAgdmFyIHN0YXR1c0hhbmRsZXJzID0ge307XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVN0YXR1c01lc3NhZ2UobXNnKSB7XHJcbiAgICB2YXIgaGFuZGxlciA9IHN0YXR1c0hhbmRsZXJzW21zZy5pbnN0YW5jZV07XHJcbiAgICBpZiAoaGFuZGxlcikge1xyXG4gICAgICBoYW5kbGVyKG1zZy5lcnJvciwgbXNnLnN0YXR1cyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGhhbmRsZURhdGFNZXNzYWdlKG1zZykge1xyXG4gICAgdmFyIHNjaGVtYSA9IG1zZy5zY2hlbWE7XHJcbiAgICB2YXIgc2NoZW1hSGFuZGxlcnMgPSBkYXRhSGFuZGxlcnNbc2NoZW1hXTtcclxuICAgIGlmICh0eXBlb2Ygc2NoZW1hSGFuZGxlcnMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBpZGVudGl0eUtleSA9IGlkZW50aXR5VG9TdHJpbmcobXNnLmlkZW50aXR5LCB0cnVlKTtcclxuICAgIHZhciBpZGVudGl0eUhhbmRsZXJzID0gc2NoZW1hSGFuZGxlcnNbaWRlbnRpdHlLZXldO1xyXG4gICAgaWYgKHR5cGVvZiBpZGVudGl0eUhhbmRsZXJzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZGVudGl0eUhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgICAgaWYgKGhhbmRsZXIpIHtcclxuICAgICAgICBoYW5kbGVyKG1zZy5lcnJvciwgbXNnLnNuYXBzaG90LCBtc2cudXBkYXRlcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBmdW5jdGlvbiBlbnN1cmVDb25uZWN0aW9uKCkge1xyXG4gICAgaWYgKHR5cGVvZihjb25uZWN0aW9uKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbm5lY3Rpb24gIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICB7XHJcbiAgICAgICAgY29ubmVjdGlvbiA9IG9wdGlvbnMuY29ubmVjdGlvbjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBjb25uZWN0aW9uID0gZ2F0ZXdheUNvbm5lY3Rpb24ob3B0aW9ucy5zZXR0aW5ncywgb3B0aW9ucy5jdXN0b21fY29ubmVjdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgdmFyIGRhdGFTdWJzY3JpcHRpb247XHJcbiAgdmFyIHN0YXR1c1N1YnNjcmlwdGlvbjtcclxuICB2YXIgY29ubmVjdCA9IGZ1bmN0aW9uIChzY2hlbWEsIGlkZW50aXR5LCBsaXN0ZW4sIGhhbmRsZXIsIHN0YXR1c0hhbmRsZXIpIHtcclxuICAgIGVuc3VyZUNvbm5lY3Rpb24oKTtcclxuICAgIHZhciBzY2hlbWFIYW5kbGVycyA9IGRhdGFIYW5kbGVyc1tzY2hlbWFdO1xyXG4gICAgaWYgKHR5cGVvZiBzY2hlbWFIYW5kbGVycyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgc2NoZW1hSGFuZGxlcnMgPSBkYXRhSGFuZGxlcnNbc2NoZW1hXSA9IHt9O1xyXG4gICAgfVxyXG4gICAgdmFyIGlkZW50aXR5S2V5ID0gaWRlbnRpdHlUb1N0cmluZyhpZGVudGl0eSwgdHJ1ZSk7XHJcbiAgICB2YXIgaWRlbnRpdHlIYW5kbGVycyA9IHNjaGVtYUhhbmRsZXJzW2lkZW50aXR5S2V5XTtcclxuICAgIGlmICh0eXBlb2YgaWRlbnRpdHlIYW5kbGVycyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgaWRlbnRpdHlIYW5kbGVycyA9IHNjaGVtYUhhbmRsZXJzW2lkZW50aXR5S2V5XSA9IFtdO1xyXG4gICAgfVxyXG4gICAgdmFyIGhhbmRsZXJUb1JlZ2lzdGVyO1xyXG4gICAgdmFyIGluZGV4O1xyXG4gICAgaWYgKGxpc3Rlbikge1xyXG4gICAgICBoYW5kbGVyVG9SZWdpc3RlciA9IGhhbmRsZXI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBoYW5kbGVyVG9SZWdpc3RlciA9IGZ1bmN0aW9uIChlcnJvciwgc25hcHNob3QsIHVwZGF0ZXMpIHtcclxuICAgICAgICBoYW5kbGVyKGVycm9yLCBzbmFwc2hvdCwgdXBkYXRlcyk7XHJcbiAgICAgICAgZGVsZXRlIGlkZW50aXR5SGFuZGxlcnNbaW5kZXhdO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGluZGV4ID0gaWRlbnRpdHlIYW5kbGVycy5wdXNoKGhhbmRsZXJUb1JlZ2lzdGVyKSAtIDE7XHJcblxyXG4gICAgaWYgKHR5cGVvZiAoZGF0YVN1YnNjcmlwdGlvbikgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGRhdGFTdWJzY3JpcHRpb24gPSBjb25uZWN0aW9uLm9uKFBST0RVQ1QsIEdhdGV3YXlUcmFuc3BvcnQuTWVzc2FnZVR5cGUuREFUQSwgZnVuY3Rpb24gKG1zZykge1xyXG4gICAgICAgIGhhbmRsZURhdGFNZXNzYWdlKG1zZyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdmFyIGluc3RhbmNlID0gb3B0aW9ucy5pbnN0YW5jZTtcclxuICAgIHN0YXR1c0hhbmRsZXJzW2luc3RhbmNlXSA9IHN0YXR1c0hhbmRsZXI7XHJcbiAgICBpZiAodHlwZW9mIChzdGF0dXNTdWJzY3JpcHRpb24pID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBzdGF0dXNTdWJzY3JpcHRpb24gPSBjb25uZWN0aW9uLm9uKFBST0RVQ1QsIEdhdGV3YXlUcmFuc3BvcnQuTWVzc2FnZVR5cGUuU1RBVFVTLCBmdW5jdGlvbiAobXNnKSB7XHJcbiAgICAgICAgaGFuZGxlU3RhdHVzTWVzc2FnZShtc2cpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbXNnID0ge1xyXG4gICAgICBzY2hlbWE6IHNjaGVtYSxcclxuICAgICAgaWRlbnRpdHk6IGlkZW50aXR5LFxyXG4gICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXHJcbiAgICAgIGxpc3RlbjogbGlzdGVuXHJcbiAgICB9O1xyXG4gICAgY29ubmVjdGlvbi5zZW5kKFBST0RVQ1QsIEdhdGV3YXlUcmFuc3BvcnQuTWVzc2FnZVR5cGUuQ09OTkVDVCwgbXNnKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNjaGVtYTogc2NoZW1hLFxyXG4gICAgICBpZGVudGl0eTogaWRlbnRpdHksXHJcbiAgICAgIGxpc3RlbjogbGlzdGVuLFxyXG4gICAgICBoYW5kbGVyOiBoYW5kbGVyLFxyXG4gICAgICBpbmRleCA6IGluZGV4XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHZhciBtb2RpZnkgPSBmdW5jdGlvbiAoc2NoZW1hLCBpZGVudGl0eSwgbW9kaWZpY2F0aW9ucykge1xyXG4gICAgZW5zdXJlQ29ubmVjdGlvbigpO1xyXG4gICAgY29ubmVjdGlvbi5zZW5kKFBST0RVQ1QsIEdhdGV3YXlUcmFuc3BvcnQuTWVzc2FnZVR5cGUuTU9ESUZZLCBtb2RpZmljYXRpb25zKTtcclxuICB9O1xyXG4gIHZhciBkaXNjb25uZWN0ID0gZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHtcclxuICAgIHZhciBzY2hlbWFIYW5kbGVycyA9IGRhdGFIYW5kbGVyc1tkZXNjcmlwdG9yLnNjaGVtYV07XHJcbiAgICBpZiAodHlwZW9mIHNjaGVtYUhhbmRsZXJzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB2YXIgaWRlbnRpdHlLZXkgPSBpZGVudGl0eVRvU3RyaW5nKGRlc2NyaXB0b3IuaWRlbnRpdHksIHRydWUpO1xyXG4gICAgICB2YXIgaWRlbnRpdHlIYW5kbGVycyA9IHNjaGVtYUhhbmRsZXJzW2lkZW50aXR5S2V5XTtcclxuICAgICAgaWYgKHR5cGVvZiBpZGVudGl0eUhhbmRsZXJzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHZhciBoYW5kbGVyID0gaWRlbnRpdHlIYW5kbGVyc1tkZXNjcmlwdG9yLmluZGV4XTtcclxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICB2YXIgbXNnID0ge1xyXG4gICAgICAgICAgICBzY2hlbWE6IGRlc2NyaXB0b3Iuc2NoZW1hLFxyXG4gICAgICAgICAgICBpZGVudGl0eTogZGVzY3JpcHRvci5pZGVudGl0eSxcclxuICAgICAgICAgICAgaW5zdGFuY2U6IG9wdGlvbnMuaW5zdGFuY2VcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBjb25uZWN0aW9uLnNlbmQoR2F0ZXdheVRyYW5zcG9ydC5NZXNzYWdlVHlwZS5ESVNDT05ORUNULCBtc2cpO1xyXG4gICAgICAgICAgZGVsZXRlIGlkZW50aXR5SGFuZGxlcnNbZGVzY3JpcHRvci5pbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpZGVudGl0eUhhbmRsZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgZGVsZXRlIHNjaGVtYUhhbmRsZXJzW2lkZW50aXR5S2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKE9iamVjdC5rZXlzKHNjaGVtYUhhbmRsZXJzKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBkZWxldGUgZGF0YUhhbmRsZXJzW2Rlc2NyaXB0b3Iuc2NoZW1hXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKE9iamVjdC5rZXlzKGRhdGFIYW5kbGVycykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgKGRhdGFTdWJzY3JpcHRpb24pICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGNvbm5lY3Rpb24ub2ZmKGRhdGFTdWJzY3JpcHRpb24pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBkZWxldGUgc3RhdHVzSGFuZGxlcnNbZGVzY3JpcHRvci5pbnN0YW5jZV07XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoc3RhdHVzSGFuZGxlcnMpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBpZiAodHlwZW9mIHN0YXR1c1N1YnNjcmlwdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb25uZWN0aW9uLm9mZihzdGF0dXNTdWJzY3JpcHRpb24pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICByZXR1cm4ge1xyXG4gICAgY29ubmVjdDogY29ubmVjdCxcclxuICAgIG1vZGlmeTogbW9kaWZ5LFxyXG4gICAgZGlzY29ubmVjdDogZGlzY29ubmVjdFxyXG4gIH07XHJcbn07XHJcblxyXG5HYXRld2F5VHJhbnNwb3J0Lk1lc3NhZ2VUeXBlID0ge1xyXG4gIC8vIHsgc2NoZW1hOiAnQXBwbGljYXRpb25Db25maWd1cmF0aW9uJywgaWRlbnRpdHk6IHt9LCBsaXN0ZW46IHRydWUsIGluc3RhbmNlOiAnJyB9XHJcbiAgQ09OTkVDVDogJ2Nvbm5lY3QnLFxyXG4gIC8vIHsgc2NoZW1hOiAnQXBwbGljYXRpb25Db25maWd1cmF0aW9uJywgaWRlbnRpdHk6IHt9LCBpbnN0YW5jZTogJycgfVxyXG4gIERJU0NPTk5FQ1Q6ICdkaXNjb25uZWN0JyxcclxuICAvLyB7IHNjaGVtYTogJ0FwcGxpY2F0aW9uQ29uZmlndXJhdGlvbicsIGlkZW50aXR5OiB7fSwgdXBkYXRlczogW10sIGluc3RhbmNlOiAnJyB9XHJcbiAgTU9ESUZZOiAnbW9kaWZ5JyxcclxuICAvLyB7IHNjaGVtYTogJ0FwcGxpY2F0aW9uQ29uZmlndXJhdGlvbicsIGlkZW50aXR5OiB7fSwgZXJyb3I6ICcnLCBzbmFwc2hvdDoge2RlZmF1bHRLZXlWYWx1ZTogJycsIGtleXM6IFtdLCBwcm9wczoge319LCB1cGRhdGVzOiBbXSB9XHJcbiAgREFUQTogJ2RhdGEnLFxyXG4gIC8vIHsgc2NoZW1hOiAnQXBwbGljYXRpb25Db25maWd1cmF0aW9uJywgaWRlbnRpdHk6IHt9LCBpbnN0YW5jZTogJycsIHN0YXR1czogJycsIGVycm9yOiAnJyB9XHJcbiAgU1RBVFVTOiAnc3RhdHVzJ1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHYXRld2F5VHJhbnNwb3J0O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG5mdW5jdGlvbiBlc2NhcGVJZGVudGl0eVRleHQodGV4dCkge1xyXG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1tcXFxcXS9nLCAnXFxcXFxcXFwnKS5yZXBsYWNlKC9bOl0vZywgJ1xcXFw6Jyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiB0ZXh0O1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaWRlbnRpdHlUb1N0cmluZyhpZGVudGl0eSwgaW5jbHVkZUtleXMsIHNlcGFyYXRvciwgb3JkZXIpIHtcclxuICBpZiAodHlwZW9mKGlkZW50aXR5KSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJy8nO1xyXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoaWRlbnRpdHkpO1xyXG4gIGlmICh0eXBlb2Yob3JkZXIpID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBrZXlzLnNvcnQob3JkZXIpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBrZXlzLnNvcnQoKTtcclxuICB9XHJcbiAgcmV0dXJuIGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIHJldHVybiBpbmNsdWRlS2V5cyA/IChlc2NhcGVJZGVudGl0eVRleHQoa2V5KSArICc6JyArIGVzY2FwZUlkZW50aXR5VGV4dChpZGVudGl0eVtrZXldKSkgOiBpZGVudGl0eVtrZXldO1xyXG4gIH0pLmpvaW4oc2VwYXJhdG9yKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaWRlbnRpdHlFcXVhbChpZGVudGl0eTEsIGlkZW50aXR5Mikge1xyXG4gIHJldHVybiBpZGVudGl0eVRvU3RyaW5nKGlkZW50aXR5MSwgdHJ1ZSkgPT09IGlkZW50aXR5VG9TdHJpbmcoaWRlbnRpdHkyLCB0cnVlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmxhdHRlbihwcm9wcywgc2VwYXJhdG9yLCBuYW1lKSB7XHJcbiAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8ICcuJztcclxuICB2YXIgcHJlZml4ID0gbmFtZSA/IG5hbWUgKyBzZXBhcmF0b3IgOiAnJztcclxuICB2YXIgdmFsID0ge307XHJcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgaWYgKGtleS5pbmRleE9mKHByZWZpeCkgIT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHBhdGggPSBrZXkuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgpO1xyXG4gICAgdmFyIHRhcmdldCA9IHZhbDtcclxuICAgIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoc2VwYXJhdG9yKTtcclxuICAgIHZhciBpO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICBpZiAoIXRhcmdldFtwYXJ0c1tpXV0pIHtcclxuICAgICAgICB0YXJnZXRbcGFydHNbaV1dID0ge307XHJcbiAgICAgIH1cclxuICAgICAgdGFyZ2V0ID0gdGFyZ2V0W3BhcnRzW2ldXTtcclxuICAgIH1cclxuICAgIHRhcmdldFtwYXJ0c1tpXV0gPSBwcm9wc1trZXldLnZhbHVlO1xyXG4gIH0pO1xyXG4gIHJldHVybiB2YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb3BFcXVhbChsaHMsIHJocykge1xyXG4gIGlmIChsaHMudmFsdWUgIT09IHJocy52YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxocy51bmRlcmx5aW5nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgbGhzVW5kZXJseWluZyA9IGxocy51bmRlcmx5aW5nW2ldO1xyXG4gICAgdmFyIHJoc1VuZGVybHlpbmcgPSByaHMudW5kZXJseWluZ1tpXSB8fCB7fTtcclxuICAgIGlmIChsaHNVbmRlcmx5aW5nLnZhbHVlICE9PSByaHNVbmRlcmx5aW5nLnZhbHVlIHx8ICFpZGVudGl0eUVxdWFsKGxoc1VuZGVybHlpbmcucGFyZW50LCByaHNVbmRlcmx5aW5nLnBhcmVudCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZmxhdHRlbjogZmxhdHRlbixcclxuICBwcm9wRXF1YWw6IHByb3BFcXVhbCxcclxuICBpZGVudGl0eVRvU3RyaW5nOiBpZGVudGl0eVRvU3RyaW5nLFxyXG4gIGlkZW50aXR5RXF1YWw6IGlkZW50aXR5RXF1YWxcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIHByb3BFcXVhbCA9IHJlcXVpcmUoJy4vaGVscGVycycpLnByb3BFcXVhbDtcclxuXHJcbnZhciBVcGRhdGVUeXBlID0ge1xyXG4gIEFkZGVkOiAnQWRkZWQnLFxyXG4gIENoYW5nZWQ6ICdDaGFuZ2VkJyxcclxuICBSZW1vdmVkOiAnUmVtb3ZlZCdcclxufTtcclxuXHJcbnZhciBNb2RlbCA9IGZ1bmN0aW9uIChidXMsIHNlcGFyYXRvcikge1xyXG4gIHRoaXMuYnVzID0gYnVzO1xyXG4gIHRoaXMucm9vdCA9IG5ldyBWaWV3TW9kZWwodGhpcywgJycsIHNlcGFyYXRvciB8fCAnLicpO1xyXG4gIHRoaXMudmlld3MgPSB7fTtcclxufTtcclxuXHJcbnZhciBWaWV3TW9kZWwgPSBmdW5jdGlvbiAobW9kZWwsIHBhdGgsIHNlcGFyYXRvcikge1xyXG4gIHZhciBzZWxmID0gdGhpcztcclxuICBzZWxmLm1vZGVsID0gbW9kZWw7XHJcbiAgc2VsZi5wcm9wcyA9IHt9O1xyXG4gIHNlbGYuc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8IG1vZGVsLnNlcGFyYXRvcjtcclxuICBzZWxmLnBhdGggPSBwYXRoO1xyXG59O1xyXG5cclxuVmlld01vZGVsLnByb3RvdHlwZS5nZXRWaWV3TW9kZWwgPSBmdW5jdGlvbiAobmFtZSwgc2VwYXJhdG9yKSB7XHJcbiAgdmFyIHBhdGggPSB0aGlzLnBhdGggKyBuYW1lICsgKHNlcGFyYXRvciA/IHNlcGFyYXRvciA6ICcuJyk7XHJcbiAgdmFyIG1vZGVsID0gdGhpcy5tb2RlbDtcclxuICBpZiAocGF0aCA9PT0gJycpIHtcclxuICAgIHJldHVybiBtb2RlbC5yb290O1xyXG4gIH1cclxuICBpZiAoIW1vZGVsLnZpZXdzW3BhdGhdKSB7XHJcbiAgICB2YXIgYmVzdFBhcmVudCA9ICcnO1xyXG4gICAgLy8gZmlsbCBzdWJ2aWV3IHJlZmVyZW5jZXMgYW5kIGNob29zZSBiZXN0IHBhcmVudCBwcm9wcyB0byBjb3B5IGZyb20uXHJcbiAgICBPYmplY3Qua2V5cyhtb2RlbC52aWV3cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgIGlmIChwYXRoLmluZGV4T2Yoa2V5KSA9PT0gMCkge1xyXG4gICAgICAgIGlmIChiZXN0UGFyZW50Lmxlbmd0aCA8IGtleS5sZW5ndGgpIHtcclxuICAgICAgICAgIGJlc3RQYXJlbnQgPSBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGtlZXAgc3Vidmlld3Mgc29ydGVkLlxyXG4gICAgICAgIHZhciBzdWJ2aWV3cyA9IG1vZGVsLnZpZXdzW2tleV0uc3Vidmlld3M7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJ2aWV3cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgaWYgKHN1YnZpZXdzW2ldLmluZGV4T2YocGF0aCkpIHtcclxuICAgICAgICAgICAgc3Vidmlld3Muc3BsaWNlKGksIDAsIHBhdGgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1YnZpZXdzLnB1c2gocGF0aCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdmFyIHZpZXdNb2RlbCA9IG5ldyBWaWV3TW9kZWwobW9kZWwsIHBhdGgsIHNlcGFyYXRvcik7XHJcblxyXG4gICAgdmFyIHBhcmVudFByb3BzID0gYmVzdFBhcmVudCA9PT0gJycgPyBtb2RlbC5yb290LnByb3BzIDogbW9kZWwudmlld3NbYmVzdFBhcmVudF0ubW9kZWwucHJvcHM7XHJcbiAgICBPYmplY3Qua2V5cyhwYXJlbnRQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgIHZhciBwcm9wID0gcGFyZW50UHJvcHNba2V5XTtcclxuICAgICAgaWYgKHByb3AubmFtZS5pbmRleE9mKHBhdGgpID09PSAwKSB7XHJcbiAgICAgICAgdmFyIG5hbWUgPSBwcm9wLm5hbWUuc3Vic3RyaW5nKHBhdGgubGVuZ3RoKTtcclxuICAgICAgICB2aWV3TW9kZWwucHJvcHNbbmFtZV0gPSBwcm9wO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBtb2RlbC52aWV3c1twYXRoXSA9IHtcclxuICAgICAgc3Vidmlld3M6IFtdLFxyXG4gICAgICBtb2RlbDogdmlld01vZGVsXHJcbiAgICB9O1xyXG4gIH1cclxuICByZXR1cm4gbW9kZWwudmlld3NbcGF0aF0ubW9kZWw7XHJcbn07XHJcblxyXG5WaWV3TW9kZWwucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBzY29wZSkge1xyXG4gIHJldHVybiB0aGlzLm1vZGVsLm9uKHRoaXMucGF0aCwgY2FsbGJhY2ssIHNjb3BlKTtcclxufTtcclxuXHJcbk1vZGVsLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChwYXRoLCBjYWxsYmFjaywgc2NvcGUpIHtcclxuICB2YXIgdHlwZSA9IHVwZGF0ZVR5cGVGb3JQYXRoKHBhdGgpO1xyXG4gIHJldHVybiB0aGlzLmJ1cy5vbih0eXBlLCBmYWxzZSwgY2FsbGJhY2ssIHNjb3BlKTtcclxufTtcclxuXHJcbk1vZGVsLnByb3RvdHlwZS5hcHBseVNuYXBzaG90ID0gZnVuY3Rpb24gKHNuYXBzaG90LCBpc1NuYXBzaG90KSB7XHJcbiAgaXNTbmFwc2hvdCA9IHR5cGVvZiBpc1NuYXBzaG90ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBpc1NuYXBzaG90O1xyXG5cclxuICB2YXIgdXBkYXRlcyA9IHRvVXBkYXRlcyhpc1NuYXBzaG90ID8ge30gOiB0aGlzLnJvb3QucHJvcHMsIHNuYXBzaG90LnByb3BzKTtcclxuICBhcHBseVVwZGF0ZXNBbmRFbWl0RXZlbnRzKHRoaXMsIHVwZGF0ZXMsIGlzU25hcHNob3QpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlVHlwZUZvclBhdGgocGF0aCkge1xyXG4gIHZhciB0eXBlID0gJ3VwZGF0ZSc7XHJcbiAgaWYgKHBhdGggIT09ICcnKSB7XHJcbiAgICB0eXBlID0gdHlwZSArICd8JyArIHBhdGg7XHJcbiAgfVxyXG4gIHJldHVybiB0eXBlO1xyXG59XHJcblxyXG4vLyBzaGFsbG93IGNvcHlcclxuZnVuY3Rpb24gY2xvbmVVcGRhdGVGb3JQYXRoKHVwZGF0ZSwgcGF0aCkge1xyXG4gIHZhciBjbG9uZSA9IHtcclxuICAgIHR5cGU6IHVwZGF0ZS50eXBlLFxyXG4gICAgbmFtZTogdXBkYXRlLm5hbWUuc3Vic3RyaW5nKHBhdGgubGVuZ3RoKVxyXG4gIH07XHJcblxyXG4gIHN3aXRjaCAodXBkYXRlLnR5cGUpIHtcclxuICAgIGNhc2UgVXBkYXRlVHlwZS5DaGFuZ2VkOlxyXG4gICAgICBjbG9uZS5vbGRWYWx1ZSA9IHVwZGF0ZS5vbGRWYWx1ZTtcclxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgY2FzZSBVcGRhdGVUeXBlLkFkZGVkOlxyXG4gICAgICBjbG9uZS52YWx1ZSA9IHVwZGF0ZS52YWx1ZTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFVwZGF0ZVR5cGUuUmVtb3ZlZDpcclxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG4gIHJldHVybiBjbG9uZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXBwbHlVcGRhdGVzQW5kRW1pdEV2ZW50cyhtb2RlbCwgdXBkYXRlcywgaXNTbmFwc2hvdCkge1xyXG4gIHZhciB2aWV3cyA9IE9iamVjdC5rZXlzKG1vZGVsLnZpZXdzKTtcclxuICB2YXIgZWZmZWN0aXZlVXBkYXRlcyA9IHtcclxuICAgICcnOiB1cGRhdGVzXHJcbiAgfTtcclxuICBpZiAodmlld3MubGVuZ3RoID4gMCkge1xyXG4gICAgLy8gc29ydCB2aWV3cyBmb3IgcHJlZml4IHNlYXJjaFxyXG4gICAgaWYgKHZpZXdzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgdmlld3Muc29ydCgpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3cy5sZW5ndGg7IHZpZXdzKyspIHtcclxuICAgICAgICBpZiAodXBkYXRlLm5hbWUuaW5kZXhPZih2aWV3c1tpXSkgPT09IDApIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB2YXIgdmlldyA9IHZpZXdzW2ldO1xyXG4gICAgICBpZiAodHlwZW9mIHZpZXcgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGVmZmVjdGl2ZVVwZGF0ZXNbdmlld10ucHVzaChjbG9uZVVwZGF0ZUZvclBhdGgodXBkYXRlLCB2aWV3KSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhciBhZmZlY3RlZFBhdGhzID0gT2JqZWN0LmtleXMoZWZmZWN0aXZlVXBkYXRlcyk7XHJcbiAgaWYgKGFmZmVjdGVkUGF0aHMubGVuZ3RoID4gMSkge1xyXG4gICAgYWZmZWN0ZWRQYXRocy5zb3J0KCk7XHJcbiAgfVxyXG4gIGFmZmVjdGVkUGF0aHMuZm9yRWFjaChmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgdmFyIHZpZXdNb2RlbCA9IHBhdGggPT09ICcnID8gbW9kZWwucm9vdCA6IG1vZGVsLnZpZXdzW3BhdGhdLm1vZGVsO1xyXG4gICAgaWYgKGlzU25hcHNob3QpIHtcclxuICAgICAgdmlld01vZGVsLnByb3BzID0ge307XHJcbiAgICB9XHJcbiAgICBlZmZlY3RpdmVVcGRhdGVzW3BhdGhdLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xyXG4gICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBVcGRhdGVUeXBlLkFkZGVkOlxyXG4gICAgICAgICAgLy8gZmFsbC10aHJvdWdoXHJcbiAgICAgICAgY2FzZSBVcGRhdGVUeXBlLkNoYW5nZWQ6XHJcbiAgICAgICAgICAvLyBjaGFuZ2VkIHdvcmtzIGV2ZW4gZm9yIG1pc3NpbmcgcHJvcGVydGllc1xyXG4gICAgICAgICAgdmlld01vZGVsLnByb3BzW3VwZGF0ZS5uYW1lXSA9IHVwZGF0ZS52YWx1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgVXBkYXRlVHlwZS5SZW1vdmVkOlxyXG4gICAgICAgICAgZGVsZXRlIHZpZXdNb2RlbC5wcm9wc1t1cGRhdGUubmFtZV07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgLy8gZG8gbm90aGluZ1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIGFmZmVjdGVkUGF0aHMuZm9yRWFjaChmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgdmFyIHR5cGUgPSB1cGRhdGVUeXBlRm9yUGF0aChwYXRoKTtcclxuICAgIG1vZGVsLmJ1cy5lbWl0KHR5cGUsIGlzU25hcHNob3QsIHVwZGF0ZXMpO1xyXG4gIH0pO1xyXG59XHJcbk1vZGVsLnByb3RvdHlwZS5hcHBseVVwZGF0ZXMgPSBmdW5jdGlvbiAodXBkYXRlcykge1xyXG4gIGFwcGx5VXBkYXRlc0FuZEVtaXRFdmVudHModGhpcywgdXBkYXRlcywgZmFsc2UpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gdG9VcGRhdGVzKGltYWdlLCBzbmFwc2hvdCkge1xyXG4gIHNuYXBzaG90ID0gc25hcHNob3QgfHwge307XHJcbiAgdmFyIHVwZGF0ZXMgPSBbXTtcclxuICB2YXIgdG9EZWxldGUgPSBPYmplY3Qua2V5cyhpbWFnZSk7XHJcbiAgT2JqZWN0LmtleXMoc25hcHNob3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgdmFyIHVwZGF0ZSA9IHt9O1xyXG4gICAgaWYgKHR5cGVvZiBpbWFnZVtrZXldID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB1cGRhdGUudHlwZSA9IFVwZGF0ZVR5cGUuQWRkZWQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXByb3BFcXVhbChpbWFnZVtrZXldLCBzbmFwc2hvdFtrZXldKSkge1xyXG4gICAgICAgIHVwZGF0ZS50eXBlID0gVXBkYXRlVHlwZS5DaGFuZ2VkO1xyXG4gICAgICAgIHVwZGF0ZS5vbGRWYWx1ZSA9IGltYWdlW2tleV07XHJcbiAgICAgIH1cclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b0RlbGV0ZS5sZW5ndGg7IHRvRGVsZXRlKyspIHtcclxuICAgICAgICBpZiAodG9EZWxldGVbaV0gPT09IGtleSkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2YgdG9EZWxldGVbaV0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgdG9EZWxldGUuc3BsaWNlKGksIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodXBkYXRlLnR5cGUpIHtcclxuICAgICAgdXBkYXRlLnZhbHVlID0gc25hcHNob3Rba2V5XTtcclxuICAgICAgdXBkYXRlLm5hbWUgPSBrZXk7XHJcbiAgICAgIHVwZGF0ZXMucHVzaCh1cGRhdGUpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHRvRGVsZXRlLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgdXBkYXRlcy5wdXNoKHtcclxuICAgICAgdHlwZTogVXBkYXRlVHlwZS5SZW1vdmVkLFxyXG4gICAgICBuYW1lOiBrZXlcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHJldHVybiB1cGRhdGVzO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1vZGVsO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBmbGF0dGVuID0gcmVxdWlyZSgnLi9oZWxwZXJzJykuZmxhdHRlbjtcclxuXHJcbnZhciBQcm9wcyA9IGZ1bmN0aW9uIChtb2RlbCkge1xyXG4gIHZhciBwcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgIHJldHVybiBtb2RlbC5wcm9wc1tuYW1lXTtcclxuICB9O1xyXG4gIHZhciB2YWwgPSBmdW5jdGlvbiB2YWwobmFtZSkge1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbW9kZWwucHJvcHNbbmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHJldHVybiBmbGF0dGVuKG1vZGVsLnByb3BzLCBtb2RlbC5zZXBhcmF0b3IsIG5hbWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1vZGVsLnByb3BzW25hbWVdLnZhbHVlO1xyXG4gIH07XHJcblxyXG4gIHZhciBwcm9wcyA9IGZ1bmN0aW9uIChzZWN0aW9uLCBzZXBhcmF0b3IpIHtcclxuICAgIHNlY3Rpb24gPSBzZWN0aW9uIHx8ICcnO1xyXG4gICAgaWYgKHNlY3Rpb24gPT09ICcnKSB7XHJcbiAgICAgIC8vIFRPRE86IHN1cHBvcnQgc2VwYXJhdG9yIGNoYW5nZSBmb3IgJycgKHNhbWUpIHNlY3Rpb24uXHJcbiAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG4gICAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8IG1vZGVsLnNlcGFyYXRvcjtcclxuICAgIHJldHVybiBuZXcgUHJvcHMobW9kZWwuZ2V0Vmlld01vZGVsKHNlY3Rpb24sIHNlcGFyYXRvcikpO1xyXG4gIH07XHJcbiAgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNjb3BlKSB7XHJcbiAgICBPYmplY3Qua2V5cyhtb2RlbC5wcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgIGNhbGxiYWNrLmNhbGwoc2NvcGUsIG1vZGVsLnByb3BzW2tleV0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuICB2YXIgb25VcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNjb3BlKSB7XHJcbiAgICBtb2RlbC5vbihjYWxsYmFjaywgc2NvcGUpO1xyXG4gIH07XHJcbiAgdmFyIHNlbGYgPSB7XHJcbiAgICBwcm9wOiBwcm9wLFxyXG4gICAgdmFsOiB2YWwsXHJcbiAgICBwcm9wczogcHJvcHMsXHJcbiAgICBmb3JFYWNoOiBmb3JFYWNoLFxyXG4gICAgb25VcGRhdGU6IG9uVXBkYXRlXHJcbiAgfTtcclxuICByZXR1cm4gc2VsZjtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUHJvcHM7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciB1dWlkID0gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDA7XHJcbiAgICB2YXIgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCk7XHJcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XHJcbiAgfSk7XHJcbn07XHJcbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcclxufTtcclxuXHJcbnZhciBpc1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xyXG59O1xyXG5cclxudmFyIGxldmVscyA9IHtcclxuICBkZWJ1ZzogJ2RlYnVnJyxcclxuICBpbmZvOiAnaW5mbycsXHJcbiAgd2FybjogJ3dhcm4nLFxyXG4gIGVycm9yOiAnZXJyb3InXHJcbn07XHJcbnZhciBsb2cgPSBmdW5jdGlvbiAobGV2ZWwsIGFyZ3MpIHtcclxuICBpZiAoY29uc29sZSkge1xyXG4gICAgdmFyIGxvZ2dlciA9IGNvbnNvbGVbbGV2ZWxdO1xyXG4gICAgaWYgKGlzRnVuY3Rpb24obG9nZ2VyKSkge1xyXG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgW10uc3BsaWNlLmNhbGwoYXJncywgMCwgMCwgbm93LmdldEhvdXJzKCkgKyAnOicgKyBub3cuZ2V0TWludXRlcygpICsgJzonICsgbm93LmdldFNlY29uZHMoKSk7XHJcbiAgICAgIGxvZ2dlci5hcHBseShjb25zb2xlLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcbnZhciBpbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gIGxvZyhsZXZlbHMuaW5mbywgYXJndW1lbnRzKTtcclxufTtcclxuXHJcbnZhciB3YXJuID0gZnVuY3Rpb24gKCkge1xyXG4gIGxvZyhsZXZlbHMud2FybiwgYXJndW1lbnRzKTtcclxufTtcclxuXHJcbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcclxuICBsb2cobGV2ZWxzLmRlYnVnLCBhcmd1bWVudHMpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgdXVpZDogdXVpZCxcclxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxyXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcclxuICBsb2c6IGxvZyxcclxuICB3YXJuOiB3YXJuLFxyXG4gIGluZm86IGluZm8sXHJcbiAgZGVidWc6IGRlYnVnXHJcbn07XHJcbiIsInZhciBjb25uZWN0aW9uID0gZnVuY3Rpb24gKHNldHRpbmdzLCBjdXN0b21fY29ubmVjdGlvbil7XHJcblx0c2V0dGluZ3MgPSBzZXR0aW5nc3x8e307XHJcblx0Ly9UaGUgbWVzc2FnZSBoYW5kbGVycyB0aGF0IGhhdmUgdG8gYmUgZXhlY3V0ZWQgZm9yIGVhY2ggcmVjZWl2ZWQgbWVzc2FnZVxyXG5cdHZhciBtZXNzYWdlX2hhbmRsZXJzID0ge307XHJcblx0XHJcblx0dmFyIGlkcyA9IDA7XHJcblx0XHJcblx0dmFyIGNvbm5lY3Rpb24gPSB7XHJcblx0XHQvL0V4ZWN1dGVzIGFwcHJvcHJpYXRlIG1lc3NhZ2UgaGFuZGxlcnMgZm9yIHRoZSBtZXNzYWdlIHR5cGUuXHJcblx0XHRfaGFuZGxlX21lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlKXtcclxuXHRcdFx0IC8vUmV0cmlldmUgaGFuZGxlcnMgZm9yIHRoZSBtZXNzYWdlIHR5cGVcclxuXHRcdFx0IHZhciBoYW5kbGVycyA9IG1lc3NhZ2VfaGFuZGxlcnNbbWVzc2FnZS50eXBlXTtcclxuXHRcdFx0IGlmKGhhbmRsZXJzICE9PXVuZGVmaW5lZCl7XHJcblx0XHRcdFx0IC8vRXhlY3V0ZSB0aGVtXHJcblx0XHRcdFx0IE9iamVjdC5rZXlzKGhhbmRsZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXJfaWQpe1xyXG5cdFx0XHRcdFx0dmFyIGhhbmRsZXIgPSBoYW5kbGVyc1toYW5kbGVyX2lkXTtcclxuXHRcdFx0XHRcdGlmKGhhbmRsZXIhPT11bmRlZmluZWQpe2hhbmRsZXIobWVzc2FnZS5tZXNzYWdlKTt9XHJcblx0XHRcdFx0IH0pO1xyXG5cdFx0XHQgfVxyXG5cdFx0fSxcclxuXHRcdC8vQXR0YWNoZXMgYSBoYW5kbGVyXHJcblx0XHRvbjogZnVuY3Rpb24ocHJvZHVjdCwgdHlwZSwgbWVzc2FnZV9oYW5kbGVyKXtcclxuXHRcdCAgIGlmKG1lc3NhZ2VfaGFuZGxlcnNbdHlwZV0gPT09IHVuZGVmaW5lZCl7bWVzc2FnZV9oYW5kbGVyc1t0eXBlXSA9IHt9O31cclxuXHRcdCAgIHZhciBpZCA9IGlkcysrO1xyXG5cdFx0ICAgbWVzc2FnZV9oYW5kbGVyc1t0eXBlXVtpZF09IG1lc3NhZ2VfaGFuZGxlcjtcclxuXHRcdCAgIHJldHVybiB7dHlwZTp0eXBlLCBpZDppZH07XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvL1JlbW92ZSBhIGhhbmRsZXIgXHJcblx0XHRvZmY6IGZ1bmN0aW9uKGluZm8pe1xyXG5cdFx0XHRkZWxldGUgbWVzc2FnZV9oYW5kbGVyc1tpbmZvLnR5cGVdW2luZm8uaWRdO1xyXG5cdFx0fSxcclxuXHRcdC8vRHVtbXkgZnVuY3Rpb25zIGZvciB0cmFuc3BvcnRzIHRoYXQgYXJlIGFsd2F5cyBjb25uZWN0ZWRcclxuXHRcdGNvbm5lY3RlZDpmdW5jdGlvbihhKXthKCk7fSxcclxuXHRcdGRpc2Nvbm5lY3RlZDpmdW5jdGlvbigpe30sXHJcblx0XHR2ZXJzaW9uOiBcIjEuMy4xXCJcclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBjcmVhdGVfY3VzdG9tX2Nvbm5lY3Rpb24oY29ubmVjdGlvbil7XHJcblx0XHRjb25uZWN0aW9uLnNlbmQgPSBmdW5jdGlvbihwcm9kdWN0LCB0eXBlLCBtZXNzYWdlKXtcclxuXHRcdFx0Y3VzdG9tX2Nvbm5lY3Rpb24ucHVibGlzaCh7dHlwZTp0eXBlLCBtZXNzYWdlOm1lc3NhZ2V9KTtcclxuXHRcdH07XHJcblx0XHRjdXN0b21fY29ubmVjdGlvbi5zdWJzY3JpYmUoY29ubmVjdGlvbi5faGFuZGxlX21lc3NhZ2UpO1xyXG5cdFx0cmV0dXJuIGNvbm5lY3Rpb247XHJcblx0fVxyXG5cclxuXHRpZihzZXR0aW5ncy53ZWJzb2NrZXRfdXJsIT09dW5kZWZpbmVkKXtcclxuXHRcdHJldHVybiByZXF1aXJlKFwiLi93c1wiKShjb25uZWN0aW9uLCBzZXR0aW5ncyk7XHJcbiAgfWVsc2UgaWYoc2V0dGluZ3MuaHR0cF91cmwgIT09IHVuZGVmaW5lZCl7XHJcbiAgICByZXR1cm4gcmVxdWlyZShcIi4vaHR0cFwiKShjb25uZWN0aW9uLCBzZXR0aW5ncyk7XHJcbiAgfWVsc2UgaWYoZ2xvYmFsLmZpbiAhPT11bmRlZmluZWQpe1xyXG5cdFx0cmV0dXJuIHJlcXVpcmUoXCIuL2ZpblwiKShjb25uZWN0aW9uLCBzZXR0aW5ncyk7XHJcblx0fWVsc2UgaWYoY3VzdG9tX2Nvbm5lY3Rpb24hPT11bmRlZmluZWQpe1xyXG5cdFx0cmV0dXJuIGNyZWF0ZV9jdXN0b21fY29ubmVjdGlvbihjb25uZWN0aW9uLCBzZXR0aW5ncyk7XHJcblx0Ly9Db25uZWN0IHZpYSBIVE1MIENvbnRhaW5lciBmYWNhZGVcclxuXHR9ZWxzZSBpZiAoZ2xvYmFsLmh0bWxDb250YWluZXIhPT11bmRlZmluZWQpe1xyXG5cdFx0cmV0dXJuIHJlcXVpcmUoXCIuL2NvbnRcIikoY29ubmVjdGlvbiwgc2V0dGluZ3MpO1xyXG5cdH1lbHNlIHtcclxuXHRcdHRocm93IFwiTm8gY29ubmVjdGlvbi4gTWFrZSBzdXJlIHlvdSBhcmUgcnVubmluZyB0aGUgYXBwbGljYXRpb24gZnJvbSBPcGVuRmluLCBvciBUaWNrNDIgSFRNTCBDb250YWluZXIgb3IgZmlsbCB0aGUgJ2Nvbm5lY3Rpb24ud2Vic29ja2V0X3VybCcgcHJvcGVydHkuXCI7XHJcblx0fVxyXG59O1xyXG5cclxuaWYoZ2xvYmFsLnRpY2s0Mj09PXVuZGVmaW5lZCl7Z2xvYmFsLnRpY2s0MiA9IHt9O31cclxuZ2xvYmFsLnRpY2s0Mi5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gY29ubmVjdGlvbjtcclxuXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29ubmVjdGlvbil7XHJcblx0dmFyIGNvbm5lY3Rpb25faWQgPSAgTWF0aC5mbG9vcigxZTEwICogTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoKTtcclxuXHQvL1JvdXRlIG1lc3NhZ2VzIHRvIGZhY2FkZShzKVxyXG5cdGNvbm5lY3Rpb24uc2VuZCA9IGZ1bmN0aW9uIChwcm9kdWN0LCB0eXBlLCBtZXNzYWdlKXtcclxuXHRcdGlmKHByb2R1Y3QgPT09XCJtZXRyaWNzXCIpe1xyXG5cdFx0XHRnbG9iYWwuaHRtbENvbnRhaW5lci5tZXRyaWNzRmFjYWRlLnNlbmQodHlwZSwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xyXG5cdFx0fWVsc2UgaWYocHJvZHVjdCA9PT1cImxvZ1wiKXtcclxuXHRcdFx0Z2xvYmFsLmh0bWxDb250YWluZXIubG9nZ2luZ0ZhY2FkZS5zZW5kKHR5cGUsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcclxuXHRcdH1lbHNlIGlmIChwcm9kdWN0ID09IFwiYXBwY29uZmlnXCIpIHtcclxuICAgICAgICAgICAgZ2xvYmFsLmh0bWxDb250YWluZXIuYXBwQ29uZmlnRmFjYWRlLnNlbmQodHlwZSwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZSksIGNvbm5lY3Rpb25faWQpO1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG5cdGlmIChnbG9iYWwuaHRtbENvbnRhaW5lci5hcHBDb25maWdGYWNhZGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGdsb2JhbC5odG1sQ29udGFpbmVyLmFwcENvbmZpZ0ZhY2FkZS5pbml0Q29ubmVjdGlvbihcclxuICAgICAgICAgICAgY29ubmVjdGlvbl9pZCxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKG1lc3NhZ2VBc0pzb24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLl9oYW5kbGVfbWVzc2FnZShKU09OLnBhcnNlKG1lc3NhZ2VBc0pzb24pKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblx0Z2xvYmFsLmNvbm5lY3Rpb25zID0gZ2xvYmFsLmNvbm5lY3Rpb25zfHx7fTsgXHJcblx0Ly9FeHBvc2UgZnVuY3Rpb24gZm9yIHNlbmRpbmcgbWVzc2FnZXM6XHJcblx0Z2xvYmFsLmNvbm5lY3Rpb25zWydjb25uZWN0aW9uJytjb25uZWN0aW9uX2lkXSA9IGNvbm5lY3Rpb24uX2hhbmRsZV9tZXNzYWdlO1xyXG5cclxuXHRyZXR1cm4gY29ubmVjdGlvbjtcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb25uZWN0aW9uLCBzZXR0aW5ncyl7XHJcblx0aWYoZ2xvYmFsLmNvbnNvbGUhPT11bmRlZmluZWQmJiBzZXR0aW5ncy5kZWJ1Zz09PXRydWUpe1xyXG5cdFx0Y29uc29sZS5sb2coXCJBdHRlbXBpbmcgdG8gY29ubmVjdCB0byBHYXRld2F5IHZpYSBPcGVuRmluIEludGVyIEFwcGxpY2F0aW9uIEJ1cy5cIik7XHJcblx0fVxyXG5cclxuXHQvL0EgZnVuY3Rpb24gZm9yIHNlbmRpbmcgYSBtZXNzYWdlIFxyXG5cdGNvbm5lY3Rpb24uc2VuZCA9IGZ1bmN0aW9uKHByb2R1Y3QsIHR5cGUsIG1lc3NhZ2Upe1xyXG5cdFx0ZmluLmRlc2t0b3AuSW50ZXJBcHBsaWNhdGlvbkJ1cy5wdWJsaXNoKFwiQUdNXCIsIHt0eXBlOnR5cGUsIG1lc3NhZ2U6bWVzc2FnZX0pO1xyXG5cdH07XHJcblx0Ly9BIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgbWVzc2FnZXNcclxuXHRmaW4uZGVza3RvcC5JbnRlckFwcGxpY2F0aW9uQnVzLnN1YnNjcmliZSgnKicsJ0FHTScsIGNvbm5lY3Rpb24uX2hhbmRsZV9tZXNzYWdlKTtcclxuXHRpZihnbG9iYWwuY29uc29sZSE9PXVuZGVmaW5lZCYmIHNldHRpbmdzLmRlYnVnPT09dHJ1ZSl7XHJcblx0XHRjb25zb2xlLmxvZyhcIkNvbm5lY3RlZCB0byBPcGVuRmluIHRyYW5zcG9ydC5cIik7XHJcblx0fVxyXG5cdFxyXG5cdHJldHVybiBjb25uZWN0aW9uO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb25uZWN0aW9uLCBzZXR0aW5ncykge1xyXG4gIHZhciB1cmwgPSBzZXR0aW5ncy5odHRwX3VybDtcclxuICAvLyBwb2xsaW5nIGludGVydmFsIGluIG1zLCBkZWZhdWx0IGlzIDEgc2Vjb25kXHJcbiAgdmFyIGludGVydmFsID0gc2V0dGluZ3MuaHR0cF9pbnRlcnZhbF9tcztcclxuICBpZiAoIWludGVydmFsKSBpbnRlcnZhbCA9IDEwMDA7XHJcblxyXG4gIGZ1bmN0aW9uIGxvZ19kZWJ1ZyhtZXNzYWdlKSB7XHJcbiAgICBpZiAoZ2xvYmFsLmNvbnNvbGUgIT09IHVuZGVmaW5lZCAmJiAoc2V0dGluZ3MuZGVidWcgPT09IHRydWUgfHwgc2V0dGluZ3MudHJhY2UgPT09IHRydWUpKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbG9nX3RyYWNlKG1lc3NhZ2UpIHtcclxuICAgIGlmIChnbG9iYWwuY29uc29sZSAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLnRyYWNlID09PSB0cnVlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9nX2RlYnVnKFwiQXR0ZW1waW5nIHRvIGNvbm5lY3QgdG8gR2F0ZXdheSB2aWEgSFRUUCB3aXRoIHVybCAnXCIgKyB1cmwgKyBcIicgYW5kIHBvbGxpbmcgaW50ZXJ2YWwgXCIgKyBpbnRlcnZhbCArIFwiIG1zXCIpO1xyXG5cclxuICBwb2xsKHVybCwgaW50ZXJ2YWwsIDAsIGZ1bmN0aW9uIChpdGVtcykge1xyXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGl0ZW1zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICBjb25uZWN0aW9uLl9oYW5kbGVfbWVzc2FnZShpdGVtc1tpbmRleF0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBjb25uZWN0aW9uLnNlbmQgPSBmdW5jdGlvbiAocHJvZHVjdCwgdHlwZSwgbWVzc2FnZSwgaWQpIHtcclxuICAgIHZhciBtc2cgPSBKU09OLnN0cmluZ2lmeSh7IHR5cGU6IHR5cGUsIG1lc3NhZ2U6IG1lc3NhZ2UsIGlkOiBpZCB9KTtcclxuICAgIGh0dHBfcG9zdCh1cmwsIG1zZyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUG9sbHMgZGF0YSBmcm9tIGEgZ2l2ZW4gdXJsIG9uIHNvbWUgaW50ZXJ2YWxcclxuICAgKiBAcGFyYW0gdXJsICAgICAgIEJhc2Ugc2VydmVyIHVybC4gQSBzZXF1ZW5jZSB1cmwgcGFyYW0gbWF5IGJlIGFkZGVkIGJhc2VkIG9uIHRoZSBzZXEgcGFyYW1cclxuICAgKiBAcGFyYW0gaW50ZXJ2YWwgIEludGVydmFsIChpbiBtcykgYmV0d2VlbiBwb2xsaW5nIHJlcXVlc3R0c1xyXG4gICAqIEBwYXJhbSBzZXEgICAgICAgTmV4dCBzZXF1ZW5jZSBudW1iZXIgd2Ugc2hvdWxkIGFzayBmb3IgKGlmIDAgdGhlIHNlcnZlciB3aWxsIHJldHVybiB0aGUgbGFzdCBrbm93biBtZXNzYWdlKVxyXG4gICAqIEBwYXJhbSBvbmRhdGEgICAgRGF0YSBjYWxsYmFjayAgICBcclxuICAgKi9cclxuICBmdW5jdGlvbiBwb2xsKHVybCwgaW50ZXJ2YWwsIHNlcSwgb25kYXRhKSB7XHJcbiAgICAvLyBjb25zdHJ1Y3QgdGhlIGdldCBVcmwgLSBpZiBzZXEgIT0gMCBhZGQgYXMgdXJsIHBhcmFtIHRvIGdldCBcclxuICAgIC8vIG9ubHkgbWVzc2FnZXMgYWZ0ZXIgdGhpcyBzZXF1ZW5jZVxyXG4gICAgdmFyIGdldFVybCA9IHVybDtcclxuXHJcbiAgICBpZiAoc2VxICE9PSAwKSB7XHJcbiAgICAgIGdldFVybCA9IHVybCArIFwiP3NlcXVlbmNlPVwiICsgc2VxICsgXCImbm8tY2FjaGU9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIH0gICAgXHJcbiAgICAgICAgXHJcbiAgICAvLyBjcmVhdGUgYSByZXF1ZXN0ICAgIFxyXG4gICAgdmFyIHhtbGh0dHAgPSBjcmVhdGVDT1JTUmVxdWVzdChcIkdFVFwiLCBnZXRVcmwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHNlcSA9PT0gMCl7XHJcbiAgICAgICAgbG9nX2RlYnVnKFwiQ29ubmVjdGVkIHRvIEdhdGV3YXkgb24gXCIgKyB1cmwpO1xyXG4gICAgICB9XHJcbiAgICAgIGxvZ190cmFjZShcIlJlc3BvbnNlIGZyb20gJ1wiICsgZ2V0VXJsICsgXCInIGlzIFwiICsgeG1saHR0cC5yZXNwb25zZVRleHQpO1xyXG4gICAgICB2YXIgbWVzc2FnZSA9IEpTT04ucGFyc2UoeG1saHR0cC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAvLyB0aGUgc2VydmVyIHJldHVybnMgdGhlIG51bWJlciBvZiB0aGUgbmV4dCBzZXF1ZW5jZSB0aGF0IHdlIG11c3QgcXVlcnkgZm9yXHJcbiAgICAgIHZhciBuZXh0U2VxID0gbWVzc2FnZS5uZXh0U2VxdWVuY2U7XHJcbiAgICAgIC8vIGNhbGwgdXNlciBjYWxsYmFja2UgICAgXHJcbiAgICAgIG9uZGF0YShtZXNzYWdlLmRhdGEpO1xyXG4gICAgICAvLyByZS1zY2hlZHVsZVxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwb2xsKHVybCwgaW50ZXJ2YWwsIG5leHRTZXEsIG9uZGF0YSk7XHJcbiAgICAgIH0sIGludGVydmFsKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHhtbGh0dHAub25lcnJvciA9IGZ1bmN0aW9uIChldikge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkVycm9yIHBvbGxpbmcgZGF0YSBmcm9tIGh0dHAgc2VydmVyICdcIiArIGdldFVybCArIFwiJyAtIFwiICsgZXYpO1xyXG4gICAgICAvLyByZS1zY2hlZHVsZVxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwb2xsKHVybCwgaW50ZXJ2YWwsIHNlcSwgb25kYXRhKTtcclxuICAgICAgfSwgaW50ZXJ2YWwpO1xyXG4gICAgfTtcclxuXHJcbiAgICBsb2dfdHJhY2UoXCJTZW5kaW5nIEdFVCB0byAnXCIgKyBnZXRVcmwgKyBcIidcIik7XHJcbiAgICB4bWxodHRwLnNlbmQoKTtcclxuICB9XHJcblxyXG4gIC8qKiBcclxuICAgKiBQT1NUcyBhIG1lc3NhZ2UgdG8gYSBnaXZlbiB1cmwgXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gaHR0cF9wb3N0KHVybCwgbWVzc2FnZSkge1xyXG4gICAgLy8gY3JlYXRlIGEgcmVxdWVzdCAgICBcclxuICAgIHZhciB4bWxodHRwID0gY3JlYXRlQ09SU1JlcXVlc3QoXCJQT1NUXCIsIHVybCk7XHJcbiAgICBsb2dfdHJhY2UoXCJTZW5kaW5nIFBPU1QgdG8gJ1wiICsgdXJsICsgXCInIDogXCIgKyBtZXNzYWdlKTtcclxuICAgIHhtbGh0dHAuc2VuZChtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIC8qKiBcclxuICAgKiBDcmVhdGVzIENPUlMgcmVxdWVzdCAoY3Jvc3MgZG9tYWluIHJlcXVlc3RzKSBmb3IgZGlmZmVyZW50IGJyb3dzZXJzIC0gWE1MSHR0cFJlcXVlc3Qgd2l0aENyZWRlbnRpYWxzXHJcbiAgICogZm9yIENocm9tZSBhbmQgRkYgYW5kIFhEb21haW5SZXF1ZXN0IGZvciBJRVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNyZWF0ZUNPUlNSZXF1ZXN0KG1ldGhvZCwgdXJsLCByZXN1bHRfY2FsbGJhY2spIHtcclxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsgICAgXHJcbiAgICBcclxuICAgIGlmIChcIndpdGhDcmVkZW50aWFsc1wiIGluIHhocikge1xyXG4gICAgICAvLyBDaGVjayBpZiB0aGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0IGhhcyBhIFwid2l0aENyZWRlbnRpYWxzXCIgcHJvcGVydHkuXHJcbiAgICAgIC8vIFwid2l0aENyZWRlbnRpYWxzXCIgb25seSBleGlzdHMgb24gWE1MSFRUUFJlcXVlc3QyIG9iamVjdHMuXHJcbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcclxuICAgICAgaWYgKHR5cGVvZiByZXN1bHRfY2FsbGJhY2sgIT09IFwidW5kZWZpbmVkXCIpe1xyXG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiB4aHIuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICByZXN1bHRfY2FsbGJhY2soKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXHJcbiAgICAgIC8vIFhEb21haW5SZXF1ZXN0IG9ubHkgZXhpc3RzIGluIElFLCBhbmQgaXMgSUUncyB3YXkgb2YgbWFraW5nIENPUlMgcmVxdWVzdHMuXHJcbiAgICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xyXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XHJcbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0X2NhbGxiYWNrICE9PSBcInVuZGVmaW5lZFwiKXtcclxuICAgICAgICB4aHIub25sb2FkID0gcmVzdWx0X2NhbGxiYWNrO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBPdGhlcndpc2UsIENPUlMgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci5cclxuICAgICAgeGhyID0gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiB4aHI7XHJcbiAgfVxyXG4gXHJcbiAgcmV0dXJuIGNvbm5lY3Rpb247XHJcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb25uZWN0aW9uLCBzZXR0aW5ncyl7XHJcblx0dmFyIGNvbm5lY3RlZCA9IGZhbHNlO1xyXG5cdFxyXG5cdC8vTG9hZCB0aGUgJ3dzJyBsaWJyYXJ5LCBidXQgb25seSBpZiB3ZSBhcmUgcnVubmluZyB1bmRlciBub2RlIGpzXHJcblx0dmFyIFdlYlNvY2tldCA9IHJlcXVpcmUoXCJkZXRlY3Qtbm9kZVwiKT9yZXF1aXJlKFwid3NcIik6Z2xvYmFsLldlYlNvY2tldDtcclxuXHRcclxuXHRmdW5jdGlvbiBpbml0aWF0ZV9zb2NrZXQoKXtcclxuXHRcdGlmKGdsb2JhbC5jb25zb2xlIT09dW5kZWZpbmVkJiYgc2V0dGluZ3MuZGVidWc9PT10cnVlKXtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJBdHRlbXBpbmcgdG8gY29ubmVjdCB0byBHYXRld2F5IHZpYSBXZWJTb2NrZXQuXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB3cyA9IG5ldyBXZWJTb2NrZXQoc2V0dGluZ3Mud2Vic29ja2V0X3VybCk7XHJcblx0XHQvL0FkZCB1c2VyIGNhbGxiYWNrc1xyXG5cdFx0d3Mub25jbG9zZSA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuXHRcdFx0aWYodHlwZW9mIHNldHRpbmdzLmRpc2Nvbm5lY3RlZD09PVwiZnVuY3Rpb25cIil7c2V0dGluZ3MuZGlzY29ubmVjdGVkKHNldHRpbmdzLndlYnNvY2tldF91cmwsIGV2ZW50KTt9XHJcblx0XHRcdGNvbm5lY3RlZCA9IGZhbHNlO1xyXG5cdFx0fTtcclxuXHRcdC8vTG9nIG9uIGNvbm5lY3Rpb25cclxuXHRcdHdzLm9ub3BlbiA9IGZ1bmN0aW9uKCl7XHJcblx0XHRcdGlmKHR5cGVvZiBzZXR0aW5ncy5jb25uZWN0ZWQ9PT1cImZ1bmN0aW9uXCIpe3NldHRpbmdzLmNvbm5lY3RlZChzZXR0aW5ncy53ZWJzb2NrZXRfdXJsKTt9XHJcblx0XHRcdGlmKGdsb2JhbC5jb25zb2xlIT09dW5kZWZpbmVkICYmIHNldHRpbmdzLmRlYnVnPT09dHJ1ZSl7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXCJDb25uZWN0ZWQgdG8gV1MgVVJMIFwiK3NldHRpbmdzLndlYnNvY2tldF91cmwpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbm5lY3RlZCA9IHRydWU7XHJcblx0XHR9O1xyXG5cdFx0Ly9BdHRhY2ggaGFuZGxlclxyXG5cdFx0d3Mub25tZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSl7XHJcblx0XHRcdGNvbm5lY3Rpb24uX2hhbmRsZV9tZXNzYWdlKEpTT04ucGFyc2UobWVzc2FnZS5kYXRhKSk7XHJcblx0XHR9O1xyXG5cdFx0cmV0dXJuIHdzO1xyXG5cdH1cclxuXHRcclxuXHQvL0luaXRpYXRlIGEgbmV3IHNvY2tldCAodGhpcyBnZXRzIHJlLWV4ZWN1dGVkIG9uIHJlY29ubmVjdClcclxuXHR2YXIgc29ja2V0ID0gaW5pdGlhdGVfc29ja2V0KCk7XHJcblx0XHJcblx0Ly9DcmVhdGUgYSBmdW5jdGlvbiBmb3Igc2VuZGluZyBhIG1lc3NhZ2VcclxuXHRjb25uZWN0aW9uLnNlbmQgPSBmdW5jdGlvbihwcm9kdWN0LCB0eXBlLCBtZXNzYWdlLCBpZCl7XHJcblx0XHQvL0lmIHdlIGFyZSBjb25uZWN0ZWQgc2VuZCB0aGUgbWVzc2FnZVxyXG5cdFx0aWYoc29ja2V0LnJlYWR5U3RhdGUgPT09MSl7XHJcblx0XHRcdHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHt0eXBlOnR5cGUsIG1lc3NhZ2U6bWVzc2FnZSwgaWQ6aWR9KSk7XHJcblx0XHQvL0lmIHdlIGFyZSBub3QgY29ubmVjdGVkIGFuZCB3ZSBhcmUgbm90IGF0dGVtcHRpbmcgdG8gY29ubmVjdCByaWdodCBub3csIGF0dGVtcHQgdG8gY29ubmVjdFxyXG5cdFx0fWVsc2UgaWYgKHNvY2tldC5yZWFkeVN0YXRlICE9PTApe1xyXG5cdFx0XHRzb2NrZXQgPSBpbml0aWF0ZV9zb2NrZXQoKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdGNvbm5lY3Rpb24ud2Vic29ja2V0X3VybCA9IGZ1bmN0aW9uKGEpe1xyXG5cdFx0c2V0dGluZ3Mud2Vic29ja2V0X3VybCA9IGE7XHJcblx0XHRzb2NrZXQuY2xvc2UoKTtcclxuXHRcdHNvY2tldCA9IGluaXRpYXRlX3NvY2tldCgpO1xyXG5cdH07XHJcblx0XHJcblx0Y29ubmVjdGlvbi5jb25uZWN0ZWQgPSBmdW5jdGlvbihhKXtcclxuXHRcdGlmKGNvbm5lY3RlZCl7YShzZXR0aW5ncy53ZWJzb2NrZXRfdXJsKTt9XHJcblx0XHRzZXR0aW5ncy5jb25uZWN0ZWQgPSBhO1xyXG5cdH07XHJcblx0Y29ubmVjdGlvbi5kaXNjb25uZWN0ZWQgPSBmdW5jdGlvbihhKXtcclxuXHRcdHNldHRpbmdzLmRpc2Nvbm5lY3RlZCA9IGE7XHJcblx0fTtcclxuXHRcclxuXHRyZXR1cm4gY29ubmVjdGlvbjtcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblxuLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xudHJ5IHtcbiBtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJyBcbn0gY2F0Y2goZSkge31cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBnbG9iYWwgPSAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSgpO1xuXG4vKipcbiAqIFdlYlNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqL1xuXG52YXIgV2ViU29ja2V0ID0gZ2xvYmFsLldlYlNvY2tldCB8fCBnbG9iYWwuTW96V2ViU29ja2V0O1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0ID8gd3MgOiBudWxsO1xuXG4vKipcbiAqIFdlYlNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBUaGUgdGhpcmQgYG9wdHNgIG9wdGlvbnMgb2JqZWN0IGdldHMgaWdub3JlZCBpbiB3ZWIgYnJvd3NlcnMsIHNpbmNlIGl0J3NcbiAqIG5vbi1zdGFuZGFyZCwgYW5kIHRocm93cyBhIFR5cGVFcnJvciBpZiBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZWluYXJvcy93cy9pc3N1ZXMvMjI3XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQHBhcmFtIHtBcnJheX0gcHJvdG9jb2xzIChvcHRpb25hbClcbiAqIEBwYXJhbSB7T2JqZWN0KSBvcHRzIChvcHRpb25hbClcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gd3ModXJpLCBwcm90b2NvbHMsIG9wdHMpIHtcbiAgdmFyIGluc3RhbmNlO1xuICBpZiAocHJvdG9jb2xzKSB7XG4gICAgaW5zdGFuY2UgPSBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKTtcbiAgfSBlbHNlIHtcbiAgICBpbnN0YW5jZSA9IG5ldyBXZWJTb2NrZXQodXJpKTtcbiAgfVxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbmlmIChXZWJTb2NrZXQpIHdzLnByb3RvdHlwZSA9IFdlYlNvY2tldC5wcm90b3R5cGU7XG4iLCJ2YXIgYXNjaWlUYWJsZSA9IHJlcXVpcmUoXCJhc2NpaS10YWJsZVwiKTtcbnZhciB0aWNrNDJDb25uZWN0aW9uID0gcmVxdWlyZShcInRpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb25cIik7XG5cbnZhciBsZXZlbHMgPSBbICd0cmFjZScsICdkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnb2ZmJyBdO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVQYXRoKHBhdGgpIHtcblx0cmV0dXJuIHBhdGgubGVuZ3RoID09PSAwID8gXCJcIiA6IHBhdGguam9pbihcIi5cIik7XG59XG5cbnZhciBpc0Nvbm5lY3Rpb24gPSBmdW5jdGlvbihjKSB7XG5cdHJldHVybiB0eXBlb2YgYyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYy5zZW5kID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGMub24gPT09IFwiZnVuY3Rpb25cIjtcbn07XG5cbmZ1bmN0aW9uIGdldExldmVsKGxvZ2dlciwgbGV2ZWwpIHtcblx0Ly9SZXRyaWV2ZXMgdGhlIGNvbnNvbGUgb3IgcHVibGlzaCBsZXZlbCBvZiBhIGxvZ2dlclxuXHQvL2xvZ2dlciAtIHRoZSBsb2dnZXIgZm9yIHdoaWNoIHRvIHJldHJpZXZlIHRoZSBsZXZlbFxuXHQvL2xldmVsIC0gYSBzdHJpbmcgd2hpY2ggY2FuIGVpdGhlciBiZSBcInB1Ymxpc2hMZXZlbFwiIGZvciByZXRyaWV2aW5nIHRoZSBwdWJsaXNoIGxldmVsIG9yIFwiY19sZXZlbFwiIGZvciByZXRyaWV2aW5nIHRoZSBjb25zb2xlIGxldmVsLlxuXHRpZiAobG9nZ2VyW2xldmVsXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGxvZ2dlcltsZXZlbF07XG5cdH0gZWxzZSBpZiAobG9nZ2VyLnBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGdldExldmVsKGxvZ2dlci5wYXJlbnQsIGxldmVsKTtcblx0fVxufVxuXG5mdW5jdGlvbiBtZXNzYWdlVG9UYWJsZSh0aXRsZSwgcm93cykge1xuXHQvL0Rpc3BsYXkgbWVzc2FnZSBhcyB0YWJsZSBpbiBmaWxlXG5cdHZhciBrZXlzID0gZ2V0QWxsS2V5cyhyb3dzKTtcblx0Ly9maWxsIHJvd3Mgd2l0aCBtZXNzYWdlIHByb3BlcnRpZXNcblx0dmFyIHRhYmxlUm93cyA9IHJvd3MubWFwKGZ1bmN0aW9uIChvYmopIHtcblx0XHRyZXR1cm4ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIG9ialtrZXldO1xuXHRcdH0pO1xuXHR9KTtcblxuXHR2YXIgdGFibGVfbWVzc2FnZSA9IGFzY2lpVGFibGUuZmFjdG9yeSh7XG5cdFx0dGl0bGU6IHRpdGxlLFxuXHRcdGhlYWRpbmc6IGtleXMsXG5cdFx0cm93czogdGFibGVSb3dzXG5cdH0pO1xuXHRyZXR1cm4gdGFibGVfbWVzc2FnZS50b1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiBnZXRBbGxLZXlzKGRhdGEpIHtcblx0Ly9BY2NlcHRzIGFuIGFycmF5IG9mIG9iamVjdHMgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBrZXlzIGZyb20gYWxsIG9iamVjdHNcblx0dmFyIGFsbEtleXMgPSBbXTtcblxuXHRkYXRhLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuXHRcdE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoYWxsS2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG5cdFx0XHRcdGFsbEtleXMucHVzaChrZXkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblx0cmV0dXJuIGFsbEtleXM7XG59XG5cbmZ1bmN0aW9uIGxvZ2dlcihjb25maWd1cmF0aW9uKSB7XG5cdGlmICh0eXBlb2YgY29uZmlndXJhdGlvbi5jb25uZWN0aW9uICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0Y29uZmlndXJhdGlvbi5jb25uZWN0aW9uID0ge307XG5cdH1cblxuXHQvL1NldCBkZWJ1ZyBmb3IgdGhlIGNvbm5lY3Rpb24gbW9kdWxlIGlmIGdsb2JhbCBkZWJ1ZyBpcyBzZXRcblx0Y29uZmlndXJhdGlvbi5jb25uZWN0aW9uLmRlYnVnID0gY29uZmlndXJhdGlvbi5kZWJ1ZztcblxuXHQvL0luaXQgY29ubmVjdGlvblxuXHQvL0RldGVybWluZSBpZiB3ZSBhcmUgZ2l2ZW4gYSByZWFkeSAnY29ubmVjdGlvbicgb2JqZWN0IG9yIGEgY29uZmlndXJhdGlvbi5cblx0dmFyIGNvbm5lY3Rpb24gPSBpc0Nvbm5lY3Rpb24oY29uZmlndXJhdGlvbi5jb25uZWN0aW9uKSA/IGNvbmZpZ3VyYXRpb24uY29ubmVjdGlvbiA6IHRpY2s0MkNvbm5lY3Rpb24oY29uZmlndXJhdGlvbi5jb25uZWN0aW9uKTtcblxuXHR2YXIgaWRLZXlzID0gW1wic3lzdGVtXCIsIFwic2VydmljZVwiLCBcImluc3RhbmNlXCJdO1xuXG5cdC8vQ29udmVydCBpbnN0YW5jZSB0byBzdHJpbmcsIHRocm93IGV4Y2VwdGlvbnMgaWYgaXQgaXMgbm90IGZ1bGxcblx0dmFyIGluc3RhbmNlX3N0ciA9IGlkS2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHRcdHZhciBwcm9wID0gY29uZmlndXJhdGlvbi5pZGVudGl0eVtrZXldO1xuXHRcdGlmICh0eXBlb2YgcHJvcCAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0dGhyb3cgJ1BsZWFzZSBzcGVjaWZ5IFwiJyArIGtleSArICdcIiBpbiB5b3VyIGlkZW50aXR5Jztcblx0XHR9XG5cdFx0cmV0dXJuIHByb3A7XG5cdH0pLmpvaW4oXCIvXCIpO1xuXG5cdHZhciBsb2dnZXJQcm90byA9IHtcblx0XHRzdWJMb2dnZXI6IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHQvL0NoZWNrIGlmIHRoZSBzdWJsb2dnZXIgaXMgYWxyZWFkeSBjcmVhdGVkXG5cdFx0XHR2YXIgZXhpc3RpbmdTdWJsb2dnZXIgPSB0aGlzLnN1YmxvZ2dlcnMuZmlsdGVyKGZ1bmN0aW9uIChzdWJMb2dnZXIpIHtcblx0XHRcdFx0cmV0dXJuIHN1YkxvZ2dlci5uYW1lID09PSBuYW1lO1xuXHRcdFx0fSlbMF07XG5cblx0XHRcdGlmIChleGlzdGluZ1N1YmxvZ2dlciAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiBleGlzdGluZ1N1YmxvZ2dlcjtcblx0XHRcdH1cblxuXHRcdFx0Ly9DaGVjayBpZiB0aGUgbmFtZSBpc24ndCB0aGUgc2FtZSBhcyBvbmUgb2YgdGhlIHBhcmVudCBwcm9wZXJ0aWVzXG5cdFx0XHRPYmplY3Qua2V5cyh0aGlzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0aWYgKGtleSA9PT0gbmFtZSkge1xuXHRcdFx0XHRcdHRocm93ICdUaGlzIHN1YiBsb2dnZXIgbmFtZSBpcyBub3QgYWxsb3dlZC4nO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdC8vQ2hlY2sgaWYgdGhlIG5hbWUgaXNuJ3QgdGhlIHNhbWUgYXMgb25lIG9mIHRoZSBwYXJlbnQgbWV0aG9kc1xuXHRcdFx0T2JqZWN0LmtleXMobG9nZ2VyUHJvdG8pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRpZiAoa2V5ID09PSBuYW1lKSB7XG5cdFx0XHRcdFx0dGhyb3cgJ1RoaXMgc3ViIGxvZ2dlciBuYW1lIGlzIG5vdCBhbGxvd2VkLic7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgcGF0aCA9IHRoaXMucGF0aC5zbGljZSgwKTtcblx0XHRcdHBhdGgucHVzaCh0aGlzLm5hbWUpO1xuXHRcdFx0cmV0dXJuIGNyZWF0ZUxvZ2dlcihuYW1lLCBwYXRoLCB0aGlzKTtcblx0XHR9LFxuXG5cdFx0cHVibGlzaExldmVsOiBmdW5jdGlvbiAobGV2ZWwpIHtcblx0XHRcdGlmIChsZXZlbCAhPT0gbnVsbCAmJiBsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMuX3B1Ymxpc2hMZXZlbCA9IGxldmVsO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGdldExldmVsKHRoaXMsIFwiX3B1Ymxpc2hMZXZlbFwiKTtcblx0XHR9LFxuXG5cdFx0Y29uc29sZUxldmVsOiBmdW5jdGlvbiAobGV2ZWwpIHtcblx0XHRcdGlmIChsZXZlbCAhPT0gbnVsbCAmJiBsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMuX2NvbnNvbGVMZXZlbCA9IGxldmVsO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGdldExldmVsKHRoaXMsIFwiX2NvbnNvbGVMZXZlbFwiKTtcblx0XHR9LFxuXG5cdFx0bWV0cmljc0xldmVsOiBmdW5jdGlvbiAobGV2ZWwsIG1ldHJpY3NTeXN0ZW0pIHtcblx0XHRcdGlmIChsZXZlbCAhPT0gbnVsbCAmJiBsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMuX21ldHJpY0xldmVsID0gbGV2ZWw7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtZXRyaWNzU3lzdGVtICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBtZXRyaWNzU3lzdGVtID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtZXRyaWNzU3lzdGVtLm9iamVjdE1ldHJpYyA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0dGhpcy5tZXRyaWNTeXN0ZW0gPSBtZXRyaWNzU3lzdGVtO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93IFwiUGxlYXNlIHNwZWNpZnkgbWV0cmljIHN5c3RlbSBcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR0YWJsZTogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0XHRcdC8vbWVzc2FnZSBtdXN0IGJlIGluIGFuIGFycmF5LCB0byBiZSBkaXNwbGF5ZWQgYXMgdGFibGVcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuXHRcdFx0XHR0aHJvdyAnVGhlIG1lc3NhZ2UgbXVzdCBiZSBpbiBhbiBhcnJheSc7XG5cdFx0XHR9XG5cblx0XHRcdC8vUmV0cmlldmUgbG9nZ2VyIG5hbWUgYW5kIGxldmVsc1xuXHRcdFx0dmFyIGxvZ2dlck5hbWUgPSBnZXRMb2dnZXJOYW1lKHRoaXMpO1xuXG5cdFx0XHQvL1B1Ymxpc2ggaW4gY29uc29sZVxuXHRcdFx0aWYgKHNob3VsZFB1Ymxpc2goZ2V0TGV2ZWwodGhpcywgJ19jb25zb2xlTGV2ZWwnKSwgJ2luZm8nKSkge1xuXHRcdFx0XHRjb25zb2xlLmluZm8obG9nZ2VyTmFtZSArICc6Jyk7XG5cdFx0XHRcdGNvbnNvbGUudGFibGUobWVzc2FnZSk7XG5cdFx0XHR9XG5cdFx0XHQvL1B1Ymxpc2ggaW4gZmlsZVxuXHRcdFx0aWYgKHNob3VsZFB1Ymxpc2goZ2V0TGV2ZWwodGhpcywgJ19wdWJsaXNoTGV2ZWwnKSwgJ2luZm8nKSkge1xuXHRcdFx0XHRjb25uZWN0aW9uLnNlbmQoJ2xvZycsICdMb2dNZXNzYWdlJywge1xuXHRcdFx0XHRcdGluc3RhbmNlOiBpbnN0YW5jZV9zdHIsXG5cdFx0XHRcdFx0bGV2ZWw6IGxldmVscy5pbmRleE9mKCdpbmZvJyksXG5cdFx0XHRcdFx0bG9nZ2VyOiBsb2dnZXJOYW1lLFxuXHRcdFx0XHRcdG1lc3NhZ2U6IG1lc3NhZ2VUb1RhYmxlKGxvZ2dlck5hbWUsIG1lc3NhZ2UpXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRsb2c6IGZ1bmN0aW9uIChtZXNzYWdlLCBsZXZlbCkge1xuXHRcdFx0cHVibGlzaE1lc3NhZ2UodGhpcywgbGV2ZWwgfHwgXCJpbmZvXCIsIG1lc3NhZ2UpO1xuXHRcdH1cblx0fTtcblxuXHRmdW5jdGlvbiBjcmVhdGVMb2dnZXIobmFtZSwgcGF0aCwgcGFyZW50KSB7XG5cdFx0dmFyIGxvZ2dlciA9IE9iamVjdC5jcmVhdGUobG9nZ2VyUHJvdG8pO1xuXHRcdGxvZ2dlci5uYW1lID0gbmFtZTtcblx0XHRsb2dnZXIucGF0aCA9IHBhdGg7XG5cdFx0bG9nZ2VyLnN1YmxvZ2dlcnMgPSBbXTtcblx0XHRsb2dnZXIucGFyZW50ID0gcGFyZW50O1xuXHRcdGlmIChwYXJlbnQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Ly9hZGQgc3VibG9nZ2VyIHRvIHN1YmxvZ2dlcnMgYXJyYXlcblx0XHRcdHBhcmVudC5zdWJsb2dnZXJzLnB1c2gobG9nZ2VyKTtcblx0XHRcdC8vYWRkIGVhc3kgYWNjZXNzIHRvIHN1YmxvZ2dlclxuXHRcdFx0cGFyZW50W2xvZ2dlci5uYW1lXSA9IGxvZ2dlcjtcblx0XHRcdC8vY3JlYXRlIG1ldHJpYyBzeXN0ZW1cblx0XHRcdGlmIChwYXJlbnQubWV0cmljU3lzdGVtICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0bG9nZ2VyLm1ldHJpY3NMZXZlbCgnd2FybicsIHBhcmVudC5tZXRyaWNTeXN0ZW0uc3ViU3lzdGVtKGxvZ2dlci5uYW1lKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGxldmVscy5mb3JFYWNoKGZ1bmN0aW9uIChsZXZlbCkge1xuXHRcdFx0bG9nZ2VyW2xldmVsXSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG5cdFx0XHRcdHB1Ymxpc2hNZXNzYWdlKGxvZ2dlciwgbGV2ZWwsIG1lc3NhZ2UpO1xuXHRcdFx0fTtcblx0XHR9KTtcblxuXHRcdGxvZ2dlci5vZmYgPSBmdW5jdGlvbigpe307XG5cblx0XHRsb2dnZXIudmVyc2lvbiA9IFwiMi4wLjFcIjtcblxuXHRcdHJldHVybiBsb2dnZXI7XG5cdH1cblxuXHRmdW5jdGlvbiBwdWJsaXNoTWVzc2FnZShsb2dnZXIsIGxldmVsLCBtZXNzYWdlKSB7XG5cdFx0Ly9SZXRyaWV2ZSBsb2dnZXIgbmFtZSBhbmQgbGV2ZWxzXG5cdFx0dmFyIGxvZ2dlcl9uYW1lID0gZ2V0TG9nZ2VyTmFtZShsb2dnZXIpO1xuXG5cdFx0Ly9BZGQgc3RhY2sgdHJhY2UgaWYgdGhlIG1lc3NhZ2UgaXMgYW4gZXJyb3Jcblx0XHRpZiAobGV2ZWwgPT09ICdlcnJvcicpIHtcblx0XHRcdHZhciBlID0gbmV3IEVycm9yKCk7XG5cdFx0XHRpZiAoZS5zdGFjaykge1xuXHRcdFx0XHRtZXNzYWdlID0gbWVzc2FnZSArIFwiXFxuXCIgKyAoZS5zdGFjay5zcGxpdChcIlxcblwiKS5zbGljZSgzKS5qb2luKFwiXFxuXCIpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL1B1Ymxpc2ggaW4gY29uc29sZVxuXHRcdGlmIChzaG91bGRQdWJsaXNoKGdldExldmVsKGxvZ2dlciwgJ19jb25zb2xlTGV2ZWwnKSwgbGV2ZWwpKSB7XG5cdFx0XHRjb25zb2xlW2xldmVsXShsb2dnZXJfbmFtZSArIFwiOiBcIiArIG1lc3NhZ2UpO1xuXHRcdH1cblx0XHQvL1B1Ymxpc2ggaW4gZmlsZVxuXHRcdGlmIChzaG91bGRQdWJsaXNoKGdldExldmVsKGxvZ2dlciwgJ19wdWJsaXNoTGV2ZWwnKSwgbGV2ZWwpKSB7XG5cdFx0XHRjb25uZWN0aW9uLnNlbmQoJ2xvZycsICdMb2dNZXNzYWdlJywge1xuXHRcdFx0XHRpbnN0YW5jZTogaW5zdGFuY2Vfc3RyLFxuXHRcdFx0XHRsZXZlbDogbGV2ZWxzLmluZGV4T2YobGV2ZWwpLFxuXHRcdFx0XHRsb2dnZXI6IGxvZ2dlcl9uYW1lLFxuXHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvL1B1Ymxpc2ggaW4gbWV0cmljc1xuXHRcdGlmIChzaG91bGRQdWJsaXNoKGdldExldmVsKGxvZ2dlciwgJ19tZXRyaWNMZXZlbCcpLCBsZXZlbCkpIHtcblx0XHRcdGlmIChsb2dnZXIubWV0cmljU3lzdGVtICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0bG9nZ2VyLm1ldHJpY1N5c3RlbS5vYmplY3RNZXRyaWMoJ0xvZ01lc3NhZ2UnLCB7XG5cdFx0XHRcdFx0VGltZTogbmV3IERhdGUoKSxcblx0XHRcdFx0XHRMb2dnZXI6IGxvZ2dlcl9uYW1lLFxuXHRcdFx0XHRcdExldmVsOiBsZXZlbCxcblx0XHRcdFx0XHRNZXNzYWdlOiBtZXNzYWdlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZhciBzaG91bGRQdWJsaXNoID0gZnVuY3Rpb24gKHB1Ymxpc2hMZXZlbCwgbWVzc2FnZUxldmVsKSB7XG5cdFx0cmV0dXJuICghcHVibGlzaExldmVsIHx8IGxldmVscy5pbmRleE9mKHB1Ymxpc2hMZXZlbCkgPD0gbGV2ZWxzLmluZGV4T2YobWVzc2FnZUxldmVsKSk7XG5cdH07XG5cblx0dmFyIGdldExvZ2dlck5hbWUgPSBmdW5jdGlvbiAobG9nZ2VyKSB7XG5cdFx0dmFyIGxvZ2dlclBhdGhBbmROYW1lID0gbG9nZ2VyLnBhdGguc2xpY2UoKTtcblx0XHRsb2dnZXJQYXRoQW5kTmFtZS5wdXNoKGxvZ2dlci5uYW1lKTtcblx0XHRyZXR1cm4gXCJbXCIgKyBzZXJpYWxpemVQYXRoKGxvZ2dlclBhdGhBbmROYW1lKSArIFwiXVwiO1xuXHR9O1xuXG5cdHZhciBtYWluTG9nZ2VyID0gY3JlYXRlTG9nZ2VyKFwibWFpblwiLCBbXSwgdW5kZWZpbmVkKTtcblx0bWFpbkxvZ2dlci5wdWJsaXNoTGV2ZWwoXCJ3YXJuXCIpO1xuXHRtYWluTG9nZ2VyLmNvbnNvbGVMZXZlbChcImluZm9cIik7XG5cdG1haW5Mb2dnZXIubWV0cmljc0xldmVsKFwid2FyblwiKTtcblxuXHRyZXR1cm4gbWFpbkxvZ2dlcjtcbn1cblxuaWYod2luZG93LnRpY2s0Mj09PXVuZGVmaW5lZCl7IHdpbmRvdy50aWNrNDIgPSB7fTsgfVxud2luZG93LnRpY2s0Mi5sb2cgPSBsb2dnZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nZ2VyO1xuIiwidmFyIG9iamVjdE1ldHJpY18xID0gcmVxdWlyZShcIi4uL21ldHJpY3Mvb2JqZWN0TWV0cmljXCIpO1xyXG52YXIgc3RyaW5nTWV0cmljXzEgPSByZXF1aXJlKFwiLi4vbWV0cmljcy9zdHJpbmdNZXRyaWNcIik7XHJcbnZhciBudW1iZXJNZXRyaWNfMSA9IHJlcXVpcmUoXCIuLi9tZXRyaWNzL251bWJlck1ldHJpY1wiKTtcclxudmFyIHRpbWVzdGFtcE1ldHJpY18xID0gcmVxdWlyZShcIi4uL21ldHJpY3MvdGltZXN0YW1wTWV0cmljXCIpO1xyXG52YXIgTWV0cmljU2VyaWFsaXplciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZXRyaWNTZXJpYWxpemVyKCkge1xyXG4gICAgfVxyXG4gICAgTWV0cmljU2VyaWFsaXplci5tZXRyaWNUb01lc3NhZ2UgPSBmdW5jdGlvbiAobWV0cmljKSB7XHJcbiAgICAgICAgdmFyIGRlZiA9IE1ldHJpY1NlcmlhbGl6ZXIuX2dldE1ldHJpY0RlZmluaXRpb24obWV0cmljLm5hbWUsIG1ldHJpYy52YWx1ZSwgbWV0cmljLnBhdGgsIG1ldHJpYy50eXBlLCBtZXRyaWMuZGVzY3JpcHRpb24sIG1ldHJpYy5wZXJpb2QsIG1ldHJpYy5yZXNvbHV0aW9uKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogbWV0cmljLmlkLFxyXG4gICAgICAgICAgICBpbnN0YW5jZTogbWV0cmljLnJlcG8uaW5zdGFuY2UsXHJcbiAgICAgICAgICAgIGRlZmluaXRpb246IGRlZixcclxuICAgICAgICAgICAgdmFsdWU6IE1ldHJpY1NlcmlhbGl6ZXIuX3NlcmlhbGl6ZVZhbHVlKG1ldHJpYy52YWx1ZSwgbWV0cmljKSxcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIE1ldHJpY1NlcmlhbGl6ZXIuX2dldE1ldHJpY0RlZmluaXRpb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIHBhdGgsIHR5cGUsIGRlc2NyaXB0aW9uLCByZXNvbHV0aW9uLCBwZXJpb2QpIHtcclxuICAgICAgICB2YXIgZGVmID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUgPyB0eXBlIDogTWV0cmljU2VyaWFsaXplci5fZ2V0VHlwZUZyb21WYWx1ZSh2YWx1ZSksXHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICAgIHJlc29sdXRpb246IHJlc29sdXRpb24sXHJcbiAgICAgICAgICAgIHBlcmlvZDogcGVyaW9kXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoZGVmLnR5cGUgPT09IG9iamVjdE1ldHJpY18xLk9iamVjdE1ldHJpYy50eXBlKSB7XHJcbiAgICAgICAgICAgIGRlZi5Db21wb3NpdGUgPSBPYmplY3Qua2V5cyh2YWx1ZSkucmVkdWNlKGZ1bmN0aW9uIChhcnIsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHZhbHVlW2tleV07XHJcbiAgICAgICAgICAgICAgICBhcnIucHVzaChNZXRyaWNTZXJpYWxpemVyLl9nZXRNZXRyaWNEZWZpbml0aW9uKGtleSwgdmFsLCBwYXRoKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgICAgICB9LCBbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZWY7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljU2VyaWFsaXplci5fc2VyaWFsaXplVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUsIG1ldHJpYykge1xyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gRGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLl92YWx1ZVR5cGVzLmluZGV4T2YoXCJkYXRlXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZS52YWx1ZU9mKCksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheTogZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBDb21wb3NpdGVWYWx1ZTogT2JqZWN0LmtleXModmFsdWUpLnJlZHVjZShmdW5jdGlvbiAoYXJyLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gTWV0cmljU2VyaWFsaXplci5fc2VyaWFsaXplVmFsdWUodmFsdWVba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsLklubmVyTWV0cmljTmFtZSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaCh2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgICAgICB9LCBbXSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZVR5cGUgPSBtZXRyaWMgPyBtZXRyaWMuZ2V0VmFsdWVUeXBlKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHZhbHVlVHlwZSA9IHZhbHVlVHlwZSB8IHRoaXMuX3ZhbHVlVHlwZXMuaW5kZXhPZih0eXBlb2YgdmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogeyB0eXBlOiB2YWx1ZVR5cGUsIHZhbHVlOiB2YWx1ZSwgaXNBcnJheTogZmFsc2UgfSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNZXRyaWNTZXJpYWxpemVyLl9nZXRUeXBlRnJvbVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHR5cGVBc1N0cmluZyA9IHZhbHVlLmNvbnN0cnVjdG9yID09PSBEYXRlID8gJ3RpbWVzdGFtcCcgOiB0eXBlb2YgdmFsdWU7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlQXNTdHJpbmcpIHtcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdNZXRyaWNfMS5TdHJpbmdNZXRyaWMudHlwZTtcclxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNZXRyaWNfMS5OdW1iZXJNZXRyaWMudHlwZTtcclxuICAgICAgICAgICAgY2FzZSAndGltZXN0YW1wJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBNZXRyaWNfMS5UaW1lc3RhbXBNZXRyaWMudHlwZTtcclxuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3RNZXRyaWNfMS5PYmplY3RNZXRyaWMudHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljU2VyaWFsaXplci5fdmFsdWVUeXBlcyA9IFtcclxuICAgICAgICBcImJvb2xlYW5cIixcclxuICAgICAgICBcImludFwiLFxyXG4gICAgICAgIFwibnVtYmVyXCIsXHJcbiAgICAgICAgXCJsb25nXCIsXHJcbiAgICAgICAgXCJzdHJpbmdcIixcclxuICAgICAgICBcImRhdGVcIixcclxuICAgICAgICBcIm9iamVjdFwiXTtcclxuICAgIHJldHVybiBNZXRyaWNTZXJpYWxpemVyO1xyXG59KSgpO1xyXG5leHBvcnRzLk1ldHJpY1NlcmlhbGl6ZXIgPSBNZXRyaWNTZXJpYWxpemVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWNTZXJpYWxpemVyLmpzLm1hcCIsInZhciBtZXRyaWNTZXJpYWxpemVyXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNTZXJpYWxpemVyXCIpO1xyXG52YXIgTWV0cmljc0JyaWRnZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZXRyaWNzQnJpZGdlKHJlcG8sIGNvbm5lY3Rpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX3JlcG8gPSByZXBvO1xyXG4gICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xyXG4gICAgICAgIGNvbm5lY3Rpb24ub24oJ21ldHJpY3MnLCBcIk1ldHJpY3NTbmFwc2hvdFJlcXVlc3RcIiwgZnVuY3Rpb24gKGluc3RhbmNlSW5mbykge1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VJbmZvLkluc3RhbmNlICE9PSByZXBvLmluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuc2VuZEZ1bGwoX3RoaXMuX3JlcG8pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgTWV0cmljc0JyaWRnZS5wcm90b3R5cGUuc2VuZEZ1bGwgPSBmdW5jdGlvbiAocmVwbykge1xyXG4gICAgICAgIHZhciByb290U3lzdGVtID0gcmVwby5yb290O1xyXG4gICAgICAgIGlmICghcm9vdFN5c3RlbSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyb290U3lzdGVtLnN1YlN5c3RlbXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNlbmRGdWxsU3lzdGVtKHJvb3RTeXN0ZW0pO1xyXG4gICAgfTtcclxuICAgIE1ldHJpY3NCcmlkZ2UucHJvdG90eXBlLnNlbmRGdWxsU3lzdGVtID0gZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU3lzdGVtKHMpO1xyXG4gICAgICAgIHMuc3ViU3lzdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHtcclxuICAgICAgICAgICAgX3RoaXMuc2VuZEZ1bGxTeXN0ZW0oKHN1YikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHMubWV0cmljcy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNyZWF0ZU1ldHJpYyhtKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBNZXRyaWNzQnJpZGdlLnByb3RvdHlwZS5jcmVhdGVNZXRyaWMgPSBmdW5jdGlvbiAobWV0cmljKSB7XHJcbiAgICAgICAgdGhpcy5fc2VuZChcIkNyZWF0ZU1ldHJpY1wiLCBtZXRyaWNTZXJpYWxpemVyXzEuTWV0cmljU2VyaWFsaXplci5tZXRyaWNUb01lc3NhZ2UobWV0cmljKSk7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljc0JyaWRnZS5wcm90b3R5cGUudXBkYXRlTWV0cmljID0gZnVuY3Rpb24gKG1ldHJpYykge1xyXG4gICAgICAgIHRoaXMuX3NlbmQoXCJVcGRhdGVNZXRyaWNcIiwgbWV0cmljU2VyaWFsaXplcl8xLk1ldHJpY1NlcmlhbGl6ZXIubWV0cmljVG9NZXNzYWdlKG1ldHJpYykpO1xyXG4gICAgfTtcclxuICAgIE1ldHJpY3NCcmlkZ2UucHJvdG90eXBlLmNyZWF0ZVN5c3RlbSA9IGZ1bmN0aW9uIChzeXN0ZW0pIHtcclxuICAgICAgICBpZiAoc3lzdGVtLnBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbmQoXCJDcmVhdGVNZXRyaWNTeXN0ZW1cIiwge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHN5c3RlbS5pZCxcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBzeXN0ZW0ucmVwby5pbnN0YW5jZSxcclxuICAgICAgICAgICAgICAgIGRlZmluaXRpb246IHsgbmFtZTogc3lzdGVtLm5hbWUsIGRlc2NyaXB0aW9uOiBzeXN0ZW0uZGVzY3JpcHRpb24sIHBhdGg6IHN5c3RlbS5wYXRoIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1ldHJpY3NCcmlkZ2UucHJvdG90eXBlLnVwZGF0ZVN5c3RlbSA9IGZ1bmN0aW9uIChzeXN0ZW0sIHN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy5fc2VuZChcIlVwZGF0ZU1ldHJpY1N5c3RlbVwiLCB7XHJcbiAgICAgICAgICAgIGlkOiBzeXN0ZW0uaWQsXHJcbiAgICAgICAgICAgIGluc3RhbmNlOiBzeXN0ZW0ucmVwby5pbnN0YW5jZSxcclxuICAgICAgICAgICAgc3RhdGU6IHN0YXRlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljc0JyaWRnZS5wcm90b3R5cGUuaGVhcnRiZWF0ID0gZnVuY3Rpb24gKHJlcG8sIGludGVydmFsKSB7XHJcbiAgICAgICAgdGhpcy5fc2VuZChcIkhlYXJ0YmVhdE1ldHJpY3NcIiwgeyBwdWJsaXNoaW5nSW50ZXJ2YWw6IGludGVydmFsLCBpbnN0YW5jZTogcmVwby5pbnN0YW5jZSB9KTtcclxuICAgIH07XHJcbiAgICBNZXRyaWNzQnJpZGdlLnByb3RvdHlwZS5fc2VuZCA9IGZ1bmN0aW9uICh0eXBlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5zZW5kKFwibWV0cmljc1wiLCB0eXBlLCBtZXNzYWdlKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTWV0cmljc0JyaWRnZTtcclxufSkoKTtcclxuZXhwb3J0cy5NZXRyaWNzQnJpZGdlID0gTWV0cmljc0JyaWRnZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNwb3J0LmpzLm1hcCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBtZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY1wiKTtcclxudmFyIEFkZHJlc3NNZXRyaWMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEFkZHJlc3NNZXRyaWMsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBBZGRyZXNzTWV0cmljKGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIHZhbHVlKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgQWRkcmVzc01ldHJpYy50eXBlLCB2YWx1ZSB8fCAnJyk7XHJcbiAgICB9XHJcbiAgICBBZGRyZXNzTWV0cmljLnR5cGUgPSA4O1xyXG4gICAgcmV0dXJuIEFkZHJlc3NNZXRyaWM7XHJcbn0pKG1ldHJpY18xLk1ldHJpYyk7XHJcbmV4cG9ydHMuQWRkcmVzc01ldHJpYyA9IEFkZHJlc3NNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3NNZXRyaWMuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIG1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljXCIpO1xyXG52YXIgQ291bnRNZXRyaWMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKENvdW50TWV0cmljLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ291bnRNZXRyaWMoZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgdmFsdWUpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCBDb3VudE1ldHJpYy50eXBlLCB2YWx1ZSB8fCAwKTtcclxuICAgIH1cclxuICAgIENvdW50TWV0cmljLnByb3RvdHlwZS5pbmNyZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pbmNyZW1lbnRCeSgxKTtcclxuICAgIH07XHJcbiAgICBDb3VudE1ldHJpYy5wcm90b3R5cGUuZGVjcmVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZGVjcmVtZW50QnkoMSk7XHJcbiAgICB9O1xyXG4gICAgQ291bnRNZXRyaWMucHJvdG90eXBlLmluY3JlbWVudEJ5ID0gZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgodGhpcy52YWx1ZSB8fCAwKSArIG4pO1xyXG4gICAgfTtcclxuICAgIENvdW50TWV0cmljLnByb3RvdHlwZS5kZWNyZW1lbnRCeSA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGUoKHRoaXMudmFsdWUgfHwgMCkgLSBuKTtcclxuICAgIH07XHJcbiAgICBDb3VudE1ldHJpYy5wcm90b3R5cGUuZ2V0VmFsdWVUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAzO1xyXG4gICAgfTtcclxuICAgIENvdW50TWV0cmljLnR5cGUgPSAzO1xyXG4gICAgcmV0dXJuIENvdW50TWV0cmljO1xyXG59KShtZXRyaWNfMS5NZXRyaWMpO1xyXG5leHBvcnRzLkNvdW50TWV0cmljID0gQ291bnRNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvdW50TWV0cmljLmpzLm1hcCIsInZhciBNZXRyaWMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTWV0cmljKGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIHR5cGUsIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gZGVmLm5hbWU7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlZi5kZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLnN5c3RlbSA9IHBhcmVudDtcclxuICAgICAgICB0aGlzLnJlcG8gPSBwYXJlbnQucmVwbztcclxuICAgICAgICB0aGlzLmlkID0gcGFyZW50LnBhdGggKyBcIi9cIiArIHRoaXMubmFtZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLnBhdGggPSBwYXJlbnQucGF0aC5zbGljZSgwKTtcclxuICAgICAgICB0aGlzLnBhdGgucHVzaChwYXJlbnQubmFtZSk7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xyXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5jcmVhdGVNZXRyaWModGhpcyk7XHJcbiAgICB9XHJcbiAgICBNZXRyaWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl90cmFuc3BvcnQudXBkYXRlTWV0cmljKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIE1ldHJpYy5wcm90b3R5cGUuZ2V0VmFsdWVUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9O1xyXG4gICAgTWV0cmljLnR5cGUgPSAwO1xyXG4gICAgcmV0dXJuIE1ldHJpYztcclxufSkoKTtcclxuZXhwb3J0cy5NZXRyaWMgPSBNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldHJpYy5qcy5tYXAiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgbWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNcIik7XHJcbnZhciBOdW1iZXJNZXRyaWMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE51bWJlck1ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE51bWJlck1ldHJpYyhkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCB2YWx1ZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIE51bWJlck1ldHJpYy50eXBlLCB2YWx1ZSB8fCAwKTtcclxuICAgIH1cclxuICAgIE51bWJlck1ldHJpYy5wcm90b3R5cGUuaW5jcmVtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuaW5jcmVtZW50QnkoMSk7XHJcbiAgICB9O1xyXG4gICAgTnVtYmVyTWV0cmljLnByb3RvdHlwZS5kZWNyZW1lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5kZWNyZW1lbnRCeSgxKTtcclxuICAgIH07XHJcbiAgICBOdW1iZXJNZXRyaWMucHJvdG90eXBlLmluY3JlbWVudEJ5ID0gZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgodGhpcy52YWx1ZSB8fCAwKSArIG4pO1xyXG4gICAgfTtcclxuICAgIE51bWJlck1ldHJpYy5wcm90b3R5cGUuZGVjcmVtZW50QnkgPSBmdW5jdGlvbiAobikge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKCh0aGlzLnZhbHVlIHx8IDApIC0gbik7XHJcbiAgICB9O1xyXG4gICAgTnVtYmVyTWV0cmljLnR5cGUgPSAyO1xyXG4gICAgcmV0dXJuIE51bWJlck1ldHJpYztcclxufSkobWV0cmljXzEuTWV0cmljKTtcclxuZXhwb3J0cy5OdW1iZXJNZXRyaWMgPSBOdW1iZXJNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlck1ldHJpYy5qcy5tYXAiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgbWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNcIik7XHJcbnZhciBPYmplY3RNZXRyaWMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE9iamVjdE1ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIE9iamVjdE1ldHJpYyhkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCB2YWx1ZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIE9iamVjdE1ldHJpYy50eXBlLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBPYmplY3RNZXRyaWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlLmNhbGwodGhpcywgdmFsdWUpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdE1ldHJpYy50eXBlID0gMTE7XHJcbiAgICByZXR1cm4gT2JqZWN0TWV0cmljO1xyXG59KShtZXRyaWNfMS5NZXRyaWMpO1xyXG5leHBvcnRzLk9iamVjdE1ldHJpYyA9IE9iamVjdE1ldHJpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JqZWN0TWV0cmljLmpzLm1hcCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBtZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY1wiKTtcclxudmFyIFJhdGVNZXRyaWMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFJhdGVNZXRyaWMsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBSYXRlTWV0cmljKGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5wZXJpb2QgPSBkZWYucGVyaW9kO1xyXG4gICAgICAgIHRoaXMucmVzb2x1dGlvbiA9IGRlZi5yZXNvbHV0aW9uO1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIFJhdGVNZXRyaWMudHlwZSwgdmFsdWUgfHwgMCk7XHJcbiAgICB9XHJcbiAgICBSYXRlTWV0cmljLnR5cGUgPSA0O1xyXG4gICAgcmV0dXJuIFJhdGVNZXRyaWM7XHJcbn0pKG1ldHJpY18xLk1ldHJpYyk7XHJcbmV4cG9ydHMuUmF0ZU1ldHJpYyA9IFJhdGVNZXRyaWM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhdGVNZXRyaWMuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIG1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljXCIpO1xyXG52YXIgU3RhdGlzdGljc01ldHJpYyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoU3RhdGlzdGljc01ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFN0YXRpc3RpY3NNZXRyaWMoZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLnBlcmlvZCA9IGRlZi5wZXJpb2Q7XHJcbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gZGVmLnJlc29sdXRpb247XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgU3RhdGlzdGljc01ldHJpYy50eXBlLCB2YWx1ZSB8fCAwKTtcclxuICAgIH1cclxuICAgIFN0YXRpc3RpY3NNZXRyaWMudHlwZSA9IDY7XHJcbiAgICByZXR1cm4gU3RhdGlzdGljc01ldHJpYztcclxufSkobWV0cmljXzEuTWV0cmljKTtcclxuZXhwb3J0cy5TdGF0aXN0aWNzTWV0cmljID0gU3RhdGlzdGljc01ldHJpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGlzdGljc01ldHJpYy5qcy5tYXAiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgbWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNcIik7XHJcbnZhciBTdHJpbmdNZXRyaWMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFN0cmluZ01ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFN0cmluZ01ldHJpYyhkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCB2YWx1ZSkge1xyXG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIFN0cmluZ01ldHJpYy50eXBlLCB2YWx1ZSB8fCAnJyk7XHJcbiAgICB9XHJcbiAgICBTdHJpbmdNZXRyaWMudHlwZSA9IDE7XHJcbiAgICByZXR1cm4gU3RyaW5nTWV0cmljO1xyXG59KShtZXRyaWNfMS5NZXRyaWMpO1xyXG5leHBvcnRzLlN0cmluZ01ldHJpYyA9IFN0cmluZ01ldHJpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nTWV0cmljLmpzLm1hcCIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBtZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY1wiKTtcclxudmFyIFRpbWVzcGFuTWV0cmljID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhUaW1lc3Bhbk1ldHJpYywgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFRpbWVzcGFuTWV0cmljKGRlZiwgcGFyZW50LCB0cmFuc3BvcnQsIHZhbHVlKSB7XHJcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgVGltZXNwYW5NZXRyaWMudHlwZSwgdmFsdWUgfHwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgVGltZXNwYW5NZXRyaWMucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKHRydWUpO1xyXG4gICAgfTtcclxuICAgIFRpbWVzcGFuTWV0cmljLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBUaW1lc3Bhbk1ldHJpYy50eXBlID0gMTA7XHJcbiAgICByZXR1cm4gVGltZXNwYW5NZXRyaWM7XHJcbn0pKG1ldHJpY18xLk1ldHJpYyk7XHJcbmV4cG9ydHMuVGltZXNwYW5NZXRyaWMgPSBUaW1lc3Bhbk1ldHJpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXNwYW5NZXRyaWMuanMubWFwIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufTtcclxudmFyIG1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljXCIpO1xyXG52YXIgVGltZXN0YW1wTWV0cmljID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhUaW1lc3RhbXBNZXRyaWMsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBUaW1lc3RhbXBNZXRyaWMoZGVmLCBwYXJlbnQsIHRyYW5zcG9ydCwgdmFsdWUpIHtcclxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZWYsIHBhcmVudCwgdHJhbnNwb3J0LCBUaW1lc3RhbXBNZXRyaWMudHlwZSwgdmFsdWUgfHwgbmV3IERhdGUoKSk7XHJcbiAgICB9XHJcbiAgICBUaW1lc3RhbXBNZXRyaWMucHJvdG90eXBlLm5vdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZShuZXcgRGF0ZSgpKTtcclxuICAgIH07XHJcbiAgICBUaW1lc3RhbXBNZXRyaWMudHlwZSA9IDc7XHJcbiAgICByZXR1cm4gVGltZXN0YW1wTWV0cmljO1xyXG59KShtZXRyaWNfMS5NZXRyaWMpO1xyXG5leHBvcnRzLlRpbWVzdGFtcE1ldHJpYyA9IFRpbWVzdGFtcE1ldHJpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXN0YW1wTWV0cmljLmpzLm1hcCIsInZhciBzeXN0ZW1fMSA9IHJlcXVpcmUoXCIuL3N5c3RlbVwiKTtcclxudmFyIHRyYW5zcG9ydF8xID0gcmVxdWlyZShcIi4vYnJpZGdlL3RyYW5zcG9ydFwiKTtcclxudmFyIFJlcG9zaXRvcnkgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVwb3NpdG9yeShjb25maWcpIHtcclxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydF8xLk1ldHJpY3NCcmlkZ2UodGhpcywgY29uZmlnLmNvbm5lY3Rpb24pO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBjb25maWcuaWRlbnRpdHkuc3lzdGVtICsgJy8nICsgY29uZmlnLmlkZW50aXR5LnNlcnZpY2UgKyAnLycgKyBjb25maWcuaWRlbnRpdHkuaW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy5pZGVudGl0eSA9IGNvbmZpZy5pZGVudGl0eTtcclxuICAgICAgICB0aGlzLl9zdGFydEhlYXJ0YmVhdGluZygpO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBzeXN0ZW1fMS5TeXN0ZW0oJycsIHRoaXMsIHRoaXMuX3RyYW5zcG9ydCk7XHJcbiAgICAgICAgdGhpcy5faW5pdFN5c3RlbU1ldHJpY3ModGhpcy5yb290LCBjb25maWcuY2xpY2tTdHJlYW0gfHwgY29uZmlnLmNsaWNrU3RyZWFtID09PSB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gICAgUmVwb3NpdG9yeS5wcm90b3R5cGUuX3N0YXJ0SGVhcnRiZWF0aW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LmhlYXJ0YmVhdCh0aGlzLCB0aGlzLl9jb25maWcuc2V0dGluZ3MuaGVhcnRiZWF0SW50ZXJ2YWwpO1xyXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuX3RyYW5zcG9ydC5oZWFydGJlYXQoX3RoaXMsIF90aGlzLl9jb25maWcuc2V0dGluZ3MuaGVhcnRiZWF0SW50ZXJ2YWwpO1xyXG4gICAgICAgIH0sIHRoaXMuX2NvbmZpZy5zZXR0aW5ncy5oZWFydGJlYXRJbnRlcnZhbCk7XHJcbiAgICB9O1xyXG4gICAgUmVwb3NpdG9yeS5wcm90b3R5cGUuX2luaXRTeXN0ZW1NZXRyaWNzID0gZnVuY3Rpb24gKHJvb3RTeXN0ZW0sIHVzZUNsaWNrU3RyZWFtKSB7XHJcbiAgICAgICAgaWYgKG5hdmlnYXRvcikge1xyXG4gICAgICAgICAgICByb290U3lzdGVtLnN0cmluZ01ldHJpYygnVXNlckFnZW50JywgbmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1c2VDbGlja1N0cmVhbSAmJiBkb2N1bWVudCkge1xyXG4gICAgICAgICAgICB2YXIgY2xpY2tTdHJlYW0gPSByb290U3lzdGVtLnN1YlN5c3RlbShcIkNsaWNrU3RyZWFtXCIpO1xyXG4gICAgICAgICAgICB2YXIgZG9jdW1lbnRDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNsaWNrU3RyZWFtLm9iamVjdE1ldHJpYyhcIkxhc3RCcm93c2VyRXZlbnRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogZS50YXJnZXQgPyBlLnRhcmdldC5jbGFzc05hbWUgOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGUudGFyZ2V0LmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnPCcgKyBlLnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyAnPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IGUudGFyZ2V0LmhyZWYgfHwgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjbGlja1N0cmVhbS5vYmplY3RNZXRyaWMoXCJQYWdlXCIsIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBkb2N1bWVudC50aXRsZSxcclxuICAgICAgICAgICAgICAgIHBhZ2U6IHdpbmRvdy5sb2NhdGlvbi5ocmVmXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkb2N1bWVudENsaWNrSGFuZGxlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hdHRhY2hFdmVudCgnb25jbGljaycsIGRvY3VtZW50Q2xpY2tIYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVwb3NpdG9yeTtcclxufSkoKTtcclxuZXhwb3J0cy5SZXBvc2l0b3J5ID0gUmVwb3NpdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVwb3NpdG9yeS5qcy5tYXAiLCJ2YXIgbnVtYmVyTWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNzL251bWJlck1ldHJpY1wiKTtcclxudmFyIHRpbWVzcGFuTWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNzL3RpbWVzcGFuTWV0cmljXCIpO1xyXG52YXIgc3RyaW5nTWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNzL3N0cmluZ01ldHJpY1wiKTtcclxudmFyIGFkZHJlc3NNZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY3MvYWRkcmVzc01ldHJpY1wiKTtcclxudmFyIG9iamVjdE1ldHJpY18xID0gcmVxdWlyZShcIi4vbWV0cmljcy9vYmplY3RNZXRyaWNcIik7XHJcbnZhciB0aW1lc3RhbXBNZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY3MvdGltZXN0YW1wTWV0cmljXCIpO1xyXG52YXIgY291bnRNZXRyaWNfMSA9IHJlcXVpcmUoXCIuL21ldHJpY3MvY291bnRNZXRyaWNcIik7XHJcbnZhciBzdGF0aXN0aWNzTWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNzL3N0YXRpc3RpY3NNZXRyaWNcIik7XHJcbnZhciByYXRlTWV0cmljXzEgPSByZXF1aXJlKFwiLi9tZXRyaWNzL3JhdGVNZXRyaWNcIik7XHJcbnZhciBTeXN0ZW0gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3lzdGVtKG5hbWUsIHJlcG8sIHRyYW5zcG9ydCwgcGFyZW50LCBkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMubWV0cmljcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3ViU3lzdGVtcyA9IFtdO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uIHx8ICcnO1xyXG4gICAgICAgIHRoaXMucmVwbyA9IHJlcG87XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHRoaXMuX2J1aWxkUGF0aCh0aGlzLnBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5pZCA9ICh0aGlzLnBhdGgubGVuZ3RoID4gMCA/IHRoaXMucGF0aC5qb2luKCcvJykgKyAnLycgOiAnJykgKyB0aGlzLm5hbWU7XHJcbiAgICAgICAgdGhpcy5pZGVudGl0eSA9IHJlcG8uaWRlbnRpdHk7XHJcbiAgICAgICAgdGhpcy5yb290ID0gcmVwby5yb290O1xyXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydC5jcmVhdGVTeXN0ZW0odGhpcyk7XHJcbiAgICB9XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLnN1YlN5c3RlbSA9IGZ1bmN0aW9uIChuYW1lLCBkZXNjcmlwdGlvbikge1xyXG4gICAgICAgIGlmICghbmFtZSB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25hbWUgaXMgcmVxdWlyZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1hdGNoaW5nU3lzdGVtcyA9IHRoaXMuc3ViU3lzdGVtcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMubmFtZSA9PT0gbmFtZTsgfSk7XHJcbiAgICAgICAgaWYgKG1hdGNoaW5nU3lzdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGluZ1N5c3RlbXNbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzeXN0ZW0gPSBuZXcgU3lzdGVtKG5hbWUsIHRoaXMucmVwbywgdGhpcy5fdHJhbnNwb3J0LCB0aGlzLCBkZXNjcmlwdGlvbik7XHJcbiAgICAgICAgdGhpcy5zdWJTeXN0ZW1zLnB1c2goc3lzdGVtKTtcclxuICAgICAgICByZXR1cm4gc3lzdGVtO1xyXG4gICAgfTtcclxuICAgIFN5c3RlbS5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LnVwZGF0ZVN5c3RlbSh0aGlzLCB7IHN0YXRlOiBzdGF0ZSwgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uIH0pO1xyXG4gICAgfTtcclxuICAgIFN5c3RlbS5wcm90b3R5cGUuc3RyaW5nTWV0cmljID0gZnVuY3Rpb24gKGRlZmluaXRpb24sIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3JDcmVhdGVNZXRyaWMoZGVmaW5pdGlvbiwgc3RyaW5nTWV0cmljXzEuU3RyaW5nTWV0cmljLnR5cGUsIHZhbHVlLCBmdW5jdGlvbiAobWV0cmljRGVmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgc3RyaW5nTWV0cmljXzEuU3RyaW5nTWV0cmljKG1ldHJpY0RlZiwgX3RoaXMsIF90aGlzLl90cmFuc3BvcnQsIHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLm51bWJlck1ldHJpYyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9yQ3JlYXRlTWV0cmljKGRlZmluaXRpb24sIG51bWJlck1ldHJpY18xLk51bWJlck1ldHJpYy50eXBlLCB2YWx1ZSwgZnVuY3Rpb24gKG1ldHJpY0RlZikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IG51bWJlck1ldHJpY18xLk51bWJlck1ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5jb3VudE1ldHJpYyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9yQ3JlYXRlTWV0cmljKGRlZmluaXRpb24sIGNvdW50TWV0cmljXzEuQ291bnRNZXRyaWMudHlwZSwgdmFsdWUsIGZ1bmN0aW9uIChtZXRyaWNEZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjb3VudE1ldHJpY18xLkNvdW50TWV0cmljKG1ldHJpY0RlZiwgX3RoaXMsIF90aGlzLl90cmFuc3BvcnQsIHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLmFkZHJlc3NNZXRyaWMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPckNyZWF0ZU1ldHJpYyhkZWZpbml0aW9uLCBhZGRyZXNzTWV0cmljXzEuQWRkcmVzc01ldHJpYy50eXBlLCB2YWx1ZSwgZnVuY3Rpb24gKG1ldHJpY0RlZikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGFkZHJlc3NNZXRyaWNfMS5BZGRyZXNzTWV0cmljKG1ldHJpY0RlZiwgX3RoaXMsIF90aGlzLl90cmFuc3BvcnQsIHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLm9iamVjdE1ldHJpYyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9yQ3JlYXRlTWV0cmljKGRlZmluaXRpb24sIG9iamVjdE1ldHJpY18xLk9iamVjdE1ldHJpYy50eXBlLCB2YWx1ZSwgZnVuY3Rpb24gKG1ldHJpY0RlZikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IG9iamVjdE1ldHJpY18xLk9iamVjdE1ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS50aW1lc3Bhbk1ldHJpYyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9yQ3JlYXRlTWV0cmljKGRlZmluaXRpb24sIHRpbWVzcGFuTWV0cmljXzEuVGltZXNwYW5NZXRyaWMudHlwZSwgdmFsdWUsIGZ1bmN0aW9uIChtZXRyaWNEZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyB0aW1lc3Bhbk1ldHJpY18xLlRpbWVzcGFuTWV0cmljKG1ldHJpY0RlZiwgX3RoaXMsIF90aGlzLl90cmFuc3BvcnQsIHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLnRpbWVzdGFtcE1ldHJpYyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9yQ3JlYXRlTWV0cmljKGRlZmluaXRpb24sIHRpbWVzdGFtcE1ldHJpY18xLlRpbWVzdGFtcE1ldHJpYy50eXBlLCB2YWx1ZSwgZnVuY3Rpb24gKG1ldHJpY0RlZikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHRpbWVzdGFtcE1ldHJpY18xLlRpbWVzdGFtcE1ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5yYXRlTWV0cmljID0gZnVuY3Rpb24gKGRlZmluaXRpb24sIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3JDcmVhdGVNZXRyaWMoZGVmaW5pdGlvbiwgcmF0ZU1ldHJpY18xLlJhdGVNZXRyaWMudHlwZSwgdmFsdWUsIGZ1bmN0aW9uIChtZXRyaWNEZWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyByYXRlTWV0cmljXzEuUmF0ZU1ldHJpYyhtZXRyaWNEZWYsIF90aGlzLCBfdGhpcy5fdHJhbnNwb3J0LCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU3lzdGVtLnByb3RvdHlwZS5zdGF0aXRpY3NNZXRyaWMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbiwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPckNyZWF0ZU1ldHJpYyhkZWZpbml0aW9uLCBzdGF0aXN0aWNzTWV0cmljXzEuU3RhdGlzdGljc01ldHJpYy50eXBlLCB2YWx1ZSwgZnVuY3Rpb24gKG1ldHJpY0RlZikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHN0YXRpc3RpY3NNZXRyaWNfMS5TdGF0aXN0aWNzTWV0cmljKG1ldHJpY0RlZiwgX3RoaXMsIF90aGlzLl90cmFuc3BvcnQsIHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLl91bmlvblRvTWV0cmljRGVmID0gZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcclxuICAgICAgICB2YXIgbWV0cmljRGVmO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgbWV0cmljRGVmID0geyBuYW1lOiBkZWZpbml0aW9uIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtZXRyaWNEZWYgPSBkZWZpbml0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWV0cmljRGVmLm5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldHJpYyBuYW1lIGlzIHJlcXVpcmVkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWV0cmljRGVmO1xyXG4gICAgfTtcclxuICAgIFN5c3RlbS5wcm90b3R5cGUuX2dldE9yQ3JlYXRlTWV0cmljID0gZnVuY3Rpb24gKGRlZmluaXRpb24sIGV4cGVjdGVkVHlwZSwgdmFsdWUsIGNyZWF0ZUZ1bmMpIHtcclxuICAgICAgICB2YXIgbWV0cmljRGVmID0gdGhpcy5fdW5pb25Ub01ldHJpY0RlZihkZWZpbml0aW9uKTtcclxuICAgICAgICB2YXIgbWF0Y2hpbmdNZXRyaWNzID0gdGhpcy5tZXRyaWNzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5uYW1lID09PSBtZXRyaWNEZWYubmFtZTsgfSk7XHJcbiAgICAgICAgaWYgKG1hdGNoaW5nTWV0cmljcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBleGlzdGluZ01ldHJpYyA9IG1hdGNoaW5nTWV0cmljc1swXTtcclxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nTWV0cmljLnR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIG1ldHJpYyBuYW1lZCAnICsgbWV0cmljRGVmLm5hbWUgKyAnIGlzIGFscmVhZHkgZGVmaW5lZCB3aXRoIGRpZmZlcmVudCB0eXBlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGV4aXN0aW5nTWV0cmljLnVwZGF0ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nTWV0cmljO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmV3TWV0cmljID0gY3JlYXRlRnVuYyhtZXRyaWNEZWYpO1xyXG4gICAgICAgIHRoaXMubWV0cmljcy5wdXNoKG5ld01ldHJpYyk7XHJcbiAgICAgICAgcmV0dXJuIG5ld01ldHJpYztcclxuICAgIH07XHJcbiAgICBTeXN0ZW0ucHJvdG90eXBlLl9idWlsZFBhdGggPSBmdW5jdGlvbiAoc3lzdGVtKSB7XHJcbiAgICAgICAgaWYgKCFzeXN0ZW0gfHwgIXN5c3RlbS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGF0aCA9IHRoaXMuX2J1aWxkUGF0aChzeXN0ZW0ucGFyZW50KTtcclxuICAgICAgICBwYXRoLnB1c2goc3lzdGVtLm5hbWUpO1xyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTeXN0ZW07XHJcbn0pKCk7XHJcbmV4cG9ydHMuU3lzdGVtID0gU3lzdGVtO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeXN0ZW0uanMubWFwIiwidmFyIHJlcG9zaXRvcnlfMSA9IHJlcXVpcmUoXCIuL2NvcmUvcmVwb3NpdG9yeVwiKTtcclxudmFyIHRpY2s0Ml9nYXRld2F5X2Nvbm5lY3Rpb25fMSA9IHJlcXVpcmUoJ3RpY2s0Mi1nYXRld2F5LWNvbm5lY3Rpb24nKTtcclxudmFyIHdpbmRvd0FzQW55ID0gd2luZG93O1xyXG53aW5kb3dBc0FueS50aWNrNDIgPSB3aW5kb3dBc0FueS50aWNrNDIgfHwge307XHJcbndpbmRvd0FzQW55LnRpY2s0Mi5tZXRyaWNzID0gd2luZG93QXNBbnkudGljazQyLm1ldHJpY3MgfHwgZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgaWYgKCFjb25maWcuaWRlbnRpdHkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lkZW50aXR5IG1pc3NpbmcgZnJvbSBtZXRyaWNzIGNvbmZpZ3VyYXRpb24nKTtcclxuICAgIH1cclxuICAgIGlmICghY29uZmlnLmlkZW50aXR5LnNlcnZpY2UgfHwgdHlwZW9mIGNvbmZpZy5pZGVudGl0eS5zZXJ2aWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2VydmljZSBtaXNzaW5nIG9yIGludmFsaWQgaW4gbWV0cmljcyBpZGVudGl0eSBjb25maWd1cmF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWNvbmZpZy5pZGVudGl0eS5zeXN0ZW0gfHwgdHlwZW9mIGNvbmZpZy5pZGVudGl0eS5zeXN0ZW0gIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTeXN0ZW0gbWlzc2luZyBvciBpbnZhbGlkIGluIG1ldHJpY3MgaWRlbnRpdHkgY29uZmlndXJhdGlvbicpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFjb25maWcuaWRlbnRpdHkuaW5zdGFuY2UgfHwgdHlwZW9mIGNvbmZpZy5pZGVudGl0eS5pbnN0YW5jZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3RhbmNlbWlzc2luZyBvciBpbnZhbGlkIGluIG1ldHJpY3MgaWRlbnRpdHkgY29uZmlndXJhdGlvbicpO1xyXG4gICAgfVxyXG4gICAgY29uZmlnLnNldHRpbmdzID0gY29uZmlnLnNldHRpbmdzIHx8IHt9O1xyXG4gICAgY29uZmlnLnNldHRpbmdzLmhlYXJ0YmVhdEludGVydmFsID0gY29uZmlnLnNldHRpbmdzLmhlYXJ0YmVhdEludGVydmFsIHx8IDE1MDAwO1xyXG4gICAgaWYgKHR5cGVvZiBjb25maWcuY29ubmVjdGlvbiAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIGNvbmZpZy5jb25uZWN0aW9uID0ge307XHJcbiAgICB9XHJcbiAgICBpZiAoISh0eXBlb2YgY29uZmlnLmNvbm5lY3Rpb24gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGNvbmZpZy5jb25uZWN0aW9uLnNlbmQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgY29uZmlnLmNvbm5lY3Rpb24ub24gPT09IFwiZnVuY3Rpb25cIikpIHtcclxuICAgICAgICBjb25maWcuY29ubmVjdGlvbiA9IHRpY2s0Ml9nYXRld2F5X2Nvbm5lY3Rpb25fMS5jb25uZWN0aW9uKGNvbmZpZy5jb25uZWN0aW9uKTtcclxuICAgIH1cclxuICAgIHZhciByZXBvID0gbmV3IHJlcG9zaXRvcnlfMS5SZXBvc2l0b3J5KGNvbmZpZyk7XHJcbiAgICByZXBvWyd2ZXJzaW9uJ10gPSByZXBvLnJvb3RbJ3ZlcnNpb24nXSA9ICcyLjAuMTEnO1xyXG4gICAgcmV0dXJuIHJlcG8ucm9vdDtcclxufTtcclxubW9kdWxlLmV4cG9ydHMgPSB3aW5kb3dBc0FueS50aWNrNDIubWV0cmljcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljc01vZHVsZS5qcy5tYXAiLCJ2YXIgd2luZG93cyA9IGZ1bmN0aW9uKGFnbSl7XHJcblx0XHJcblx0aWYoYWdtLnN1YnNjcmliZSl7XHJcblx0XHRhZ20uc3Vic2NyaWJlKFwiVDQyLlduZC5XaW5kb3dTdGF0ZUNoYW5nZWRcIiwge3RhcmdldDpcImFsbFwifSkudGhlbihmdW5jdGlvbihzdHJlYW0pe1xyXG5cdFx0XHRzdHJlYW0ub25EYXRhKGZ1bmN0aW9uIChzdHJlYW1EYXRhKSB7XHJcblx0XHRcdFx0dXBkYXRlX3dpbmRvdyhzdHJlYW1EYXRhLmRhdGEsIGNvbnRhaW5lcl9mcm9tX2ZpbHRlcihzdHJlYW1EYXRhLnNlcnZlcikpO1xyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdC8vIGF0dGFjaCBjYWxsYmFja3NcclxuXHRcdFx0Ly9zdHJlYW0ub24oXCJlbmRcIiwgaGFuZGxlU3RyZWFtQ2xvc2VkKTtcclxuXHRcdFx0Ly9zdHJlYW0ub24oXCJjbG9zZVwiLCBoYW5kbGVTdHJlYW1DbG9zZWQpO1xyXG5cclxuXHRcdH0pO1xyXG5cclxuXHR9XHJcblx0Ly9TdG9yZSB3aW5kb3dzIHRoYXQgYXJlIHRyYWNrZWQgYnkgSUQgYW5kIHJlY2VpdmUgdXBkYXRlc1x0XHJcblx0dmFyIHdpbmRvd3MgPSB7fTtcdFxyXG5cclxuXHRmdW5jdGlvbiB1cGRhdGVfd2luZG93ICh3aW5kb3dfaW5mbywgY29udGFpbmVyX25hbWUpe1xyXG5cdFx0XHJcblx0XHR2YXIgd2luZG93X2lkID0gY29udGFpbmVyX25hbWUrXCIuXCIrd2luZG93X2luZm8ud2luZG93TmFtZTtcclxuXHJcblx0XHR2YXIgdGhlX3dpbmRvdyA9IHdpbmRvd3Nbd2luZG93X2lkXTtcclxuXHRcdCBcclxuXHRcdGlmICh0aGVfd2luZG93ID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0Ly9JZiB0aGUgdXNlciBpcyBzdWJzY3JpYmVkIGZvciB0aGUgZ2xvYmFsIGV2ZW50cywgY3JlYXRlIHRoZSB3aW5kb3cgb2JqZWN0LlxyXG5cdFx0XHRpZiggZ2V0X2NhbGxiYWNrcyh3aW5kb3dfYWRkZWRfY2FsbGJhY2tzLCBjb250YWluZXJfbmFtZSkubGVuZ3RoID4gMCB8fCBnZXRfY2FsbGJhY2tzKHdpbmRvd19yZW1vdmVkX2NhbGxiYWNrcywgY29udGFpbmVyX25hbWUpLmxlbmd0aCA+IDAgKSB7XHJcblx0XHRcdFx0dGhlX3dpbmRvdyA9IGFfd2luZG93X2Zyb20od2luZG93X2luZm8ud2luZG93TmFtZSwgY29udGFpbmVyX25hbWUsIHdpbmRvd19pbmZvLnVybCwgd2luZG93X2luZm8ud2luZG93SWQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRpZih0aGVfd2luZG93LmlkID09PSB1bmRlZmluZWQpe1xyXG5cdFx0XHR0aGVfd2luZG93LmlkID0gd2luZG93X2luZm8ud2luZG93SWQ7XHJcblx0XHRcdGV4ZWNfY2FsbGJhY2tzKHRoZV93aW5kb3cuY2FsbGJhY2tzLm9uX2F2YWlsYWJsZSwgdGhlX3dpbmRvdyk7XHJcblx0XHR9IFxyXG5cdFx0XHJcblx0XHRpZiAodGhlX3dpbmRvdy51cmwgIT09IHdpbmRvd19pbmZvLnVybCl7XHJcblx0XHRcdHRoZV93aW5kb3cudXJsID0gd2luZG93X2luZm8udXJsO1xyXG5cdFx0XHRleGVjX2NhbGxiYWNrcyh0aGVfd2luZG93LmNhbGxiYWNrcy5vbl91cmxfY2hhbmdlZCwgd2luZG93X2luZm8udXJsKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0aWYod2luZG93X2luZm8uc3RhdGUgPT09XCJDcmVhdGVkXCIpe1xyXG5cdFx0XHQvL0V4ZWN1dGUgZ2xvYmFsIFwid2luZG93X2FkZGVkXCIgY2FsbGJhY2tzXHJcblx0XHRcdGV4ZWNfY2FsbGJhY2tzKGdldF9jYWxsYmFja3Mod2luZG93X2FkZGVkX2NhbGxiYWNrcywgY29udGFpbmVyX25hbWUpLCB0aGVfd2luZG93KTtcclxuXHRcdH0gXHJcblx0XHRcdFxyXG5cdFx0Ly9DbGVhciB0aGUgd2luZG93IG9uIGNsb3NlIGV2ZW50XHJcblx0XHRpZih3aW5kb3dfaW5mby5zdGF0ZSA9PT1cIkNsb3NlZFwiKXtcclxuXHRcdFx0Ly9FeGVjdXRlIGdsb2JhbCBcIndpbmRvd19yZW1vdmVkXCIgY2FsbGJhY2tzXHJcblx0XHRcdGV4ZWNfY2FsbGJhY2tzKGdldF9jYWxsYmFja3Mod2luZG93X3JlbW92ZWRfY2FsbGJhY2tzLCBjb250YWluZXJfbmFtZSksIHRoZV93aW5kb3cpO1xyXG5cdFx0XHQvL0V4ZWN1dGUgd2luZG93LXNwZWNpZmljIFwid2luZG93X3JlbW92ZWRcIiBjYWxsYmFja3NcclxuXHRcdFx0ZXhlY19jYWxsYmFja3ModGhlX3dpbmRvdy5jYWxsYmFja3Mub25fY2xvc2UpO1xyXG5cdFx0XHQvL1JlZnJlc2ggdGhlIHdpbmRvdyBvYmplY3Qgc3RhdGVcclxuXHRcdFx0dGhlX3dpbmRvdy5pZCA9IHVuZGVmaW5lZDtcclxuXHRcdFx0dGhlX3dpbmRvdy5jYWxsYmFja3MgPSB7fTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvL0NyZWF0ZSBhIGRpY3Rpb25hcnkgdG8gc3RvcmUgdGhlIGNhbGxiYWNrcyBmb3IgdGhlIG1ldGhvZCBcIndpbmRvd19hZGRlZFwiLlxyXG5cdHZhciB3aW5kb3dfYWRkZWRfY2FsbGJhY2tzID0ge1xyXG5cdFx0Y29udGFpbmVyc19jYWxsYmFja3M6IHt9LCBcclxuXHRcdGFsbF9jb250YWluZXJzX2NhbGxiYWNrczogW11cclxuXHR9O1x0XHJcblx0XHJcblx0Ly9DcmVhdGUgYSBkaWN0aW9uYXJ5IHRvIHN0b3JlIHRoZSBjYWxsYmFja3MgZm9yIHRoZSBtZXRob2QgXCJ3aW5kb3dfcmVtb3ZlZFwiLlxyXG5cdHZhciB3aW5kb3dfcmVtb3ZlZF9jYWxsYmFja3MgPSB7XHJcblx0XHRjb250YWluZXJzX2NhbGxiYWNrczoge30sXHJcblx0XHRhbGxfY29udGFpbmVyc19jYWxsYmFja3M6IFtdXHJcblx0fTtcclxuXHRcclxuXHQvL0NyZWF0ZXMgYSBuZXcgd2luZG93IG9iamVjdCBvciByZXR1cm5zIGFuIGV4aXN0aW5nIG9uZVxyXG5cdC8vQWNjZXB0cyB3aW5kb3cgbmFtZSwgY29udGFpbmVyIGFuZCBVUkxcclxuXHQvL1JldHVybnMgYSB3aW5kb3cgb2JqZWN0LlxyXG5cdFxyXG5cdC8vSXQgaXMgbm90IGd1YXJhbnRlZWQgdG8gcmV0dXJuIHRoZSB3aW5kb3cgd2l0aCB0aGUgc2FtZSBVUkwgYW5kIElEXHJcblx0ZnVuY3Rpb24gYV93aW5kb3dfZnJvbShuYW1lLCBjb250YWluZXIsIHVybCwgaWQpe1xyXG5cdFx0XHJcblx0XHQvL0J5IGRlZmF1bHQgd2UgYXJlIHVzaW5nIG91ciBvd24gY29udGFpbmVyXHJcblx0XHRjb250YWluZXIgPSBjb250YWluZXJ8fCh3aW5kb3cuaHRtbENvbnRhaW5lciAhPT0gdW5kZWZpbmVkP2h0bWxDb250YWluZXIuY29udGFpbmVyTmFtZTp1bmRlZmluZWQpO1xyXG5cdFx0XHJcblx0XHQvL1Rocm93IGlmIHdlIGRvbid0IGtub3cgdGhlIGNvbnRhaW5lciwgdGhyb3dcclxuXHRcdGlmKGNvbnRhaW5lciA9PT0gdW5kZWZpbmVkKXt0aHJvdyBcIlBsZWFzZSBzcGVjaWZ5IGEgY29udGFpbmVyLlwiO31cclxuXHJcblx0XHR2YXIgd2luZG93X2lkID0gY29udGFpbmVyK1wiLlwiK25hbWU7XHJcblx0XHRcclxuXHRcdHZhciBleGlzdGluZ193aW5kb3cgPSB3aW5kb3dzW3dpbmRvd19pZF0gO1xyXG5cclxuXHRcdGlmKGV4aXN0aW5nX3dpbmRvdyE9PXVuZGVmaW5lZCl7XHJcblx0XHRcdFxyXG5cdFx0XHQvL0lmIHRoZSB3aW5kb3cgaXMgY2xvc2VkLCB1cGRhdGUgdGhlIFVSTCBpbiB0aGUgcmVmZXJlbmNlXHJcblx0XHRcdGlmKCFleGlzdGluZ193aW5kb3cub3BlbmVkKCkpe1xyXG5cdFx0XHRcdGV4aXN0aW5nX3dpbmRvdy51cmwgPSB1cmw7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGV4aXN0aW5nX3dpbmRvdztcclxuXHRcdH1lbHNle1xyXG5cclxuXHRcdFx0Ly9Jbml0IG9iamVjdFxyXG5cdFx0XHR2YXIgd2luZG93X29iaiA9IE9iamVjdC5jcmVhdGUod2luZG93X3Byb3RvKTtcclxuXHRcdFx0d2luZG93X29iai5uYW1lID0gbmFtZTtcclxuXHRcdFx0d2luZG93X29iai5jb250YWluZXIgPSBjb250YWluZXI7XHJcblx0XHRcdHdpbmRvd19vYmoudXJsID0gdXJsO1xyXG4gICAgICAgICAgICB3aW5kb3dfb2JqLmlkID0gaWQ7XHJcblx0XHRcdHdpbmRvd19vYmouY2FsbGJhY2tzID0ge307XHRcdFx0XHJcblxyXG5cdFx0XHQvL0luc2VydCBBR00gc2VydmVyIHByb3BlcnRpZXNcclxuXHRcdFx0d2luZG93X29iai5hcHBsaWNhdGlvbiA9IHdpbmRvd19pZDtcclxuXHRcdFx0XHJcblx0XHRcdHdpbmRvd3Nbd2luZG93X2lkXSA9IHdpbmRvd19vYmo7XHJcblxyXG5cdFx0XHRyZXR1cm4gd2luZG93X29iajtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0Ly9CaW5kcyBhIGdpdmVuIHdpbmRvdyBvYmplY3QgdG8gYW4gYWN0dWFsIHdpbmRvd1xyXG5cdGZ1bmN0aW9uIGJpbmRfd2luZG93KHRoZV93aW5kb3csIHN1Y2Nlc3MsIGVycm9yKXtcclxuXHRcdFxyXG5cdFx0Ly9UeXBpY2FsbHkgdGhlIGJpbmRpbmcgb2NjdXJzIHdoZW4gd2UgcmVjZWl2ZSBhbiBldmVudCwgc28gd2Ugd2lsbCByZXRyaWV2ZSBzb21lIGluZm8gYWJvdXQgdGhlIHdpbmRvd1xyXG5cdFx0Ly9hbmQgaWYgaXQgZXhpc3RzIHdlIHdpbGwgdHJpZ2dlciBhbiBhcnRpZmljaWFsIGV2ZW50IHdpdGggaXQuIFxyXG5cclxuXHRcdC8vQ2hlY2sgaWYgdGhlIHdpbmRvdyBpc24ndCBhbHJlYWR5IGJvdW5kXHJcblx0XHRpZih0aGVfd2luZG93LmlkPT09dW5kZWZpbmVkKXtcclxuXHRcdFx0XHJcblx0XHRcdC8vUmV0cmlldmUgd2luZG93IHBhcmFtZXRlcnMgXHRcclxuXHRcdFx0YWdtLmludm9rZShcIlQ0Mi5XbmQuRmluZEJ5TmFtZVwiLCB7d2luZG93TmFtZTp0aGVfd2luZG93Lm5hbWV9LCBjb250YWluZXJfZmlsdGVyKHRoZV93aW5kb3cuY29udGFpbmVyKSwge30sIGJpbmRfZnJvbV9pbmZvLCBlcnJvcik7XHJcblx0XHRcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRpbnZva2VfYWdtX3N1Y2Nlc3NfY2FsbGJhY2soc3VjY2VzcywgdGhlX3dpbmRvdyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhlX3dpbmRvdztcclxuXHJcblx0XHRmdW5jdGlvbiBiaW5kX2Zyb21faW5mbyhlKXtcclxuXHRcdFx0Ly9SZXRyaWV2ZSB3aW5kb3cgaW5mbyAoYSBiaXQgaGFja3kgYmVjYXVzZSB0aGUgcmVzcG9uc2UgZm9ybWF0IGlzIHdlaXJkKVxyXG5cdFx0XHR2YXIgd2luZG93X2luZm8gPSB2YWxzKGUucmV0dXJuZWQpWzBdO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYod2luZG93X2luZm89PT11bmRlZmluZWQpe1xyXG5cdFx0XHRcdGlmKHR5cGVvZiBlcnJvciA9PT0gXCJmdW5jdGlvblwiKXtlcnJvcihcIndlIGNvdW5kIG5vdCBvcGVuL2ZpbmQgdGhpcyB3aW5kb3dcIik7fVxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHQvL1RyaWdnZXIgYW4gZXZlbnRcclxuXHRcdFx0XHR3aW5kb3dfaW5mby5zdGF0ZSA9IFwiQXR0YWNoZWRcIjtcclxuXHRcdFx0XHR1cGRhdGVfd2luZG93KHdpbmRvd19pbmZvLCB0aGVfd2luZG93LmNvbnRhaW5lcik7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Ly9FeGVjIHVzZXIgY2FsbGJhY2tcclxuXHRcdFx0XHRpbnZva2VfYWdtX3N1Y2Nlc3NfY2FsbGJhY2soc3VjY2VzcywgdGhlX3dpbmRvdyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vRnVuY3Rpb25zIGZvciBvcGVuaW5nLCBjbG9zaW5nLCByZXNpemluZyB3aW5kb3dzXHJcblx0dmFyIHdpbmRvd19wcm90byA9IHtcclxuXHRcdFxyXG5cdFx0b3BlbjpmdW5jdGlvbihkaW1lbnNpb25zLCBzdHlsZSwgc3VjY2VzcywgZXJyb3Ipe1xyXG5cdFx0XHRcclxuXHJcblx0XHRcdC8vQSB3cmFwcGVyIGZvciB0aGUgc3RhbmRhcmQgQUdNIFwib3BlblwiIGZ1bmN0aW9uIFxyXG5cdFx0XHRcclxuXHRcdFx0dmFyIHRoZV93aW5kb3cgPSB0aGlzO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly9Jbml0IHN0eWxlIG9iamVjdHMgaWYgdGhleSBhcmUgbnVsbFxyXG5cdFx0XHRkaW1lbnNpb25zPWRpbWVuc2lvbnN8fHt9O1xyXG4gICAgICAgICAgICBcdFx0c3R5bGU9c3R5bGV8fHt9O1xyXG5cdFx0XHRcclxuXHRcdFx0Ly9UYWtlIG91dCB0aGUgc3RpY2t5LXdpbmRvd3MgcmVsYXRlZCBwcm9wZXJ0aWVzIGZyb20gdGhlIHN0eWxlIG9iamVjdFxyXG5cdFx0XHRcclxuXHRcdFx0dmFyIGlzU3RpY2t5ID0gc3R5bGUuaXNTdGlja3k7XHJcblx0XHRcdGRlbGV0ZSBzdHlsZS5pc1N0aWNreTtcclxuXHJcblx0XHRcdHZhciBzdGlja3lHcm91cCA9IHN0eWxlLnN0aWNreUdyb3VwO1xyXG5cdFx0XHRkZWxldGUgc3R5bGUuc3RpY2t5R3JvdXA7XHJcblxyXG5cclxuXHJcblx0XHRcdFxyXG5cdFx0XHRhZ20uaW52b2tlKFwiVDQyLkh0bWwuQ3JlYXRlV2luZG93XCIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHRcdFx0Ly9XaW5kb3cgbmFtZSBhbmQgdXJsXHJcblx0XHQgICAgICAgXHR3aW5kb3dOYW1lOnRoZV93aW5kb3cubmFtZSwgdXJsOnRoZV93aW5kb3cudXJsLCBcclxuXHRcdFx0Ly9kaW1lbnNpb25zXHJcblx0XHQgICAgICAgXHR0b3A6ZGltZW5zaW9ucy50b3AsIGxlZnQ6ZGltZW5zaW9ucy5sZWZ0LCB3aWR0aDpkaW1lbnNpb25zLndpZHRoLCBoZWlnaHQ6ZGltZW5zaW9ucy5oZWlnaHQsIFxyXG5cdFx0XHQvL1N0aWNreXdpbmRvd3MgLSByZWxhdGVkIHByb3BzXHJcblx0XHRcdGlzU3RpY2t5OiBpc1N0aWNreSwgc3RpY2t5R3JvdXA6c3RpY2t5R3JvdXAsIFxyXG5cdFx0XHQvL1N0eWxlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgIFx0d2luZG93U3R5bGVBdHRyaWJ1dGVzOkpTT04uc3RyaW5naWZ5KHN0eWxlKVxyXG5cdFx0XHRcclxuXHRcdFx0fSwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyX2ZpbHRlcih0aGVfd2luZG93LmNvbnRhaW5lciksIFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHt9LCBcclxuICAgICAgICAgICAgICAgICAgICAgICBvcGVuZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgY2Fubm90X29wZW4pO1xyXG5cdFx0XHRcclxuXHRcdFx0ZnVuY3Rpb24gb3BlbmVkKG1lc3NhZ2Upe1xyXG5cdFx0XHRcdC8vQWRkIGlkIHRvIHRoZSBjdXJyZW50IHdpbmRvd3MgYmVjYXVzZSB0aGUgY3VycmVudCBIVE1MIENvbnRhaW5lclxyXG5cdFx0XHRcdC8vZG9lc24ndCBzdXBwb3J0IHRyYWNraW5nIHRoZSB1cGRhdGVzIG9mIHRoZSB3aW5kb3dcdFx0XHRcdFxyXG5cdFx0XHRcdGlmKG1lc3NhZ2UucmV0dXJuZWQgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0dGhlX3dpbmRvdy5pZCA9IG1lc3NhZ2UucmV0dXJuZWQuaWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGludm9rZV9hZ21fc3VjY2Vzc19jYWxsYmFjayhzdWNjZXNzLCB0aGVfd2luZG93KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gY2Fubm90X29wZW4oZSl7XHJcblx0XHRcdFx0Ly9DYWxsIHRoZSBlcnJvciBjYWxsYmFja1xyXG5cdFx0XHRcdGlmKHR5cGVvZiBlcnJvciA9PT0gXCJmdW5jdGlvblwiKSB7ZXJyb3IoZSk7fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8vVHJ5IHRvIGJpbmQgdGhlIHJldHVybmVkIG9iamVjdCBpbiBjYXNlLi4uXHJcblx0XHRcdFx0YmluZF93aW5kb3codGhlX3dpbmRvdyk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiB0aGVfd2luZG93O1xyXG5cdFx0fSxcclxuICAgICAgICBzZXRfc3R5bGU6ZnVuY3Rpb24oc3R5bGUsIHN1Y2Nlc3MsIGVycm9yKXsgcmV0dXJuIGFnbV9hY3Rpb24oXCJUNDIuV25kLlNldFdpbmRvd1N0eWxlXCIpLmNhbGwodGhpcywgc3VjY2VzcywgZXJyb3Ise3dpbmRvd1N0eWxlQXR0cmlidXRlczpKU09OLnN0cmluZ2lmeShzdHlsZSl9KTt9LFxyXG4gICAgICAgXHJcblx0ICAgIG9wZW5lZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlkIT09dW5kZWZpbmVkO30sXHJcblxyXG5cdFx0b25fYXZhaWxhYmxlOmFkZF9jYWxsYmFjayhcIm9uX2F2YWlsYWJsZVwiLCBmdW5jdGlvbih0aGVfd2luZG93LCBjYWxsYmFjayl7aWYodGhlX3dpbmRvdy5vcGVuZWQoKSl7Y2FsbGJhY2sodGhlX3dpbmRvdyk7fX0pLFxyXG5cclxuXHRcdGNsb3NlOmFnbV9hY3Rpb24oXCJUNDIuV25kLkNsb3NlXCIpLFxyXG5cclxuXHRcdG9uX2Nsb3NlOmFkZF9jYWxsYmFjayhcIm9uX2Nsb3NlXCIpLFxyXG5cclxuXHRcdG5hdmlnYXRlOmZ1bmN0aW9uKHVybCwgc3VjY2VzcywgZXJyb3IpeyByZXR1cm4gYWdtX2FjdGlvbihcIlQ0Mi5IdG1sLk9wZW5VcmxcIikuY2FsbCh0aGlzLCBzdWNjZXNzLCBlcnJvcix7dXJsOnVybH0pO30sXHJcblxyXG5cdFx0b25fdXJsX2NoYW5nZWQ6YWRkX2NhbGxiYWNrKFwib25fdXJsX2NoYW5nZWRcIiksXHJcblxyXG5cdFx0Zm9jdXM6YWdtX2FjdGlvbihcIlQ0Mi5XbmQuQWN0aXZhdGVcIiksXHJcblx0XHRcclxuXHRcdHNldF90aXRsZTpmdW5jdGlvbih0aXRsZSwgc3VjY2VzcywgZXJyb3Ipe1xyXG5cdFx0XHQvL0ludm9rZSB0aGUgQUdNIG1ldGhvZFxyXG5cdFx0XHRhZ20uaW52b2tlKFwiVDQyLlduZC5TZXRXaW5kb3dUaXRsZVwiLCB7d2luZG93SWQ6IHRoaXMuaWQsIHRpdGxlOnRpdGxlfSwgY29udGFpbmVyX2ZpbHRlcih0aGlzLmNvbnRhaW5lciksIHt9LCB0aXRsZV9pc19zZXQsIHRpdGxlX2Nhbm5vdF9iZV9zZXQpO1xyXG5cdFx0XHRcclxuXHRcdFx0ZnVuY3Rpb24gdGl0bGVfaXNfc2V0KCkge1xyXG5cdFx0XHRcdGludm9rZV9hZ21fc3VjY2Vzc19jYWxsYmFjayhzdWNjZXNzLCB0aGlzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0ZnVuY3Rpb24gdGl0bGVfY2Fubm90X2JlX3NldChlKSB7XHJcblx0XHRcdFx0aW52b2tlX2FnbV9lcnJvcl9jYWxsYmFjayhlcnJvciwgZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdGdldF9kZXRhaWxzOmZ1bmN0aW9uKHN1Y2Nlc3MsIGVycm9yKSB7XHJcblx0XHRcdHZhciB3aW5kb3dfaWQgPSB0aGlzLmlkO1xyXG5cdFx0XHRhZ20uaW52b2tlKFwiVDQyLlduZC5GaW5kQnlJZFwiLCB7d2luZG93SWQ6IHRoaXMuaWR9LCBjb250YWluZXJfZmlsdGVyKHRoaXMuY29udGFpbmVyKSwge30sIHJldHVybmVkX2RpbWVuc2lvbnMsIGNhbm5vdF9yZXR1cm5fZGltZW5zaW9ucyk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiByZXR1cm5lZF9kaW1lbnNpb25zKHZhbHVlKSB7XHJcblx0XHRcdFx0aW52b2tlX2FnbV9zdWNjZXNzX2NhbGxiYWNrKHN1Y2Nlc3MsIHZhbHVlLnJldHVybmVkW3dpbmRvd19pZF0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRmdW5jdGlvbiBjYW5ub3RfcmV0dXJuX2RpbWVuc2lvbnMoZSkge1xyXG5cdFx0XHRcdGludm9rZV9hZ21fZXJyb3JfY2FsbGJhY2soZXJyb3IsIGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHRtb3ZlX3Jlc2l6ZTpmdW5jdGlvbihkaW1lbnNpb25zLCBzdWNjZXNzLCBlcnJvcil7IHJldHVybiBhZ21fYWN0aW9uKFwiVDQyLlduZC5yZXNpemVBbmRNb3ZlXCIpLmNhbGwodGhpcywgc3VjY2VzcywgZXJyb3IsIGRpbWVuc2lvbnMpO30sXHJcblx0XHRcclxuXHRcdG1heGltaXplOmFnbV9hY3Rpb24oXCJUNDIuV25kLk1heGltaXplXCIpLFxyXG5cdFx0XHJcblx0XHRyZXN0b3JlOmFnbV9hY3Rpb24oXCJUNDIuV25kLlJlc3RvcmVcIiksXHJcblxyXG5cdFx0bWluaW1pemU6YWdtX2FjdGlvbihcIlQ0Mi5XbmQuTWluaW1pemVcIiksXHJcblx0XHRcclxuXHRcdG1heGltaXplX3Jlc3RvcmU6YWdtX2FjdGlvbihcIlQ0Mi5XbmQuTWF4aW1pemVPclJlc3RvcmVEb3duXCIpXHRcclxuXHR9O1xyXG5cdFxyXG5cdC8vQWRkcyBhbiBhbGlhcyBvZiBhbiBBR00gbWV0aG9kIGluIHRoZSBXaW5kb3cgcHJvdG90eXBlXHJcblx0ZnVuY3Rpb24gYWdtX2FjdGlvbihhY3Rpb24pe1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHN1Y2Nlc3MsIGVycm9yLCBhcmdzKXtcclxuXHJcblx0XHRcdC8vU3RvcCBpZiB0aGUgd2luZG93IGlzIGNsb3NlZFxyXG5cdFx0XHRpZih0aGlzLnVybCA9PT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0XHRpZih0eXBlb2YgZXJyb3IgPT09IFwiZnVuY3Rpb25cIil7ZXJyb3IoXCJDYW5ub3QgZXhlY3V0ZSBhIGNvbW1hbmQgb24gYSBjbG9zZWQgd2luZG93LlwiKTt9XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm47fVxyXG5cclxuXHRcdFx0Ly9BZGQgdGhlIHdpbmRvdyBJRCB0byB0aGUgYXJndW1lbnRzXHJcblx0XHRcdGFyZ3MgPSBhcmdzfHx7fTtcclxuXHRcdFx0YXJncy53aW5kb3dJZCA9IHRoaXMuaWQ7XHJcblxyXG5cdFx0XHQvL0ludm9rZSB0aGUgQUdNIG1ldGhvZFxyXG5cdFx0XHRhZ20uaW52b2tlKGFjdGlvbiwgYXJncywgY29udGFpbmVyX2ZpbHRlcih0aGlzLmNvbnRhaW5lciksIHt9LCBmdWxmaWxsZWQsIGVycm9yKTtcclxuXHJcblx0XHRcdHZhciB0aGVfd2luZG93ID0gdGhpcztcclxuXHRcdFx0ZnVuY3Rpb24gZnVsZmlsbGVkKCl7XHJcblx0XHRcdFx0aW52b2tlX2FnbV9zdWNjZXNzX2NhbGxiYWNrKHN1Y2Nlc3MsIHRoZV93aW5kb3cpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fTtcclxuXHR9XHJcblx0XHRcclxuXHQvL1RoZSBBUEkgaXRzZWxmXHJcblx0dmFyIGFwaSA9IHtcclxuXHJcblx0XHRteTpmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0dmFyIGggPSB3aW5kb3cuaHRtbENvbnRhaW5lcjtcdFx0XHRcclxuXHRcdFx0Ly9SZXRyaWV2ZSB0aGUgY3VycmVudCB3aW5kb3cgKHRoZSBvbncgaW4gd2hpY2ggeW91ciBhcHBsaWNhdGlvbiBjdXJyZW50bHkgcmVzaWRlcykuXHJcblx0XHRcdHJldHVybiBoID09PSB1bmRlZmluZWQ/IHVuZGVmaW5lZDogYV93aW5kb3dfZnJvbShoLmJyb3dzZXJXaW5kb3dOYW1lLCBoLmNvbnRhaW5lck5hbWUsIHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBoLndpbmRvd0lkKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdG9wZW46ZnVuY3Rpb24obmFtZSwgdXJsLCBjb250YWluZXIsIGRpbWVuc2lvbnMsIHN0eWxlLCBzdWNjZXNzLCBlcnJvcil7XHJcblx0XHRcdHJldHVybiBhX3dpbmRvd19mcm9tKG5hbWUsIGNvbnRhaW5lciwgdXJsKS5vcGVuKGRpbWVuc2lvbnMsIHN0eWxlLCBzdWNjZXNzLCBlcnJvcik7XHJcblx0XHR9LFxyXG5cclxuXHRcdGZpbmQ6ZnVuY3Rpb24obmFtZSwgY29udGFpbmVyLCBzdWNjZXNzLCBlcnJvcil7XHJcblx0XHRcdHJldHVybiBiaW5kX3dpbmRvdyhhX3dpbmRvd19mcm9tKG5hbWUsIGNvbnRhaW5lciksIHN1Y2Nlc3MsIGVycm9yKTtcclxuXHRcdH0sXHJcblx0XHRfZnJvbV9ldmVudDphX3dpbmRvd19mcm9tLFxyXG5cclxuXHRcdGxpc3Q6ZnVuY3Rpb24oY29udGFpbmVyLCBzdWNjZXNzLCBlcnJvcil7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3VjY2VzcyAhPT0gJ2Z1bmN0aW9uJyl7cmV0dXJuO31cclxuICAgICAgICAgICAgXHJcblx0XHRcdGFnbS5pbnZva2UoXCJUNDIuV25kLkxpc3RXaW5kb3dzXCIsIHt9LCBjb250YWluZXJfZmlsdGVyKGNvbnRhaW5lciksIHt3YWl0X2Zvcl9tZXRob2RfdGltZW91dDogMTUwMDB9LCBsaXN0ZWQsIGNhbm5vdF9saXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgZnVuY3Rpb24gbGlzdGVkKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIFx0aWYodmFsdWUucmV0dXJuZWQgPT09IHVuZGVmaW5lZCl7c3VjY2VzcyhbXSkgO3JldHVybjt9XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFscyh2YWx1ZS5yZXR1cm5lZCkubWFwKGZ1bmN0aW9uKG9wZW5lZF93aW5kb3cpeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYV93aW5kb3dfZnJvbShvcGVuZWRfd2luZG93LndpbmRvd05hbWUsIGNvbnRhaW5lciwgb3BlbmVkX3dpbmRvdy51cmwsIG9wZW5lZF93aW5kb3cud2luZG93SWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIFxyXG5cdFx0XHRmdW5jdGlvbiBjYW5ub3RfbGlzdChlKSB7XHJcblx0XHRcdFx0aW52b2tlX2FnbV9lcnJvcl9jYWxsYmFjayhlcnJvciwgZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8vQWRkIGNhbGxiYWNrIGZvciB3aW5kb3cgYWRkZWQgZm9yIHRoZSBsaXN0IG9mIGNvbnRhaW5lcnMuXHJcblx0XHR3aW5kb3dfYWRkZWQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250YWluZXIpIHtcclxuXHRcdFx0Ly9BZGQgdGhlIGN1cnJlbnQgY2FsbGJhY2sgdG8gdGhlIGNhbGxiYWNrIGRpY3Rpb25hcnkuXHJcblx0XHRcdHB1dF9jYWxsYmFja3Mod2luZG93X2FkZGVkX2NhbGxiYWNrcywgY2FsbGJhY2ssIGNvbnRhaW5lcik7XHJcblxyXG5cdFx0XHQvL0V4ZWN1dGUgYWxsIHRoZSBjYWxsYmFja3MgZm9yIGFscmVhZHkgZXhpc3Rpbmcgd2luZG93cy5cclxuXHRcdFx0XHJcblx0XHRcdC8vR2V0IGFsbCBleGlzdGluZyBodG1sIGNvbnRhaW5lcnMuXHJcblx0XHRcdGFwaS5jb250YWluZXJfYWRkZWQoZnVuY3Rpb24oc2VydmVyKSB7XHJcblx0XHRcdFx0Ly9JZiB0aGUgdXNlciBpcyBzdWJzY3JpYmVkIHRvIHRoZSBjb250YWluZXJcclxuXHRcdFx0XHRpZihjb250YWluZXIgPT09IHVuZGVmaW5lZCB8fCBjb250YWluZXIgPT09IHNlcnZlcikge1xyXG5cdFx0XHRcdFx0Ly9saXN0IGFsbCB0aGUgd2luZG93cyBpbiB0aGUgY29udGFpbmVyLlxyXG5cdFx0XHRcdFx0YXBpLmxpc3Qoc2VydmVyLCBcclxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24obGlzdF9vZl93aW5kb3dzKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly9leGVjdXRlIHRoZSBjYWxsYmFjayBmb3IgZWFjaCB3aW5kb3cuXHJcblx0XHRcdFx0XHRcdFx0bGlzdF9vZl93aW5kb3dzLmZvckVhY2goZnVuY3Rpb24oZXhpc3Rpbmdfd2luZG93KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFjayhleGlzdGluZ193aW5kb3cpO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHQvL0Vycm9yIGNhbGxiYWNrIGlmIHRoZSB3aW5kb3dzIGNhbm5vdCBiZSBsaXN0ZWQuXHJcblx0XHRcdFx0XHRcdGZ1bmN0aW9uKGUpIHtjb25zb2xlLmxvZygnVW5hYmxlIHRvIGxvYWQgZXhpc3Rpbmcgd2luZG93cy4gJyArIGUubWVzc2FnZSk7fVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0d2luZG93X3JlbW92ZWQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250YWluZXIpIHtcclxuXHRcdFx0Ly9BZGQgdGhlIGN1cnJlbnQgY2FsbGJhY2sgdG8gdGhlIGNhbGxiYWNrIGRpY3Rpb25hcnkuXHJcblx0XHRcdHB1dF9jYWxsYmFja3Mod2luZG93X3JlbW92ZWRfY2FsbGJhY2tzLCBjYWxsYmFjaywgY29udGFpbmVyKTtcclxuXHRcdH0sXHJcblx0XHRcdFx0XHJcblx0XHRjb250YWluZXJfYWRkZWQ6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGFnbS5zZXJ2ZXJfYWRkZWQoZnVuY3Rpb24oc2VydmVyKXtcclxuICAgICAgICAgICAgICAgIGlmKHNlcnZlci5hcHBsaWNhdGlvbi5pbmRleE9mKCdIdG1sQ29udGFpbmVyLicpIT09LTEpIHtcclxuICAgICAgICAgICAgICAgIFx0aW52b2tlX2FnbV9zdWNjZXNzX2NhbGxiYWNrKGNhbGxiYWNrLCBjb250YWluZXJfZnJvbV9maWx0ZXIoc2VydmVyKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG5cdFx0Y29udGFpbmVyX3JlbW92ZWQ6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGFnbS5zZXJ2ZXJfcmVtb3ZlZChmdW5jdGlvbihzZXJ2ZXIpe1xyXG4gICAgICAgICAgICAgICAgaWYoc2VydmVyLmFwcGxpY2F0aW9uLmluZGV4T2YoJ0h0bWxDb250YWluZXIuJykhPT0tMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZV9hZ21fc3VjY2Vzc19jYWxsYmFjayhjYWxsYmFjaywgY29udGFpbmVyX2Zyb21fZmlsdGVyKHNlcnZlcikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblx0fTtcclxuXHRcclxuXHRhcGkudmVyc2lvbiA9IFwiMi4wLjFcIjtcclxuXHRcclxuXHRyZXR1cm4gYXBpO1xyXG59O1xyXG5cclxuaWYod2luZG93LnRpY2s0MiA9PT0gdW5kZWZpbmVkKXt3aW5kb3cudGljazQyID0ge307fVxyXG53aW5kb3cudGljazQyLndpbmRvd3MgPSB3aW5kb3dzO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHdpbmRvd3M7XHJcbiAgXHJcbmZ1bmN0aW9uIGFkZF9jYWxsYmFjayhrZXksIG9uX2FkZCl7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKXtcclxuXHRcdHZhciBvYmogPSB0aGlzLmNhbGxiYWNrcztcclxuXHRcdGlmKG9ialtrZXldPT09dW5kZWZpbmVkKXtvYmpba2V5XSA9IFtjYWxsYmFja107fVxyXG5cdFx0ZWxzZSB7b2JqW2tleV0ucHVzaChjYWxsYmFjayk7fVxyXG5cdFx0aWYodHlwZW9mIG9uX2FkZCA9PT0gXCJmdW5jdGlvblwiKXtvbl9hZGQodGhpcywgY2FsbGJhY2spO31cclxuXHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBleGVjX2NhbGxiYWNrcyhhcnIsIHZhbCl7XHJcblx0aWYoYXJyIT09dW5kZWZpbmVkKXtcclxuXHRcdGFyci5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKXtjYWxsYmFjayh2YWwpO30pO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZXEoa2V5LHZhbCl7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKG9iail7XHJcblx0XHRyZXR1cm4ga2V5PT09dW5kZWZpbmVkfHx2YWw9PT11bmRlZmluZWR8fG9ialtrZXldPT09dmFsO1xyXG5cdH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHZhbHMob2JqKXtcclxuXHRyZXR1cm4gT2JqZWN0LmtleXMob2JqKS5yZWR1Y2UoZnVuY3Rpb24oYXJyLCBrZXkpe2Fyci5wdXNoKG9ialtrZXldKTtyZXR1cm4gYXJyO30sIFtdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwX29iaihvYmosIGYpe1xyXG5cdHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbihuZXdfb2JqLCBrZXkpe25ld19vYmpba2V5XSA9IGYob2JqW2tleV0pIDtyZXR1cm4gbmV3X29iajt9LCB7fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbnRhaW5lcl9maWx0ZXIobmFtZSl7XHJcbiAgdmFyIGNvbnRhaW5lckZ1bGxOYW1lID0gXCJIdG1sQ29udGFpbmVyLlwiO1xyXG5cclxuICBpZiAoaHRtbENvbnRhaW5lci5lbnYuZW52ICE9PSB1bmRlZmluZWQgfHwgaHRtbENvbnRhaW5lci5lbnYucmVnaW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgIGlmKG5hbWUuaW5kZXhPZihodG1sQ29udGFpbmVyLmVudi5lbnYpID09PSAtMSAmJiBuYW1lLmluZGV4T2YoaHRtbENvbnRhaW5lci5lbnYucmVnaW9uKSA9PT0gLTEpIHtcclxuICAgICAgY29udGFpbmVyRnVsbE5hbWUgKz0gaHRtbENvbnRhaW5lci5lbnYuZW52ICsgJy0nICsgaHRtbENvbnRhaW5lci5lbnYucmVnaW9uICsgJy4nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udGFpbmVyRnVsbE5hbWUgKz0gbmFtZTtcclxuXHJcbiAgcmV0dXJuIHthcHBsaWNhdGlvbjogY29udGFpbmVyRnVsbE5hbWV9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb250YWluZXJfZnJvbV9maWx0ZXIoZmlsdGVyKXtcclxuXHRyZXR1cm4gZmlsdGVyLmFwcGxpY2F0aW9uLm1hdGNoKC9IdG1sQ29udGFpbmVyXFwuKC4qPykkLylbMV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludm9rZV9hZ21fc3VjY2Vzc19jYWxsYmFjayhjYWxsYmFjaywgY2FsbGJhY2tfYXJndW1lbnQpIHtcclxuXHRpZih0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge2NhbGxiYWNrKGNhbGxiYWNrX2FyZ3VtZW50KTt9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludm9rZV9hZ21fZXJyb3JfY2FsbGJhY2soY2FsbGJhY2ssIGVycm9yKSB7XHJcblx0aWYodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtjYWxsYmFjayhlcnJvci5tZXNzYWdlKTt9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldF9jYWxsYmFja3MoY2FsbGJhY2tzLCBjb250YWluZXJfbmFtZSkge1xyXG5cdGlmKGNhbGxiYWNrcy5jb250YWluZXJzX2NhbGxiYWNrc1tjb250YWluZXJfbmFtZV0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0cmV0dXJuIGNhbGxiYWNrcy5hbGxfY29udGFpbmVyc19jYWxsYmFja3MuY29uY2F0KGNhbGxiYWNrcy5jb250YWluZXJzX2NhbGxiYWNrc1tjb250YWluZXJfbmFtZV0pO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXR1cm4gY2FsbGJhY2tzLmFsbF9jb250YWluZXJzX2NhbGxiYWNrcztcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHB1dF9jYWxsYmFja3MoZ2xvYmFsX2NhbGxiYWNrcywgY2FsbGJhY2ssIGNvbnRhaW5lcikge1xyXG5cdGlmKGNvbnRhaW5lciA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRnbG9iYWxfY2FsbGJhY2tzLmFsbF9jb250YWluZXJzX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0aWYoZ2xvYmFsX2NhbGxiYWNrcy5jb250YWluZXJzX2NhbGxiYWNrc1tjb250YWluZXJdID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0Z2xvYmFsX2NhbGxiYWNrcy5jb250YWluZXJzX2NhbGxiYWNrc1tjb250YWluZXJdID0gW2NhbGxiYWNrXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGdsb2JhbF9jYWxsYmFja3MuY29udGFpbmVyc19jYWxsYmFja3NbY29udGFpbmVyXS5wdXNoKGNhbGxiYWNrKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIl19
